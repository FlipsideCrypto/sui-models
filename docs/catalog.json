{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/catalog/v1.json", "dbt_version": "1.9.9", "generated_at": "2025-08-25T17:12:06.971318Z", "invocation_id": "ca8a73ed-9c56-4588-ad9b-84c8768c87c9", "env": {}}, "nodes": {"model.sui_models.bronze_api__coin_metadata": {"metadata": {"type": "BASE TABLE", "schema": "BRONZE_API", "name": "COIN_METADATA", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"COIN_TYPE": {"type": "TEXT", "index": 1, "name": "COIN_TYPE", "comment": null}, "DECIMALS": {"type": "NUMBER", "index": 2, "name": "DECIMALS", "comment": null}, "DESCRIPTION": {"type": "TEXT", "index": 3, "name": "DESCRIPTION", "comment": null}, "ICON_URL": {"type": "TEXT", "index": 4, "name": "ICON_URL", "comment": null}, "NAME": {"type": "TEXT", "index": 5, "name": "NAME", "comment": null}, "SYMBOL": {"type": "TEXT", "index": 6, "name": "SYMBOL", "comment": null}, "ID": {"type": "TEXT", "index": 7, "name": "ID", "comment": null}, "COIN_METADATA_ID": {"type": "TEXT", "index": 8, "name": "COIN_METADATA_ID", "comment": null}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 9, "name": "INSERTED_TIMESTAMP", "comment": null}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 10, "name": "MODIFIED_TIMESTAMP", "comment": null}, "_INVOCATION_ID": {"type": "TEXT", "index": 11, "name": "_INVOCATION_ID", "comment": null}, "OBJECT_ID": {"type": "TEXT", "index": 12, "name": "OBJECT_ID", "comment": null}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 39785984, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 02:40UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 29599, "include": true, "description": "An approximate count of rows in this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.bronze_api__coin_metadata"}, "model.sui_models.silver_bridge__wormhole_outbound": {"metadata": {"type": "BASE TABLE", "schema": "SILVER_BRIDGE", "name": "WORMHOLE_OUTBOUND", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": ""}, "TX_DIGEST": {"type": "TEXT", "index": 2, "name": "TX_DIGEST", "comment": ""}, "TX_SENDER": {"type": "TEXT", "index": 3, "name": "TX_SENDER", "comment": ""}, "EVENT_INDEX": {"type": "NUMBER", "index": 4, "name": "EVENT_INDEX", "comment": ""}, "SOURCE_CHAIN": {"type": "NUMBER", "index": 5, "name": "SOURCE_CHAIN", "comment": ""}, "DESTINATION_CHAIN": {"type": "NUMBER", "index": 6, "name": "DESTINATION_CHAIN", "comment": ""}, "AMOUNT": {"type": "NUMBER", "index": 7, "name": "AMOUNT", "comment": ""}, "SOURCE_ADDRESS": {"type": "TEXT", "index": 8, "name": "SOURCE_ADDRESS", "comment": ""}, "DESTINATION_ADDRESS": {"type": "TEXT", "index": 9, "name": "DESTINATION_ADDRESS", "comment": ""}, "COIN_TYPE": {"type": "TEXT", "index": 10, "name": "COIN_TYPE", "comment": ""}, "BRIDGE_ADDRESS": {"type": "TEXT", "index": 11, "name": "BRIDGE_ADDRESS", "comment": ""}, "WORMHOLE_OUTBOUND_ID": {"type": "TEXT", "index": 12, "name": "WORMHOLE_OUTBOUND_ID", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 13, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 14, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 15, "name": "BLOCK_TIMESTAMP", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 16, "name": "_INVOCATION_ID", "comment": ""}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 7120384, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 13:02UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 57037, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(modified_timestamp::DATE, block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.silver_bridge__wormhole_outbound"}, "model.sui_models.core__fact_transactions": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_TRANSACTIONS", "database": "SUI", "comment": "Fact table decomposing every transaction on the Sui blockchain into its constituent commands and payloads. Each row represents a single command (e.g., Move call, transfer, split, merge) within a programmable transaction block, capturing execution order, command type, and argument details. Enables granular analysis of smart contract interactions, dApp usage patterns, and transaction complexity. Supports lineage tracing from high-level user actions to low-level on-chain effects, including Move function calls and resource transfers. Critical for protocol analytics, developer adoption tracking, and understanding composability in the Sui ecosystem.", "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'."}, "TX_DIGEST": {"type": "TEXT", "index": 3, "name": "TX_DIGEST", "comment": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'."}, "TX_KIND": {"type": "TEXT", "index": 4, "name": "TX_KIND", "comment": "The type of transaction executed. Values include 'Programmable Transaction Block' (PTB) for user-submitted transactions (up to 1,024 commands) and 'System Transaction' for validator/network operations. Determines execution path, available operations, and analytics grouping. Example: 'ProgrammableTransactionBlock'."}, "TX_SENDER": {"type": "TEXT", "index": 5, "name": "TX_SENDER", "comment": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'."}, "MESSAGE_VERSION": {"type": "TEXT", "index": 6, "name": "MESSAGE_VERSION", "comment": "The version of the transaction data structure, supporting protocol evolution and backward compatibility. Currently uses 'TransactionDataV1'. Ensures analytics remain robust across protocol upgrades. Example: '1'."}, "TX_SUCCEEDED": {"type": "BOOLEAN", "index": 7, "name": "TX_SUCCEEDED", "comment": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true."}, "PAYLOAD_INDEX": {"type": "NUMBER", "index": 8, "name": "PAYLOAD_INDEX", "comment": "Zero-based index of the payload within a programmable transaction block. Orders transaction commands for flow analysis. Example: 0."}, "PAYLOAD_TYPE": {"type": "TEXT", "index": 9, "name": "PAYLOAD_TYPE", "comment": "Type of command in a programmable transaction block. Values: MoveCall, TransferObjects, SplitCoins, etc. Used for dApp interaction and protocol analytics. Example: 'MoveCall'."}, "PAYLOAD_DETAILS": {"type": "VARIANT", "index": 10, "name": "PAYLOAD_DETAILS", "comment": "Structured details about the specific payload command. Varies by payload type; includes all arguments and context. Used for deep transaction and smart contract analytics. Example: {\"function\": \"transfer\", \"args\": [\"0xabc...\", 1000]}."}, "FACT_TRANSACTIONS_ID": {"type": "TEXT", "index": 11, "name": "FACT_TRANSACTIONS_ID", "comment": "Surrogate key for the transactions fact table. Generated unique identifier by combining transaction digest and payload index, uniquely identifying each command or payload within a programmable transaction block. Essential for command-level analytics, smart contract interaction tracking, and composability analysis in Sui's multi-command transaction model."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 12, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 13, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 181379126784, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:33UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 2747645811, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.core__fact_transactions"}, "model.sui_models.silver__aftermath_dex_swaps": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "AFTERMATH_DEX_SWAPS", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'."}, "TX_DIGEST": {"type": "TEXT", "index": 3, "name": "TX_DIGEST", "comment": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'."}, "EVENT_INDEX": {"type": "NUMBER", "index": 4, "name": "EVENT_INDEX", "comment": "Zero-based index ordering events within a transaction. Ensures deterministic event ordering for sequence reconstruction and analytics. Example: 1."}, "TYPE": {"type": "TEXT", "index": 5, "name": "TYPE", "comment": "Type/category of object state modification or event. Enum: created, modified, deleted, wrapped, unwrapped (for changes); event type string (for events). Used for lifecycle analysis and state transition tracking. Example: 'created'."}, "EVENT_MODULE": {"type": "TEXT", "index": 6, "name": "EVENT_MODULE", "comment": "Name of the Move module that emitted the event. Used for module-specific event filtering and analytics. Example: 'coin'."}, "EVENT_RESOURCE": {"type": "TEXT", "index": 7, "name": "EVENT_RESOURCE", "comment": "Fully qualified type signature of the event struct. Format: {package_id}::{module}::{struct_name}<type_parameters>. Enables type-safe event deserialization and schema tracking. Example: '0x2::coin::TransferEvent<0x2::sui::SUI>'."}, "TRANSACTION_MODULE": {"type": "TEXT", "index": 8, "name": "TRANSACTION_MODULE", "comment": "Name of the module executed in the transaction that emitted the event. Links events to transaction context for flow analysis. Example: 'pay_sui'."}, "PLATFORM_ADDRESS": {"type": "TEXT", "index": 9, "name": "PLATFORM_ADDRESS", "comment": "The smart contract address of the DEX platform that facilitated this swap. This represents the deployed contract address for the specific DEX protocol on the Sui blockchain. Used for contract verification, security analysis, and linking to platform-specific metadata and configurations. Essential for protocol-specific analysis and filtering across different DeFi platforms."}, "POOL_ADDRESS": {"type": "TEXT", "index": 10, "name": "POOL_ADDRESS", "comment": "The address of the liquidity pool involved in the swap. For protocols that use AMM (Automated Market Maker) pools, this identifies the specific pool contract. May be NULL for order book-based protocols like DeepBook or centralized limit order protocols. Essential for pool-specific analytics, liquidity analysis, and understanding which pools are most active for different token pairs."}, "AMOUNT_IN_RAW": {"type": "NUMBER", "index": 11, "name": "AMOUNT_IN_RAW", "comment": "The raw amount of tokens being swapped in (input amount) before any decimal adjustments. This represents the exact on-chain token amount as it appears in the swap event. Preserves precision for accurate calculations and is essential for volume analysis, price impact calculations, and swap size distribution analysis. Critical for calculating swap rates and understanding the actual token amounts exchanged in each swap."}, "AMOUNT_OUT_RAW": {"type": "NUMBER", "index": 12, "name": "AMOUNT_OUT_RAW", "comment": "The raw amount of tokens being swapped out (output amount) before any decimal adjustments. This represents the exact on-chain token amount that the user receives from the swap. Critical for calculating swap rates, slippage analysis, and understanding the actual token amounts exchanged in each swap. Essential for volume analysis and swap size distribution analysis."}, "A_TO_B": {"type": "BOOLEAN", "index": 13, "name": "A_TO_B", "comment": "A boolean flag indicating the direction of the swap within the pool. When TRUE, the swap goes from token A to token B; when FALSE, it goes from token B to token A. This field is protocol-specific and may be NULL for some DEX platforms. Important for understanding swap direction and pool token ordering conventions. Follows each protocol's specific pool token ordering conventions."}, "FEE_AMOUNT_RAW": {"type": "TEXT", "index": 14, "name": "FEE_AMOUNT_RAW", "comment": "The raw amount of fees charged for the swap transaction. This includes protocol fees, liquidity provider fees, and any other transaction costs. May be 0 for protocols that don't charge explicit fees or when fees are embedded in the swap amounts. Essential for fee revenue analysis and total cost of trading calculations. For some protocols like Aftermath, this may be NULL as fees are handled differently."}, "PARTNER_ADDRESS": {"type": "TEXT", "index": 15, "name": "PARTNER_ADDRESS", "comment": "The address of a partner or affiliate that facilitated the swap (if applicable). Used primarily by Cetus for their partner program where swaps can be routed through partner contracts. May be NULL for most protocols or when no partner was involved. Useful for tracking partner performance and affiliate program analytics within the DEX ecosystem."}, "STEPS": {"type": "NUMBER", "index": 16, "name": "STEPS", "comment": "The number of steps or hops required to complete the swap. For simple swaps, this is typically 1. For complex swaps involving multiple pools or routing through multiple protocols, this indicates the number of intermediate steps. Essential for understanding swap complexity and routing efficiency across different protocols. Critical for analyzing multi-hop swaps and routing optimization."}, "TOKEN_IN_TYPE": {"type": "TEXT", "index": 17, "name": "TOKEN_IN_TYPE", "comment": "The full type identifier of the token being swapped in (input token). This follows Sui's Move type format (e.g., \"0x2::sui::SUI\" for the native SUI token). Essential for token identification, pricing lookups, and token-specific analytics. Used for calculating USD values and token pair analysis. Some models ensure proper formatting by adding '0x' prefix if missing."}, "TOKEN_OUT_TYPE": {"type": "TEXT", "index": 18, "name": "TOKEN_OUT_TYPE", "comment": "The full type identifier of the token being swapped out (output token). This follows Sui's Move type format and represents the token that the user receives from the swap. Critical for token pair analysis, swap rate calculations, and understanding token flow patterns across the DeFi ecosystem. Some models ensure proper formatting by adding '0x' prefix if missing."}, "TRADER_ADDRESS": {"type": "TEXT", "index": 19, "name": "TRADER_ADDRESS", "comment": "The address of the wallet or account that initiated the swap. May be NULL for some protocols that don't explicitly track the trader address in their events. Essential for user behavior analysis, wallet tracking, and understanding individual trader patterns and preferences across different DEX platforms. For some protocols like Aftermath, this is extracted from the transaction sender."}, "DEX_SWAPS_ID": {"type": "TEXT", "index": 20, "name": "DEX_SWAPS_ID", "comment": "A unique surrogate key generated from the combination of transaction identifiers and swap details. For the general DEX table, this combines tx_digest and event_index. For protocol-specific tables like Aftermath, this may include additional fields like trader_address, token_in_type, token_out_type, amount_in_raw, and amount_out_raw. This provides a stable, unique identifier for each swap event that can be used as a primary key for downstream analytics and data modeling. Ensures data integrity and prevents duplicate processing."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 21, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 22, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}, "PACKAGE_ID": {"type": "TEXT", "index": 23, "name": "PACKAGE_ID", "comment": "Unique identifier (object ID) of the Move package containing the event module. Used for package-level analytics, deployment tracking, and contract lineage. Example: '0x2'."}, "PARSED_JSON": {"type": "VARIANT", "index": 24, "name": "PARSED_JSON", "comment": "JSON object representing the event data, with structure varying by event type. Provides structured, machine-readable event data for analytics, dApp monitoring, and real-time applications. Example: {\"amount\": \"1000000\", \"recipient\": \"0xabc...\"}."}, "_INVOCATION_ID": {"type": "TEXT", "index": 25, "name": "_INVOCATION_ID", "comment": "A unique identifier for the dbt run that created or updated this record. This field is used for data lineage tracking and debugging purposes. Helps identify which specific dbt execution was responsible for processing each record and enables traceability back to the source code and configuration used. Essential for ETL monitoring, data quality tracking, and troubleshooting pipeline issues."}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 59723264, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-23 04:59UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 526589, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(modified_timestamp::DATE, block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.silver__aftermath_dex_swaps"}, "model.sui_models.streamline__checkpoints_complete": {"metadata": {"type": "BASE TABLE", "schema": "STREAMLINE", "name": "CHECKPOINTS_COMPLETE", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": null}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": null}, "TRANSACTIONS_ARRAY": {"type": "VARIANT", "index": 3, "name": "TRANSACTIONS_ARRAY", "comment": null}, "TX_COUNT": {"type": "NUMBER", "index": 4, "name": "TX_COUNT", "comment": null}, "PARTITION_KEY": {"type": "NUMBER", "index": 5, "name": "PARTITION_KEY", "comment": null}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 6, "name": "_INSERTED_TIMESTAMP", "comment": null}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 7, "name": "INSERTED_TIMESTAMP", "comment": null}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 8, "name": "MODIFIED_TIMESTAMP", "comment": null}, "FILE_NAME": {"type": "TEXT", "index": 9, "name": "FILE_NAME", "comment": null}, "_INVOCATION_ID": {"type": "TEXT", "index": 10, "name": "_INVOCATION_ID", "comment": null}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 39067647488, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:54UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 86144243, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(ROUND(checkpoint_number, -5))", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.streamline__checkpoints_complete"}, "model.sui_models.silver__complete_token_asset_metadata": {"metadata": {"type": "VIEW", "schema": "SILVER", "name": "COMPLETE_TOKEN_ASSET_METADATA", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"TOKEN_ADDRESS": {"type": "TEXT", "index": 1, "name": "TOKEN_ADDRESS", "comment": ""}, "ASSET_ID": {"type": "TEXT", "index": 2, "name": "ASSET_ID", "comment": ""}, "SYMBOL": {"type": "TEXT", "index": 3, "name": "SYMBOL", "comment": ""}, "NAME": {"type": "TEXT", "index": 4, "name": "NAME", "comment": ""}, "DECIMALS": {"type": "NUMBER", "index": 5, "name": "DECIMALS", "comment": ""}, "BLOCKCHAIN": {"type": "TEXT", "index": 6, "name": "BLOCKCHAIN", "comment": ""}, "BLOCKCHAIN_NAME": {"type": "TEXT", "index": 7, "name": "BLOCKCHAIN_NAME", "comment": ""}, "BLOCKCHAIN_ID": {"type": "TEXT", "index": 8, "name": "BLOCKCHAIN_ID", "comment": ""}, "IS_DEPRECATED": {"type": "BOOLEAN", "index": 9, "name": "IS_DEPRECATED", "comment": ""}, "IS_VERIFIED": {"type": "BOOLEAN", "index": 10, "name": "IS_VERIFIED", "comment": ""}, "PROVIDER": {"type": "TEXT", "index": 11, "name": "PROVIDER", "comment": ""}, "SOURCE": {"type": "TEXT", "index": 12, "name": "SOURCE", "comment": ""}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 13, "name": "_INSERTED_TIMESTAMP", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 14, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 15, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "COMPLETE_TOKEN_ASSET_METADATA_ID": {"type": "TEXT", "index": 16, "name": "COMPLETE_TOKEN_ASSET_METADATA_ID", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 17, "name": "_INVOCATION_ID", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.silver__complete_token_asset_metadata"}, "model.sui_models.bronze__transactions": {"metadata": {"type": "VIEW", "schema": "BRONZE", "name": "TRANSACTIONS", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"VALUE": {"type": "VARIANT", "index": 1, "name": "VALUE", "comment": ""}, "PARTITION_KEY": {"type": "NUMBER", "index": 2, "name": "PARTITION_KEY", "comment": ""}, "METADATA": {"type": "VARIANT", "index": 3, "name": "METADATA", "comment": ""}, "DATA": {"type": "VARIANT", "index": 4, "name": "DATA", "comment": ""}, "FILE_NAME": {"type": "TEXT", "index": 5, "name": "FILE_NAME", "comment": ""}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 6, "name": "_INSERTED_TIMESTAMP", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.bronze__transactions"}, "model.sui_models.core__fact_events": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_EVENTS", "database": "SUI", "comment": "Fact table logging all events emitted by Move smart contracts and system operations during transaction execution on Sui. Each event is a structured data emission containing contract-specific or protocol-level information, including event type, JSON payload, emitting module, and transaction context. Enables deep dApp analytics, protocol monitoring, and behavioral analysis by exposing granular details of on-chain activity. Events are indexed by transaction and checkpoint, supporting real-time monitoring, anomaly detection, and business intelligence use cases. Essential for understanding contract interactions, user engagement, and protocol-level trends in the Sui ecosystem.", "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'."}, "TX_DIGEST": {"type": "TEXT", "index": 3, "name": "TX_DIGEST", "comment": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'."}, "TX_KIND": {"type": "TEXT", "index": 4, "name": "TX_KIND", "comment": "The type of transaction executed. Values include 'Programmable Transaction Block' (PTB) for user-submitted transactions (up to 1,024 commands) and 'System Transaction' for validator/network operations. Determines execution path, available operations, and analytics grouping. Example: 'ProgrammableTransactionBlock'."}, "TX_SENDER": {"type": "TEXT", "index": 5, "name": "TX_SENDER", "comment": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'."}, "MESSAGE_VERSION": {"type": "TEXT", "index": 6, "name": "MESSAGE_VERSION", "comment": "The version of the transaction data structure, supporting protocol evolution and backward compatibility. Currently uses 'TransactionDataV1'. Ensures analytics remain robust across protocol upgrades. Example: '1'."}, "TX_SUCCEEDED": {"type": "BOOLEAN", "index": 7, "name": "TX_SUCCEEDED", "comment": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true."}, "EVENT_INDEX": {"type": "NUMBER", "index": 8, "name": "EVENT_INDEX", "comment": "Zero-based index ordering events within a transaction. Ensures deterministic event ordering for sequence reconstruction and analytics. Example: 1."}, "TYPE": {"type": "TEXT", "index": 9, "name": "TYPE", "comment": "Type/category of object state modification or event. Enum: created, modified, deleted, wrapped, unwrapped (for changes); event type string (for events). Used for lifecycle analysis and state transition tracking. Example: 'created'."}, "EVENT_ADDRESS": {"type": "TEXT", "index": 10, "name": "EVENT_ADDRESS", "comment": "Sui address (32-byte hex) that triggered the event emission. Used for filtering, access control, and user activity analytics. Example: '0xabc123...'."}, "EVENT_MODULE": {"type": "TEXT", "index": 11, "name": "EVENT_MODULE", "comment": "Name of the Move module that emitted the event. Used for module-specific event filtering and analytics. Example: 'coin'."}, "EVENT_RESOURCE": {"type": "TEXT", "index": 12, "name": "EVENT_RESOURCE", "comment": "Fully qualified type signature of the event struct. Format: {package_id}::{module}::{struct_name}<type_parameters>. Enables type-safe event deserialization and schema tracking. Example: '0x2::coin::TransferEvent<0x2::sui::SUI>'."}, "PACKAGE_ID": {"type": "TEXT", "index": 13, "name": "PACKAGE_ID", "comment": "Unique identifier (object ID) of the Move package containing the event module. Used for package-level analytics, deployment tracking, and contract lineage. Example: '0x2'."}, "TRANSACTION_MODULE": {"type": "TEXT", "index": 14, "name": "TRANSACTION_MODULE", "comment": "Name of the module executed in the transaction that emitted the event. Links events to transaction context for flow analysis. Example: 'pay_sui'."}, "SENDER": {"type": "TEXT", "index": 15, "name": "SENDER", "comment": "Sui address (32-byte hex) representing the transaction or event sender. Used for authorization, security analysis, and user activity tracking. Example: '0xabc123...'."}, "PARSED_JSON": {"type": "VARIANT", "index": 16, "name": "PARSED_JSON", "comment": "JSON object representing the event data, with structure varying by event type. Provides structured, machine-readable event data for analytics, dApp monitoring, and real-time applications. Example: {\"amount\": \"1000000\", \"recipient\": \"0xabc...\"}."}, "FACT_EVENTS_ID": {"type": "TEXT", "index": 17, "name": "FACT_EVENTS_ID", "comment": "Surrogate key for the events fact table. Generated unique identifier combining transaction digest and event index, ensuring each event emission is uniquely addressable. Used as the primary key for event tracking, analytics workflows, and cross-model joins. In Sui, this supports granular dApp analytics, protocol monitoring, and event-driven application logic by enabling precise event referencing and lineage analysis."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 18, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 19, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 144912357888, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:33UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 1144442324, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.core__fact_events"}, "model.sui_models.silver__transfers": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "TRANSFERS", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'."}, "TX_DIGEST": {"type": "TEXT", "index": 3, "name": "TX_DIGEST", "comment": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'."}, "TX_SUCCEEDED": {"type": "BOOLEAN", "index": 4, "name": "TX_SUCCEEDED", "comment": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true."}, "TX_SENDER": {"type": "TEXT", "index": 5, "name": "TX_SENDER", "comment": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'."}, "SENDER": {"type": "TEXT", "index": 6, "name": "SENDER", "comment": "Sui address (32-byte hex) representing the transaction or event sender. Used for authorization, security analysis, and user activity tracking. Example: '0xabc123...'."}, "RECEIVER": {"type": "TEXT", "index": 7, "name": "RECEIVER", "comment": "Sui address (32-byte hex) representing the transaction or event receiver. Used for tracking destination addresses, transfer flows, and recipient analytics. In transfer contexts, this is the address receiving tokens or assets. Example: '0xdef456...'."}, "BALANCE_CHANGE_INDEX": {"type": "NUMBER", "index": 8, "name": "BALANCE_CHANGE_INDEX", "comment": "Zero-based index ordering balance changes within a transaction. Tracks the sequence of balance modifications for accurate financial analysis and reconciliation. Example: 0."}, "COIN_TYPE": {"type": "TEXT", "index": 9, "name": "COIN_TYPE", "comment": "Fully qualified Move type identifier for coins/tokens. Format: {package}::{module}::{struct}. Example: '0x2::sui::SUI' for native SUI token. Essential for DeFi analytics, token classification, and cross-asset analysis."}, "AMOUNT_RAW": {"type": "NUMBER", "index": 10, "name": "AMOUNT_RAW", "comment": "Token quantity in the smallest unit (MIST for SUI). Integer value; 1 SUI = 1,000,000,000 MIST. Used for precise financial calculations, balance tracking, and token flow analysis. Example: 1000000000."}, "TRANSFERS_ID": {"type": "TEXT", "index": 11, "name": "TRANSFERS_ID", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 12, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 13, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}, "_INVOCATION_ID": {"type": "TEXT", "index": 14, "name": "_INVOCATION_ID", "comment": ""}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 9318153216, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 17:11UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 96659827, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.silver__transfers"}, "model.sui_models.core__fact_checkpoints": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_CHECKPOINTS", "database": "SUI", "comment": "Fact table representing all finalized checkpoints on the Sui blockchain, which serve as consensus points bundling multiple transactions for finality and recovery. Each checkpoint aggregates metadata such as checkpoint sequence number, timestamp, transaction count, validator signatures, and epoch information. Checkpoints are produced via the Mysticeti consensus mechanism approximately every 250ms, providing the backbone for time series analysis (TPS, latency, validator participation). This table is essential for measuring network throughput, tracking validator performance, and ensuring data integrity. Supports analytics on epoch transitions, validator set changes, and network health.", "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'."}, "EPOCH": {"type": "NUMBER", "index": 3, "name": "EPOCH", "comment": "Epoch number (integer) representing a fixed period (~24h) with a stable validator set and protocol configuration. Used for tracking validator changes, protocol upgrades, and time-based partitioning. Example: 42."}, "CHECKPOINT_DIGEST": {"type": "TEXT", "index": 4, "name": "CHECKPOINT_DIGEST", "comment": "32-byte cryptographic hash (Base58) uniquely identifying checkpoint contents. Used for checkpoint verification, integrity checking, and chain continuity. Example: '6Qk8...9Xz'."}, "PREVIOUS_DIGEST": {"type": "TEXT", "index": 5, "name": "PREVIOUS_DIGEST", "comment": "Hash of the previous checkpoint, maintaining blockchain continuity. Used for history verification and chain analysis. Example: '5Jk7...8Yz'."}, "NETWORK_TOTAL_TRANSACTIONS": {"type": "NUMBER", "index": 6, "name": "NETWORK_TOTAL_TRANSACTIONS", "comment": "Cumulative count of all transactions processed by the network up to this checkpoint. Monotonically increasing integer, key metric for network growth, adoption, and throughput analysis. Example: 10000000."}, "VALIDATOR_SIGNATURE": {"type": "TEXT", "index": 7, "name": "VALIDATOR_SIGNATURE", "comment": "Aggregated BLS signature (Base64) from validator quorum (>2/3) for checkpoint finality. Provides Byzantine fault-tolerant consensus proof. Used for security analysis and validator participation tracking. Example: 'MEUCIQ...'."}, "TX_COUNT": {"type": "NUMBER", "index": 8, "name": "TX_COUNT", "comment": "Total number of transactions included in the checkpoint. Used for measuring checkpoint size, throughput, and network performance. Example: 250."}, "TRANSACTIONS_ARRAY": {"type": "VARIANT", "index": 9, "name": "TRANSACTIONS_ARRAY", "comment": "Array of transaction digests included in the checkpoint. Used for transaction finality tracking, checkpoint analysis, and reconstructing checkpoint composition. Example: ['6Qk8...9Xz', '7Yl2...3Ab']."}, "FACT_CHECKPOINTS_ID": {"type": "TEXT", "index": 10, "name": "FACT_CHECKPOINTS_ID", "comment": "Surrogate key for the checkpoint fact table. Generated unique identifier for each checkpoint record, typically constructed from the checkpoint number or digest. Ensures row-level uniqueness and supports efficient joins, indexing, and lineage tracing across all checkpoint-related analytics. In Sui, this enables fast correlation of checkpoint metadata with transactions, validator signatures, and epoch transitions. Essential for time series analysis, network health monitoring, and data integrity verification."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 11, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 12, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 49659658752, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:25UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 86159229, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.core__fact_checkpoints"}, "model.sui_models.defi__ez_dex_swaps": {"metadata": {"type": "BASE TABLE", "schema": "DEFI", "name": "EZ_DEX_SWAPS", "database": "SUI", "comment": "## Description\nThis table provides a comprehensive view of decentralized exchange (DEX) swap activity across the Sui blockchain ecosystem, enriched with token pricing, metadata, and user labels. It consolidates swap events from seven major DEX protocols (Cetus, Turbos, Bluefin, Aftermath AMM, FlowX, DeepBook, and Momentum) into a standardized format with USD valuations, token metadata, and enhanced labeling. The model transforms raw swap data by adding price information, decimal-adjusted amounts, USD volume calculations, and human-readable labels for platforms, pools, and traders. This enables cross-protocol DeFi analytics, volume comparisons, and comprehensive trading pattern analysis.\n\n## Key Use Cases\n- Cross-protocol DeFi volume analysis and market share comparison\n- Token pair trading volume and liquidity analysis\n- DEX performance benchmarking and protocol adoption tracking\n- Trader behavior analysis and wallet clustering\n- USD-denominated volume metrics and financial reporting\n- Token flow tracking and cross-protocol arbitrage detection\n- Fee revenue analysis and protocol economics modeling\n- Real-time DeFi dashboard development and monitoring\n\n## Important Relationships\n- Sources data from `sui.silver.dex_swaps` for base swap events\n- Enriches with token pricing from `crosschain.price.ez_prices_hourly` for USD calculations\n- Joins with `crosschain.core.dim_labels` for platform, pool, and trader labeling\n- Supports downstream DeFi analytics and cross-protocol dashboards\n- Provides foundation for token flow analysis and market microstructure studies\n\n## Commonly-used Fields\n- `platform` and `platform_name`: Essential for protocol-specific analysis and filtering\n- `amount_in_usd` and `amount_out_usd`: Critical for volume analysis and financial reporting\n- `swap_volume_usd`: Primary field for cross-protocol volume comparisons and market analysis\n- `token_in_symbol` and `token_out_symbol`: Key for token pair analysis and trading pattern identification\n- `block_timestamp`: Primary field for time-series analysis and trend detection\n- `trader_address` and `trader_name`: Essential for wallet tracking and user behavior analysis\n- `pool_address` and `pool_name`: Important for liquidity pool analysis and pool-specific metrics", "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'."}, "TX_DIGEST": {"type": "TEXT", "index": 3, "name": "TX_DIGEST", "comment": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'."}, "EVENT_INDEX": {"type": "NUMBER", "index": 4, "name": "EVENT_INDEX", "comment": "Zero-based index ordering events within a transaction. Ensures deterministic event ordering for sequence reconstruction and analytics. Example: 1."}, "PLATFORM_ADDRESS": {"type": "TEXT", "index": 5, "name": "PLATFORM_ADDRESS", "comment": "The smart contract address of the DEX platform that facilitated this swap. This represents the deployed contract address for the specific DEX protocol on the Sui blockchain. Used for contract verification, security analysis, and linking to platform-specific metadata and configurations. Essential for protocol-specific analysis and filtering across different DeFi platforms."}, "PLATFORM_NAME": {"type": "TEXT", "index": 6, "name": "PLATFORM_NAME", "comment": "The human-readable name of the DEX platform, derived from address labeling or defaulting to the platform address if no label exists. This field provides user-friendly platform identification for analytics, reporting, and dashboard displays. Examples include \"Cetus AMM\", \"Turbos Finance\", \"Bluefin\", etc. Essential for protocol-specific analysis and cross-platform comparisons."}, "POOL_ADDRESS": {"type": "TEXT", "index": 7, "name": "POOL_ADDRESS", "comment": "The address of the liquidity pool involved in the swap. For protocols that use AMM (Automated Market Maker) pools, this identifies the specific pool contract. May be NULL for order book-based protocols like DeepBook or centralized limit order protocols. Essential for pool-specific analytics, liquidity analysis, and understanding which pools are most active for different token pairs."}, "POOL_NAME": {"type": "TEXT", "index": 8, "name": "POOL_NAME", "comment": "The human-readable name of the liquidity pool involved in the swap, derived from address labeling or defaulting to the pool address if no label exists. This field provides user-friendly pool identification for analytics and reporting. Examples might include \"SUI-USDC Pool\", \"ETH-USDT Pool\", etc. Essential for pool-specific analysis and liquidity concentration studies."}, "AMOUNT_IN_RAW": {"type": "NUMBER", "index": 9, "name": "AMOUNT_IN_RAW", "comment": "The raw amount of tokens being swapped in (input amount) before any decimal adjustments. This represents the exact on-chain token amount as it appears in the swap event. Preserves precision for accurate calculations and is essential for volume analysis, price impact calculations, and swap size distribution analysis. Critical for calculating swap rates and understanding the actual token amounts exchanged in each swap."}, "AMOUNT_OUT_RAW": {"type": "NUMBER", "index": 10, "name": "AMOUNT_OUT_RAW", "comment": "The raw amount of tokens being swapped out (output amount) before any decimal adjustments. This represents the exact on-chain token amount that the user receives from the swap. Critical for calculating swap rates, slippage analysis, and understanding the actual token amounts exchanged in each swap. Essential for volume analysis and swap size distribution analysis."}, "A_TO_B": {"type": "BOOLEAN", "index": 11, "name": "A_TO_B", "comment": "A boolean flag indicating the direction of the swap within the pool. When TRUE, the swap goes from token A to token B; when FALSE, it goes from token B to token A. This field is protocol-specific and may be NULL for some DEX platforms. Important for understanding swap direction and pool token ordering conventions. Follows each protocol's specific pool token ordering conventions."}, "FEE_AMOUNT_RAW": {"type": "NUMBER", "index": 12, "name": "FEE_AMOUNT_RAW", "comment": "The raw amount of fees charged for the swap transaction. This includes protocol fees, liquidity provider fees, and any other transaction costs. May be 0 for protocols that don't charge explicit fees or when fees are embedded in the swap amounts. Essential for fee revenue analysis and total cost of trading calculations. For some protocols like Aftermath, this may be NULL as fees are handled differently."}, "PARTNER_ADDRESS": {"type": "TEXT", "index": 13, "name": "PARTNER_ADDRESS", "comment": "The address of a partner or affiliate that facilitated the swap (if applicable). Used primarily by Cetus for their partner program where swaps can be routed through partner contracts. May be NULL for most protocols or when no partner was involved. Useful for tracking partner performance and affiliate program analytics within the DEX ecosystem."}, "STEPS": {"type": "NUMBER", "index": 14, "name": "STEPS", "comment": "The number of steps or hops required to complete the swap. For simple swaps, this is typically 1. For complex swaps involving multiple pools or routing through multiple protocols, this indicates the number of intermediate steps. Essential for understanding swap complexity and routing efficiency across different protocols. Critical for analyzing multi-hop swaps and routing optimization."}, "TOKEN_IN_TYPE": {"type": "TEXT", "index": 15, "name": "TOKEN_IN_TYPE", "comment": "The full type identifier of the token being swapped in (input token). This follows Sui's Move type format (e.g., \"0x2::sui::SUI\" for the native SUI token). Essential for token identification, pricing lookups, and token-specific analytics. Used for calculating USD values and token pair analysis. Some models ensure proper formatting by adding '0x' prefix if missing."}, "TOKEN_IN_ADDRESS": {"type": "VARIANT", "index": 16, "name": "TOKEN_IN_ADDRESS", "comment": "The extracted token address from the full token type identifier, representing the contract address of the input token. This field is derived by splitting the token_in_type on '::' and taking the first component. For native SUI tokens, this will be '0x2'. Essential for token identification, pricing lookups, and cross-model joins with token metadata tables."}, "TOKEN_IN_SYMBOL": {"type": "TEXT", "index": 17, "name": "TOKEN_IN_SYMBOL", "comment": "The trading symbol for the input token, such as 'SUI', 'USDC', 'USDT', etc. This field is populated from token price data and provides user-friendly token identification for analytics and reporting. May be NULL for tokens without established price data. Essential for token pair analysis and trading pattern identification."}, "TOKEN_IN_NAME": {"type": "TEXT", "index": 18, "name": "TOKEN_IN_NAME", "comment": "The full descriptive name of the input token, such as 'Sui Token', 'USD Coin', 'Tether USD', etc. This field is populated from token price data and provides complete token identification for analytics and reporting. May be NULL for tokens without established price data. Useful for comprehensive token analysis and user interface displays."}, "TOKEN_OUT_TYPE": {"type": "TEXT", "index": 19, "name": "TOKEN_OUT_TYPE", "comment": "The full type identifier of the token being swapped out (output token). This follows Sui's Move type format and represents the token that the user receives from the swap. Critical for token pair analysis, swap rate calculations, and understanding token flow patterns across the DeFi ecosystem. Some models ensure proper formatting by adding '0x' prefix if missing."}, "TOKEN_OUT_ADDRESS": {"type": "VARIANT", "index": 20, "name": "TOKEN_OUT_ADDRESS", "comment": "The extracted token address from the full token type identifier, representing the contract address of the output token. This field is derived by splitting the token_out_type on '::' and taking the first component. For native SUI tokens, this will be '0x2'. Essential for token identification, pricing lookups, and cross-model joins with token metadata tables."}, "TOKEN_OUT_SYMBOL": {"type": "TEXT", "index": 21, "name": "TOKEN_OUT_SYMBOL", "comment": "The trading symbol for the output token, such as 'SUI', 'USDC', 'USDT', etc. This field is populated from token price data and provides user-friendly token identification for analytics and reporting. May be NULL for tokens without established price data. Essential for token pair analysis and trading pattern identification."}, "TOKEN_OUT_NAME": {"type": "TEXT", "index": 22, "name": "TOKEN_OUT_NAME", "comment": "The full descriptive name of the output token, such as 'Sui Token', 'USD Coin', 'Tether USD', etc. This field is populated from token price data and provides complete token identification for analytics and reporting. May be NULL for tokens without established price data. Useful for comprehensive token analysis and user interface displays."}, "AMOUNT_IN": {"type": "FLOAT", "index": 23, "name": "AMOUNT_IN", "comment": "The decimal-adjusted amount of tokens being swapped in (input amount), calculated by dividing the raw amount by the token's decimal places. This field provides human-readable token amounts for analysis and reporting. For example, if amount_in_raw is 1000000000 and token_in_decimals is 9, then amount_in would be 1.0. Essential for user-friendly volume analysis and token flow calculations."}, "AMOUNT_OUT": {"type": "FLOAT", "index": 24, "name": "AMOUNT_OUT", "comment": "The decimal-adjusted amount of tokens being swapped out (output amount), calculated by dividing the raw amount by the token's decimal places. This field provides human-readable token amounts for analysis and reporting. For example, if amount_out_raw is 500000000 and token_out_decimals is 6, then amount_out would be 500.0. Critical for calculating swap rates and understanding actual token exchange ratios."}, "FEE_AMOUNT": {"type": "FLOAT", "index": 25, "name": "FEE_AMOUNT", "comment": "The decimal-adjusted amount of fees charged for the swap transaction, calculated by dividing the raw fee amount by the input token's decimal places. This field provides human-readable fee amounts for cost analysis and reporting. May be NULL when no fees are charged or when fee information is not available. Essential for fee revenue analysis and total cost of trading calculations."}, "TOKEN_IN_PRICE": {"type": "FLOAT", "index": 26, "name": "TOKEN_IN_PRICE", "comment": "The USD price of the input token at the time of the swap, sourced from hourly price data. This field enables USD-denominated volume calculations and financial analysis. May be NULL for tokens without available price data. Essential for calculating amount_in_usd and swap_volume_usd fields."}, "TOKEN_OUT_PRICE": {"type": "FLOAT", "index": 27, "name": "TOKEN_OUT_PRICE", "comment": "The USD price of the output token at the time of the swap, sourced from hourly price data. This field enables USD-denominated volume calculations and financial analysis. May be NULL for tokens without available price data. Essential for calculating amount_out_usd and swap_volume_usd fields."}, "TOKEN_IN_DECIMALS": {"type": "NUMBER", "index": 28, "name": "TOKEN_IN_DECIMALS", "comment": "The number of decimal places for the input token, used for converting raw amounts to human-readable values. This field is sourced from token price data or defaults to common values (6 for USDC/USDT, 9 for others). Essential for accurate amount_in calculations and token precision handling."}, "TOKEN_OUT_DECIMALS": {"type": "NUMBER", "index": 29, "name": "TOKEN_OUT_DECIMALS", "comment": "The number of decimal places for the output token, used for converting raw amounts to human-readable values. This field is sourced from token price data or defaults to common values (6 for USDC/USDT, 9 for others). Essential for accurate amount_out calculations and token precision handling."}, "AMOUNT_IN_USD": {"type": "FLOAT", "index": 30, "name": "AMOUNT_IN_USD", "comment": "The USD value of the input token amount, calculated as amount_in * token_in_price. This field provides USD-denominated volume metrics for financial analysis and reporting. May be NULL when token_in_price is not available. Essential for cross-protocol volume comparisons and financial reporting."}, "AMOUNT_OUT_USD": {"type": "FLOAT", "index": 31, "name": "AMOUNT_OUT_USD", "comment": "The USD value of the output token amount, calculated as amount_out * token_out_price. This field provides USD-denominated volume metrics for financial analysis and reporting. May be NULL when token_out_price is not available. Essential for cross-protocol volume comparisons and financial reporting."}, "SWAP_VOLUME_USD": {"type": "FLOAT", "index": 32, "name": "SWAP_VOLUME_USD", "comment": "The USD volume of the swap, calculated as the average of amount_in_usd and amount_out_usd when both prices are available, or using whichever price is available when only one is present. This field provides the primary metric for volume analysis and cross-protocol comparisons. May be NULL when no price data is available. Essential for DeFi volume analytics and market analysis."}, "TRADER_ADDRESS": {"type": "TEXT", "index": 33, "name": "TRADER_ADDRESS", "comment": "The address of the wallet or account that initiated the swap. May be NULL for some protocols that don't explicitly track the trader address in their events. Essential for user behavior analysis, wallet tracking, and understanding individual trader patterns and preferences across different DEX platforms. For some protocols like Aftermath, this is extracted from the transaction sender."}, "EZ_DEX_SWAPS_ID": {"type": "TEXT", "index": 34, "name": "EZ_DEX_SWAPS_ID", "comment": "A unique surrogate key generated from the combination of transaction identifiers and swap details. For the general DEX table, this combines tx_digest and event_index. For protocol-specific tables like Aftermath, this may include additional fields like trader_address, token_in_type, token_out_type, amount_in_raw, and amount_out_raw. This provides a stable, unique identifier for each swap event that can be used as a primary key for downstream analytics and data modeling. Ensures data integrity and prevents duplicate processing."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 35, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 36, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}, "_INVOCATION_ID": {"type": "TEXT", "index": 37, "name": "_INVOCATION_ID", "comment": "A unique identifier for the dbt run that created or updated this record. This field is used for data lineage tracking and debugging purposes. Helps identify which specific dbt execution was responsible for processing each record and enables traceability back to the source code and configuration used. Essential for ETL monitoring, data quality tracking, and troubleshooting pipeline issues."}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 6267717632, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-24 01:27UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 48103134, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.defi__ez_dex_swaps"}, "model.sui_models.silver_bridge__sui_bridge_inbound": {"metadata": {"type": "BASE TABLE", "schema": "SILVER_BRIDGE", "name": "SUI_BRIDGE_INBOUND", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": ""}, "TX_DIGEST": {"type": "TEXT", "index": 2, "name": "TX_DIGEST", "comment": ""}, "TX_SENDER": {"type": "TEXT", "index": 3, "name": "TX_SENDER", "comment": ""}, "EVENT_INDEX": {"type": "NUMBER", "index": 4, "name": "EVENT_INDEX", "comment": ""}, "SOURCE_CHAIN": {"type": "NUMBER", "index": 5, "name": "SOURCE_CHAIN", "comment": ""}, "DESTINATION_CHAIN": {"type": "NUMBER", "index": 6, "name": "DESTINATION_CHAIN", "comment": ""}, "AMOUNT": {"type": "NUMBER", "index": 7, "name": "AMOUNT", "comment": ""}, "SOURCE_ADDRESS": {"type": "TEXT", "index": 8, "name": "SOURCE_ADDRESS", "comment": ""}, "DESTINATION_ADDRESS": {"type": "TEXT", "index": 9, "name": "DESTINATION_ADDRESS", "comment": ""}, "COIN_TYPE": {"type": "TEXT", "index": 10, "name": "COIN_TYPE", "comment": ""}, "BRIDGE_ADDRESS": {"type": "TEXT", "index": 11, "name": "BRIDGE_ADDRESS", "comment": ""}, "SUI_BRIDGE_INBOUND_ID": {"type": "TEXT", "index": 12, "name": "SUI_BRIDGE_INBOUND_ID", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 13, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 14, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 15, "name": "BLOCK_TIMESTAMP", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 16, "name": "_INVOCATION_ID", "comment": ""}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 1759744, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 13:02UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 10694, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(modified_timestamp::DATE, block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.silver_bridge__sui_bridge_inbound"}, "model.sui_models.defi__ez_bridge_activity": {"metadata": {"type": "BASE TABLE", "schema": "DEFI", "name": "EZ_BRIDGE_ACTIVITY", "database": "SUI", "comment": "Enhanced fact table providing comprehensive cross-chain bridge analytics by consolidating bridge-related events from multiple protocols (Sui Bridge, Wormhole) into a unified dataset. Each row represents a single cross-chain asset movement event enriched with protocol metadata, token information, and USD pricing. Serves as the primary table for cross-chain DeFi analysis, bridge protocol comparison, and capital flow tracking by normalizing bridge events across different protocols into a consistent format. The table automatically applies decimal precision adjustments and USD conversions, enabling direct comparison of bridge volumes and user activity across different chains and token types. Includes complete transaction context, source/destination chain mapping, and protocol identification to support comprehensive cross-chain analytics, security monitoring, and risk assessment. Essential for DeFi dashboards, bridge protocol analysis, and multi-chain ecosystem studies that require unified cross-chain data and standardized bridge event tracking.", "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'."}, "TX_DIGEST": {"type": "TEXT", "index": 3, "name": "TX_DIGEST", "comment": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'."}, "TX_SENDER": {"type": "TEXT", "index": 4, "name": "TX_SENDER", "comment": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'."}, "EVENT_INDEX": {"type": "NUMBER", "index": 5, "name": "EVENT_INDEX", "comment": "Zero-based index ordering events within a transaction. Ensures deterministic event ordering for sequence reconstruction and analytics. Example: 1."}, "BRIDGE_ADDRESS": {"type": "TEXT", "index": 6, "name": "BRIDGE_ADDRESS", "comment": "The Sui object or package address handling the bridge operation.\n\nExample: '0x26efee2b51c911237888e5dc6702868abca3c7ac12c53f76ef8eba0697695e3d'"}, "PLATFORM": {"type": "TEXT", "index": 7, "name": "PLATFORM", "comment": "The protocol or application facilitating the cross-chain bridge transfer.\n\nExample: 'wormhole'"}, "PROTOCOL": {"type": "TEXT", "index": 8, "name": "PROTOCOL", "comment": "The protocol or application facilitating the cross-chain bridge transfer.\n\nExample: 'wormhole'"}, "PROTOCOL_VERSION": {"type": "TEXT", "index": 9, "name": "PROTOCOL_VERSION", "comment": "The version of  protocol or application facilitating the cross-chain bridge transfer.\n\nExample: 'v1'"}, "DIRECTION": {"type": "TEXT", "index": 10, "name": "DIRECTION", "comment": "The directions of the cross-chain bridge transfer.\n\nExample: 'inbound'"}, "SOURCE_CHAIN": {"type": "TEXT", "index": 11, "name": "SOURCE_CHAIN", "comment": "The originating blockchain network for the bridged assets.\n\nExample: 'ethereum'"}, "DESTINATION_CHAIN": {"type": "TEXT", "index": 12, "name": "DESTINATION_CHAIN", "comment": "The target blockchain network for the bridged assets.\n\nExample: 'ethereum'"}, "SENDER": {"type": "TEXT", "index": 13, "name": "SENDER", "comment": "The Sui address that directly sent tokens to the bridge contract.\n\nExample: '0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890'"}, "RECEIVER": {"type": "TEXT", "index": 14, "name": "RECEIVER", "comment": "The address designated to receive tokens on the destination chain (or on the source chain, for intermediate steps).\n\nExample: '0x9876543210987654321098765432109876543210987654321098765432109876'"}, "COIN_TYPE": {"type": "TEXT", "index": 15, "name": "COIN_TYPE", "comment": "Fully qualified Move type identifier for coins/tokens. Format: {package}::{module}::{struct}. Example: '0x2::sui::SUI' for native SUI token. Essential for DeFi analytics, token classification, and cross-asset analysis."}, "SYMBOL": {"type": "TEXT", "index": 16, "name": "SYMBOL", "comment": "Short string symbol for the token (e.g., 'SUI', 'USDC'). Used for user-friendly token identification, UI display, and analytics grouping. Example: 'SUI'."}, "AMOUNT_UNADJ": {"type": "NUMBER", "index": 17, "name": "AMOUNT_UNADJ", "comment": "The raw token amount without decimal adjustment.\n\nExample: 1000000000"}, "AMOUNT": {"type": "FLOAT", "index": 18, "name": "AMOUNT", "comment": "The decimal-adjusted amount of tokens bridged.\n\nExample: 1.0"}, "AMOUNT_USD": {"type": "FLOAT", "index": 19, "name": "AMOUNT_USD", "comment": "The hourly close USD value of bridged tokens at the time of the transaction.\n\nExample: 1000.50"}, "TOKEN_IS_VERIFIED": {"type": "BOOLEAN", "index": 20, "name": "TOKEN_IS_VERIFIED", "comment": "Boolean flag indicating whether the token or price record is verified by Flipside's crosschain curation process. Verified tokens are prioritized for analytics and are considered reliable for most use cases. Unverified tokens may be incomplete, deprecated, or experimental."}, "EZ_BRIDGE_ACTIVITY_ID": {"type": "TEXT", "index": 21, "name": "EZ_BRIDGE_ACTIVITY_ID", "comment": "Surrogate key for the events table. Generated unique identifier combining transaction digest and event index, ensuring each event emission is uniquely addressable. Used as the primary key for event tracking, analytics workflows, and cross-model joins. In Sui, this supports granular dApp analytics, protocol monitoring, and event-driven application logic by enabling precise event referencing and lineage analysis."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 22, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 23, "name": "MODIFIED_TIMESTAMP", "comment": ""}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 10164736, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 13:23UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 86594, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.defi__ez_bridge_activity"}, "model.sui_models.streamline__transactions_complete": {"metadata": {"type": "BASE TABLE", "schema": "STREAMLINE", "name": "TRANSACTIONS_COMPLETE", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": null}, "TX_DIGEST": {"type": "TEXT", "index": 2, "name": "TX_DIGEST", "comment": null}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "BLOCK_TIMESTAMP", "comment": null}, "PARTITION_KEY": {"type": "NUMBER", "index": 4, "name": "PARTITION_KEY", "comment": null}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 5, "name": "_INSERTED_TIMESTAMP", "comment": null}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 6, "name": "INSERTED_TIMESTAMP", "comment": null}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 7, "name": "MODIFIED_TIMESTAMP", "comment": null}, "FILE_NAME": {"type": "TEXT", "index": 8, "name": "FILE_NAME", "comment": null}, "_INVOCATION_ID": {"type": "TEXT", "index": 9, "name": "_INVOCATION_ID", "comment": null}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 36091532288, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:54UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 838935369, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.streamline__transactions_complete"}, "model.sui_models.price__ez_prices_hourly": {"metadata": {"type": "BASE TABLE", "schema": "PRICE", "name": "EZ_PRICES_HOURLY", "database": "SUI", "comment": "A convenience table for determining token prices by address and blockchain, and native asset prices by symbol and blockchain. This data set is highly curated and contains metadata for one price per hour per unique asset and blockchain.", "owner": "DBT_CLOUD_SUI"}, "columns": {"HOUR": {"type": "TIMESTAMP_NTZ", "index": 1, "name": "HOUR", "comment": "Hour that the price was recorded at."}, "TOKEN_ADDRESS": {"type": "TEXT", "index": 2, "name": "TOKEN_ADDRESS", "comment": "The specific address representing the asset on a specific platform. This will be NULL if referring to a native asset."}, "SYMBOL": {"type": "TEXT", "index": 3, "name": "SYMBOL", "comment": "The symbol of asset."}, "NAME": {"type": "TEXT", "index": 4, "name": "NAME", "comment": ""}, "DECIMALS": {"type": "NUMBER", "index": 5, "name": "DECIMALS", "comment": "The number of decimals for the asset. May be NULL."}, "PRICE": {"type": "FLOAT", "index": 6, "name": "PRICE", "comment": "Closing price of the recorded hour in USD."}, "BLOCKCHAIN": {"type": "TEXT", "index": 7, "name": "BLOCKCHAIN", "comment": "The Blockchain, Network, or Platform for this asset."}, "IS_NATIVE": {"type": "BOOLEAN", "index": 8, "name": "IS_NATIVE", "comment": "A flag indicating assets native to the respective blockchain."}, "IS_DEPRECATED": {"type": "BOOLEAN", "index": 9, "name": "IS_DEPRECATED", "comment": "A flag indicating if the asset is deprecated or no longer supported by the provider."}, "IS_IMPUTED": {"type": "BOOLEAN", "index": 10, "name": "IS_IMPUTED", "comment": "A flag indicating if the price was imputed, or derived, from the last arriving record. This is generally used for tokens with low-liquidity or inconsistent reporting."}, "TOKEN_IS_VERIFIED": {"type": "BOOLEAN", "index": 11, "name": "TOKEN_IS_VERIFIED", "comment": "Boolean flag indicating whether the token or price record is verified by Flipside's crosschain curation process. Verified tokens are prioritized for analytics and are considered reliable for most use cases. Unverified tokens may be incomplete, deprecated, or experimental."}, "EZ_PRICES_HOURLY_ID": {"type": "TEXT", "index": 12, "name": "EZ_PRICES_HOURLY_ID", "comment": "Unique identifier for the token metadata record, linking metadata to on-chain token types. Used for metadata management, registry operations, and analytics joins. Example: 'tokenmeta_123'."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 13, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 14, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 107803648, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:25UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 4024904, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(hour::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.price__ez_prices_hourly"}, "model.sui_models.streamline__transactions": {"metadata": {"type": "BASE TABLE", "schema": "STREAMLINE", "name": "TRANSACTIONS", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": null}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": null}, "TX_INDEX": {"type": "NUMBER", "index": 3, "name": "TX_INDEX", "comment": null}, "TX_DIGEST": {"type": "TEXT", "index": 4, "name": "TX_DIGEST", "comment": null}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 5, "name": "INSERTED_TIMESTAMP", "comment": null}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 6, "name": "MODIFIED_TIMESTAMP", "comment": null}, "_INVOCATION_ID": {"type": "TEXT", "index": 7, "name": "_INVOCATION_ID", "comment": null}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 46043396096, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:54UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 1119873017, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.streamline__transactions"}, "model.sui_models.silver_bridge__all_bridges": {"metadata": {"type": "VIEW", "schema": "SILVER_BRIDGE", "name": "ALL_BRIDGES", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": ""}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": ""}, "TX_DIGEST": {"type": "TEXT", "index": 3, "name": "TX_DIGEST", "comment": ""}, "TX_SENDER": {"type": "TEXT", "index": 4, "name": "TX_SENDER", "comment": ""}, "EVENT_INDEX": {"type": "NUMBER", "index": 5, "name": "EVENT_INDEX", "comment": ""}, "SOURCE_CHAIN": {"type": "NUMBER", "index": 6, "name": "SOURCE_CHAIN", "comment": ""}, "DESTINATION_CHAIN": {"type": "NUMBER", "index": 7, "name": "DESTINATION_CHAIN", "comment": ""}, "AMOUNT": {"type": "NUMBER", "index": 8, "name": "AMOUNT", "comment": ""}, "SOURCE_ADDRESS": {"type": "TEXT", "index": 9, "name": "SOURCE_ADDRESS", "comment": ""}, "DESTINATION_ADDRESS": {"type": "TEXT", "index": 10, "name": "DESTINATION_ADDRESS", "comment": ""}, "COIN_TYPE": {"type": "TEXT", "index": 11, "name": "COIN_TYPE", "comment": ""}, "BRIDGE_ADDRESS": {"type": "TEXT", "index": 12, "name": "BRIDGE_ADDRESS", "comment": ""}, "ALL_BRIDGES_ID": {"type": "TEXT", "index": 13, "name": "ALL_BRIDGES_ID", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 14, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 15, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 16, "name": "_INVOCATION_ID", "comment": ""}, "DIRECTION": {"type": "TEXT", "index": 17, "name": "DIRECTION", "comment": ""}, "PLATFORM": {"type": "TEXT", "index": 18, "name": "PLATFORM", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.silver_bridge__all_bridges"}, "model.sui_models.silver__dex_swaps": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "DEX_SWAPS", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'."}, "TX_DIGEST": {"type": "TEXT", "index": 3, "name": "TX_DIGEST", "comment": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'."}, "EVENT_INDEX": {"type": "NUMBER", "index": 4, "name": "EVENT_INDEX", "comment": "Zero-based index ordering events within a transaction. Ensures deterministic event ordering for sequence reconstruction and analytics. Example: 1."}, "TYPE": {"type": "TEXT", "index": 5, "name": "TYPE", "comment": "Type/category of object state modification or event. Enum: created, modified, deleted, wrapped, unwrapped (for changes); event type string (for events). Used for lifecycle analysis and state transition tracking. Example: 'created'."}, "EVENT_MODULE": {"type": "TEXT", "index": 6, "name": "EVENT_MODULE", "comment": "Name of the Move module that emitted the event. Used for module-specific event filtering and analytics. Example: 'coin'."}, "EVENT_RESOURCE": {"type": "TEXT", "index": 7, "name": "EVENT_RESOURCE", "comment": "Fully qualified type signature of the event struct. Format: {package_id}::{module}::{struct_name}<type_parameters>. Enables type-safe event deserialization and schema tracking. Example: '0x2::coin::TransferEvent<0x2::sui::SUI>'."}, "TRANSACTION_MODULE": {"type": "TEXT", "index": 8, "name": "TRANSACTION_MODULE", "comment": "Name of the module executed in the transaction that emitted the event. Links events to transaction context for flow analysis. Example: 'pay_sui'."}, "PLATFORM_ADDRESS": {"type": "TEXT", "index": 9, "name": "PLATFORM_ADDRESS", "comment": "The smart contract address of the DEX platform that facilitated this swap. This represents the deployed contract address for the specific DEX protocol on the Sui blockchain. Used for contract verification, security analysis, and linking to platform-specific metadata and configurations. Essential for protocol-specific analysis and filtering across different DeFi platforms."}, "POOL_ADDRESS": {"type": "TEXT", "index": 10, "name": "POOL_ADDRESS", "comment": "The address of the liquidity pool involved in the swap. For protocols that use AMM (Automated Market Maker) pools, this identifies the specific pool contract. May be NULL for order book-based protocols like DeepBook or centralized limit order protocols. Essential for pool-specific analytics, liquidity analysis, and understanding which pools are most active for different token pairs."}, "AMOUNT_IN_RAW": {"type": "NUMBER", "index": 11, "name": "AMOUNT_IN_RAW", "comment": "The raw amount of tokens being swapped in (input amount) before any decimal adjustments. This represents the exact on-chain token amount as it appears in the swap event. Preserves precision for accurate calculations and is essential for volume analysis, price impact calculations, and swap size distribution analysis. Critical for calculating swap rates and understanding the actual token amounts exchanged in each swap."}, "AMOUNT_OUT_RAW": {"type": "NUMBER", "index": 12, "name": "AMOUNT_OUT_RAW", "comment": "The raw amount of tokens being swapped out (output amount) before any decimal adjustments. This represents the exact on-chain token amount that the user receives from the swap. Critical for calculating swap rates, slippage analysis, and understanding the actual token amounts exchanged in each swap. Essential for volume analysis and swap size distribution analysis."}, "A_TO_B": {"type": "BOOLEAN", "index": 13, "name": "A_TO_B", "comment": "A boolean flag indicating the direction of the swap within the pool. When TRUE, the swap goes from token A to token B; when FALSE, it goes from token B to token A. This field is protocol-specific and may be NULL for some DEX platforms. Important for understanding swap direction and pool token ordering conventions. Follows each protocol's specific pool token ordering conventions."}, "FEE_AMOUNT_RAW": {"type": "NUMBER", "index": 14, "name": "FEE_AMOUNT_RAW", "comment": "The raw amount of fees charged for the swap transaction. This includes protocol fees, liquidity provider fees, and any other transaction costs. May be 0 for protocols that don't charge explicit fees or when fees are embedded in the swap amounts. Essential for fee revenue analysis and total cost of trading calculations. For some protocols like Aftermath, this may be NULL as fees are handled differently."}, "PARTNER_ADDRESS": {"type": "TEXT", "index": 15, "name": "PARTNER_ADDRESS", "comment": "The address of a partner or affiliate that facilitated the swap (if applicable). Used primarily by Cetus for their partner program where swaps can be routed through partner contracts. May be NULL for most protocols or when no partner was involved. Useful for tracking partner performance and affiliate program analytics within the DEX ecosystem."}, "STEPS": {"type": "NUMBER", "index": 16, "name": "STEPS", "comment": "The number of steps or hops required to complete the swap. For simple swaps, this is typically 1. For complex swaps involving multiple pools or routing through multiple protocols, this indicates the number of intermediate steps. Essential for understanding swap complexity and routing efficiency across different protocols. Critical for analyzing multi-hop swaps and routing optimization."}, "TOKEN_IN_TYPE": {"type": "TEXT", "index": 17, "name": "TOKEN_IN_TYPE", "comment": "The full type identifier of the token being swapped in (input token). This follows Sui's Move type format (e.g., \"0x2::sui::SUI\" for the native SUI token). Essential for token identification, pricing lookups, and token-specific analytics. Used for calculating USD values and token pair analysis. Some models ensure proper formatting by adding '0x' prefix if missing."}, "TOKEN_OUT_TYPE": {"type": "TEXT", "index": 18, "name": "TOKEN_OUT_TYPE", "comment": "The full type identifier of the token being swapped out (output token). This follows Sui's Move type format and represents the token that the user receives from the swap. Critical for token pair analysis, swap rate calculations, and understanding token flow patterns across the DeFi ecosystem. Some models ensure proper formatting by adding '0x' prefix if missing."}, "TRADER_ADDRESS": {"type": "TEXT", "index": 19, "name": "TRADER_ADDRESS", "comment": "The address of the wallet or account that initiated the swap. May be NULL for some protocols that don't explicitly track the trader address in their events. Essential for user behavior analysis, wallet tracking, and understanding individual trader patterns and preferences across different DEX platforms. For some protocols like Aftermath, this is extracted from the transaction sender."}, "DEX_SWAPS_ID": {"type": "TEXT", "index": 20, "name": "DEX_SWAPS_ID", "comment": "A unique surrogate key generated from the combination of transaction identifiers and swap details. For the general DEX table, this combines tx_digest and event_index. For protocol-specific tables like Aftermath, this may include additional fields like trader_address, token_in_type, token_out_type, amount_in_raw, and amount_out_raw. This provides a stable, unique identifier for each swap event that can be used as a primary key for downstream analytics and data modeling. Ensures data integrity and prevents duplicate processing."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 21, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 22, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}, "PACKAGE_ID": {"type": "TEXT", "index": 23, "name": "PACKAGE_ID", "comment": "Unique identifier (object ID) of the Move package containing the event module. Used for package-level analytics, deployment tracking, and contract lineage. Example: '0x2'."}, "SWAP_INDEX": {"type": "NUMBER", "index": 24, "name": "SWAP_INDEX", "comment": "Sequential index of the swap within a transaction that contains multiple swaps. Used to order and identify individual swaps when a transaction performs multiple DEX operations. Essential for multi-swap transaction analysis and swap-level flow tracking. Example: 1 for the first swap, 2 for the second, etc."}, "_INVOCATION_ID": {"type": "TEXT", "index": 25, "name": "_INVOCATION_ID", "comment": "A unique identifier for the dbt run that created or updated this record. This field is used for data lineage tracking and debugging purposes. Helps identify which specific dbt execution was responsible for processing each record and enables traceability back to the source code and configuration used. Essential for ETL monitoring, data quality tracking, and troubleshooting pipeline issues."}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 9992343040, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 13:51UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 108969059, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(modified_timestamp::DATE, block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.silver__dex_swaps"}, "model.sui_models.core__fact_balance_changes": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_BALANCE_CHANGES", "database": "SUI", "comment": "Fact table recording every token and coin balance change event on the Sui blockchain at the finest granularity. Each row represents a single balance delta (positive or negative) for a specific owner, coin type, and transaction, capturing the full flow of assets across wallets and contracts. Includes object IDs, transaction context, and ownership metadata, supporting precise tracking of token movements, portfolio changes, and treasury operations. Enables reconstruction of wallet balances, detection of large transfers, and analysis of token velocity. Data is derived from transaction execution effects and object state transitions, following Sui's explicit ownership and versioning model.", "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'."}, "TX_DIGEST": {"type": "TEXT", "index": 3, "name": "TX_DIGEST", "comment": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'."}, "TX_KIND": {"type": "TEXT", "index": 4, "name": "TX_KIND", "comment": "The type of transaction executed. Values include 'Programmable Transaction Block' (PTB) for user-submitted transactions (up to 1,024 commands) and 'System Transaction' for validator/network operations. Determines execution path, available operations, and analytics grouping. Example: 'ProgrammableTransactionBlock'."}, "TX_SENDER": {"type": "TEXT", "index": 5, "name": "TX_SENDER", "comment": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'."}, "MESSAGE_VERSION": {"type": "TEXT", "index": 6, "name": "MESSAGE_VERSION", "comment": "The version of the transaction data structure, supporting protocol evolution and backward compatibility. Currently uses 'TransactionDataV1'. Ensures analytics remain robust across protocol upgrades. Example: '1'."}, "TX_SUCCEEDED": {"type": "BOOLEAN", "index": 7, "name": "TX_SUCCEEDED", "comment": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true."}, "BALANCE_CHANGE_INDEX": {"type": "NUMBER", "index": 8, "name": "BALANCE_CHANGE_INDEX", "comment": "Zero-based index ordering balance changes within a transaction. Tracks the sequence of balance modifications for accurate financial analysis and reconciliation. Example: 0."}, "COIN_TYPE": {"type": "TEXT", "index": 9, "name": "COIN_TYPE", "comment": "Fully qualified Move type identifier for coins/tokens. Format: {package}::{module}::{struct}. Example: '0x2::sui::SUI' for native SUI token. Essential for DeFi analytics, token classification, and cross-asset analysis."}, "AMOUNT": {"type": "NUMBER", "index": 10, "name": "AMOUNT", "comment": "Token quantity in the smallest unit (MIST for SUI). Integer value; 1 SUI = 1,000,000,000 MIST. Used for precise financial calculations, balance tracking, and token flow analysis. Example: 1000000000."}, "OBJECT_OWNER": {"type": "TEXT", "index": 11, "name": "OBJECT_OWNER", "comment": "Indicates how the object is owned and accessed. Types: Address-owned, Shared (consensus), Immutable (public), Object-owned. Determines access patterns and transaction requirements. Example: 'Shared'."}, "ADDRESS_OWNER": {"type": "TEXT", "index": 12, "name": "ADDRESS_OWNER", "comment": "The 32-byte Sui address (hex with 0x prefix) that owns this object when it has address-based ownership. Address-owned objects are controlled by a specific account and can only be accessed by their owner, providing exclusive control and enabling efficient parallel processing since they don't require consensus. Used for wallet analytics, ownership tracking, and transaction authorization analysis. When null, the object has a different ownership type (shared, immutable, or object-owned). Example: '0xabc123...'."}, "FACT_TRANSACTION_BALANCE_CHANGES_ID": {"type": "TEXT", "index": 13, "name": "FACT_TRANSACTION_BALANCE_CHANGES_ID", "comment": "Surrogate key for the balance changes fact table. Generated unique identifier by combining transaction digest and balance change index, guaranteeing uniqueness for each balance change event. Critical for financial analysis, reconciliation, and tracking token flows at the most granular level. In Sui, this enables accurate wallet balance reconstruction, detection of large transfers, and portfolio analytics across all addresses and token types."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 14, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 15, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 71994779136, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:32UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 853861559, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.core__fact_balance_changes"}, "model.sui_models.streamline__checkpoints_realtime": {"metadata": {"type": "VIEW", "schema": "STREAMLINE", "name": "CHECKPOINTS_REALTIME", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": ""}, "PARTITION_KEY": {"type": "NUMBER", "index": 2, "name": "PARTITION_KEY", "comment": ""}, "REQUEST": {"type": "VARIANT", "index": 3, "name": "REQUEST", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.streamline__checkpoints_realtime"}, "model.sui_models.silver__complete_token_prices": {"metadata": {"type": "VIEW", "schema": "SILVER", "name": "COMPLETE_TOKEN_PRICES", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"HOUR": {"type": "TIMESTAMP_NTZ", "index": 1, "name": "HOUR", "comment": ""}, "TOKEN_ADDRESS": {"type": "TEXT", "index": 2, "name": "TOKEN_ADDRESS", "comment": ""}, "ASSET_ID": {"type": "TEXT", "index": 3, "name": "ASSET_ID", "comment": ""}, "SYMBOL": {"type": "TEXT", "index": 4, "name": "SYMBOL", "comment": ""}, "NAME": {"type": "TEXT", "index": 5, "name": "NAME", "comment": ""}, "DECIMALS": {"type": "NUMBER", "index": 6, "name": "DECIMALS", "comment": ""}, "PRICE": {"type": "FLOAT", "index": 7, "name": "PRICE", "comment": ""}, "BLOCKCHAIN": {"type": "TEXT", "index": 8, "name": "BLOCKCHAIN", "comment": ""}, "BLOCKCHAIN_NAME": {"type": "TEXT", "index": 9, "name": "BLOCKCHAIN_NAME", "comment": ""}, "BLOCKCHAIN_ID": {"type": "TEXT", "index": 10, "name": "BLOCKCHAIN_ID", "comment": ""}, "IS_IMPUTED": {"type": "BOOLEAN", "index": 11, "name": "IS_IMPUTED", "comment": ""}, "IS_DEPRECATED": {"type": "BOOLEAN", "index": 12, "name": "IS_DEPRECATED", "comment": ""}, "IS_VERIFIED": {"type": "BOOLEAN", "index": 13, "name": "IS_VERIFIED", "comment": ""}, "PROVIDER": {"type": "TEXT", "index": 14, "name": "PROVIDER", "comment": ""}, "SOURCE": {"type": "TEXT", "index": 15, "name": "SOURCE", "comment": ""}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 16, "name": "_INSERTED_TIMESTAMP", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 17, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 18, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "COMPLETE_TOKEN_PRICES_ID": {"type": "TEXT", "index": 19, "name": "COMPLETE_TOKEN_PRICES_ID", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 20, "name": "_INVOCATION_ID", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.silver__complete_token_prices"}, "model.sui_models.core__dim_tokens": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "DIM_TOKENS", "database": "SUI", "comment": "Dimension table providing authoritative metadata for all fungible and non-fungible tokens on the Sui blockchain. Includes decimals, symbols, names, descriptions, and icon URLs sourced from on-chain metadata and Move package definitions. Serves as the canonical reference for token identification, decimal normalization, and UI display across analytics workflows. Data is sourced from bronze_api__coin_metadata and cross-referenced with on-chain Move modules, covering both native SUI and custom tokens. Essential for accurate balance calculations, token flow analysis, and user-facing applications. Supports lineage tracing from raw on-chain metadata to analytics-ready token attributes.", "owner": "DBT_CLOUD_SUI"}, "columns": {"COIN_TYPE": {"type": "TEXT", "index": 1, "name": "COIN_TYPE", "comment": "Fully qualified Move type identifier for coins/tokens. Format: {package}::{module}::{struct}. Example: '0x2::sui::SUI' for native SUI token. Essential for DeFi analytics, token classification, and cross-asset analysis."}, "DECIMALS": {"type": "NUMBER", "index": 2, "name": "DECIMALS", "comment": "Number of decimal places for the token. Integer value defining token precision (e.g., 9 for SUI means 1 SUI = 1,000,000,000 MIST). Essential for accurate token amount calculations, display formatting, and cross-token analytics. Example: 9."}, "SYMBOL": {"type": "TEXT", "index": 3, "name": "SYMBOL", "comment": "Short string symbol for the token (e.g., 'SUI', 'USDC'). Used for user-friendly token identification, UI display, and analytics grouping. Example: 'SUI'."}, "NAME": {"type": "TEXT", "index": 4, "name": "NAME", "comment": "Full descriptive name of the token. Human-readable string for complete token identification, used in interfaces and analytics. Example: 'Sui Token'."}, "DESCRIPTION": {"type": "TEXT", "index": 5, "name": "DESCRIPTION", "comment": "Detailed description of the token's purpose, features, and technical details. Used for documentation, analytics, and user interfaces. Example: 'Native token of the Sui blockchain, used for gas and staking.'"}, "ICON_URL": {"type": "TEXT", "index": 6, "name": "ICON_URL", "comment": "Web URL pointing to the token's icon image. Used for visual representation in wallets, dApps, and analytics dashboards. Example: 'https://assets.sui.io/icons/sui.svg'."}, "OBJECT_ID": {"type": "TEXT", "index": 7, "name": "OBJECT_ID", "comment": "Unique identifier for the token metadata record, linking metadata to on-chain token types. Used for metadata management, registry operations, and analytics joins. Example: 'tokenmeta_123'."}, "DIM_TOKENS_ID": {"type": "TEXT", "index": 8, "name": "DIM_TOKENS_ID", "comment": "Surrogate key for the tokens dimension table. Generated unique identifier for each token metadata record, typically derived from the coin type or on-chain metadata. Enables efficient token lookups, joins across fact tables, and lineage tracing from raw on-chain data to analytics-ready attributes. In Sui, this is critical for accurate token identification, decimal normalization, and cross-model analytics involving token flows and balances."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 9, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 10, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 45958656, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:33UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 29579, "include": true, "description": "An approximate count of rows in this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.core__dim_tokens"}, "model.sui_models.bronze__checkpoints_FR": {"metadata": {"type": "VIEW", "schema": "BRONZE", "name": "CHECKPOINTS_FR", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"VALUE": {"type": "VARIANT", "index": 1, "name": "VALUE", "comment": ""}, "PARTITION_KEY": {"type": "NUMBER", "index": 2, "name": "PARTITION_KEY", "comment": ""}, "METADATA": {"type": "VARIANT", "index": 3, "name": "METADATA", "comment": ""}, "DATA": {"type": "VARIANT", "index": 4, "name": "DATA", "comment": ""}, "FILE_NAME": {"type": "TEXT", "index": 5, "name": "FILE_NAME", "comment": ""}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 6, "name": "_INSERTED_TIMESTAMP", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.bronze__checkpoints_FR"}, "model.sui_models.core__fact_changes": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_CHANGES", "database": "SUI", "comment": "Fact table capturing all object state transitions on the Sui blockchain, including creation, mutation, deletion, wrapping, and unwrapping of objects. Each record documents the full lifecycle of Sui objects (NFTs, coins, packages, etc.) as they are manipulated by transactions. Includes object IDs, versions, types, and ownership changes, enabling forensic analysis, compliance reporting, and application behavior tracing. Supports lineage analysis by linking object changes to specific transactions, epochs, and owners. Critical for understanding Sui's object-centric data model and for tracking resource flows, upgrades, and state mutations across the network.", "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'."}, "TX_DIGEST": {"type": "TEXT", "index": 3, "name": "TX_DIGEST", "comment": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'."}, "TX_KIND": {"type": "TEXT", "index": 4, "name": "TX_KIND", "comment": "The type of transaction executed. Values include 'Programmable Transaction Block' (PTB) for user-submitted transactions (up to 1,024 commands) and 'System Transaction' for validator/network operations. Determines execution path, available operations, and analytics grouping. Example: 'ProgrammableTransactionBlock'."}, "TX_SENDER": {"type": "TEXT", "index": 5, "name": "TX_SENDER", "comment": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'."}, "MESSAGE_VERSION": {"type": "TEXT", "index": 6, "name": "MESSAGE_VERSION", "comment": "The version of the transaction data structure, supporting protocol evolution and backward compatibility. Currently uses 'TransactionDataV1'. Ensures analytics remain robust across protocol upgrades. Example: '1'."}, "TX_SUCCEEDED": {"type": "BOOLEAN", "index": 7, "name": "TX_SUCCEEDED", "comment": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true."}, "CHANGE_INDEX": {"type": "NUMBER", "index": 8, "name": "CHANGE_INDEX", "comment": "Zero-based sequential index ordering object state changes within a transaction. Ensures atomicity and correct ordering for analytics and lineage tracing. Example: 2."}, "TYPE": {"type": "TEXT", "index": 9, "name": "TYPE", "comment": "Type/category of object state modification or event. Enum: created, modified, deleted, wrapped, unwrapped (for changes); event type string (for events). Used for lifecycle analysis and state transition tracking. Example: 'created'."}, "SENDER": {"type": "TEXT", "index": 10, "name": "SENDER", "comment": "Sui address (32-byte hex) representing the transaction or event sender. Used for authorization, security analysis, and user activity tracking. Example: '0xabc123...'."}, "DIGEST": {"type": "TEXT", "index": 11, "name": "DIGEST", "comment": "32-byte cryptographic hash (hex) of object contents, using SHA-256. Used for content verification, integrity checking, and unauthorized modification detection. Example: 'a1b2c3...'."}, "OBJECT_ID": {"type": "TEXT", "index": 12, "name": "OBJECT_ID", "comment": "Globally unique 32-byte identifier for Sui objects. Hex string, primary key for object tracking, provenance, and asset history. Example: '0x1234abcd...'."}, "OBJECT_TYPE": {"type": "TEXT", "index": 13, "name": "OBJECT_TYPE", "comment": "Move type signature governing the object's structure and behavior. Format: {package}::{module}::{struct}<type_parameters>. Enables type-based classification and filtering. Example: '0x2::coin::Coin<0x2::sui::SUI>'."}, "VERSION": {"type": "NUMBER", "index": 14, "name": "VERSION", "comment": "8-byte unsigned integer incremented with every object modification. Tracks mutation frequency and supports version-based conflict resolution. Initial value: 1. Example: 5."}, "PREVIOUS_VERSION": {"type": "NUMBER", "index": 15, "name": "PREVIOUS_VERSION", "comment": "Version number immediately preceding the current object version. Enables historical state reconstruction and audit trails. Value: current_version - 1 (0 for initial creation). Example: 4."}, "OBJECT_OWNER": {"type": "TEXT", "index": 16, "name": "OBJECT_OWNER", "comment": "Indicates how the object is owned and accessed. Types: Address-owned, Shared (consensus), Immutable (public), Object-owned. Determines access patterns and transaction requirements. Example: 'Shared'."}, "ADDRESS_OWNER": {"type": "TEXT", "index": 17, "name": "ADDRESS_OWNER", "comment": "The 32-byte Sui address (hex with 0x prefix) that owns this object when it has address-based ownership. Address-owned objects are controlled by a specific account and can only be accessed by their owner, providing exclusive control and enabling efficient parallel processing since they don't require consensus. Used for wallet analytics, ownership tracking, and transaction authorization analysis. When null, the object has a different ownership type (shared, immutable, or object-owned). Example: '0xabc123...'."}, "SHARED_OWNER": {"type": "VARIANT", "index": 18, "name": "SHARED_OWNER", "comment": "Variant data structure indicating this object has shared ownership, meaning it's accessible to everyone on the network and requires consensus validation for modifications. Shared objects enable coordination between multiple addresses but incur higher transaction costs due to consensus requirements. Used for marketplaces, escrows, AMMs, and other multi-user scenarios. Contains metadata about the shared object's initial version and access permissions. When null, the object has address-based, immutable, or object-based ownership. Example: {\"initial_shared_version\": 123}."}, "PACKAGE_ID": {"type": "TEXT", "index": 19, "name": "PACKAGE_ID", "comment": "Unique identifier (object ID) of the Move package containing the event module. Used for package-level analytics, deployment tracking, and contract lineage. Example: '0x2'."}, "MODULES": {"type": "TEXT", "index": 20, "name": "MODULES", "comment": "Comma-separated list of Move module names contained within the package. Modules define the package's functionality and can be called by transactions to execute smart contract logic. Each module has a unique name within its package and contains functions, structs, and resources. Used for analyzing package composition, tracking module usage patterns, and understanding smart contract functionality. Example: 'coin,transfer,governance'."}, "FACT_CHANGES_ID": {"type": "TEXT", "index": 21, "name": "FACT_CHANGES_ID", "comment": "Surrogate key for the object changes fact table. Generated unique identifier by combining transaction digest and change index, ensuring each object state transition is uniquely tracked. Supports object lifecycle analysis, state tracking, and forensic investigations. In Sui, this is essential for tracing the full history of NFTs, coins, and other on-chain objects, supporting compliance, provenance, and application behavior analytics."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 22, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 23, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 505882685952, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:32UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 4015938056, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.core__fact_changes"}, "model.sui_models.silver_bridge__sui_bridge_outbound": {"metadata": {"type": "BASE TABLE", "schema": "SILVER_BRIDGE", "name": "SUI_BRIDGE_OUTBOUND", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": ""}, "TX_DIGEST": {"type": "TEXT", "index": 2, "name": "TX_DIGEST", "comment": ""}, "TX_SENDER": {"type": "TEXT", "index": 3, "name": "TX_SENDER", "comment": ""}, "EVENT_INDEX": {"type": "NUMBER", "index": 4, "name": "EVENT_INDEX", "comment": ""}, "SOURCE_CHAIN": {"type": "NUMBER", "index": 5, "name": "SOURCE_CHAIN", "comment": ""}, "DESTINATION_CHAIN": {"type": "NUMBER", "index": 6, "name": "DESTINATION_CHAIN", "comment": ""}, "AMOUNT": {"type": "NUMBER", "index": 7, "name": "AMOUNT", "comment": ""}, "SOURCE_ADDRESS": {"type": "TEXT", "index": 8, "name": "SOURCE_ADDRESS", "comment": ""}, "DESTINATION_ADDRESS": {"type": "TEXT", "index": 9, "name": "DESTINATION_ADDRESS", "comment": ""}, "COIN_TYPE": {"type": "TEXT", "index": 10, "name": "COIN_TYPE", "comment": ""}, "BRIDGE_ADDRESS": {"type": "TEXT", "index": 11, "name": "BRIDGE_ADDRESS", "comment": ""}, "SUI_BRIDGE_OUTBOUND_ID": {"type": "TEXT", "index": 12, "name": "SUI_BRIDGE_OUTBOUND_ID", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 13, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 14, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 15, "name": "BLOCK_TIMESTAMP", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 16, "name": "_INVOCATION_ID", "comment": ""}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 1499648, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 13:02UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 6653, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(modified_timestamp::DATE, block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.silver_bridge__sui_bridge_outbound"}, "model.sui_models.core__dim_labels": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "DIM_LABELS", "database": "SUI", "comment": "The labels table is a store of one-to-one address identifiers, or an address name. Labels are broken out into a \"type\" (such as cex, dex, dapp, games, etc.) and a \"subtype\" (ex: contract_deployer, hot_wallet, token_contract, etc.) in order to help classify each address name into similar groups. Our labels are sourced from many different places, but can primarily be grouped into two categories: automatic and manual. Automatic labels are continuously labeled based on certain criteria, such as a known contract deploying another contract, behavior based algorithms for finding deposit wallets, and consistent data pulls of custom protocol APIs. Manual labels are done periodically to find addresses that cannot be found programmatically such as finding new protocol addresses, centralized exchange hot wallets, or trending addresses. Labels can also be added by our community by using our add-a-label tool (https://science.flipsidecrypto.xyz/add-a-label/).A label can be removed by our labels team if it is found to be incorrect or no longer relevant; this generally will only happen for mislabeled deposit wallets.", "owner": "DBT_CLOUD_SUI"}, "columns": {"BLOCKCHAIN": {"type": "TEXT", "index": 1, "name": "BLOCKCHAIN", "comment": "In this table, always ton. Used to join to cross-chain tables."}, "CREATOR": {"type": "TEXT", "index": 2, "name": "CREATOR", "comment": "Name of the label creator - for now, this will always be \"Flipside.\""}, "ADDRESS": {"type": "TEXT", "index": 3, "name": "ADDRESS", "comment": "Raw address string"}, "LABEL_TYPE": {"type": "TEXT", "index": 4, "name": "LABEL_TYPE", "comment": "A broad category that describes what a label is representing."}, "LABEL_SUBTYPE": {"type": "TEXT", "index": 5, "name": "LABEL_SUBTYPE", "comment": "Adds more detail to the label type."}, "LABEL": {"type": "TEXT", "index": 6, "name": "LABEL", "comment": "The label or name of the address."}, "ADDRESS_NAME": {"type": "TEXT", "index": 7, "name": "ADDRESS_NAME", "comment": "Name of the labeled address"}, "DIM_LABELS_ID": {"type": "TEXT", "index": 8, "name": "DIM_LABELS_ID", "comment": "Unique primary key for the dimension table, used as the main identifier for each record."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 9, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when this record was inserted."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 10, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when this record was last modified."}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 755200, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:24UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 7014, "include": true, "description": "An approximate count of rows in this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.core__dim_labels"}, "model.sui_models.bronze__checkpoints": {"metadata": {"type": "VIEW", "schema": "BRONZE", "name": "CHECKPOINTS", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"VALUE": {"type": "VARIANT", "index": 1, "name": "VALUE", "comment": ""}, "PARTITION_KEY": {"type": "NUMBER", "index": 2, "name": "PARTITION_KEY", "comment": ""}, "METADATA": {"type": "VARIANT", "index": 3, "name": "METADATA", "comment": ""}, "DATA": {"type": "VARIANT", "index": 4, "name": "DATA", "comment": ""}, "FILE_NAME": {"type": "TEXT", "index": 5, "name": "FILE_NAME", "comment": ""}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 6, "name": "_INSERTED_TIMESTAMP", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.bronze__checkpoints"}, "model.sui_models.silver__transactions": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "TRANSACTIONS", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": ""}, "TX_DIGEST": {"type": "TEXT", "index": 2, "name": "TX_DIGEST", "comment": ""}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "BLOCK_TIMESTAMP", "comment": ""}, "PARTITION_KEY": {"type": "NUMBER", "index": 4, "name": "PARTITION_KEY", "comment": ""}, "TRANSACTION_JSON": {"type": "VARIANT", "index": 5, "name": "TRANSACTION_JSON", "comment": ""}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 6, "name": "_INSERTED_TIMESTAMP", "comment": ""}, "TRANSACTIONS_ID": {"type": "TEXT", "index": 7, "name": "TRANSACTIONS_ID", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 8, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 9, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 10, "name": "_INVOCATION_ID", "comment": ""}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 1690471016960, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:32UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 838935292, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(modified_timestamp::DATE, block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.silver__transactions"}, "model.sui_models.silver__crosschain_labels": {"metadata": {"type": "VIEW", "schema": "SILVER", "name": "CROSSCHAIN_LABELS", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"BLOCKCHAIN": {"type": "TEXT", "index": 1, "name": "BLOCKCHAIN", "comment": ""}, "ADDRESS": {"type": "TEXT", "index": 2, "name": "ADDRESS", "comment": ""}, "CREATOR": {"type": "TEXT", "index": 3, "name": "CREATOR", "comment": ""}, "LABEL_TYPE": {"type": "TEXT", "index": 4, "name": "LABEL_TYPE", "comment": ""}, "LABEL_SUBTYPE": {"type": "TEXT", "index": 5, "name": "LABEL_SUBTYPE", "comment": ""}, "ADDRESS_NAME": {"type": "TEXT", "index": 6, "name": "ADDRESS_NAME", "comment": ""}, "PROJECT_NAME": {"type": "TEXT", "index": 7, "name": "PROJECT_NAME", "comment": ""}, "_IS_DELETED": {"type": "BOOLEAN", "index": 8, "name": "_IS_DELETED", "comment": ""}, "LABELS_COMBINED_ID": {"type": "TEXT", "index": 9, "name": "LABELS_COMBINED_ID", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 10, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 11, "name": "MODIFIED_TIMESTAMP", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.silver__crosschain_labels"}, "model.sui_models.bronze__complete_token_prices": {"metadata": {"type": "VIEW", "schema": "BRONZE", "name": "COMPLETE_TOKEN_PRICES", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"HOUR": {"type": "TIMESTAMP_NTZ", "index": 1, "name": "HOUR", "comment": ""}, "TOKEN_ADDRESS": {"type": "TEXT", "index": 2, "name": "TOKEN_ADDRESS", "comment": ""}, "ASSET_ID": {"type": "TEXT", "index": 3, "name": "ASSET_ID", "comment": ""}, "SYMBOL": {"type": "TEXT", "index": 4, "name": "SYMBOL", "comment": ""}, "NAME": {"type": "TEXT", "index": 5, "name": "NAME", "comment": ""}, "DECIMALS": {"type": "NUMBER", "index": 6, "name": "DECIMALS", "comment": ""}, "PRICE": {"type": "FLOAT", "index": 7, "name": "PRICE", "comment": ""}, "BLOCKCHAIN": {"type": "TEXT", "index": 8, "name": "BLOCKCHAIN", "comment": ""}, "BLOCKCHAIN_NAME": {"type": "TEXT", "index": 9, "name": "BLOCKCHAIN_NAME", "comment": ""}, "BLOCKCHAIN_ID": {"type": "TEXT", "index": 10, "name": "BLOCKCHAIN_ID", "comment": ""}, "IS_IMPUTED": {"type": "BOOLEAN", "index": 11, "name": "IS_IMPUTED", "comment": ""}, "IS_DEPRECATED": {"type": "BOOLEAN", "index": 12, "name": "IS_DEPRECATED", "comment": ""}, "IS_VERIFIED": {"type": "BOOLEAN", "index": 13, "name": "IS_VERIFIED", "comment": ""}, "PROVIDER": {"type": "TEXT", "index": 14, "name": "PROVIDER", "comment": ""}, "SOURCE": {"type": "TEXT", "index": 15, "name": "SOURCE", "comment": ""}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 16, "name": "_INSERTED_TIMESTAMP", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 17, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 18, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "COMPLETE_TOKEN_PRICES_ID": {"type": "TEXT", "index": 19, "name": "COMPLETE_TOKEN_PRICES_ID", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 20, "name": "_INVOCATION_ID", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.bronze__complete_token_prices"}, "model.sui_models.silver__checkpoints": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "CHECKPOINTS", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": ""}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": ""}, "PARTITION_KEY": {"type": "NUMBER", "index": 3, "name": "PARTITION_KEY", "comment": ""}, "CHECKPOINT_JSON": {"type": "VARIANT", "index": 4, "name": "CHECKPOINT_JSON", "comment": ""}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 5, "name": "_INSERTED_TIMESTAMP", "comment": ""}, "CHECKPOINTS_ID": {"type": "TEXT", "index": 6, "name": "CHECKPOINTS_ID", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 7, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 8, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 9, "name": "_INVOCATION_ID", "comment": ""}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 52506202112, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:24UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 86159229, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(modified_timestamp::DATE, block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.silver__checkpoints"}, "model.sui_models.streamline__checkpoints": {"metadata": {"type": "VIEW", "schema": "STREAMLINE", "name": "CHECKPOINTS", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.streamline__checkpoints"}, "model.sui_models.bronze__complete_token_asset_metadata": {"metadata": {"type": "VIEW", "schema": "BRONZE", "name": "COMPLETE_TOKEN_ASSET_METADATA", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"TOKEN_ADDRESS": {"type": "TEXT", "index": 1, "name": "TOKEN_ADDRESS", "comment": ""}, "ASSET_ID": {"type": "TEXT", "index": 2, "name": "ASSET_ID", "comment": ""}, "SYMBOL": {"type": "TEXT", "index": 3, "name": "SYMBOL", "comment": ""}, "NAME": {"type": "TEXT", "index": 4, "name": "NAME", "comment": ""}, "DECIMALS": {"type": "NUMBER", "index": 5, "name": "DECIMALS", "comment": ""}, "BLOCKCHAIN": {"type": "TEXT", "index": 6, "name": "BLOCKCHAIN", "comment": ""}, "BLOCKCHAIN_NAME": {"type": "TEXT", "index": 7, "name": "BLOCKCHAIN_NAME", "comment": ""}, "BLOCKCHAIN_ID": {"type": "TEXT", "index": 8, "name": "BLOCKCHAIN_ID", "comment": ""}, "IS_DEPRECATED": {"type": "BOOLEAN", "index": 9, "name": "IS_DEPRECATED", "comment": ""}, "IS_VERIFIED": {"type": "BOOLEAN", "index": 10, "name": "IS_VERIFIED", "comment": ""}, "PROVIDER": {"type": "TEXT", "index": 11, "name": "PROVIDER", "comment": ""}, "SOURCE": {"type": "TEXT", "index": 12, "name": "SOURCE", "comment": ""}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 13, "name": "_INSERTED_TIMESTAMP", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 14, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 15, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "COMPLETE_TOKEN_ASSET_METADATA_ID": {"type": "TEXT", "index": 16, "name": "COMPLETE_TOKEN_ASSET_METADATA_ID", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 17, "name": "_INVOCATION_ID", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.bronze__complete_token_asset_metadata"}, "model.sui_models.streamline__chainhead": {"metadata": {"type": "VIEW", "schema": "STREAMLINE", "name": "CHAINHEAD", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.streamline__chainhead"}, "model.sui_models.bronze__transactions_FR": {"metadata": {"type": "VIEW", "schema": "BRONZE", "name": "TRANSACTIONS_FR", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"VALUE": {"type": "VARIANT", "index": 1, "name": "VALUE", "comment": ""}, "PARTITION_KEY": {"type": "NUMBER", "index": 2, "name": "PARTITION_KEY", "comment": ""}, "METADATA": {"type": "VARIANT", "index": 3, "name": "METADATA", "comment": ""}, "DATA": {"type": "VARIANT", "index": 4, "name": "DATA", "comment": ""}, "FILE_NAME": {"type": "TEXT", "index": 5, "name": "FILE_NAME", "comment": ""}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 6, "name": "_INSERTED_TIMESTAMP", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.bronze__transactions_FR"}, "model.sui_models.core__ez_transfers": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "EZ_TRANSFERS", "database": "SUI", "comment": "Enhanced fact table providing user-friendly transfer analytics by joining core transfer data with token metadata. Each row represents a single transfer event enriched with normalized amounts (decimal-adjusted), token symbols, and human-readable identifiers. Serves as the primary table for transfer analysis, portfolio tracking, and user-facing applications by converting raw blockchain amounts into meaningful values. The amount_normalized field automatically applies decimal precision adjustments based on token metadata, enabling direct comparison across different token types and simplifying balance calculations. Includes all transfer metadata from the base fact table while adding token symbols for easy identification and normalized amounts for accurate financial analysis. Essential for dashboards, reporting tools, and analytics workflows that require human-readable token information and precise decimal calculations.", "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'."}, "TX_DIGEST": {"type": "TEXT", "index": 3, "name": "TX_DIGEST", "comment": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'."}, "BALANCE_CHANGE_INDEX": {"type": "NUMBER", "index": 4, "name": "BALANCE_CHANGE_INDEX", "comment": "Zero-based index ordering balance changes within a transaction. Tracks the sequence of balance modifications for accurate financial analysis and reconciliation. Example: 0."}, "TX_SUCCEEDED": {"type": "BOOLEAN", "index": 5, "name": "TX_SUCCEEDED", "comment": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true."}, "TX_SENDER": {"type": "TEXT", "index": 6, "name": "TX_SENDER", "comment": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'."}, "SENDER": {"type": "TEXT", "index": 7, "name": "SENDER", "comment": "Sui address (32-byte hex) representing the transaction or event sender. Used for authorization, security analysis, and user activity tracking. Example: '0xabc123...'."}, "RECEIVER": {"type": "TEXT", "index": 8, "name": "RECEIVER", "comment": "Sui address (32-byte hex) representing the transaction or event receiver. Used for tracking destination addresses, transfer flows, and recipient analytics. In transfer contexts, this is the address receiving tokens or assets. Example: '0xdef456...'."}, "COIN_TYPE": {"type": "TEXT", "index": 9, "name": "COIN_TYPE", "comment": "Fully qualified Move type identifier for coins/tokens. Format: {package}::{module}::{struct}. Example: '0x2::sui::SUI' for native SUI token. Essential for DeFi analytics, token classification, and cross-asset analysis."}, "SYMBOL": {"type": "TEXT", "index": 10, "name": "SYMBOL", "comment": "Short string symbol for the token (e.g., 'SUI', 'USDC'). Used for user-friendly token identification, UI display, and analytics grouping. Example: 'SUI'."}, "AMOUNT_RAW": {"type": "NUMBER", "index": 11, "name": "AMOUNT_RAW", "comment": "Token quantity in the smallest unit (MIST for SUI). Integer value; 1 SUI = 1,000,000,000 MIST. Used for precise financial calculations, balance tracking, and token flow analysis. Example: 1000000000."}, "AMOUNT": {"type": "FLOAT", "index": 12, "name": "AMOUNT", "comment": "Decimal-adjusted token amount calculated by dividing the raw amount by 10^decimals. Provides human-readable token quantities that can be directly compared across different token types. Essential for financial analysis, balance calculations, and user-facing applications where raw blockchain amounts need to be converted to meaningful values. Example: if amount is 1000000000 and decimals is 9, amount_normalized would be 1.0."}, "AMOUNT_USD": {"type": "FLOAT", "index": 13, "name": "AMOUNT_USD", "comment": "USD value of the amount at transaction time.\n\nExample: 1000.50"}, "TOKEN_IS_VERIFIED": {"type": "BOOLEAN", "index": 14, "name": "TOKEN_IS_VERIFIED", "comment": "Boolean flag indicating whether the token or price record is verified by Flipside's crosschain curation process. Verified tokens are prioritized for analytics and are considered reliable for most use cases. Unverified tokens may be incomplete, deprecated, or experimental."}, "EZ_TRANSFERS_ID": {"type": "TEXT", "index": 15, "name": "EZ_TRANSFERS_ID", "comment": "Surrogate key for the enhanced transfers table. Generated unique identifier by combining transaction digest and balance change index, ensuring each transfer event enriched with token metadata is uniquely addressable. Used as the primary key for user-friendly transfer analytics, dashboard queries, and cross-model joins. In Sui, this supports transfer analysis with normalized amounts and token symbols, enabling easy identification and comparison of token movements."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 16, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 17, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 9915224064, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:34UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 95367646, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.core__ez_transfers"}, "model.sui_models.silver_bridge__wormhole_inbound": {"metadata": {"type": "BASE TABLE", "schema": "SILVER_BRIDGE", "name": "WORMHOLE_INBOUND", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": ""}, "TX_DIGEST": {"type": "TEXT", "index": 2, "name": "TX_DIGEST", "comment": ""}, "TX_SENDER": {"type": "TEXT", "index": 3, "name": "TX_SENDER", "comment": ""}, "EVENT_INDEX": {"type": "NUMBER", "index": 4, "name": "EVENT_INDEX", "comment": ""}, "SOURCE_CHAIN": {"type": "NUMBER", "index": 5, "name": "SOURCE_CHAIN", "comment": ""}, "DESTINATION_CHAIN": {"type": "NUMBER", "index": 6, "name": "DESTINATION_CHAIN", "comment": ""}, "AMOUNT": {"type": "NUMBER", "index": 7, "name": "AMOUNT", "comment": ""}, "SOURCE_ADDRESS": {"type": "TEXT", "index": 8, "name": "SOURCE_ADDRESS", "comment": ""}, "DESTINATION_ADDRESS": {"type": "TEXT", "index": 9, "name": "DESTINATION_ADDRESS", "comment": ""}, "COIN_TYPE": {"type": "TEXT", "index": 10, "name": "COIN_TYPE", "comment": ""}, "BRIDGE_ADDRESS": {"type": "TEXT", "index": 11, "name": "BRIDGE_ADDRESS", "comment": ""}, "WORMHOLE_INBOUND_ID": {"type": "TEXT", "index": 12, "name": "WORMHOLE_INBOUND_ID", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 13, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 14, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 15, "name": "BLOCK_TIMESTAMP", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 16, "name": "_INVOCATION_ID", "comment": ""}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 1657856, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 13:21UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 12210, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(modified_timestamp::DATE, block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.silver_bridge__wormhole_inbound"}, "model.sui_models.price__ez_asset_metadata": {"metadata": {"type": "BASE TABLE", "schema": "PRICE", "name": "EZ_ASSET_METADATA", "database": "SUI", "comment": "A convenience table holding prioritized asset metadata and other relevant details pertaining to each token_address and native asset. This data set is highly curated and contains metadata for one unique asset per blockchain.", "owner": "DBT_CLOUD_SUI"}, "columns": {"TOKEN_ADDRESS": {"type": "TEXT", "index": 1, "name": "TOKEN_ADDRESS", "comment": "The specific address representing the asset on a specific platform. This will be NULL if referring to a native asset."}, "ASSET_ID": {"type": "TEXT", "index": 2, "name": "ASSET_ID", "comment": "The unique identifier representing the asset."}, "SYMBOL": {"type": "TEXT", "index": 3, "name": "SYMBOL", "comment": "The symbol of asset."}, "NAME": {"type": "TEXT", "index": 4, "name": "NAME", "comment": "The name of asset."}, "DECIMALS": {"type": "NUMBER", "index": 5, "name": "DECIMALS", "comment": "The number of decimals for the asset. May be NULL."}, "BLOCKCHAIN": {"type": "TEXT", "index": 6, "name": "BLOCKCHAIN", "comment": "The Blockchain, Network, or Platform for this asset."}, "IS_NATIVE": {"type": "BOOLEAN", "index": 7, "name": "IS_NATIVE", "comment": "A flag indicating assets native to the respective blockchain."}, "IS_DEPRECATED": {"type": "BOOLEAN", "index": 8, "name": "IS_DEPRECATED", "comment": "A flag indicating if the asset is deprecated or no longer supported by the provider."}, "TOKEN_IS_VERIFIED": {"type": "BOOLEAN", "index": 9, "name": "TOKEN_IS_VERIFIED", "comment": "Boolean flag indicating whether the token or price record is verified by Flipside's crosschain curation process. Verified tokens are prioritized for analytics and are considered reliable for most use cases. Unverified tokens may be incomplete, deprecated, or experimental."}, "EZ_ASSET_METADATA_ID": {"type": "TEXT", "index": 10, "name": "EZ_ASSET_METADATA_ID", "comment": "Unique identifier for the token metadata record, linking metadata to on-chain token types. Used for metadata management, registry operations, and analytics joins. Example: 'tokenmeta_123'."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 11, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 12, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 4552192, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:24UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 29805, "include": true, "description": "An approximate count of rows in this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.price__ez_asset_metadata"}, "model.sui_models.core__fact_transaction_inputs": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_TRANSACTION_INPUTS", "database": "SUI", "comment": "Fact table enumerating all inputs consumed by transactions on the Sui blockchain, including owned objects, shared objects, pure values, and input types. Each record details the object ID, version, mutability, and ownership at the time of transaction execution. Enables dependency analysis, resource utilization tracking, and validation of transaction atomicity. Supports analytics on input complexity, shared object usage, and transaction parallelism. Essential for understanding how Sui's object-centric model enables parallel execution and for tracing the full dependency graph of complex transactions.", "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'."}, "TX_DIGEST": {"type": "TEXT", "index": 3, "name": "TX_DIGEST", "comment": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'."}, "TX_KIND": {"type": "TEXT", "index": 4, "name": "TX_KIND", "comment": "The type of transaction executed. Values include 'Programmable Transaction Block' (PTB) for user-submitted transactions (up to 1,024 commands) and 'System Transaction' for validator/network operations. Determines execution path, available operations, and analytics grouping. Example: 'ProgrammableTransactionBlock'."}, "TX_SENDER": {"type": "TEXT", "index": 5, "name": "TX_SENDER", "comment": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'."}, "MESSAGE_VERSION": {"type": "TEXT", "index": 6, "name": "MESSAGE_VERSION", "comment": "The version of the transaction data structure, supporting protocol evolution and backward compatibility. Currently uses 'TransactionDataV1'. Ensures analytics remain robust across protocol upgrades. Example: '1'."}, "TX_SUCCEEDED": {"type": "BOOLEAN", "index": 7, "name": "TX_SUCCEEDED", "comment": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true."}, "INPUT_INDEX": {"type": "NUMBER", "index": 8, "name": "INPUT_INDEX", "comment": "Zero-based index referencing inputs within a programmable transaction block. Links commands to their inputs for dependency and resource usage analysis. Example: 0."}, "TYPE": {"type": "TEXT", "index": 9, "name": "TYPE", "comment": "Type/category of object state modification or event. Enum: created, modified, deleted, wrapped, unwrapped (for changes); event type string (for events). Used for lifecycle analysis and state transition tracking. Example: 'created'."}, "VERSION": {"type": "NUMBER", "index": 10, "name": "VERSION", "comment": "8-byte unsigned integer incremented with every object modification. Tracks mutation frequency and supports version-based conflict resolution. Initial value: 1. Example: 5."}, "OBJECT_ID": {"type": "TEXT", "index": 11, "name": "OBJECT_ID", "comment": "Globally unique 32-byte identifier for Sui objects. Hex string, primary key for object tracking, provenance, and asset history. Example: '0x1234abcd...'."}, "OBJECT_TYPE": {"type": "TEXT", "index": 12, "name": "OBJECT_TYPE", "comment": "Move type signature governing the object's structure and behavior. Format: {package}::{module}::{struct}<type_parameters>. Enables type-based classification and filtering. Example: '0x2::coin::Coin<0x2::sui::SUI>'."}, "DIGEST": {"type": "TEXT", "index": 13, "name": "DIGEST", "comment": "32-byte cryptographic hash (hex) of object contents, using SHA-256. Used for content verification, integrity checking, and unauthorized modification detection. Example: 'a1b2c3...'."}, "VALUE": {"type": "TEXT", "index": 14, "name": "VALUE", "comment": "Actual data content of the object or input value, encoded using Binary Canonical Serialization (BCS). Used for content analysis, debugging, and advanced analytics. Example: '0x010203...'."}, "VALUE_TYPE": {"type": "TEXT", "index": 15, "name": "VALUE_TYPE", "comment": "Move type of the object's value content or input value type. Fully qualified type name with generics, supporting type-safe deserialization and schema evolution. Example: '0x2::coin::Coin<0x2::sui::SUI>'."}, "INITIAL_SHARED_VERSION": {"type": "TEXT", "index": 16, "name": "INITIAL_SHARED_VERSION", "comment": "Version number at which an object was first shared. Nullable u64 (None for non-shared objects). Determines consensus requirements and helps analyze shared object contention. Example: 3."}, "MUTABLE": {"type": "BOOLEAN", "index": 17, "name": "MUTABLE", "comment": "Boolean flag indicating if the object can be modified. true = mutable, false = immutable. Affects performance, access patterns, and caching. Example: true."}, "FACT_TRANSACTION_INPUTS_ID": {"type": "TEXT", "index": 18, "name": "FACT_TRANSACTION_INPUTS_ID", "comment": "Surrogate key for the transaction inputs fact table. Generated unique identifier by combining transaction digest and input index, ensuring each input to a transaction is uniquely addressable. Supports dependency analysis, resource utilization tracking, and validation of transaction atomicity. In Sui, this enables detailed tracing of input objects, shared object usage, and parallel execution patterns."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 19, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 20, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 462686033920, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:32UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 5768754993, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.core__fact_transaction_inputs"}, "model.sui_models.silver__coin_types": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "COIN_TYPES", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"COIN_TYPE": {"type": "TEXT", "index": 1, "name": "COIN_TYPE", "comment": ""}, "COIN_TYPES_ID": {"type": "TEXT", "index": 2, "name": "COIN_TYPES_ID", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 3, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 4, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 5, "name": "_INVOCATION_ID", "comment": ""}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 4819968, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:33UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 41282, "include": true, "description": "An approximate count of rows in this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.silver__coin_types"}, "model.sui_models.core__fact_transaction_blocks": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_TRANSACTION_BLOCKS", "database": "SUI", "comment": "Fact table providing detailed metadata for every transaction block executed on the Sui blockchain. Includes transaction hash, sender, success status, gas usage, fee breakdowns, error codes, and dependency tracking. Serves as the primary source for transaction-level analytics, fee optimization, and network performance monitoring. Supports lineage tracing from transaction inputs to execution outcomes, including gas smashing, storage fee rebates, and error diagnostics. Critical for understanding Sui's transaction model, user behavior, and application performance at scale.", "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'."}, "TX_DIGEST": {"type": "TEXT", "index": 3, "name": "TX_DIGEST", "comment": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'."}, "TX_KIND": {"type": "TEXT", "index": 4, "name": "TX_KIND", "comment": "The type of transaction executed. Values include 'Programmable Transaction Block' (PTB) for user-submitted transactions (up to 1,024 commands) and 'System Transaction' for validator/network operations. Determines execution path, available operations, and analytics grouping. Example: 'ProgrammableTransactionBlock'."}, "TX_SENDER": {"type": "TEXT", "index": 5, "name": "TX_SENDER", "comment": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'."}, "MESSAGE_VERSION": {"type": "TEXT", "index": 6, "name": "MESSAGE_VERSION", "comment": "The version of the transaction data structure, supporting protocol evolution and backward compatibility. Currently uses 'TransactionDataV1'. Ensures analytics remain robust across protocol upgrades. Example: '1'."}, "TX_FEE": {"type": "FLOAT", "index": 7, "name": "TX_FEE", "comment": "Total gas fee paid for transaction execution, denominated in SUI tokens. Calculated as (computation_cost + storage_cost - storage_rebate) / 1e9. Used for economic modeling, fee optimization, and cost analysis. Example: 0.00123 (SUI)."}, "TX_SUCCEEDED": {"type": "BOOLEAN", "index": 8, "name": "TX_SUCCEEDED", "comment": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true."}, "TX_ERROR": {"type": "TEXT", "index": 9, "name": "TX_ERROR", "comment": "Error message and code if the transaction failed. Human-readable string with error details for diagnostics, debugging, and error pattern analysis. Example: 'MoveAbort: InsufficientBalance'."}, "TX_DEPENDENCIES": {"type": "VARIANT", "index": 10, "name": "TX_DEPENDENCIES", "comment": "Array of transaction digests that this transaction depends on for object versions. Establishes transaction ordering and causality, supporting dependency analysis and complex flow tracing. Example: ['6Qk8...9Xz', '7Yl2...3Ab']."}, "GAS_USED_COMPUTATION_FEE": {"type": "NUMBER", "index": 11, "name": "GAS_USED_COMPUTATION_FEE", "comment": "Total computation cost in MIST units (1 SUI = 1e9 MIST) for executing the transaction. Calculated as computation_units * gas_price. Used for analyzing transaction complexity and validator workload. Example: 1000000."}, "GAS_USED_NON_REFUNDABLE_STORAGE_FEE": {"type": "NUMBER", "index": 12, "name": "GAS_USED_NON_REFUNDABLE_STORAGE_FEE", "comment": "Portion of storage fees (in MIST) that cannot be reclaimed, ensuring storage fund sustainability. Calculated as storage_units * storage_price * 0.01. Used for economic modeling and storage fund analysis. Example: 10000."}, "GAS_USED_STORAGE_FEE": {"type": "NUMBER", "index": 13, "name": "GAS_USED_STORAGE_FEE", "comment": "Total cost (in MIST) for storing data on-chain. Calculated as storage_units * storage_price. Users pay this upfront for perpetual storage. Used for storage analytics and cost modeling. Example: 500000."}, "GAS_USED_STORAGE_REBATE": {"type": "NUMBER", "index": 14, "name": "GAS_USED_STORAGE_REBATE", "comment": "Refund amount (in MIST) when previously stored data is deleted. Calculated as original_storage_fee * 0.99. Incentivizes data cleanup and efficient storage usage. Example: 495000."}, "GAS_PRICE": {"type": "NUMBER", "index": 15, "name": "GAS_PRICE", "comment": "User-submitted price per computation unit (in MIST). Structure: reference_gas_price + optional tip. Determines transaction priority and total cost. Used for fee market analysis and optimization. Example: 1000."}, "GAS_BUDGET": {"type": "NUMBER", "index": 16, "name": "GAS_BUDGET", "comment": "Maximum amount (in MIST) user is willing to pay for transaction execution. Protects users from excessive fees. Minimum: 2,000 MIST, Maximum: 50,000,000,000 MIST. Used for transaction planning and cost control. Example: 1000000."}, "GAS_OWNER": {"type": "TEXT", "index": 17, "name": "GAS_OWNER", "comment": "Sui address responsible for paying gas fees. Enables sponsored transactions (third-party gas payment). Used for payment model analytics and gasless UX studies. Example: '0xabc123...'."}, "FACT_TRANSACTION_BLOCKS_ID": {"type": "TEXT", "index": 18, "name": "FACT_TRANSACTION_BLOCKS_ID", "comment": "Surrogate key for the transaction blocks fact table. Generated unique identifier based on transaction digest, providing a one-to-one mapping to each transaction block. Enables efficient transaction-level analysis, performance monitoring, and lineage tracing from transaction inputs to execution outcomes. In Sui, this is critical for understanding transaction dependencies, gas usage, and execution results at scale."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 19, "name": "INSERTED_TIMESTAMP", "comment": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 20, "name": "MODIFIED_TIMESTAMP", "comment": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 167739091968, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:32UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 838935292, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.core__fact_transaction_blocks"}, "model.sui_models.streamline__transactions_realtime": {"metadata": {"type": "VIEW", "schema": "STREAMLINE", "name": "TRANSACTIONS_REALTIME", "database": "SUI", "comment": null, "owner": "DBT_CLOUD_SUI"}, "columns": {"CHECKPOINT_NUMBER": {"type": "NUMBER", "index": 1, "name": "CHECKPOINT_NUMBER", "comment": ""}, "TX_COUNT_IN_REQUEST": {"type": "NUMBER", "index": 2, "name": "TX_COUNT_IN_REQUEST", "comment": ""}, "BLOCK_TIMESTAMP": {"type": "TEXT", "index": 3, "name": "BLOCK_TIMESTAMP", "comment": ""}, "PARTITION_KEY": {"type": "NUMBER", "index": 4, "name": "PARTITION_KEY", "comment": ""}, "REQUEST": {"type": "VARIANT", "index": 5, "name": "REQUEST", "comment": ""}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "model.sui_models.streamline__transactions_realtime"}}, "sources": {"source.livequery_models.crosschain.dim_evm_event_abis": {"metadata": {"type": "VIEW", "schema": "CORE", "name": "DIM_EVM_EVENT_ABIS", "database": "CROSSCHAIN_DEV", "comment": "This table contains the individual event abis for each all contracts that we have ABIs for. Proxies are rolled up to their implementation.", "owner": "INTERNAL_DEV"}, "columns": {"BLOCKCHAIN": {"type": "TEXT", "index": 1, "name": "BLOCKCHAIN", "comment": "The blockchain that the event abi is for."}, "PARENT_CONTRACT_ADDRESS": {"type": "TEXT", "index": 2, "name": "PARENT_CONTRACT_ADDRESS", "comment": "The address of the contract that the event abi is for."}, "EVENT_NAME": {"type": "TEXT", "index": 3, "name": "EVENT_NAME", "comment": "The name of the event."}, "ABI": {"type": "VARIANT", "index": 4, "name": "ABI", "comment": "The abi of the event."}, "SIMPLE_EVENT_NAME": {"type": "TEXT", "index": 5, "name": "SIMPLE_EVENT_NAME", "comment": "The name of the event along with its parameters."}, "EVENT_SIGNATURE": {"type": "TEXT", "index": 6, "name": "EVENT_SIGNATURE", "comment": "The keccak256 signature of the simple event name. This can be used to filter for events in the logs table on topics[0]."}, "START_BLOCK": {"type": "NUMBER", "index": 7, "name": "START_BLOCK", "comment": "The block number of the creation of the contract containing the event. This could be from a proxy or an implementation."}, "END_BLOCK": {"type": "NUMBER", "index": 8, "name": "END_BLOCK", "comment": "The block number before a similar event was created in the contract. This could be from a proxy or an implementation."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 9, "name": "INSERTED_TIMESTAMP", "comment": "The utc timestamp at which the row was inserted into the table."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 10, "name": "MODIFIED_TIMESTAMP", "comment": "The utc timestamp at which the row was last modified."}, "DIM_EVM_EVENT_ABIS_ID": {"type": "TEXT", "index": 11, "name": "DIM_EVM_EVENT_ABIS_ID", "comment": "The unique identifier for each row in the table."}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.livequery_models.crosschain.dim_evm_event_abis"}, "source.livequery_models.crosschain.dim_date_hours": {"metadata": {"type": "VIEW", "schema": "CORE", "name": "DIM_DATE_HOURS", "database": "CROSSCHAIN_DEV", "comment": "Hold rows for each hour from 2017 to current timestamp (UTC)", "owner": "INTERNAL_DEV"}, "columns": {"DATE_HOUR": {"type": "TIMESTAMP_NTZ", "index": 1, "name": "DATE_HOUR", "comment": "Specific hour of a given date"}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.livequery_models.crosschain.dim_date_hours"}, "source.livequery_models.crosschain.dim_contracts": {"metadata": {"type": "VIEW", "schema": "CORE", "name": "DIM_CONTRACTS", "database": "CROSSCHAIN_DEV", "comment": "This table contains contract details for contracts deployed on the Ethereum, Optimism, Polygon, BSC, Arbitrum, Avalanche, Osmosis and Solana blockchains.", "owner": "INTERNAL_DEV"}, "columns": {"ADDRESS": {"type": "TEXT", "index": 1, "name": "ADDRESS", "comment": "The unique address of the deployed contract."}, "SYMBOL": {"type": "TEXT", "index": 2, "name": "SYMBOL", "comment": "The symbol used to represent this contract. Please note this is not necessarily unique."}, "NAME": {"type": "TEXT", "index": 3, "name": "NAME", "comment": "The name of the deployed contract. Please note this is not necessarily unique."}, "DECIMALS": {"type": "NUMBER", "index": 4, "name": "DECIMALS", "comment": "The number of decimal places this contract needs adjusted where token values exist."}, "CREATED_BLOCK_NUMBER": {"type": "NUMBER", "index": 5, "name": "CREATED_BLOCK_NUMBER", "comment": ""}, "CREATED_BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 6, "name": "CREATED_BLOCK_TIMESTAMP", "comment": ""}, "CREATED_TX_HASH": {"type": "TEXT", "index": 7, "name": "CREATED_TX_HASH", "comment": ""}, "CREATOR_ADDRESS": {"type": "TEXT", "index": 8, "name": "CREATOR_ADDRESS", "comment": ""}, "BLOCKCHAIN": {"type": "TEXT", "index": 9, "name": "BLOCKCHAIN", "comment": "The corresponding blockchain for contract details."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 10, "name": "INSERTED_TIMESTAMP", "comment": "The utc timestamp at which the row was inserted into the table."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 11, "name": "MODIFIED_TIMESTAMP", "comment": "The utc timestamp at which the row was last modified."}, "DIM_CONTRACTS_ID": {"type": "TEXT", "index": 12, "name": "DIM_CONTRACTS_ID", "comment": "The unique identifier for each row in the table."}}, "stats": {"has_stats": {"id": "has_stats", "label": "Has Stats?", "value": false, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.livequery_models.crosschain.dim_contracts"}, "source.sui_models.crosschain_silver.labels_combined": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "LABELS_COMBINED", "database": "CROSSCHAIN", "comment": null, "owner": "DBT_CLOUD_CROSSCHAIN"}, "columns": {"SYSTEM_CREATED_AT": {"type": "TIMESTAMP_LTZ", "index": 1, "name": "SYSTEM_CREATED_AT", "comment": ""}, "INSERT_DATE": {"type": "TIMESTAMP_LTZ", "index": 2, "name": "INSERT_DATE", "comment": "The date the label was inserted in the table"}, "BLOCKCHAIN": {"type": "TEXT", "index": 3, "name": "BLOCKCHAIN", "comment": "The name of the blockchain"}, "ADDRESS": {"type": "TEXT", "index": 4, "name": "ADDRESS", "comment": "Address that the label is for. This is the field that should be used to join other tables with labels."}, "CREATOR": {"type": "TEXT", "index": 5, "name": "CREATOR", "comment": "The name of the creator of the label"}, "LABEL_TYPE": {"type": "TEXT", "index": 6, "name": "LABEL_TYPE", "comment": "A high-level category describing the addresses main function or ownership"}, "LABEL_SUBTYPE": {"type": "TEXT", "index": 7, "name": "LABEL_SUBTYPE", "comment": "A sub-category nested within label type providing further detail"}, "ADDRESS_NAME": {"type": "TEXT", "index": 8, "name": "ADDRESS_NAME", "comment": "Name of the address"}, "PROJECT_NAME": {"type": "TEXT", "index": 9, "name": "PROJECT_NAME", "comment": "Name of the controlling entity of the address"}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 10, "name": "INSERTED_TIMESTAMP", "comment": "The utc timestamp at which the row was inserted into the table."}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 11, "name": "MODIFIED_TIMESTAMP", "comment": "The utc timestamp at which the row was last modified."}, "LABELS_COMBINED_ID": {"type": "TEXT", "index": 12, "name": "LABELS_COMBINED_ID", "comment": "The unique identifier for each row in the table."}, "SOURCE": {"type": "TEXT", "index": 13, "name": "SOURCE", "comment": ""}, "_IS_DELETED": {"type": "BOOLEAN", "index": 14, "name": "_IS_DELETED", "comment": ""}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 32451813888, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 02:46UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 762208654, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(blockchain, _is_deleted, modified_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.sui_models.crosschain_silver.labels_combined"}, "source.sui_models.crosschain.dim_dates": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "DIM_DATES", "database": "CROSSCHAIN", "comment": "Hold rows for each date from 2017 - 2030", "owner": "DBT_CLOUD_CROSSCHAIN"}, "columns": {"DATE_DAY": {"type": "DATE", "index": 1, "name": "DATE_DAY", "comment": "date for the row"}, "PRIOR_DATE_DAY": {"type": "DATE", "index": 2, "name": "PRIOR_DATE_DAY", "comment": "date before DATE_DAY"}, "NEXT_DATE_DAY": {"type": "DATE", "index": 3, "name": "NEXT_DATE_DAY", "comment": "date after DATE_DAY"}, "PRIOR_YEAR_DATE_DAY": {"type": "DATE", "index": 4, "name": "PRIOR_YEAR_DATE_DAY", "comment": "date exactly 1 year before DATE_DAY"}, "PRIOR_YEAR_OVER_YEAR_DATE_DAY": {"type": "DATE", "index": 5, "name": "PRIOR_YEAR_OVER_YEAR_DATE_DAY", "comment": "date exactly 1 year after DATE_DAY"}, "DAY_OF_WEEK": {"type": "NUMBER", "index": 6, "name": "DAY_OF_WEEK", "comment": "number representing day of week for DATE_DAY where 1=Sunday"}, "DAY_OF_WEEK_ISO": {"type": "NUMBER", "index": 7, "name": "DAY_OF_WEEK_ISO", "comment": "number representing day of week for DATE_DAY where 1=Monday"}, "DAY_OF_WEEK_NAME": {"type": "TEXT", "index": 8, "name": "DAY_OF_WEEK_NAME", "comment": "day of week name for DATE_DAY"}, "DAY_OF_WEEK_NAME_SHORT": {"type": "TEXT", "index": 9, "name": "DAY_OF_WEEK_NAME_SHORT", "comment": "day of week abbreviation for DATE_DAY"}, "DAY_OF_MONTH": {"type": "NUMBER", "index": 10, "name": "DAY_OF_MONTH", "comment": "day of month for DATE_DAY"}, "DAY_OF_YEAR": {"type": "NUMBER", "index": 11, "name": "DAY_OF_YEAR", "comment": "day of year for DATE_DAY"}, "WEEK_START_DATE": {"type": "DATE", "index": 12, "name": "WEEK_START_DATE", "comment": "date representing the start of the week for DATE_DAY"}, "WEEK_END_DATE": {"type": "DATE", "index": 13, "name": "WEEK_END_DATE", "comment": "date representing the end of the week for DATE_DAY"}, "PRIOR_YEAR_WEEK_START_DATE": {"type": "DATE", "index": 14, "name": "PRIOR_YEAR_WEEK_START_DATE", "comment": "date representing the start of the week for PRIOR_YEAR_DATE_DAY"}, "PRIOR_YEAR_WEEK_END_DATE": {"type": "DATE", "index": 15, "name": "PRIOR_YEAR_WEEK_END_DATE", "comment": "date representing the end of the week for PRIOR_YEAR_DATE_DAY"}, "WEEK_OF_YEAR": {"type": "NUMBER", "index": 16, "name": "WEEK_OF_YEAR", "comment": "number representing the week of the year for DATE_DAY"}, "ISO_WEEK_START_DATE": {"type": "DATE", "index": 17, "name": "ISO_WEEK_START_DATE", "comment": "ISO date representing the start of the week for DATE_DAY"}, "ISO_WEEK_END_DATE": {"type": "DATE", "index": 18, "name": "ISO_WEEK_END_DATE", "comment": "ISO date representing the end of the week for DATE_DAY"}, "PRIOR_YEAR_ISO_WEEK_START_DATE": {"type": "DATE", "index": 19, "name": "PRIOR_YEAR_ISO_WEEK_START_DATE", "comment": "ISO date representing the start of the week for PRIOR_YEAR_DATE_DAY"}, "PRIOR_YEAR_ISO_WEEK_END_DATE": {"type": "DATE", "index": 20, "name": "PRIOR_YEAR_ISO_WEEK_END_DATE", "comment": "ISO date representing the end of the week for PRIOR_YEAR_DATE_DAY"}, "ISO_WEEK_OF_YEAR": {"type": "NUMBER", "index": 21, "name": "ISO_WEEK_OF_YEAR", "comment": "number representing the ISO week of the year for DATE_DAY"}, "PRIOR_YEAR_WEEK_OF_YEAR": {"type": "NUMBER", "index": 22, "name": "PRIOR_YEAR_WEEK_OF_YEAR", "comment": "number representing the week of the year for PRIOR_YEAR_DATE_DAY"}, "PRIOR_YEAR_ISO_WEEK_OF_YEAR": {"type": "NUMBER", "index": 23, "name": "PRIOR_YEAR_ISO_WEEK_OF_YEAR", "comment": "number representing the ISO week of the year for PRIOR_YEAR_DATE_DAY"}, "MONTH_OF_YEAR": {"type": "NUMBER", "index": 24, "name": "MONTH_OF_YEAR", "comment": "number representing the month of the year for DATE_DAY"}, "MONTH_NAME": {"type": "TEXT", "index": 25, "name": "MONTH_NAME", "comment": "month of year name for DATE_DAY"}, "MONTH_NAME_SHORT": {"type": "TEXT", "index": 26, "name": "MONTH_NAME_SHORT", "comment": "month of year abbreviation for DATE_DAY"}, "MONTH_START_DATE": {"type": "DATE", "index": 27, "name": "MONTH_START_DATE", "comment": "first date of month for DATE_DAY"}, "MONTH_END_DATE": {"type": "DATE", "index": 28, "name": "MONTH_END_DATE", "comment": "last date of month for DATE_DAY"}, "PRIOR_YEAR_MONTH_START_DATE": {"type": "DATE", "index": 29, "name": "PRIOR_YEAR_MONTH_START_DATE", "comment": "first date of month for PRIOR_YEAR_DATE_DAY"}, "PRIOR_YEAR_MONTH_END_DATE": {"type": "DATE", "index": 30, "name": "PRIOR_YEAR_MONTH_END_DATE", "comment": "last date of month for PRIOR_YEAR_DATE_DAY"}, "QUARTER_OF_YEAR": {"type": "NUMBER", "index": 31, "name": "QUARTER_OF_YEAR", "comment": "number representing quarter for DATE_DAY"}, "QUARTER_START_DATE": {"type": "DATE", "index": 32, "name": "QUARTER_START_DATE", "comment": "first date of quarter for DATE_DAY"}, "QUARTER_END_DATE": {"type": "DATE", "index": 33, "name": "QUARTER_END_DATE", "comment": "last date of quarter for DATE_DAY"}, "YEAR_NUMBER": {"type": "NUMBER", "index": 34, "name": "YEAR_NUMBER", "comment": "number presenting the year for DATE_DAY"}, "YEAR_START_DATE": {"type": "DATE", "index": 35, "name": "YEAR_START_DATE", "comment": "first date of year for DATE_DAY"}, "YEAR_END_DATE": {"type": "DATE", "index": 36, "name": "YEAR_END_DATE", "comment": "last date of year for DATE_DAY"}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 313856, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-01-12 01:06UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 8034, "include": true, "description": "An approximate count of rows in this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.sui_models.crosschain.dim_dates"}, "source.sui_models.crosschain_silver.number_sequence": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "NUMBER_SEQUENCE", "database": "CROSSCHAIN", "comment": null, "owner": "DBT_CLOUD_CROSSCHAIN"}, "columns": {"_ID": {"type": "NUMBER", "index": 1, "name": "_ID", "comment": null}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 1008582144, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-01-13 08:28UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 1000000000, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(round(_id,-3))", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.sui_models.crosschain_silver.number_sequence"}, "source.sui_models.crosschain_silver.complete_token_asset_metadata": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "COMPLETE_TOKEN_ASSET_METADATA", "database": "CROSSCHAIN", "comment": null, "owner": "DBT_CLOUD_CROSSCHAIN"}, "columns": {"TOKEN_ADDRESS": {"type": "TEXT", "index": 1, "name": "TOKEN_ADDRESS", "comment": ""}, "ASSET_ID": {"type": "TEXT", "index": 2, "name": "ASSET_ID", "comment": ""}, "SYMBOL": {"type": "TEXT", "index": 3, "name": "SYMBOL", "comment": ""}, "NAME": {"type": "TEXT", "index": 4, "name": "NAME", "comment": ""}, "DECIMALS": {"type": "NUMBER", "index": 5, "name": "DECIMALS", "comment": ""}, "BLOCKCHAIN": {"type": "TEXT", "index": 6, "name": "BLOCKCHAIN", "comment": ""}, "BLOCKCHAIN_NAME": {"type": "TEXT", "index": 7, "name": "BLOCKCHAIN_NAME", "comment": ""}, "BLOCKCHAIN_ID": {"type": "TEXT", "index": 8, "name": "BLOCKCHAIN_ID", "comment": ""}, "IS_DEPRECATED": {"type": "BOOLEAN", "index": 9, "name": "IS_DEPRECATED", "comment": ""}, "PROVIDER": {"type": "TEXT", "index": 10, "name": "PROVIDER", "comment": ""}, "SOURCE": {"type": "TEXT", "index": 11, "name": "SOURCE", "comment": ""}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 12, "name": "_INSERTED_TIMESTAMP", "comment": ""}, "IS_VERIFIED": {"type": "BOOLEAN", "index": 13, "name": "IS_VERIFIED", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 14, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 15, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "COMPLETE_TOKEN_ASSET_METADATA_ID": {"type": "TEXT", "index": 16, "name": "COMPLETE_TOKEN_ASSET_METADATA_ID", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 17, "name": "_INVOCATION_ID", "comment": ""}, "IS_VERIFIED_MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 19, "name": "IS_VERIFIED_MODIFIED_TIMESTAMP", "comment": ""}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 1700552704, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:42UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 19985067, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(blockchain)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.sui_models.crosschain_silver.complete_token_asset_metadata"}, "source.sui_models.crosschain_silver.complete_token_prices": {"metadata": {"type": "BASE TABLE", "schema": "SILVER", "name": "COMPLETE_TOKEN_PRICES", "database": "CROSSCHAIN", "comment": null, "owner": "DBT_CLOUD_CROSSCHAIN"}, "columns": {"HOUR": {"type": "TIMESTAMP_NTZ", "index": 1, "name": "HOUR", "comment": ""}, "TOKEN_ADDRESS": {"type": "TEXT", "index": 2, "name": "TOKEN_ADDRESS", "comment": ""}, "ASSET_ID": {"type": "TEXT", "index": 3, "name": "ASSET_ID", "comment": ""}, "SYMBOL": {"type": "TEXT", "index": 4, "name": "SYMBOL", "comment": ""}, "NAME": {"type": "TEXT", "index": 5, "name": "NAME", "comment": ""}, "DECIMALS": {"type": "NUMBER", "index": 6, "name": "DECIMALS", "comment": ""}, "PRICE": {"type": "FLOAT", "index": 7, "name": "PRICE", "comment": ""}, "BLOCKCHAIN": {"type": "TEXT", "index": 8, "name": "BLOCKCHAIN", "comment": ""}, "BLOCKCHAIN_NAME": {"type": "TEXT", "index": 9, "name": "BLOCKCHAIN_NAME", "comment": ""}, "BLOCKCHAIN_ID": {"type": "TEXT", "index": 10, "name": "BLOCKCHAIN_ID", "comment": ""}, "IS_IMPUTED": {"type": "BOOLEAN", "index": 11, "name": "IS_IMPUTED", "comment": ""}, "IS_DEPRECATED": {"type": "BOOLEAN", "index": 12, "name": "IS_DEPRECATED", "comment": ""}, "PROVIDER": {"type": "TEXT", "index": 13, "name": "PROVIDER", "comment": ""}, "SOURCE": {"type": "TEXT", "index": 14, "name": "SOURCE", "comment": ""}, "_INSERTED_TIMESTAMP": {"type": "TIMESTAMP_LTZ", "index": 15, "name": "_INSERTED_TIMESTAMP", "comment": ""}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 16, "name": "INSERTED_TIMESTAMP", "comment": ""}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 17, "name": "MODIFIED_TIMESTAMP", "comment": ""}, "COMPLETE_TOKEN_PRICES_ID": {"type": "TEXT", "index": 18, "name": "COMPLETE_TOKEN_PRICES_ID", "comment": ""}, "_INVOCATION_ID": {"type": "TEXT", "index": 19, "name": "_INVOCATION_ID", "comment": ""}, "IS_VERIFIED": {"type": "BOOLEAN", "index": 21, "name": "IS_VERIFIED", "comment": ""}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 45408205824, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 16:52UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 980225253, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(hour::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.sui_models.crosschain_silver.complete_token_prices"}, "source.sui_models.bronze_streamline.transactions": {"metadata": {"type": "EXTERNAL TABLE", "schema": "SUI", "name": "TRANSACTIONS", "database": "STREAMLINE", "comment": null, "owner": "STREAMLINE_SNOWFLAKE"}, "columns": {"VALUE": {"type": "VARIANT", "index": 1, "name": "VALUE", "comment": "The value of this row"}, "PARTITION_KEY": {"type": "NUMBER", "index": 2, "name": "PARTITION_KEY", "comment": null}, "METADATA": {"type": "VARIANT", "index": 3, "name": "METADATA", "comment": null}, "DATA": {"type": "VARIANT", "index": 4, "name": "DATA", "comment": null}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 3077756803726, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.sui_models.bronze_streamline.transactions"}, "source.sui_models.bronze_streamline.checkpoints": {"metadata": {"type": "EXTERNAL TABLE", "schema": "SUI", "name": "CHECKPOINTS", "database": "STREAMLINE", "comment": null, "owner": "STREAMLINE_SNOWFLAKE"}, "columns": {"VALUE": {"type": "VARIANT", "index": 1, "name": "VALUE", "comment": "The value of this row"}, "PARTITION_KEY": {"type": "NUMBER", "index": 2, "name": "PARTITION_KEY", "comment": null}, "METADATA": {"type": "VARIANT", "index": 3, "name": "METADATA", "comment": null}, "DATA": {"type": "VARIANT", "index": 4, "name": "DATA", "comment": null}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 116503882948, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.sui_models.bronze_streamline.checkpoints"}, "source.livequery_models.ethereum_core.ez_decoded_event_logs": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "EZ_DECODED_EVENT_LOGS", "database": "ETHEREUM_DEV", "comment": "## What\n\nThis table provides human-readable decoded event data for smart contracts where ABIs are available. It transforms raw hex-encoded logs into structured JSON with named parameters and values, making blockchain data immediately queryable without manual decoding.\n\n## Key Use Cases\n\n- Analyzing token transfers and approvals without manual decoding\n- Tracking DEX swaps and liquidity events with named parameters\n- Monitoring NFT transfers and marketplace activity\n- Querying DeFi protocol interactions (lending, staking, governance)\n- Building analytics on any smart contract with available ABIs\n\n## Important Relationships\n\n- **Join with fact_event_logs**: Use `tx_hash` and `event_index` for raw event data\n- **Join with dim_contracts**: Use `contract_address` for contract metadata\n- **Join with fact_transactions**: Use `tx_hash` for transaction context\n- **Cross-reference ez_token_transfers**: For simplified token movement data\n\n## Commonly-used Fields\n\n- `contract_address`: The smart contract that emitted the event\n- `event_name`: The event name from the contract ABI (e.g., Transfer, Swap)\n- `decoded_log`: JSON object with decoded parameter names and values\n- `contract_name`: Human-readable name of the contract\n- `block_timestamp`: When the event occurred\n- `tx_hash`: Transaction hash containing this event\n\n## Sample queries\n\n**ERC-20 Transfer Events with Proper Types**\n\n```sql\nSELECT \n    block_timestamp,\n    tx_hash,\n    contract_address,\n    contract_name,\n    event_name,\n    decoded_log:from::string AS from_address,\n    decoded_log:to::string AS to_address,\n    decoded_log:value::numeric AS amount,\n    -- Convert to decimal (assuming 18 decimals)\n    decoded_log:value::numeric / POW(10, 18) AS amount_decimal\nFROM <blockchain_name>.core.ez_decoded_event_logs\nWHERE contract_address = LOWER('0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48') -- USDC\n    AND event_name = 'Transfer'\n    AND block_timestamp >= CURRENT_DATE - 7\n    AND decoded_log:value::numeric > 1000000000 -- Over 1000 USDC\nORDER BY block_timestamp DESC;\n```\n\n**Uniswap V3 Swap Events**\n\n```sql\nSELECT \n    block_timestamp,\n    tx_hash,\n    contract_address AS pool_address,\n    event_name,\n    decoded_log:sender::string AS sender,\n    decoded_log:recipient::string AS recipient,\n    decoded_log:amount0::numeric AS amount0,\n    decoded_log:amount1::numeric AS amount1,\n    decoded_log:sqrtPriceX96::numeric AS sqrt_price,\n    decoded_log:liquidity::numeric AS liquidity,\n    decoded_log:tick::integer AS tick\nFROM <blockchain_name>.core.ez_decoded_event_logs\nWHERE event_name = 'Swap'\n    AND contract_address IN (\n        SELECT address FROM dim_contracts \n        WHERE contract_name ILIKE '%Uniswap V3%'\n    )\n    AND block_timestamp >= CURRENT_DATE - 1\nLIMIT 100;\n```\n\n**NFT Transfer Events (ERC-721)**\n\n```sql\nSELECT \n    block_timestamp,\n    tx_hash,\n    contract_address,\n    contract_name AS collection_name,\n    decoded_log:from::string AS from_address,\n    decoded_log:to::string AS to_address,\n    decoded_log:tokenId::string AS token_id\nFROM <blockchain_name>.core.ez_decoded_event_logs\nWHERE event_name = 'Transfer'\n    AND decoded_log:tokenId IS NOT NULL  -- Indicates ERC-721\n    AND block_timestamp >= CURRENT_DATE - 1\nORDER BY block_timestamp DESC;\n```\n\n**DeFi Protocol Events - Compound Finance**\n\n```sql\nSELECT \n    DATE_TRUNC('day', block_timestamp) AS day,\n    event_name,\n    COUNT(*) AS event_count,\n    COUNT(DISTINCT decoded_log:minter::string) AS unique_users\nFROM <blockchain_name>.core.ez_decoded_event_logs\nWHERE contract_name ILIKE '%compound%'\n    AND event_name IN ('Mint', 'Redeem', 'Borrow', 'RepayBorrow')\n    AND block_timestamp >= CURRENT_DATE - 30\nGROUP BY 1, 2\nORDER BY 1 DESC, 3 DESC;\n```\n\n**Complex Event Analysis - DEX Aggregator Routes**\n\n```sql\nSELECT \n    block_timestamp,\n    tx_hash,\n    event_name,\n    decoded_log,\n    ARRAY_SIZE(decoded_log:path) AS swap_hops,\n    decoded_log:amountIn::numeric AS amount_in,\n    decoded_log:amountOutMin::numeric AS min_amount_out\nFROM <blockchain_name>.core.ez_decoded_event_logs\nWHERE contract_address = LOWER('0x1111111254fb6c44bAC0beD2854e76F90643097d') -- 1inch\n    AND event_name ILIKE '%swap%'\n    AND block_timestamp >= CURRENT_DATE - 1;\n```", "owner": "INTERNAL_DEV"}, "columns": {"BLOCK_NUMBER": {"type": "NUMBER", "index": 1, "name": "BLOCK_NUMBER", "comment": "Sequential counter representing the position of a block in the blockchain since genesis (block 0).\n\n**Key Facts**:\n- Immutable once finalized\n- Primary ordering mechanism for blockchain data\n- Increments by 1 for each new block\n- Used as a proxy for time in many analyses\n\n**Usage in Queries**:\n```sql\n-- Recent data\nWHERE block_number >= (SELECT MAX(block_number) - 1000 FROM fact_blocks)\n\n-- Historical analysis\nWHERE block_number BETWEEN 15000000 AND 16000000\n\n-- Join across tables\nJOIN <blockchain_name>.core.fact_event_logs USING (block_number)\n```\n\n**Important**: Block numbers are chain-specific. Block 15000000 on Ethereum \u2260 block 15000000 on Polygon."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "UTC timestamp when the block was produced by validators/miners.\n\n**Format**: TIMESTAMP_NTZ (no timezone)\n**Precision**: Second-level accuracy\n**Reliability**:\n- Set by block producer\n- Can have minor variations (\u00b115 seconds)\n- Always increasing (newer blocks = later timestamps)\n\n**Best Practices**:\n```sql\n-- Time-based filtering (most efficient)\nWHERE block_timestamp >= DATEADD('day', -7, CURRENT_TIMESTAMP)\n\n-- Hourly aggregations\nDATE_TRUNC('hour', block_timestamp) AS hour\n\n-- UTC date extraction\nDATE(block_timestamp) AS block_date\n```\n\n**Note**: Use for time-series analysis, but be aware that block production rates vary by chain."}, "TX_HASH": {"type": "TEXT", "index": 3, "name": "TX_HASH", "comment": "Unique 66-character identifier for the transaction.\n\n**Format**: 0x + 64 hexadecimal characters\n\n**Usage**:\n- Primary key for transaction lookups\n- Join key for traces, logs, and token transfers\n- Immutable once confirmed\n\n**Example**: `0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060`"}, "TX_POSITION": {"type": "NUMBER", "index": 4, "name": "TX_POSITION", "comment": "Zero-indexed position of transaction within its block.\n\n**Insights**:\n- Position 0: First transaction in block\n- MEV bots often target early positions\n- Bundle transactions appear consecutively\n- Useful for analyzing transaction ordering"}, "EVENT_INDEX": {"type": "NUMBER", "index": 5, "name": "EVENT_INDEX", "comment": "Zero-based sequential position of the event within a transaction's execution.\n\n**Key Facts**:\n- Starts at 0 for first event\n- Increments across all contracts in transaction\n- Preserves execution order\n- Essential for deterministic event ordering\n\n**Usage Example**:\n```sql\n-- Trace event execution flow\nSELECT \n    event_index,\n    contract_address,\n    topic_0,\n    SUBSTRING(data, 1, 10) AS data_preview\nFROM <blockchain_name>.core.fact_event_logs\nWHERE tx_hash = '0xabc...'\nORDER BY event_index;\n```"}, "CONTRACT_ADDRESS": {"type": "TEXT", "index": 6, "name": "CONTRACT_ADDRESS", "comment": "Smart contract address that emitted this event or received the transaction.\n\n**Key Points**:\n- Always the immediate event emitter for logs\n- May differ from transaction to_address\n- Lowercase normalized format\n- Never NULL for valid events"}, "TOPICS": {"type": "VARIANT", "index": 7, "name": "TOPICS", "comment": "Array containing all indexed parameters of the event.\n\nExample: ['0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', '0x0000000000000000000000001234567890123456789012345678901234567890']"}, "TOPIC_0": {"type": "TEXT", "index": 8, "name": "TOPIC_0", "comment": "Event signature hash - keccak256 of the event declaration.\n\nExample: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'"}, "TOPIC_1": {"type": "TEXT", "index": 9, "name": "TOPIC_1", "comment": "First indexed parameter of the event (if exists).\n\nExample: '0x0000000000000000000000001234567890123456789012345678901234567890'"}, "TOPIC_2": {"type": "TEXT", "index": 10, "name": "TOPIC_2", "comment": "Second indexed parameter of the event (if exists).\n\nExample: '0x000000000000000000000000abcdefabcdefabcdefabcdefabcdefabcdefabcd'"}, "TOPIC_3": {"type": "TEXT", "index": 11, "name": "TOPIC_3", "comment": "Third indexed parameter of the event (if exists).\n\nExample: '0x0000000000000000000000000000000000000000000000000000000000000001'"}, "DATA": {"type": "TEXT", "index": 12, "name": "DATA", "comment": "Hex-encoded non-indexed event parameters.\n\nExample: '0x0000000000000000000000000000000000000000000000000de0b6b3a7640000'"}, "EVENT_REMOVED": {"type": "BOOLEAN", "index": 13, "name": "EVENT_REMOVED", "comment": "Boolean flag indicating if the event was removed due to chain reorganization.\n\nExample: false"}, "ORIGIN_FROM_ADDRESS": {"type": "TEXT", "index": 14, "name": "ORIGIN_FROM_ADDRESS", "comment": "The externally-owned account (EOA) or contract address that initiated the transaction.\n\n**Key Points**:\n- Always 42 characters (0x + 40 hex chars)\n- Lowercase normalized in all tables\n- Cannot be NULL for valid transactions\n- For contract creation: sender of creation transaction\n\n**Common Patterns**:\n- EOA \u2192 EOA: Simple transfer\n- EOA \u2192 Contract: User interaction\n- Contract \u2192 Contract: Internal calls (see fact_traces)\n- Known addresses: Exchange hot wallets, protocol deployers\n\n**Query Examples**:\n```sql\n-- User activity analysis\nSELECT from_address, COUNT(*) as tx_count\nFROM <blockchain_name>.core.fact_transactions\nWHERE block_timestamp >= CURRENT_DATE - 30\nGROUP BY 1\nORDER BY 2 DESC;\n\n-- New user detection\nSELECT DISTINCT from_address\nFROM <blockchain_name>.core.fact_transactions t1\nWHERE NOT EXISTS (\n    SELECT 1 FROM <blockchain_name>.core.fact_transactions t2 \n    WHERE t2.from_address = t1.from_address \n    AND t2.block_number < t1.block_number\n);\n```"}, "ORIGIN_TO_ADDRESS": {"type": "TEXT", "index": 15, "name": "ORIGIN_TO_ADDRESS", "comment": "The destination address for the transaction - either an EOA or contract address.\n\n**Special Cases**:\n- NULL: Contract creation transaction\n- Contract address: Interacting with smart contract\n- EOA address: Simple transfer or receiving funds\n\n**Important Patterns**:\n```sql\n-- Contract deployments\nWHERE to_address IS NULL\n\n-- Popular contracts\nSELECT to_address, COUNT(*) as interactions\nFROM <blockchain_name>.core.fact_transactions\nWHERE to_address IS NOT NULL\nGROUP BY 1\nORDER BY 2 DESC;\n\n-- Direct transfers only\nWHERE to_address NOT IN (SELECT address FROM dim_contracts)\n```\n\n**Note**: For token transfers, this is the token contract, not the recipient. See ez_token_transfers tables for recipient."}, "ORIGIN_FUNCTION_SIGNATURE": {"type": "TEXT", "index": 16, "name": "ORIGIN_FUNCTION_SIGNATURE", "comment": "Function signature (first 4 bytes) of the called method.\n\n**Format**: 0x + 8 hex characters\n\n**Common Signatures**:\n- 0xa9059cbb: transfer(address,uint256)\n- 0x095ea7b3: approve(address,uint256)\n- 0x23b872dd: transferFrom(address,address,uint256)\n\n**Note**: NULL for simple transfers or invalid calls"}, "TX_SUCCEEDED": {"type": "BOOLEAN", "index": 17, "name": "TX_SUCCEEDED", "comment": "Boolean indicator of transaction success.\n\n**Values**:\n- TRUE: Transaction executed successfully\n- FALSE: Transaction failed/reverted"}, "EVENT_NAME": {"type": "TEXT", "index": 18, "name": "EVENT_NAME", "comment": "The event name as defined in the contract's ABI.\n\n**Format**: PascalCase event identifier\n**Examples**:\n- `Transfer` - Token transfers\n- `Swap` - DEX trades  \n- `OwnershipTransferred` - Admin changes\n- `Approval` - Token approvals\n\n**Usage Pattern**:\n\n```sql\n-- Find all event types for a contract\nSELECT DISTINCT event_name, COUNT(*) as occurrences\nFROM ez_decoded_event_logs\nWHERE contract_address = LOWER('0x...')\nGROUP BY 1\nORDER BY 2 DESC;\n```"}, "FULL_DECODED_LOG": {"type": "VARIANT", "index": 19, "name": "FULL_DECODED_LOG", "comment": "Complete decoded event data including parameter names, values, types, and metadata.\n\nExample: '{\"event_name\": \"Transfer\", \"parameters\": [{\"name\": \"from\", \"type\": \"address\", \"value\": \"0x123...\", \"indexed\": true}]}'"}, "DECODED_LOG": {"type": "OBJECT", "index": 20, "name": "DECODED_LOG", "comment": "Flattened JSON object containing decoded event parameters with their values.\n\nExample: '{\"from\": \"0x123...\", \"to\": \"0x456...\", \"value\": \"1000000000000000000\"}'"}, "CONTRACT_NAME": {"type": "TEXT", "index": 21, "name": "CONTRACT_NAME", "comment": "Human-readable name of the smart contract emitting the event, joined from dim_contracts.\n\nExample: 'USD Coin'"}, "EZ_DECODED_EVENT_LOGS_ID": {"type": "TEXT", "index": 22, "name": "EZ_DECODED_EVENT_LOGS_ID", "comment": "Primary key - unique identifier for each row ensuring data integrity.\n\n**Format**: Usually VARCHAR containing composite key generated using MD5 hash of the relevant columns.\n**Example**: MD5(block_number, tx_hash, trace_index)\n\n**Usage**:\n- Deduplication in incremental loads\n- Join operations for data quality checks\n- Troubleshooting specific records\n\n**Important**: Implementation varies by table - check table-specific documentation."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 23, "name": "INSERTED_TIMESTAMP", "comment": "UTC timestamp when the record was first added to the Flipside database.\n\n**Format**: TIMESTAMP_NTZ\n\n**Use Cases**:\n- Data freshness monitoring\n- Incremental processing markers\n- Debugging data pipeline issues\n- SLA tracking\n\n**Query Example**:\n```sql\n-- Check data latency\nSELECT \n    DATE_TRUNC('hour', block_timestamp) as block_hour,\n    DATE_TRUNC('hour', inserted_timestamp) as insert_hour,\n    AVG(TIMESTAMPDIFF('minute', block_timestamp, inserted_timestamp)) as avg_latency_minutes\nFROM <blockchain_name>.core.fact_transactions\nWHERE block_timestamp >= CURRENT_DATE - 1\nGROUP BY 1, 2;\n```"}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 24, "name": "MODIFIED_TIMESTAMP", "comment": "UTC timestamp of the most recent update to this record.\n\n**Format**: TIMESTAMP_NTZ\n\n**Triggers for Updates**:\n- Data corrections\n- Enrichment additions\n- Reprocessing for accuracy\n- Schema migrations\n\n**Monitoring Usage**:\n```sql\n-- Recently modified records\nSELECT *\nFROM <blockchain_name>.core.fact_transactions\nWHERE modified_timestamp > inserted_timestamp\nAND modified_timestamp >= CURRENT_DATE - 1;\n\n-- Data quality tracking\nSELECT \n    DATE(modified_timestamp) as mod_date,\n    COUNT(*) as records_updated,\n    COUNT(DISTINCT block_number) as blocks_affected\nFROM <blockchain_name>.core.fact_transactions\nWHERE modified_timestamp > inserted_timestamp\nGROUP BY 1\nORDER BY 1 DESC;\n```"}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 1203198484992, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 15:22UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 4703124399, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::date)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.livequery_models.ethereum_core.ez_decoded_event_logs"}, "source.livequery_models.ethereum_core.fact_event_logs": {"metadata": {"type": "BASE TABLE", "schema": "CORE", "name": "FACT_EVENT_LOGS", "database": "ETHEREUM_DEV", "comment": "## What\n\nThis table contains raw event logs emitted by smart contracts during transaction execution. Each row represents a single event with its topics and data. Events are the primary mechanism for smart contracts to communicate state changes and must be explicitly emitted in contract code.\n\n## Key Use Cases\n\n- Tracking raw blockchain events before decoding\n- Filtering events by signature (topic_0) for specific event types\n- Analyzing contract activity patterns and event frequencies\n- Building custom event decoders for unsupported contracts\n- Monitoring specific addresses via indexed parameters\n\n## Important Relationships\n\n- **Join with ez_decoded_event_logs**: Use `tx_hash` and `event_index` for simplified decoded data\n- **Join with fact_transactions**: Use `tx_hash` for transaction context\n- **Join with dim_contracts**: Use `contract_address` for contract metadata\n\n## Commonly-used Fields\n\n- `topic_0`: Event signature hash for filtering event types\n- `contract_address`: Smart contract that emitted the event\n- `topics`: Array of indexed parameters (max 4)\n- `data`: Hex-encoded non-indexed parameters\n- `event_index`: Sequential position within transaction\n- `tx_hash`: Transaction containing this event\n\n## Sample queries\n\n```sql\n-- Find all ERC-20 Transfer events in last 24 hours\nSELECT \n    block_timestamp,\n    tx_hash,\n    contract_address,\n    topics[1] AS from_address_padded,\n    topics[2] AS to_address_padded,\n    data AS amount_hex,\n    event_index\nFROM <blockchain_name>.core.fact_event_logs\nWHERE topic_0 = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n    AND ARRAY_SIZE(topics) = 3  -- ERC-20 has 3 topics\n    AND block_timestamp >= CURRENT_DATE - 1\nLIMIT 100;\n\n-- Most active contracts by event count\nSELECT \n    contract_address,\n    COUNT(*) AS event_count,\n    COUNT(DISTINCT tx_hash) AS unique_txs,\n    COUNT(DISTINCT topic_0) AS unique_event_types,\n    MIN(block_timestamp) AS first_seen,\n    MAX(block_timestamp) AS last_seen\nFROM <blockchain_name>.core.fact_event_logs\nWHERE block_timestamp >= CURRENT_DATE - 7\nGROUP BY 1\nORDER BY 2 DESC\nLIMIT 50;\n\n-- Event patterns within transactions\nSELECT \n    tx_hash,\n    COUNT(*) AS events_in_tx,\n    COUNT(DISTINCT contract_address) AS contracts_touched,\n    ARRAY_AGG(DISTINCT topic_0) AS event_signatures\nFROM <blockchain_name>.core.fact_event_logs\nWHERE block_timestamp >= CURRENT_DATE - 1\nGROUP BY 1\nHAVING COUNT(*) > 10\nORDER BY 2 DESC\nLIMIT 20;\n```", "owner": "INTERNAL_DEV"}, "columns": {"BLOCK_NUMBER": {"type": "NUMBER", "index": 1, "name": "BLOCK_NUMBER", "comment": "Sequential counter representing the position of a block in the blockchain since genesis (block 0).\n\n**Key Facts**:\n- Immutable once finalized\n- Primary ordering mechanism for blockchain data\n- Increments by 1 for each new block\n- Used as a proxy for time in many analyses\n\n**Usage in Queries**:\n```sql\n-- Recent data\nWHERE block_number >= (SELECT MAX(block_number) - 1000 FROM fact_blocks)\n\n-- Historical analysis\nWHERE block_number BETWEEN 15000000 AND 16000000\n\n-- Join across tables\nJOIN <blockchain_name>.core.fact_event_logs USING (block_number)\n```\n\n**Important**: Block numbers are chain-specific. Block 15000000 on Ethereum \u2260 block 15000000 on Polygon."}, "BLOCK_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 2, "name": "BLOCK_TIMESTAMP", "comment": "UTC timestamp when the block was produced by validators/miners.\n\n**Format**: TIMESTAMP_NTZ (no timezone)\n**Precision**: Second-level accuracy\n**Reliability**:\n- Set by block producer\n- Can have minor variations (\u00b115 seconds)\n- Always increasing (newer blocks = later timestamps)\n\n**Best Practices**:\n```sql\n-- Time-based filtering (most efficient)\nWHERE block_timestamp >= DATEADD('day', -7, CURRENT_TIMESTAMP)\n\n-- Hourly aggregations\nDATE_TRUNC('hour', block_timestamp) AS hour\n\n-- UTC date extraction\nDATE(block_timestamp) AS block_date\n```\n\n**Note**: Use for time-series analysis, but be aware that block production rates vary by chain."}, "TX_HASH": {"type": "TEXT", "index": 3, "name": "TX_HASH", "comment": "Unique 66-character identifier for the transaction.\n\n**Format**: 0x + 64 hexadecimal characters\n\n**Usage**:\n- Primary key for transaction lookups\n- Join key for traces, logs, and token transfers\n- Immutable once confirmed\n\n**Example**: `0x5c504ed432cb51138bcf09aa5e8a410dd4a1e204ef84bfed1be16dfba1b22060`"}, "TX_POSITION": {"type": "NUMBER", "index": 4, "name": "TX_POSITION", "comment": "Zero-indexed position of transaction within its block.\n\n**Insights**:\n- Position 0: First transaction in block\n- MEV bots often target early positions\n- Bundle transactions appear consecutively\n- Useful for analyzing transaction ordering"}, "EVENT_INDEX": {"type": "NUMBER", "index": 5, "name": "EVENT_INDEX", "comment": "Zero-based sequential position of the event within a transaction's execution.\n\n**Key Facts**:\n- Starts at 0 for first event\n- Increments across all contracts in transaction\n- Preserves execution order\n- Essential for deterministic event ordering\n\n**Usage Example**:\n```sql\n-- Trace event execution flow\nSELECT \n    event_index,\n    contract_address,\n    topic_0,\n    SUBSTRING(data, 1, 10) AS data_preview\nFROM <blockchain_name>.core.fact_event_logs\nWHERE tx_hash = '0xabc...'\nORDER BY event_index;\n```"}, "CONTRACT_ADDRESS": {"type": "TEXT", "index": 6, "name": "CONTRACT_ADDRESS", "comment": "Smart contract address that emitted this event or received the transaction.\n\n**Key Points**:\n- Always the immediate event emitter for logs\n- May differ from transaction to_address\n- Lowercase normalized format\n- Never NULL for valid events"}, "TOPICS": {"type": "VARIANT", "index": 7, "name": "TOPICS", "comment": "Array containing all indexed parameters of the event.\n\nExample: ['0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef', '0x0000000000000000000000001234567890123456789012345678901234567890']"}, "TOPIC_0": {"type": "TEXT", "index": 8, "name": "TOPIC_0", "comment": "Event signature hash - keccak256 of the event declaration.\n\nExample: '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'"}, "TOPIC_1": {"type": "TEXT", "index": 9, "name": "TOPIC_1", "comment": "First indexed parameter of the event (if exists).\n\nExample: '0x0000000000000000000000001234567890123456789012345678901234567890'"}, "TOPIC_2": {"type": "TEXT", "index": 10, "name": "TOPIC_2", "comment": "Second indexed parameter of the event (if exists).\n\nExample: '0x000000000000000000000000abcdefabcdefabcdefabcdefabcdefabcdefabcd'"}, "TOPIC_3": {"type": "TEXT", "index": 11, "name": "TOPIC_3", "comment": "Third indexed parameter of the event (if exists).\n\nExample: '0x0000000000000000000000000000000000000000000000000000000000000001'"}, "DATA": {"type": "TEXT", "index": 12, "name": "DATA", "comment": "Hex-encoded non-indexed event parameters.\n\nExample: '0x0000000000000000000000000000000000000000000000000de0b6b3a7640000'"}, "EVENT_REMOVED": {"type": "BOOLEAN", "index": 13, "name": "EVENT_REMOVED", "comment": "Boolean flag indicating if the event was removed due to chain reorganization.\n\nExample: false"}, "ORIGIN_FROM_ADDRESS": {"type": "TEXT", "index": 14, "name": "ORIGIN_FROM_ADDRESS", "comment": "The externally-owned account (EOA) or contract address that initiated the transaction.\n\n**Key Points**:\n- Always 42 characters (0x + 40 hex chars)\n- Lowercase normalized in all tables\n- Cannot be NULL for valid transactions\n- For contract creation: sender of creation transaction\n\n**Common Patterns**:\n- EOA \u2192 EOA: Simple transfer\n- EOA \u2192 Contract: User interaction\n- Contract \u2192 Contract: Internal calls (see fact_traces)\n- Known addresses: Exchange hot wallets, protocol deployers\n\n**Query Examples**:\n```sql\n-- User activity analysis\nSELECT from_address, COUNT(*) as tx_count\nFROM <blockchain_name>.core.fact_transactions\nWHERE block_timestamp >= CURRENT_DATE - 30\nGROUP BY 1\nORDER BY 2 DESC;\n\n-- New user detection\nSELECT DISTINCT from_address\nFROM <blockchain_name>.core.fact_transactions t1\nWHERE NOT EXISTS (\n    SELECT 1 FROM <blockchain_name>.core.fact_transactions t2 \n    WHERE t2.from_address = t1.from_address \n    AND t2.block_number < t1.block_number\n);\n```"}, "ORIGIN_TO_ADDRESS": {"type": "TEXT", "index": 15, "name": "ORIGIN_TO_ADDRESS", "comment": "The destination address for the transaction - either an EOA or contract address.\n\n**Special Cases**:\n- NULL: Contract creation transaction\n- Contract address: Interacting with smart contract\n- EOA address: Simple transfer or receiving funds\n\n**Important Patterns**:\n```sql\n-- Contract deployments\nWHERE to_address IS NULL\n\n-- Popular contracts\nSELECT to_address, COUNT(*) as interactions\nFROM <blockchain_name>.core.fact_transactions\nWHERE to_address IS NOT NULL\nGROUP BY 1\nORDER BY 2 DESC;\n\n-- Direct transfers only\nWHERE to_address NOT IN (SELECT address FROM dim_contracts)\n```\n\n**Note**: For token transfers, this is the token contract, not the recipient. See ez_token_transfers tables for recipient."}, "ORIGIN_FUNCTION_SIGNATURE": {"type": "TEXT", "index": 16, "name": "ORIGIN_FUNCTION_SIGNATURE", "comment": "Function signature (first 4 bytes) of the called method.\n\n**Format**: 0x + 8 hex characters\n\n**Common Signatures**:\n- 0xa9059cbb: transfer(address,uint256)\n- 0x095ea7b3: approve(address,uint256)\n- 0x23b872dd: transferFrom(address,address,uint256)\n\n**Note**: NULL for simple transfers or invalid calls"}, "TX_SUCCEEDED": {"type": "BOOLEAN", "index": 17, "name": "TX_SUCCEEDED", "comment": "Boolean indicator of transaction success.\n\n**Values**:\n- TRUE: Transaction executed successfully\n- FALSE: Transaction failed/reverted"}, "FACT_EVENT_LOGS_ID": {"type": "TEXT", "index": 18, "name": "FACT_EVENT_LOGS_ID", "comment": "Primary key - unique identifier for each row ensuring data integrity.\n\n**Format**: Usually VARCHAR containing composite key generated using MD5 hash of the relevant columns.\n**Example**: MD5(block_number, tx_hash, trace_index)\n\n**Usage**:\n- Deduplication in incremental loads\n- Join operations for data quality checks\n- Troubleshooting specific records\n\n**Important**: Implementation varies by table - check table-specific documentation."}, "INSERTED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 19, "name": "INSERTED_TIMESTAMP", "comment": "UTC timestamp when the record was first added to the Flipside database.\n\n**Format**: TIMESTAMP_NTZ\n\n**Use Cases**:\n- Data freshness monitoring\n- Incremental processing markers\n- Debugging data pipeline issues\n- SLA tracking\n\n**Query Example**:\n```sql\n-- Check data latency\nSELECT \n    DATE_TRUNC('hour', block_timestamp) as block_hour,\n    DATE_TRUNC('hour', inserted_timestamp) as insert_hour,\n    AVG(TIMESTAMPDIFF('minute', block_timestamp, inserted_timestamp)) as avg_latency_minutes\nFROM <blockchain_name>.core.fact_transactions\nWHERE block_timestamp >= CURRENT_DATE - 1\nGROUP BY 1, 2;\n```"}, "MODIFIED_TIMESTAMP": {"type": "TIMESTAMP_NTZ", "index": 20, "name": "MODIFIED_TIMESTAMP", "comment": "UTC timestamp of the most recent update to this record.\n\n**Format**: TIMESTAMP_NTZ\n\n**Triggers for Updates**:\n- Data corrections\n- Enrichment additions\n- Reprocessing for accuracy\n- Schema migrations\n\n**Monitoring Usage**:\n```sql\n-- Recently modified records\nSELECT *\nFROM <blockchain_name>.core.fact_transactions\nWHERE modified_timestamp > inserted_timestamp\nAND modified_timestamp >= CURRENT_DATE - 1;\n\n-- Data quality tracking\nSELECT \n    DATE(modified_timestamp) as mod_date,\n    COUNT(*) as records_updated,\n    COUNT(DISTINCT block_number) as blocks_affected\nFROM <blockchain_name>.core.fact_transactions\nWHERE modified_timestamp > inserted_timestamp\nGROUP BY 1\nORDER BY 1 DESC;\n```"}}, "stats": {"bytes": {"id": "bytes", "label": "Approximate Size", "value": 710653044224, "include": true, "description": "Approximate size of the table as reported by Snowflake"}, "last_modified": {"id": "last_modified", "label": "Last Modified", "value": "2025-08-25 15:22UTC", "include": true, "description": "The timestamp for last update/change"}, "row_count": {"id": "row_count", "label": "Row Count", "value": 5276931241, "include": true, "description": "An approximate count of rows in this table"}, "clustering_key": {"id": "clustering_key", "label": "Clustering Key", "value": "LINEAR(block_timestamp::DATE)", "include": true, "description": "The key used to cluster this table"}, "has_stats": {"id": "has_stats", "label": "Has Stats?", "value": true, "include": false, "description": "Indicates whether there are statistics for this table"}}, "unique_id": "source.livequery_models.ethereum_core.fact_event_logs"}}, "errors": null}