{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v12.json", "dbt_version": "1.9.9", "generated_at": "2025-08-25T17:11:36.032993Z", "invocation_id": "ca8a73ed-9c56-4588-ad9b-84c8768c87c9", "env": {}, "project_name": "sui_models", "project_id": "e650819a0782970575efaae402893769", "user_id": "769595cc-0dcb-4447-a34f-5e1e714c9417", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.sui_models.silver__crosschain_labels": {"database": "SUI", "schema": "silver", "name": "silver__crosschain_labels", "resource_type": "model", "package_name": "sui_models", "path": "silver/labels/silver__crosschain_labels.sql", "original_file_path": "models/silver/labels/silver__crosschain_labels.sql", "unique_id": "model.sui_models.silver__crosschain_labels", "fqn": ["sui_models", "silver", "labels", "silver__crosschain_labels"], "alias": "crosschain_labels", "checksum": {"name": "sha256", "checksum": "6ba7743a8c0f243297beb6b80e4637933343b87b4cacb6a210f4513d4de984f7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["scheduled_core"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["scheduled_core"], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ADDRESS": {"name": "ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "CREATOR": {"name": "CREATOR", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "_IS_DELETED": {"name": "_IS_DELETED", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "LABELS_COMBINED_ID": {"name": "LABELS_COMBINED_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/silver/labels/silver__crosschain_labels.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["scheduled_core"]}, "created_at": 1756141890.6283717, "relation_name": "SUI.silver.crosschain_labels", "raw_code": "{{ config(\n    materialized = 'view',\n    tags = ['scheduled_core']\n) }}\n\nSELECT\n    blockchain,\n    address,\n    creator,\n    label_type,\n    label_subtype,\n    address_name,\n    project_name,\n    _is_deleted,\n    labels_combined_id,\n    inserted_timestamp,\n    modified_timestamp\nFROM\n    {{ source(\n        'crosschain_silver',\n        'labels_combined'\n    ) }}\nWHERE\n    blockchain = 'sui'", "language": "sql", "refs": [], "sources": [["crosschain_silver", "labels_combined"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sui_models.crosschain_silver.labels_combined"]}, "compiled_path": "target/compiled/sui_models/models/silver/labels/silver__crosschain_labels.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    blockchain,\n    address,\n    creator,\n    label_type,\n    label_subtype,\n    address_name,\n    project_name,\n    _is_deleted,\n    labels_combined_id,\n    inserted_timestamp,\n    modified_timestamp\nFROM\n    crosschain.silver.labels_combined\nWHERE\n    blockchain = 'sui'", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.silver__complete_token_asset_metadata": {"database": "SUI", "schema": "silver", "name": "silver__complete_token_asset_metadata", "resource_type": "model", "package_name": "sui_models", "path": "silver/prices/silver__complete_token_asset_metadata.sql", "original_file_path": "models/silver/prices/silver__complete_token_asset_metadata.sql", "unique_id": "model.sui_models.silver__complete_token_asset_metadata", "fqn": ["sui_models", "silver", "prices", "silver__complete_token_asset_metadata"], "alias": "complete_token_asset_metadata", "checksum": {"name": "sha256", "checksum": "f7a4caf16f5fd3347bc97fad48447804f6b6d4c62254cbee4d47644726c2665e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "core"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["silver", "core"], "description": "", "columns": {"PROVIDER": {"name": "PROVIDER", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCKCHAIN_ID": {"name": "BLOCKCHAIN_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "COMPLETE_TOKEN_ASSET_METADATA_ID": {"name": "COMPLETE_TOKEN_ASSET_METADATA_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/silver/prices/silver__complete_token_asset_metadata.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["silver", "core"]}, "created_at": 1756141890.6308177, "relation_name": "SUI.silver.complete_token_asset_metadata", "raw_code": "{{ config(\n    materialized = 'view',\n    tags = ['silver','core']\n) }}\n\nSELECT\n    A.token_address,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    blockchain,\n    blockchain_name,\n    blockchain_id,\n    is_deprecated,\n    is_verified,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    {{ dbt_utils.generate_surrogate_key(['complete_token_asset_metadata_id']) }} AS complete_token_asset_metadata_id,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    {{ ref(\n        'bronze__complete_token_asset_metadata'\n    ) }} A\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(\n                modified_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "bronze__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.sui_models.bronze__complete_token_asset_metadata"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_asset_metadata.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    A.token_address,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    blockchain,\n    blockchain_name,\n    blockchain_id,\n    is_deprecated,\n    is_verified,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    \n    \nmd5(cast(coalesce(cast(complete_token_asset_metadata_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS complete_token_asset_metadata_id,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id\nFROM\n    SUI.bronze.complete_token_asset_metadata A\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["COMPLETE_TOKEN_ASSET_METADATA_ID"], "time_spine": null}, "model.sui_models.silver__complete_token_prices": {"database": "SUI", "schema": "silver", "name": "silver__complete_token_prices", "resource_type": "model", "package_name": "sui_models", "path": "silver/prices/silver__complete_token_prices.sql", "original_file_path": "models/silver/prices/silver__complete_token_prices.sql", "unique_id": "model.sui_models.silver__complete_token_prices", "fqn": ["sui_models", "silver", "prices", "silver__complete_token_prices"], "alias": "complete_token_prices", "checksum": {"name": "sha256", "checksum": "1e7eae18af752c4ff1e30f9890fa1e6716015e6746d163920c8ec30e7e41686a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "core"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["silver", "core"], "description": "", "columns": {"HOUR": {"name": "HOUR", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCKCHAIN_ID": {"name": "BLOCKCHAIN_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PROVIDER": {"name": "PROVIDER", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PRICE": {"name": "PRICE", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "IS_IMPUTED": {"name": "IS_IMPUTED", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "COMPLETE_TOKEN_PRICES_ID": {"name": "COMPLETE_TOKEN_PRICES_ID", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/silver/prices/silver__complete_token_prices.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["silver", "core"]}, "created_at": 1756141890.7380974, "relation_name": "SUI.silver.complete_token_prices", "raw_code": "{{ config(\n    materialized = 'view',\n    tags = ['silver','core']\n) }}\n\nSELECT\n    HOUR,\n    p.token_address,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    price,\n    blockchain,\n    blockchain_name,\n    blockchain_id,\n    is_imputed,\n    is_deprecated,\n    is_verified,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    {{ dbt_utils.generate_surrogate_key(['complete_token_prices_id']) }} AS complete_token_prices_id,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    {{ ref(\n        'bronze__complete_token_prices'\n    ) }}\n    p", "language": "sql", "refs": [{"name": "bronze__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sui_models.bronze__complete_token_prices"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_prices.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    HOUR,\n    p.token_address,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    price,\n    blockchain,\n    blockchain_name,\n    blockchain_id,\n    is_imputed,\n    is_deprecated,\n    is_verified,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    \n    \nmd5(cast(coalesce(cast(complete_token_prices_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS complete_token_prices_id,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id\nFROM\n    SUI.bronze.complete_token_prices\n    p", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["COMPLETE_TOKEN_PRICES_ID"], "time_spine": null}, "model.sui_models.silver__checkpoints": {"database": "SUI", "schema": "silver", "name": "silver__checkpoints", "resource_type": "model", "package_name": "sui_models", "path": "silver/core/silver__checkpoints.sql", "original_file_path": "models/silver/core/silver__checkpoints.sql", "unique_id": "model.sui_models.silver__checkpoints", "fqn": ["sui_models", "silver", "core", "silver__checkpoints"], "alias": "checkpoints", "checksum": {"name": "sha256", "checksum": "a9534da9b140280a2d05dd56b7e8a0bff8a85bdc6a50cda6977e67ff3c79b387"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "checkpoint_number", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["silver", "core"], "description": "", "columns": {"checkpoint_number": {"name": "checkpoint_number", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "partition_key": {"name": "partition_key", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "checkpoint_json": {"name": "checkpoint_json", "description": "", "meta": {}, "data_type": "VARIANT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "checkpoints_id": {"name": "checkpoints_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_LTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "checkpoint_number", "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["silver", "core"]}, "created_at": 1756141890.7594383, "relation_name": "SUI.silver.checkpoints", "raw_code": "-- depends_on: {{ ref('bronze__checkpoints') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = \"checkpoint_number\",\n    cluster_by = ['modified_timestamp::DATE','block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['silver','core']\n) }}\n\nWITH bronze_checks AS (\n\n    SELECT\n        DATA :\"result\" :\"sequenceNumber\" :: bigint AS checkpoint_number,\n        TO_TIMESTAMP(\n            DATA :\"result\" :\"timestampMs\"\n        ) AS block_timestamp,\n        partition_key,\n        DATA :result AS checkpoint_json,\n        _inserted_timestamp\n    FROM\n\n{% if is_incremental() %}\n{{ ref('bronze__checkpoints') }}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            COALESCE(MAX(_inserted_timestamp), '1900-01-01' :: TIMESTAMP) AS _inserted_timestamp\n        FROM\n            {{ this }})\n        {% else %}\n            {{ ref('bronze__checkpoints_FR') }}\n        {% endif %}\n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    partition_key,\n    checkpoint_json,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(['checkpoint_number']) }} AS checkpoints_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    bronze_checks qualify ROW_NUMBER() over (\n        PARTITION BY checkpoint_number\n        ORDER BY\n            _inserted_timestamp DESC\n    ) = 1", "language": "sql", "refs": [{"name": "bronze__checkpoints", "package": null, "version": null}, {"name": "bronze__checkpoints_FR", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sui_models.bronze__checkpoints", "model.sui_models.bronze__checkpoints_FR"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver__checkpoints.sql", "compiled": true, "compiled_code": "-- depends_on: SUI.bronze.checkpoints\n\n\nWITH bronze_checks AS (\n\n    SELECT\n        DATA :\"result\" :\"sequenceNumber\" :: bigint AS checkpoint_number,\n        TO_TIMESTAMP(\n            DATA :\"result\" :\"timestampMs\"\n        ) AS block_timestamp,\n        partition_key,\n        DATA :result AS checkpoint_json,\n        _inserted_timestamp\n    FROM\n\n\nSUI.bronze.checkpoints\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            COALESCE(MAX(_inserted_timestamp), '1900-01-01' :: TIMESTAMP) AS _inserted_timestamp\n        FROM\n            SUI.silver.checkpoints)\n        \n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    partition_key,\n    checkpoint_json,\n    _inserted_timestamp,\n    \n    \nmd5(cast(coalesce(cast(checkpoint_number as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS checkpoints_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id\nFROM\n    bronze_checks qualify ROW_NUMBER() over (\n        PARTITION BY checkpoint_number\n        ORDER BY\n            _inserted_timestamp DESC\n    ) = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "05b0242e78be72bd9f3e5e0651398b08573dd378f235c198c3c5492be6a15c56"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.silver__coin_types": {"database": "SUI", "schema": "silver", "name": "silver__coin_types", "resource_type": "model", "package_name": "sui_models", "path": "silver/core/silver__coin_types.sql", "original_file_path": "models/silver/core/silver__coin_types.sql", "unique_id": "model.sui_models.silver__coin_types", "fqn": ["sui_models", "silver", "core", "silver__coin_types"], "alias": "coin_types", "checksum": {"name": "sha256", "checksum": "fb3f71bcda9ce4f95e5e3ec5a9582cfc51c885da7fe2ab7cf58299398dc4b3f6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "coin_type", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["silver", "core"], "description": "", "columns": {"coin_type": {"name": "coin_type", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "coin_types_id": {"name": "coin_types_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "coin_type", "merge_exclude_columns": ["inserted_timestamp"], "tags": ["silver", "core"]}, "created_at": 1756141890.76487, "relation_name": "SUI.silver.coin_types", "raw_code": "-- depends_on: {{ ref('bronze__transactions') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = \"coin_type\",\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['silver','core']\n) }}\n\nWITH coins AS (\n\n    SELECT\n        DISTINCT coin_type\n    FROM\n        {{ ref('core__fact_balance_changes') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    )\n{% endif %}\n)\nSELECT\n    coin_type,\n    {{ dbt_utils.generate_surrogate_key(['coin_type']) }} AS coin_types_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    coins", "language": "sql", "refs": [{"name": "bronze__transactions", "package": null, "version": null}, {"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sui_models.bronze__transactions", "model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver__coin_types.sql", "compiled": true, "compiled_code": "-- depends_on: SUI.bronze.transactions\n\n\nWITH coins AS (\n\n    SELECT\n        DISTINCT coin_type\n    FROM\n        SUI.core.fact_balance_changes\n\n\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            SUI.silver.coin_types\n    )\n\n)\nSELECT\n    coin_type,\n    \n    \nmd5(cast(coalesce(cast(coin_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS coin_types_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id\nFROM\n    coins", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "7a321d9656b032f2fdde286c3f50a968d7b713db9ba08e78c91fd833f4d66ba0"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.silver__transactions": {"database": "SUI", "schema": "silver", "name": "silver__transactions", "resource_type": "model", "package_name": "sui_models", "path": "silver/core/silver__transactions.sql", "original_file_path": "models/silver/core/silver__transactions.sql", "unique_id": "model.sui_models.silver__transactions", "fqn": ["sui_models", "silver", "core", "silver__transactions"], "alias": "transactions", "checksum": {"name": "sha256", "checksum": "c7b5d3434eaa8e077be9f0f8b57da1cec3920b05f4c926c229a544d15ab7f238"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_digest", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["silver", "core"], "description": "", "columns": {"checkpoint_number": {"name": "checkpoint_number", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "tx_digest": {"name": "tx_digest", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "partition_key": {"name": "partition_key", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "transaction_json": {"name": "transaction_json", "description": "", "meta": {}, "data_type": "VARIANT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "_inserted_timestamp": {"name": "_inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_LTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "transactions_id": {"name": "transactions_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "tx_digest", "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["silver", "core"]}, "created_at": 1756141890.7624779, "relation_name": "SUI.silver.transactions", "raw_code": "-- depends_on: {{ ref('bronze__transactions') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = \"tx_digest\",\n    cluster_by = ['modified_timestamp::DATE','block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['silver','core']\n) }}\n\nWITH bronze_txs AS (\n\n    SELECT\n        DATA :\"checkpoint\" :: bigint AS checkpoint_number,\n        DATA :\"digest\" :: STRING AS tx_digest,\n        TO_TIMESTAMP(\n            DATA :\"timestampMs\"\n        ) AS block_timestamp,\n        partition_key,\n        DATA AS transaction_json,\n        _inserted_timestamp\n    FROM\n\n{% if is_incremental() %}\n{{ ref('bronze__transactions') }}\nWHERE\n    DATA :error IS NULL\n    AND _inserted_timestamp >= (\n        SELECT\n            COALESCE(MAX(_inserted_timestamp), '1900-01-01' :: TIMESTAMP) AS _inserted_timestamp\n        FROM\n            {{ this }})\n        {% else %}\n            {{ ref('bronze__transactions_FR') }}\n        WHERE\n            DATA :error IS NULL\n        {% endif %}\n    )\nSELECT\n    checkpoint_number,\n    tx_digest,\n    block_timestamp,\n    partition_key,\n    transaction_json,\n    _inserted_timestamp,\n    {{ dbt_utils.generate_surrogate_key(['checkpoint_number','tx_digest']) }} AS transactions_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    bronze_txs\nWHERE\n    block_timestamp IS NOT NULL qualify ROW_NUMBER() over (\n        PARTITION BY tx_digest\n        ORDER BY\n            _inserted_timestamp DESC\n    ) = 1", "language": "sql", "refs": [{"name": "bronze__transactions", "package": null, "version": null}, {"name": "bronze__transactions_FR", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sui_models.bronze__transactions", "model.sui_models.bronze__transactions_FR"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver__transactions.sql", "compiled": true, "compiled_code": "-- depends_on: SUI.bronze.transactions\n\n\nWITH bronze_txs AS (\n\n    SELECT\n        DATA :\"checkpoint\" :: bigint AS checkpoint_number,\n        DATA :\"digest\" :: STRING AS tx_digest,\n        TO_TIMESTAMP(\n            DATA :\"timestampMs\"\n        ) AS block_timestamp,\n        partition_key,\n        DATA AS transaction_json,\n        _inserted_timestamp\n    FROM\n\n\nSUI.bronze.transactions\nWHERE\n    DATA :error IS NULL\n    AND _inserted_timestamp >= (\n        SELECT\n            COALESCE(MAX(_inserted_timestamp), '1900-01-01' :: TIMESTAMP) AS _inserted_timestamp\n        FROM\n            SUI.silver.transactions)\n        \n    )\nSELECT\n    checkpoint_number,\n    tx_digest,\n    block_timestamp,\n    partition_key,\n    transaction_json,\n    _inserted_timestamp,\n    \n    \nmd5(cast(coalesce(cast(checkpoint_number as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(tx_digest as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS transactions_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id\nFROM\n    bronze_txs\nWHERE\n    block_timestamp IS NOT NULL qualify ROW_NUMBER() over (\n        PARTITION BY tx_digest\n        ORDER BY\n            _inserted_timestamp DESC\n    ) = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "f19719fed3f058c23298d2236b7989af30d1463c87c0b26c06d1905ea695656b"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.silver__transfers": {"database": "SUI", "schema": "silver", "name": "silver__transfers", "resource_type": "model", "package_name": "sui_models", "path": "silver/core/silver__transfers.sql", "original_file_path": "models/silver/core/silver__transfers.sql", "unique_id": "model.sui_models.silver__transfers", "fqn": ["sui_models", "silver", "core", "silver__transfers"], "alias": "transfers", "checksum": {"name": "sha256", "checksum": "cf2f6e1917e50038ca352bd02d31f217511f1cbc67d716a13d1b5b8c0fdf4382"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core", "transfers"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["tx_digest", "balance_change_index"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "merge_exclude_columns": ["inserted_timestamp"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"]}, "tags": ["core", "transfers"], "description": "", "columns": {"CHECKPOINT_NUMBER": {"name": "CHECKPOINT_NUMBER", "description": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_DIGEST": {"name": "TX_DIGEST", "description": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SENDER": {"name": "TX_SENDER", "description": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "SENDER": {"name": "SENDER", "description": "Sui address (32-byte hex) representing the transaction or event sender. Used for authorization, security analysis, and user activity tracking. Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "RECEIVER": {"name": "RECEIVER", "description": "Sui address (32-byte hex) representing the transaction or event receiver. Used for tracking destination addresses, transfer flows, and recipient analytics. In transfer contexts, this is the address receiving tokens or assets. Example: '0xdef456...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BALANCE_CHANGE_INDEX": {"name": "BALANCE_CHANGE_INDEX", "description": "Zero-based index ordering balance changes within a transaction. Tracks the sequence of balance modifications for accurate financial analysis and reconciliation. Example: 0.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "COIN_TYPE": {"name": "COIN_TYPE", "description": "Fully qualified Move type identifier for coins/tokens. Format: {package}::{module}::{struct}. Example: '0x2::sui::SUI' for native SUI token. Essential for DeFi analytics, token classification, and cross-asset analysis.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "AMOUNT_RAW": {"name": "AMOUNT_RAW", "description": "Token quantity in the smallest unit (MIST for SUI). Integer value; 1 SUI = 1,000,000,000 MIST. Used for precise financial calculations, balance tracking, and token flow analysis. Example: 1000000000.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TRANSFERS_ID": {"name": "TRANSFERS_ID", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "_INVOCATION_ID": {"name": "_INVOCATION_ID", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/silver/core/silver_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["tx_digest", "balance_change_index"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "tags": ["core", "transfers"]}, "created_at": 1756141890.7716272, "relation_name": "SUI.silver.transfers", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['tx_digest','balance_change_index'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = ['inserted_timestamp'],\n    cluster_by = ['block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    tags = ['core','transfers']\n) }}\n\nWITH \nallowed_tx AS (\n    SELECT\n        tx_digest\n    FROM \n        {{ ref('core__fact_transactions') }}\n    WHERE\n        (payload_type IN ('TransferObjects','SplitCoins','MergeCoins'))\n        OR \n        (payload_type = 'MoveCall' AND payload_details :package = '0x0000000000000000000000000000000000000000000000000000000000000002')\n    {% if is_incremental() %}\n        AND modified_timestamp >= (SELECT COALESCE(MAX(modified_timestamp),'1970-01-01') FROM {{ this }})\n    {% endif %}\n     qualify ROW_NUMBER() over (\n        PARTITION BY tx_digest\n        ORDER BY\n            modified_timestamp DESC\n    ) = 1\n),\nfiltered as (\n    SELECT \n        fbc.checkpoint_number,\n        fbc.block_timestamp,\n        fbc.tx_digest,\n        fbc.tx_succeeded,\n        fbc.tx_sender,\n        case \n            when fbc.amount < 0 \n            and fbc.address_owner IS NOT NULL \n            and fbc.address_owner <> fbc.tx_sender \n            then fbc.address_owner \n            else fbc.tx_sender end as sender,\n        coalesce(fbc.address_owner, fbc.object_owner) as receiver,\n        fbc.balance_change_index,\n        fbc.coin_type,\n        fbc.amount\n    FROM \n        {{ ref('core__fact_balance_changes') }} fbc\n    JOIN\n        allowed_tx at \n        ON fbc.tx_digest = at.tx_digest\n    WHERE\n        fbc.tx_succeeded\n        AND fbc.tx_sender != coalesce(fbc.address_owner, fbc.object_owner)\n        AND NOT (balance_change_index = 0 AND amount < 0) -- remove mints, self-splits, proofs, flash loans\n    {% if is_incremental() %}\n        AND fbc.modified_timestamp >= (SELECT COALESCE(MAX(modified_timestamp),'1970-01-01') FROM {{ this }})\n    {% endif %}\n)\nSELECT  \n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_succeeded,\n    tx_sender,\n    sender,\n    receiver,\n    balance_change_index,\n    coin_type,\n    amount AS amount_raw,\n    {{ dbt_utils.generate_surrogate_key(['tx_digest','balance_change_index']) }} AS transfers_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    filtered", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}, {"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sui_models.core__fact_transactions", "model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver__transfers.sql", "compiled": true, "compiled_code": "\n\nWITH \nallowed_tx AS (\n    SELECT\n        tx_digest\n    FROM \n        SUI.core.fact_transactions\n    WHERE\n        (payload_type IN ('TransferObjects','SplitCoins','MergeCoins'))\n        OR \n        (payload_type = 'MoveCall' AND payload_details :package = '0x0000000000000000000000000000000000000000000000000000000000000002')\n    \n        AND modified_timestamp >= (SELECT COALESCE(MAX(modified_timestamp),'1970-01-01') FROM SUI.silver.transfers)\n    \n     qualify ROW_NUMBER() over (\n        PARTITION BY tx_digest\n        ORDER BY\n            modified_timestamp DESC\n    ) = 1\n),\nfiltered as (\n    SELECT \n        fbc.checkpoint_number,\n        fbc.block_timestamp,\n        fbc.tx_digest,\n        fbc.tx_succeeded,\n        fbc.tx_sender,\n        case \n            when fbc.amount < 0 \n            and fbc.address_owner IS NOT NULL \n            and fbc.address_owner <> fbc.tx_sender \n            then fbc.address_owner \n            else fbc.tx_sender end as sender,\n        coalesce(fbc.address_owner, fbc.object_owner) as receiver,\n        fbc.balance_change_index,\n        fbc.coin_type,\n        fbc.amount\n    FROM \n        SUI.core.fact_balance_changes fbc\n    JOIN\n        allowed_tx at \n        ON fbc.tx_digest = at.tx_digest\n    WHERE\n        fbc.tx_succeeded\n        AND fbc.tx_sender != coalesce(fbc.address_owner, fbc.object_owner)\n        AND NOT (balance_change_index = 0 AND amount < 0) -- remove mints, self-splits, proofs, flash loans\n    \n        AND fbc.modified_timestamp >= (SELECT COALESCE(MAX(modified_timestamp),'1970-01-01') FROM SUI.silver.transfers)\n    \n)\nSELECT  \n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_succeeded,\n    tx_sender,\n    sender,\n    receiver,\n    balance_change_index,\n    coin_type,\n    amount AS amount_raw,\n    \n    \nmd5(cast(coalesce(cast(tx_digest as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(balance_change_index as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS transfers_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id\nFROM\n    filtered", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "26adeba1103122887b4b7c1c7418b32eb44e776e5d6afc1a450bf9f9ee2f4248"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["TRANSFERS_ID"], "time_spine": null}, "model.sui_models.silver__dex_swaps": {"database": "SUI", "schema": "silver", "name": "silver__dex_swaps", "resource_type": "model", "package_name": "sui_models", "path": "silver/defi/dex/silver__dex_swaps.sql", "original_file_path": "models/silver/defi/dex/silver__dex_swaps.sql", "unique_id": "model.sui_models.silver__dex_swaps", "fqn": ["sui_models", "silver", "defi", "dex", "silver__dex_swaps"], "alias": "dex_swaps", "checksum": {"name": "sha256", "checksum": "7c7c9edc57a42496f3710bf5753e468e717c7bf51a8b8981b79d1a2882935e96"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["non_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "dex_swaps_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["non_core"], "description": "", "columns": {"CHECKPOINT_NUMBER": {"name": "CHECKPOINT_NUMBER", "description": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301.", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_DIGEST": {"name": "TX_DIGEST", "description": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Zero-based index ordering events within a transaction. Ensures deterministic event ordering for sequence reconstruction and analytics. Example: 1.", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TYPE": {"name": "TYPE", "description": "Type/category of object state modification or event. Enum: created, modified, deleted, wrapped, unwrapped (for changes); event type string (for events). Used for lifecycle analysis and state transition tracking. Example: 'created'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EVENT_MODULE": {"name": "EVENT_MODULE", "description": "Name of the Move module that emitted the event. Used for module-specific event filtering and analytics. Example: 'coin'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EVENT_RESOURCE": {"name": "EVENT_RESOURCE", "description": "Fully qualified type signature of the event struct. Format: {package_id}::{module}::{struct_name}<type_parameters>. Enables type-safe event deserialization and schema tracking. Example: '0x2::coin::TransferEvent<0x2::sui::SUI>'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TRANSACTION_MODULE": {"name": "TRANSACTION_MODULE", "description": "Name of the module executed in the transaction that emitted the event. Links events to transaction context for flow analysis. Example: 'pay_sui'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PLATFORM_ADDRESS": {"name": "PLATFORM_ADDRESS", "description": "The smart contract address of the DEX platform that facilitated this swap. This represents the deployed contract address for the specific DEX protocol on the Sui blockchain. Used for contract verification, security analysis, and linking to platform-specific metadata and configurations. Essential for protocol-specific analysis and filtering across different DeFi platforms.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The address of the liquidity pool involved in the swap. For protocols that use AMM (Automated Market Maker) pools, this identifies the specific pool contract. May be NULL for order book-based protocols like DeepBook or centralized limit order protocols. Essential for pool-specific analytics, liquidity analysis, and understanding which pools are most active for different token pairs.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "AMOUNT_IN_RAW": {"name": "AMOUNT_IN_RAW", "description": "The raw amount of tokens being swapped in (input amount) before any decimal adjustments. This represents the exact on-chain token amount as it appears in the swap event. Preserves precision for accurate calculations and is essential for volume analysis, price impact calculations, and swap size distribution analysis. Critical for calculating swap rates and understanding the actual token amounts exchanged in each swap.", "meta": {}, "data_type": "NUMBER(38,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "AMOUNT_OUT_RAW": {"name": "AMOUNT_OUT_RAW", "description": "The raw amount of tokens being swapped out (output amount) before any decimal adjustments. This represents the exact on-chain token amount that the user receives from the swap. Critical for calculating swap rates, slippage analysis, and understanding the actual token amounts exchanged in each swap. Essential for volume analysis and swap size distribution analysis.", "meta": {}, "data_type": "NUMBER(38,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "A_TO_B": {"name": "A_TO_B", "description": "A boolean flag indicating the direction of the swap within the pool. When TRUE, the swap goes from token A to token B; when FALSE, it goes from token B to token A. This field is protocol-specific and may be NULL for some DEX platforms. Important for understanding swap direction and pool token ordering conventions. Follows each protocol's specific pool token ordering conventions.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "FEE_AMOUNT_RAW": {"name": "FEE_AMOUNT_RAW", "description": "The raw amount of fees charged for the swap transaction. This includes protocol fees, liquidity provider fees, and any other transaction costs. May be 0 for protocols that don't charge explicit fees or when fees are embedded in the swap amounts. Essential for fee revenue analysis and total cost of trading calculations. For some protocols like Aftermath, this may be NULL as fees are handled differently.", "meta": {}, "data_type": "NUMBER(38,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PARTNER_ADDRESS": {"name": "PARTNER_ADDRESS", "description": "The address of a partner or affiliate that facilitated the swap (if applicable). Used primarily by Cetus for their partner program where swaps can be routed through partner contracts. May be NULL for most protocols or when no partner was involved. Useful for tracking partner performance and affiliate program analytics within the DEX ecosystem.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "STEPS": {"name": "STEPS", "description": "The number of steps or hops required to complete the swap. For simple swaps, this is typically 1. For complex swaps involving multiple pools or routing through multiple protocols, this indicates the number of intermediate steps. Essential for understanding swap complexity and routing efficiency across different protocols. Critical for analyzing multi-hop swaps and routing optimization.", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_IN_TYPE": {"name": "TOKEN_IN_TYPE", "description": "The full type identifier of the token being swapped in (input token). This follows Sui's Move type format (e.g., \"0x2::sui::SUI\" for the native SUI token). Essential for token identification, pricing lookups, and token-specific analytics. Used for calculating USD values and token pair analysis. Some models ensure proper formatting by adding '0x' prefix if missing.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_OUT_TYPE": {"name": "TOKEN_OUT_TYPE", "description": "The full type identifier of the token being swapped out (output token). This follows Sui's Move type format and represents the token that the user receives from the swap. Critical for token pair analysis, swap rate calculations, and understanding token flow patterns across the DeFi ecosystem. Some models ensure proper formatting by adding '0x' prefix if missing.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TRADER_ADDRESS": {"name": "TRADER_ADDRESS", "description": "The address of the wallet or account that initiated the swap. May be NULL for some protocols that don't explicitly track the trader address in their events. Essential for user behavior analysis, wallet tracking, and understanding individual trader patterns and preferences across different DEX platforms. For some protocols like Aftermath, this is extracted from the transaction sender.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "DEX_SWAPS_ID": {"name": "DEX_SWAPS_ID", "description": "A unique surrogate key generated from the combination of transaction identifiers and swap details. For the general DEX table, this combines tx_digest and event_index. For protocol-specific tables like Aftermath, this may include additional fields like trader_address, token_in_type, token_out_type, amount_in_raw, and amount_out_raw. This provides a stable, unique identifier for each swap event that can be used as a primary key for downstream analytics and data modeling. Ensures data integrity and prevents duplicate processing.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PACKAGE_ID": {"name": "PACKAGE_ID", "description": "Unique identifier (object ID) of the Move package containing the event module. Used for package-level analytics, deployment tracking, and contract lineage. Example: '0x2'.", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "SWAP_INDEX": {"name": "SWAP_INDEX", "description": "Sequential index of the swap within a transaction that contains multiple swaps. Used to order and identify individual swaps when a transaction performs multiple DEX operations. Essential for multi-swap transaction analysis and swap-level flow tracking. Example: 1 for the first swap, 2 for the second, etc.", "meta": {}, "data_type": "INTEGER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "_INVOCATION_ID": {"name": "_INVOCATION_ID", "description": "A unique identifier for the dbt run that created or updated this record. This field is used for data lineage tracking and debugging purposes. Helps identify which specific dbt execution was responsible for processing each record and enables traceability back to the source code and configuration used. Essential for ETL monitoring, data quality tracking, and troubleshooting pipeline issues.", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/silver/defi/dex/silver_defi.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "dex_swaps_id", "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["non_core"]}, "created_at": 1756141890.8030384, "relation_name": "SUI.silver.dex_swaps", "raw_code": "-- depends_on: {{ ref('core__fact_events') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = \"dex_swaps_id\",\n    cluster_by = ['modified_timestamp::DATE','block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['non_core']\n) }}\n\n\nWITH core_events AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        tx_sender,\n        event_index,\n        type,\n        event_address,\n        event_module,\n        event_resource,\n        package_id,\n        transaction_module,\n        parsed_json,\n        modified_timestamp\n    FROM\n        {{ ref('core__fact_events') }}\n    WHERE\n{% if is_incremental() %}\n        modified_timestamp >= (\n            SELECT\n                COALESCE(MAX(modified_timestamp), '1900-01-01'::TIMESTAMP) AS modified_timestamp\n            FROM\n                {{ this }}\n        )\n        AND\n{% endif %}\n        (\n            -- primary swap resources for this model use SwapEvent or PLATFORMSwapEvent\n            -- Haedal-specific resources uses buy and sell\n            event_resource ILIKE ANY ('%swapevent%', '%buy%', '%sell%')\n            OR event_resource IN (\n                'Swap',\n                'OrderFilled',\n                'TradeEvent',\n                'SwapEvent'\n            )\n        )\n        -- exclude modules that require special handling\n        AND event_resource NOT IN (\n            'RepayFlashSwapEvent',\n            'ScallopSwapEvent',\n            'OrderFilled',\n            'OrderInfo'\n        )\n        AND transaction_module NOT IN (\n            'aftermath', \n            'scallop',\n            'fulfill_swap',\n            'slippage'\n        )\n        AND transaction_module NOT ILIKE '%steamm%'\n\n        -- exclude limit orders from base model\n        AND event_module NOT IN ('settle')\n),\n\nswaps AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        tx_sender,\n        event_index,\n        type,\n        event_module,\n        event_resource,\n        package_id,\n        transaction_module,\n        ROW_NUMBER() OVER (PARTITION BY tx_digest, package_id, transaction_module ORDER BY event_index) AS package_index,\n        event_address AS platform_address,\n        COALESCE(\n            parsed_json:pool::STRING, \n            parsed_json:pool_address::STRING, \n            parsed_json:pool_id::STRING,\n            parsed_json:event:pool::STRING,\n            parsed_json:event:pool_address::STRING,\n            parsed_json:event:pool_id::STRING\n        ) AS pool_address,\n\n        -- Handle different direction field patterns\n        COALESCE(\n            parsed_json:a2b::BOOLEAN,\n            parsed_json:a_to_b::BOOLEAN,\n            parsed_json:atob::BOOLEAN,\n            parsed_json:x_for_y::BOOLEAN,\n            parsed_json:event:a2b::BOOLEAN\n        ) AS a_to_b,\n\n        -- Token In - handle different event patterns\n        COALESCE(\n            IFF(a_to_b,\n                COALESCE(\n                    parsed_json:amount_in::NUMBER,\n                    parsed_json:amounts_in[0]::NUMBER,\n                    parsed_json:amount_a::NUMBER,\n                    parsed_json:amount_x::NUMBER,\n                    parsed_json:event:amount_in::NUMBER,\n                    parsed_json:coin_in_amount::NUMBER\n                ),\n                COALESCE(\n                    parsed_json:amount_in::NUMBER,\n                    parsed_json:amounts_in[0]::NUMBER,\n                    parsed_json:amount_b::NUMBER,\n                    parsed_json:amount_y::NUMBER,\n                    parsed_json:event:amount_in::NUMBER,\n                    parsed_json:coin_in_amount::NUMBER\n                )\n            ),\n            -- Haedal-style events\n            parsed_json:pay_quote::NUMBER,\n            parsed_json:pay_base::NUMBER\n        ) AS amount_in_raw,\n        IFF(a_to_b,\n            COALESCE(\n                parsed_json:coin_a:name::STRING,\n                parsed_json:coin_in:name::STRING,\n                parsed_json:coin_in::STRING,\n                parsed_json:type_in::STRING,\n                parsed_json:event:coin_in::STRING,\n                parsed_json:coin_in_type:name::STRING,\n                parsed_json:types_in[0]::STRING\n            ),\n            COALESCE(\n                parsed_json:coin_b:name::STRING,\n                parsed_json:coin_in:name::STRING,\n                parsed_json:coin_in::STRING,\n                parsed_json:type_in::STRING,\n                parsed_json:event:coin_in::STRING,\n                parsed_json:coin_in_type:name::STRING,\n                parsed_json:types_in[0]::STRING\n            )\n        ) AS token_in_type,\n        -- Token Out - handle different event patterns\n        COALESCE(\n            IFF(a_to_b,\n                COALESCE(\n                    parsed_json:amount_out::NUMBER,\n                    parsed_json:amounts_out[0]::NUMBER,\n                    parsed_json:amount_b::NUMBER,\n                    parsed_json:amount_y::NUMBER,\n                    parsed_json:event:amount_out::NUMBER,\n                    parsed_json:coin_out_amount::NUMBER\n                ),\n                COALESCE(\n                    parsed_json:amount_out::NUMBER,\n                    parsed_json:amounts_out[0]::NUMBER,\n                    parsed_json:amount_a::NUMBER,\n                    parsed_json:amount_x::NUMBER,\n                    parsed_json:event:amount_out::NUMBER,\n                    parsed_json:coin_out_amount::NUMBER\n                )\n            ),\n            -- Haedal-style events\n            parsed_json:receive_base::NUMBER,\n            parsed_json:receive_quote::NUMBER\n        ) AS amount_out_raw,\n        IFF(a_to_b,\n            COALESCE(\n                parsed_json:coin_b:name::STRING,\n                parsed_json:coin_out:name::STRING,\n                parsed_json:coin_out::STRING,\n                parsed_json:type_out::STRING,\n                parsed_json:event:coin_out::STRING,\n                parsed_json:coin_out_type:name::STRING,\n                parsed_json:types_out[0]::STRING\n            ),\n            COALESCE(\n                parsed_json:coin_a:name::STRING,\n                parsed_json:coin_out:name::STRING,\n                parsed_json:coin_out::STRING,\n                parsed_json:type_out::STRING,\n                parsed_json:event:coin_out::STRING,\n                parsed_json:coin_out_type:name::STRING,\n                parsed_json:types_out[0]::STRING\n            )\n        ) AS token_out_type,\n\n        COALESCE(\n            parsed_json:fee_amount::NUMBER,\n            parsed_json:protocol_fee_amount::NUMBER,\n            parsed_json:protocol_fee::NUMBER\n        ) AS fee_amount_raw,\n\n        COALESCE(\n            parsed_json:partner_id::STRING,\n            parsed_json:partner::STRING\n        ) AS partner_address,\n        COALESCE(parsed_json:steps::NUMBER, 1) AS steps,\n\n        tx_sender AS trader_address,\n        modified_timestamp,\n        parsed_json\n    FROM\n        core_events\n),\n\n-- group swap events to determine the swap_index within the transaction\n-- several dexes will emit multiple swap events when the swap is routed\nswaps_with_groups AS (\n    SELECT\n        *,\n        -- Create base group key\n        CASE \n            WHEN pool_address IS NOT NULL THEN\n                CONCAT(pool_address, '|', COALESCE(amount_in_raw::STRING, '0'), '|', COALESCE(amount_out_raw::STRING, '0'))\n            ELSE\n                CONCAT(package_id, '|', transaction_module, '|', COALESCE(amount_in_raw::STRING, '0'), '|', COALESCE(amount_out_raw::STRING, '0'))\n        END AS base_group_key,\n        \n        -- Find gaps in event_index sequence within the same base group\n        LAG(event_index) OVER (\n            PARTITION BY tx_digest,\n                CASE \n                    WHEN pool_address IS NOT NULL THEN\n                        CONCAT(pool_address, '|', COALESCE(amount_in_raw::STRING, '0'), '|', COALESCE(amount_out_raw::STRING, '0'))\n                    ELSE\n                        CONCAT(package_id, '|', transaction_module, '|', COALESCE(amount_in_raw::STRING, '0'), '|', COALESCE(amount_out_raw::STRING, '0'))\n                END\n            ORDER BY event_index\n        ) AS prev_event_index\n    FROM swaps\n),\n\nswaps_with_gap_detection AS (\n    SELECT\n        *,\n        -- Detect if there's a significant gap (>3) between consecutive events with same base_group_key\n        CASE \n            WHEN prev_event_index IS NULL THEN 0\n            WHEN (event_index - prev_event_index) > 3 THEN 1\n            ELSE 0\n        END AS is_new_group,\n        \n        -- Create running sum to generate unique group identifiers\n        SUM(\n            CASE \n                WHEN prev_event_index IS NULL THEN 0\n                WHEN (event_index - prev_event_index) > 3 THEN 1\n                ELSE 0\n            END\n        ) OVER (\n            PARTITION BY tx_digest, base_group_key \n            ORDER BY event_index \n            ROWS UNBOUNDED PRECEDING\n        ) AS group_sequence\n    FROM swaps_with_groups\n),\n\n\nswaps_with_final_groups AS (\n    SELECT\n        *,\n        -- Create final group key that includes the sequence number for gap detection\n        CONCAT(base_group_key, '|seq:', group_sequence::STRING) AS final_group_key,\n        \n        -- Get minimum event_index for each final group\n        MIN(event_index) OVER (\n            PARTITION BY tx_digest, CONCAT(base_group_key, '|seq:', group_sequence::STRING)\n        ) AS group_min_event_index\n    FROM swaps_with_gap_detection\n),\n\nswaps_with_index AS (\n    SELECT\n        *,\n        -- Use DENSE_RANK to create swap_index based on group_min_event_index\n        DENSE_RANK() OVER (\n            PARTITION BY tx_digest \n            ORDER BY group_min_event_index\n        ) as swap_index\n    FROM swaps_with_final_groups\n),\n\ndeduplicate_swaps AS (\n    SELECT\n        *\n    FROM swaps_with_index\n\n    qualify row_number() over (\n        partition by tx_digest, swap_index\n        order by token_in_type IS NOT NULL DESC, token_out_type IS NOT NULL DESC\n    ) = 1\n)\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    event_index,\n    type,\n    event_module,\n    package_id,\n    transaction_module,\n    event_resource,\n    platform_address,\n    trader_address,\n    pool_address,\n    amount_in_raw,\n    IFF(\n        LEFT(token_in_type, 2) = '0x',\n        token_in_type,\n        '0x' || token_in_type\n    ) AS token_in_type,\n    amount_out_raw,\n    IFF(\n        LEFT(token_out_type, 2) = '0x',\n        token_out_type,\n        '0x' || token_out_type\n    ) AS token_out_type,\n    a_to_b,\n    fee_amount_raw,\n    partner_address,\n    steps,\n    swap_index,\n    {{ dbt_utils.generate_surrogate_key(['tx_digest', 'trader_address', 'token_in_type', 'token_out_type', 'amount_in_raw', 'amount_out_raw', 'swap_index']) }} AS dex_swaps_id,\n    SYSDATE() AS inserted_timestamp,\n    modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    deduplicate_swaps", "language": "sql", "refs": [{"name": "core__fact_events", "package": null, "version": null}, {"name": "core__fact_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sui_models.core__fact_events"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver__dex_swaps.sql", "compiled": true, "compiled_code": "-- depends_on: SUI.core.fact_events\n\n\n\nWITH core_events AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        tx_sender,\n        event_index,\n        type,\n        event_address,\n        event_module,\n        event_resource,\n        package_id,\n        transaction_module,\n        parsed_json,\n        modified_timestamp\n    FROM\n        SUI.core.fact_events\n    WHERE\n\n        modified_timestamp >= (\n            SELECT\n                COALESCE(MAX(modified_timestamp), '1900-01-01'::TIMESTAMP) AS modified_timestamp\n            FROM\n                SUI.silver.dex_swaps\n        )\n        AND\n\n        (\n            -- primary swap resources for this model use SwapEvent or PLATFORMSwapEvent\n            -- Haedal-specific resources uses buy and sell\n            event_resource ILIKE ANY ('%swapevent%', '%buy%', '%sell%')\n            OR event_resource IN (\n                'Swap',\n                'OrderFilled',\n                'TradeEvent',\n                'SwapEvent'\n            )\n        )\n        -- exclude modules that require special handling\n        AND event_resource NOT IN (\n            'RepayFlashSwapEvent',\n            'ScallopSwapEvent',\n            'OrderFilled',\n            'OrderInfo'\n        )\n        AND transaction_module NOT IN (\n            'aftermath', \n            'scallop',\n            'fulfill_swap',\n            'slippage'\n        )\n        AND transaction_module NOT ILIKE '%steamm%'\n\n        -- exclude limit orders from base model\n        AND event_module NOT IN ('settle')\n),\n\nswaps AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        tx_sender,\n        event_index,\n        type,\n        event_module,\n        event_resource,\n        package_id,\n        transaction_module,\n        ROW_NUMBER() OVER (PARTITION BY tx_digest, package_id, transaction_module ORDER BY event_index) AS package_index,\n        event_address AS platform_address,\n        COALESCE(\n            parsed_json:pool::STRING, \n            parsed_json:pool_address::STRING, \n            parsed_json:pool_id::STRING,\n            parsed_json:event:pool::STRING,\n            parsed_json:event:pool_address::STRING,\n            parsed_json:event:pool_id::STRING\n        ) AS pool_address,\n\n        -- Handle different direction field patterns\n        COALESCE(\n            parsed_json:a2b::BOOLEAN,\n            parsed_json:a_to_b::BOOLEAN,\n            parsed_json:atob::BOOLEAN,\n            parsed_json:x_for_y::BOOLEAN,\n            parsed_json:event:a2b::BOOLEAN\n        ) AS a_to_b,\n\n        -- Token In - handle different event patterns\n        COALESCE(\n            IFF(a_to_b,\n                COALESCE(\n                    parsed_json:amount_in::NUMBER,\n                    parsed_json:amounts_in[0]::NUMBER,\n                    parsed_json:amount_a::NUMBER,\n                    parsed_json:amount_x::NUMBER,\n                    parsed_json:event:amount_in::NUMBER,\n                    parsed_json:coin_in_amount::NUMBER\n                ),\n                COALESCE(\n                    parsed_json:amount_in::NUMBER,\n                    parsed_json:amounts_in[0]::NUMBER,\n                    parsed_json:amount_b::NUMBER,\n                    parsed_json:amount_y::NUMBER,\n                    parsed_json:event:amount_in::NUMBER,\n                    parsed_json:coin_in_amount::NUMBER\n                )\n            ),\n            -- Haedal-style events\n            parsed_json:pay_quote::NUMBER,\n            parsed_json:pay_base::NUMBER\n        ) AS amount_in_raw,\n        IFF(a_to_b,\n            COALESCE(\n                parsed_json:coin_a:name::STRING,\n                parsed_json:coin_in:name::STRING,\n                parsed_json:coin_in::STRING,\n                parsed_json:type_in::STRING,\n                parsed_json:event:coin_in::STRING,\n                parsed_json:coin_in_type:name::STRING,\n                parsed_json:types_in[0]::STRING\n            ),\n            COALESCE(\n                parsed_json:coin_b:name::STRING,\n                parsed_json:coin_in:name::STRING,\n                parsed_json:coin_in::STRING,\n                parsed_json:type_in::STRING,\n                parsed_json:event:coin_in::STRING,\n                parsed_json:coin_in_type:name::STRING,\n                parsed_json:types_in[0]::STRING\n            )\n        ) AS token_in_type,\n        -- Token Out - handle different event patterns\n        COALESCE(\n            IFF(a_to_b,\n                COALESCE(\n                    parsed_json:amount_out::NUMBER,\n                    parsed_json:amounts_out[0]::NUMBER,\n                    parsed_json:amount_b::NUMBER,\n                    parsed_json:amount_y::NUMBER,\n                    parsed_json:event:amount_out::NUMBER,\n                    parsed_json:coin_out_amount::NUMBER\n                ),\n                COALESCE(\n                    parsed_json:amount_out::NUMBER,\n                    parsed_json:amounts_out[0]::NUMBER,\n                    parsed_json:amount_a::NUMBER,\n                    parsed_json:amount_x::NUMBER,\n                    parsed_json:event:amount_out::NUMBER,\n                    parsed_json:coin_out_amount::NUMBER\n                )\n            ),\n            -- Haedal-style events\n            parsed_json:receive_base::NUMBER,\n            parsed_json:receive_quote::NUMBER\n        ) AS amount_out_raw,\n        IFF(a_to_b,\n            COALESCE(\n                parsed_json:coin_b:name::STRING,\n                parsed_json:coin_out:name::STRING,\n                parsed_json:coin_out::STRING,\n                parsed_json:type_out::STRING,\n                parsed_json:event:coin_out::STRING,\n                parsed_json:coin_out_type:name::STRING,\n                parsed_json:types_out[0]::STRING\n            ),\n            COALESCE(\n                parsed_json:coin_a:name::STRING,\n                parsed_json:coin_out:name::STRING,\n                parsed_json:coin_out::STRING,\n                parsed_json:type_out::STRING,\n                parsed_json:event:coin_out::STRING,\n                parsed_json:coin_out_type:name::STRING,\n                parsed_json:types_out[0]::STRING\n            )\n        ) AS token_out_type,\n\n        COALESCE(\n            parsed_json:fee_amount::NUMBER,\n            parsed_json:protocol_fee_amount::NUMBER,\n            parsed_json:protocol_fee::NUMBER\n        ) AS fee_amount_raw,\n\n        COALESCE(\n            parsed_json:partner_id::STRING,\n            parsed_json:partner::STRING\n        ) AS partner_address,\n        COALESCE(parsed_json:steps::NUMBER, 1) AS steps,\n\n        tx_sender AS trader_address,\n        modified_timestamp,\n        parsed_json\n    FROM\n        core_events\n),\n\n-- group swap events to determine the swap_index within the transaction\n-- several dexes will emit multiple swap events when the swap is routed\nswaps_with_groups AS (\n    SELECT\n        *,\n        -- Create base group key\n        CASE \n            WHEN pool_address IS NOT NULL THEN\n                CONCAT(pool_address, '|', COALESCE(amount_in_raw::STRING, '0'), '|', COALESCE(amount_out_raw::STRING, '0'))\n            ELSE\n                CONCAT(package_id, '|', transaction_module, '|', COALESCE(amount_in_raw::STRING, '0'), '|', COALESCE(amount_out_raw::STRING, '0'))\n        END AS base_group_key,\n        \n        -- Find gaps in event_index sequence within the same base group\n        LAG(event_index) OVER (\n            PARTITION BY tx_digest,\n                CASE \n                    WHEN pool_address IS NOT NULL THEN\n                        CONCAT(pool_address, '|', COALESCE(amount_in_raw::STRING, '0'), '|', COALESCE(amount_out_raw::STRING, '0'))\n                    ELSE\n                        CONCAT(package_id, '|', transaction_module, '|', COALESCE(amount_in_raw::STRING, '0'), '|', COALESCE(amount_out_raw::STRING, '0'))\n                END\n            ORDER BY event_index\n        ) AS prev_event_index\n    FROM swaps\n),\n\nswaps_with_gap_detection AS (\n    SELECT\n        *,\n        -- Detect if there's a significant gap (>3) between consecutive events with same base_group_key\n        CASE \n            WHEN prev_event_index IS NULL THEN 0\n            WHEN (event_index - prev_event_index) > 3 THEN 1\n            ELSE 0\n        END AS is_new_group,\n        \n        -- Create running sum to generate unique group identifiers\n        SUM(\n            CASE \n                WHEN prev_event_index IS NULL THEN 0\n                WHEN (event_index - prev_event_index) > 3 THEN 1\n                ELSE 0\n            END\n        ) OVER (\n            PARTITION BY tx_digest, base_group_key \n            ORDER BY event_index \n            ROWS UNBOUNDED PRECEDING\n        ) AS group_sequence\n    FROM swaps_with_groups\n),\n\n\nswaps_with_final_groups AS (\n    SELECT\n        *,\n        -- Create final group key that includes the sequence number for gap detection\n        CONCAT(base_group_key, '|seq:', group_sequence::STRING) AS final_group_key,\n        \n        -- Get minimum event_index for each final group\n        MIN(event_index) OVER (\n            PARTITION BY tx_digest, CONCAT(base_group_key, '|seq:', group_sequence::STRING)\n        ) AS group_min_event_index\n    FROM swaps_with_gap_detection\n),\n\nswaps_with_index AS (\n    SELECT\n        *,\n        -- Use DENSE_RANK to create swap_index based on group_min_event_index\n        DENSE_RANK() OVER (\n            PARTITION BY tx_digest \n            ORDER BY group_min_event_index\n        ) as swap_index\n    FROM swaps_with_final_groups\n),\n\ndeduplicate_swaps AS (\n    SELECT\n        *\n    FROM swaps_with_index\n\n    qualify row_number() over (\n        partition by tx_digest, swap_index\n        order by token_in_type IS NOT NULL DESC, token_out_type IS NOT NULL DESC\n    ) = 1\n)\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    event_index,\n    type,\n    event_module,\n    package_id,\n    transaction_module,\n    event_resource,\n    platform_address,\n    trader_address,\n    pool_address,\n    amount_in_raw,\n    IFF(\n        LEFT(token_in_type, 2) = '0x',\n        token_in_type,\n        '0x' || token_in_type\n    ) AS token_in_type,\n    amount_out_raw,\n    IFF(\n        LEFT(token_out_type, 2) = '0x',\n        token_out_type,\n        '0x' || token_out_type\n    ) AS token_out_type,\n    a_to_b,\n    fee_amount_raw,\n    partner_address,\n    steps,\n    swap_index,\n    \n    \nmd5(cast(coalesce(cast(tx_digest as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(trader_address as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(token_in_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(token_out_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(amount_in_raw as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(amount_out_raw as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(swap_index as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS dex_swaps_id,\n    SYSDATE() AS inserted_timestamp,\n    modified_timestamp,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id\nFROM\n    deduplicate_swaps", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "55515625b851d1444ca6a41c78711b605ee886a132112c967e8c10b84ed8bea2"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["DEX_SWAPS_ID"], "time_spine": null}, "model.sui_models.silver__aftermath_dex_swaps": {"database": "SUI", "schema": "silver", "name": "silver__aftermath_dex_swaps", "resource_type": "model", "package_name": "sui_models", "path": "silver/defi/dex/silver__aftermath_dex_swaps.sql", "original_file_path": "models/silver/defi/dex/silver__aftermath_dex_swaps.sql", "unique_id": "model.sui_models.silver__aftermath_dex_swaps", "fqn": ["sui_models", "silver", "defi", "dex", "silver__aftermath_dex_swaps"], "alias": "aftermath_dex_swaps", "checksum": {"name": "sha256", "checksum": "b787c9a92ba1f7e12a9d38d0b2b6821af5fc93e2f4ba1e12c03ffcf6ce81bebd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["non_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "dex_swaps_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["non_core"], "description": "", "columns": {"CHECKPOINT_NUMBER": {"name": "CHECKPOINT_NUMBER", "description": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301.", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_DIGEST": {"name": "TX_DIGEST", "description": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Zero-based index ordering events within a transaction. Ensures deterministic event ordering for sequence reconstruction and analytics. Example: 1.", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TYPE": {"name": "TYPE", "description": "Type/category of object state modification or event. Enum: created, modified, deleted, wrapped, unwrapped (for changes); event type string (for events). Used for lifecycle analysis and state transition tracking. Example: 'created'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EVENT_MODULE": {"name": "EVENT_MODULE", "description": "Name of the Move module that emitted the event. Used for module-specific event filtering and analytics. Example: 'coin'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EVENT_RESOURCE": {"name": "EVENT_RESOURCE", "description": "Fully qualified type signature of the event struct. Format: {package_id}::{module}::{struct_name}<type_parameters>. Enables type-safe event deserialization and schema tracking. Example: '0x2::coin::TransferEvent<0x2::sui::SUI>'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TRANSACTION_MODULE": {"name": "TRANSACTION_MODULE", "description": "Name of the module executed in the transaction that emitted the event. Links events to transaction context for flow analysis. Example: 'pay_sui'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PLATFORM_ADDRESS": {"name": "PLATFORM_ADDRESS", "description": "The smart contract address of the DEX platform that facilitated this swap. This represents the deployed contract address for the specific DEX protocol on the Sui blockchain. Used for contract verification, security analysis, and linking to platform-specific metadata and configurations. Essential for protocol-specific analysis and filtering across different DeFi platforms.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The address of the liquidity pool involved in the swap. For protocols that use AMM (Automated Market Maker) pools, this identifies the specific pool contract. May be NULL for order book-based protocols like DeepBook or centralized limit order protocols. Essential for pool-specific analytics, liquidity analysis, and understanding which pools are most active for different token pairs.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "AMOUNT_IN_RAW": {"name": "AMOUNT_IN_RAW", "description": "The raw amount of tokens being swapped in (input amount) before any decimal adjustments. This represents the exact on-chain token amount as it appears in the swap event. Preserves precision for accurate calculations and is essential for volume analysis, price impact calculations, and swap size distribution analysis. Critical for calculating swap rates and understanding the actual token amounts exchanged in each swap.", "meta": {}, "data_type": "NUMBER(38,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "AMOUNT_OUT_RAW": {"name": "AMOUNT_OUT_RAW", "description": "The raw amount of tokens being swapped out (output amount) before any decimal adjustments. This represents the exact on-chain token amount that the user receives from the swap. Critical for calculating swap rates, slippage analysis, and understanding the actual token amounts exchanged in each swap. Essential for volume analysis and swap size distribution analysis.", "meta": {}, "data_type": "NUMBER(38,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "A_TO_B": {"name": "A_TO_B", "description": "A boolean flag indicating the direction of the swap within the pool. When TRUE, the swap goes from token A to token B; when FALSE, it goes from token B to token A. This field is protocol-specific and may be NULL for some DEX platforms. Important for understanding swap direction and pool token ordering conventions. Follows each protocol's specific pool token ordering conventions.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "FEE_AMOUNT_RAW": {"name": "FEE_AMOUNT_RAW", "description": "The raw amount of fees charged for the swap transaction. This includes protocol fees, liquidity provider fees, and any other transaction costs. May be 0 for protocols that don't charge explicit fees or when fees are embedded in the swap amounts. Essential for fee revenue analysis and total cost of trading calculations. For some protocols like Aftermath, this may be NULL as fees are handled differently.", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PARTNER_ADDRESS": {"name": "PARTNER_ADDRESS", "description": "The address of a partner or affiliate that facilitated the swap (if applicable). Used primarily by Cetus for their partner program where swaps can be routed through partner contracts. May be NULL for most protocols or when no partner was involved. Useful for tracking partner performance and affiliate program analytics within the DEX ecosystem.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "STEPS": {"name": "STEPS", "description": "The number of steps or hops required to complete the swap. For simple swaps, this is typically 1. For complex swaps involving multiple pools or routing through multiple protocols, this indicates the number of intermediate steps. Essential for understanding swap complexity and routing efficiency across different protocols. Critical for analyzing multi-hop swaps and routing optimization.", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_IN_TYPE": {"name": "TOKEN_IN_TYPE", "description": "The full type identifier of the token being swapped in (input token). This follows Sui's Move type format (e.g., \"0x2::sui::SUI\" for the native SUI token). Essential for token identification, pricing lookups, and token-specific analytics. Used for calculating USD values and token pair analysis. Some models ensure proper formatting by adding '0x' prefix if missing.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_OUT_TYPE": {"name": "TOKEN_OUT_TYPE", "description": "The full type identifier of the token being swapped out (output token). This follows Sui's Move type format and represents the token that the user receives from the swap. Critical for token pair analysis, swap rate calculations, and understanding token flow patterns across the DeFi ecosystem. Some models ensure proper formatting by adding '0x' prefix if missing.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TRADER_ADDRESS": {"name": "TRADER_ADDRESS", "description": "The address of the wallet or account that initiated the swap. May be NULL for some protocols that don't explicitly track the trader address in their events. Essential for user behavior analysis, wallet tracking, and understanding individual trader patterns and preferences across different DEX platforms. For some protocols like Aftermath, this is extracted from the transaction sender.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "DEX_SWAPS_ID": {"name": "DEX_SWAPS_ID", "description": "A unique surrogate key generated from the combination of transaction identifiers and swap details. For the general DEX table, this combines tx_digest and event_index. For protocol-specific tables like Aftermath, this may include additional fields like trader_address, token_in_type, token_out_type, amount_in_raw, and amount_out_raw. This provides a stable, unique identifier for each swap event that can be used as a primary key for downstream analytics and data modeling. Ensures data integrity and prevents duplicate processing.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PACKAGE_ID": {"name": "PACKAGE_ID", "description": "Unique identifier (object ID) of the Move package containing the event module. Used for package-level analytics, deployment tracking, and contract lineage. Example: '0x2'.", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PARSED_JSON": {"name": "PARSED_JSON", "description": "JSON object representing the event data, with structure varying by event type. Provides structured, machine-readable event data for analytics, dApp monitoring, and real-time applications. Example: {\"amount\": \"1000000\", \"recipient\": \"0xabc...\"}.", "meta": {}, "data_type": "VARIANT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "_INVOCATION_ID": {"name": "_INVOCATION_ID", "description": "A unique identifier for the dbt run that created or updated this record. This field is used for data lineage tracking and debugging purposes. Helps identify which specific dbt execution was responsible for processing each record and enables traceability back to the source code and configuration used. Essential for ETL monitoring, data quality tracking, and troubleshooting pipeline issues.", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/silver/defi/dex/silver_defi.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "dex_swaps_id", "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["non_core"]}, "created_at": 1756141890.7991247, "relation_name": "SUI.silver.aftermath_dex_swaps", "raw_code": "-- depends_on: {{ ref('core__fact_events') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = \"dex_swaps_id\",\n    cluster_by = ['modified_timestamp::DATE','block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['non_core']\n) }}\n\nWITH core_events AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        tx_sender,\n        event_index,\n        type,\n        event_address,\n        event_module,\n        event_resource,\n        package_id,\n        transaction_module,\n        parsed_json,\n        modified_timestamp\n    FROM\n        {{ ref('core__fact_events') }}\n    WHERE\n{% if is_incremental() %}\n        modified_timestamp >= (\n            SELECT\n                COALESCE(MAX(modified_timestamp), '1900-01-01'::TIMESTAMP) AS modified_timestamp\n            FROM\n                {{ this }}\n        )\n        AND\n{% endif %}\n        -- Only include Aftermath module swaps\n        transaction_module = 'aftermath'\n        AND event_resource IN (\n                'SwapEvent',\n                'SwapEventV2'\n        )\n),\n\nswaps AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        tx_sender,\n        event_index,\n        type,\n        event_module,\n        event_resource,\n        package_id,\n        transaction_module,\n        event_address AS platform_address,\n        parsed_json:pool_id::STRING AS pool_address,\n        parsed_json:a2b::BOOLEAN AS a_to_b,\n        COALESCE(\n            parsed_json:amount_in::NUMBER,\n            parsed_json:amounts_in[0]::NUMBER\n        ) AS amount_in_raw,\n        COALESCE(\n            parsed_json:from:name::STRING,\n            parsed_json:types_in[0]::STRING\n        ) AS token_in_type,\n        COALESCE(\n            parsed_json:amount_out::NUMBER,\n            parsed_json:amounts_out[0]::NUMBER\n        ) AS amount_out_raw,\n        COALESCE(\n            parsed_json:target:name::STRING,\n            parsed_json:types_out[0]::STRING\n        ) AS token_out_type,\n        NULL AS fee_amount_raw,\n        COALESCE(\n            parsed_json:referrer::STRING,\n            parsed_json:partner::STRING\n        ) AS partner_address,\n        1 AS steps,\n        tx_sender AS trader_address,\n        modified_timestamp,\n        parsed_json\n    FROM\n        core_events\n)\n\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    event_index,\n    type,\n    event_module,\n    package_id,\n    transaction_module,\n    event_resource,\n    platform_address,\n    trader_address,\n    pool_address,\n    amount_in_raw,\n    IFF(\n        LEFT(token_in_type, 2) = '0x',\n        token_in_type,\n        '0x' || token_in_type\n    ) AS token_in_type,\n    amount_out_raw,\n    IFF(\n        LEFT(token_out_type, 2) = '0x',\n        token_out_type,\n        '0x' || token_out_type\n    ) AS token_out_type,\n    a_to_b,\n    fee_amount_raw,\n    partner_address,\n    steps,\n    parsed_json,\n    {{ dbt_utils.generate_surrogate_key(['tx_digest', 'event_index']) }} AS dex_swaps_id,\n    SYSDATE() AS inserted_timestamp,\n    modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    swaps", "language": "sql", "refs": [{"name": "core__fact_events", "package": null, "version": null}, {"name": "core__fact_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sui_models.core__fact_events"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver__aftermath_dex_swaps.sql", "compiled": true, "compiled_code": "-- depends_on: SUI.core.fact_events\n\n\nWITH core_events AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        tx_sender,\n        event_index,\n        type,\n        event_address,\n        event_module,\n        event_resource,\n        package_id,\n        transaction_module,\n        parsed_json,\n        modified_timestamp\n    FROM\n        SUI.core.fact_events\n    WHERE\n\n        modified_timestamp >= (\n            SELECT\n                COALESCE(MAX(modified_timestamp), '1900-01-01'::TIMESTAMP) AS modified_timestamp\n            FROM\n                SUI.silver.aftermath_dex_swaps\n        )\n        AND\n\n        -- Only include Aftermath module swaps\n        transaction_module = 'aftermath'\n        AND event_resource IN (\n                'SwapEvent',\n                'SwapEventV2'\n        )\n),\n\nswaps AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        tx_sender,\n        event_index,\n        type,\n        event_module,\n        event_resource,\n        package_id,\n        transaction_module,\n        event_address AS platform_address,\n        parsed_json:pool_id::STRING AS pool_address,\n        parsed_json:a2b::BOOLEAN AS a_to_b,\n        COALESCE(\n            parsed_json:amount_in::NUMBER,\n            parsed_json:amounts_in[0]::NUMBER\n        ) AS amount_in_raw,\n        COALESCE(\n            parsed_json:from:name::STRING,\n            parsed_json:types_in[0]::STRING\n        ) AS token_in_type,\n        COALESCE(\n            parsed_json:amount_out::NUMBER,\n            parsed_json:amounts_out[0]::NUMBER\n        ) AS amount_out_raw,\n        COALESCE(\n            parsed_json:target:name::STRING,\n            parsed_json:types_out[0]::STRING\n        ) AS token_out_type,\n        NULL AS fee_amount_raw,\n        COALESCE(\n            parsed_json:referrer::STRING,\n            parsed_json:partner::STRING\n        ) AS partner_address,\n        1 AS steps,\n        tx_sender AS trader_address,\n        modified_timestamp,\n        parsed_json\n    FROM\n        core_events\n)\n\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    event_index,\n    type,\n    event_module,\n    package_id,\n    transaction_module,\n    event_resource,\n    platform_address,\n    trader_address,\n    pool_address,\n    amount_in_raw,\n    IFF(\n        LEFT(token_in_type, 2) = '0x',\n        token_in_type,\n        '0x' || token_in_type\n    ) AS token_in_type,\n    amount_out_raw,\n    IFF(\n        LEFT(token_out_type, 2) = '0x',\n        token_out_type,\n        '0x' || token_out_type\n    ) AS token_out_type,\n    a_to_b,\n    fee_amount_raw,\n    partner_address,\n    steps,\n    parsed_json,\n    \n    \nmd5(cast(coalesce(cast(tx_digest as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(event_index as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS dex_swaps_id,\n    SYSDATE() AS inserted_timestamp,\n    modified_timestamp,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id\nFROM\n    swaps", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "bb73ec7109b980072b10053c0bc97966ea7bb2b293eeefb19209b78f643b8133"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["DEX_SWAPS_ID"], "time_spine": null}, "model.sui_models.silver_bridge__sui_bridge_inbound": {"database": "SUI", "schema": "silver_bridge", "name": "silver_bridge__sui_bridge_inbound", "resource_type": "model", "package_name": "sui_models", "path": "silver/defi/bridge/silver_bridge__sui_bridge_inbound.sql", "original_file_path": "models/silver/defi/bridge/silver_bridge__sui_bridge_inbound.sql", "unique_id": "model.sui_models.silver_bridge__sui_bridge_inbound", "fqn": ["sui_models", "silver", "defi", "bridge", "silver_bridge__sui_bridge_inbound"], "alias": "sui_bridge_inbound", "checksum": {"name": "sha256", "checksum": "ea9c91c8294813e8dafd2072b3e6e3c5bfcd59eefd41bdedfdbac0c2265ae851"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "defi", "non_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_digest", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["silver", "defi", "non_core"], "description": "", "columns": {"checkpoint_number": {"name": "checkpoint_number", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "tx_digest": {"name": "tx_digest", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "tx_sender": {"name": "tx_sender", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "event_index": {"name": "event_index", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "source_chain": {"name": "source_chain", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "destination_chain": {"name": "destination_chain", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "", "meta": {}, "data_type": "NUMBER(38,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "source_address": {"name": "source_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "destination_address": {"name": "destination_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "coin_type": {"name": "coin_type", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "bridge_address": {"name": "bridge_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "sui_bridge_inbound_id": {"name": "sui_bridge_inbound_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/silver/defi/bridge/silver_defi.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "tx_digest", "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["silver", "defi", "non_core"]}, "created_at": 1756141890.9021227, "relation_name": "SUI.silver_bridge.sui_bridge_inbound", "raw_code": "-- depends_on: {{ ref('bronze__checkpoints') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = \"tx_digest\",\n    cluster_by = ['modified_timestamp::DATE','block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['silver','defi','non_core']\n) }}\n\n{% if execute %}\n\n{% if is_incremental() %}\n{% set min_bd_query %}\n\nSELECT\n    MIN(\n        block_timestamp :: DATE\n    )\nFROM\n    {{ ref('core__fact_events') }}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    ) {% endset %}\n    {% set min_bd = run_query(min_bd_query) [0] [0] %}\n{% endif %}\n{% endif %}\n\nWITH claims AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        event_index,\n        tx_sender,\n        parsed_json :message_key :source_chain :: INT AS source_chain,\n    FROM\n        {{ ref('core__fact_events') }}\n    WHERE\n        tx_succeeded\n        AND event_address = '0x000000000000000000000000000000000000000000000000000000000000000b'\n        AND event_resource = 'TokenTransferClaimed' {# AND block_timestamp :: DATE >= '2025-07-01' #}\n\n{% if is_incremental() %}\nAND modified_timestamp >= (\n    SELECT\n        MAX(modified_timestamp)\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nbc AS (\n    SELECT\n        A.tx_digest,\n        b.event_index,\n        A.coin_type,\n        A.amount,\n        A.address_owner\n    FROM\n        {{ ref('core__fact_balance_changes') }} A\n        JOIN claims b\n        ON A.tx_digest = b.tx_digest\n    WHERE\n        A.address_owner <> A.tx_sender\n        AND amount > 0\n\n{% if is_incremental() %}\nAND A.block_timestamp :: DATE :: DATE >= '{{ min_bd }}'\n{% endif %}\n\nqualify ROW_NUMBER() over(\n    PARTITION BY A.tx_digest\n    ORDER BY\n        balance_change_index DESC\n) = 1\n)\nSELECT\n    A.checkpoint_number,\n    A.block_timestamp,\n    A.tx_digest,\n    A.tx_sender,\n    A.event_index,\n    A.source_chain,\n    0 AS destination_chain,\n    bc.amount,\n    NULL :: STRING AS source_address,\n    bc.address_owner AS destination_address,\n    bc.coin_type,\n    '0x000000000000000000000000000000000000000000000000000000000000000b' AS bridge_address,\n    {{ dbt_utils.generate_surrogate_key(['tx_digest']) }} AS sui_bridge_inbound_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    claims A\n    JOIN bc USING (\n        tx_digest,\n        event_index\n    )", "language": "sql", "refs": [{"name": "bronze__checkpoints", "package": null, "version": null}, {"name": "core__fact_events", "package": null, "version": null}, {"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.run_query"], "nodes": ["model.sui_models.bronze__checkpoints", "model.sui_models.core__fact_events", "model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/bridge/silver_bridge__sui_bridge_inbound.sql", "compiled": true, "compiled_code": "-- depends_on: SUI.bronze.checkpoints\n\n\n\n\n\n\n    \n\n\n\nWITH claims AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        event_index,\n        tx_sender,\n        parsed_json :message_key :source_chain :: INT AS source_chain,\n    FROM\n        SUI.core.fact_events\n    WHERE\n        tx_succeeded\n        AND event_address = '0x000000000000000000000000000000000000000000000000000000000000000b'\n        AND event_resource = 'TokenTransferClaimed' \n\n\nAND modified_timestamp >= (\n    SELECT\n        MAX(modified_timestamp)\n    FROM\n        SUI.silver_bridge.sui_bridge_inbound\n)\n\n),\nbc AS (\n    SELECT\n        A.tx_digest,\n        b.event_index,\n        A.coin_type,\n        A.amount,\n        A.address_owner\n    FROM\n        SUI.core.fact_balance_changes A\n        JOIN claims b\n        ON A.tx_digest = b.tx_digest\n    WHERE\n        A.address_owner <> A.tx_sender\n        AND amount > 0\n\n\nAND A.block_timestamp :: DATE :: DATE >= '2025-03-05'\n\n\nqualify ROW_NUMBER() over(\n    PARTITION BY A.tx_digest\n    ORDER BY\n        balance_change_index DESC\n) = 1\n)\nSELECT\n    A.checkpoint_number,\n    A.block_timestamp,\n    A.tx_digest,\n    A.tx_sender,\n    A.event_index,\n    A.source_chain,\n    0 AS destination_chain,\n    bc.amount,\n    NULL :: STRING AS source_address,\n    bc.address_owner AS destination_address,\n    bc.coin_type,\n    '0x000000000000000000000000000000000000000000000000000000000000000b' AS bridge_address,\n    \n    \nmd5(cast(coalesce(cast(tx_digest as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS sui_bridge_inbound_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id\nFROM\n    claims A\n    JOIN bc USING (\n        tx_digest,\n        event_index\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "fa9d1edc3073c434a9fb0aee282686e9fc65259f8d42b1b8bd88d422ceec48bd"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.silver_bridge__wormhole_outbound": {"database": "SUI", "schema": "silver_bridge", "name": "silver_bridge__wormhole_outbound", "resource_type": "model", "package_name": "sui_models", "path": "silver/defi/bridge/silver_bridge__wormhole_outbound.sql", "original_file_path": "models/silver/defi/bridge/silver_bridge__wormhole_outbound.sql", "unique_id": "model.sui_models.silver_bridge__wormhole_outbound", "fqn": ["sui_models", "silver", "defi", "bridge", "silver_bridge__wormhole_outbound"], "alias": "wormhole_outbound", "checksum": {"name": "sha256", "checksum": "15a6eac482ff4bb4c2aa01b7b909bfa384759fa73495fa7c9918d40bef3933cc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "defi", "non_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_digest", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["silver", "defi", "non_core"], "description": "", "columns": {"checkpoint_number": {"name": "checkpoint_number", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "tx_digest": {"name": "tx_digest", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "tx_sender": {"name": "tx_sender", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "event_index": {"name": "event_index", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "source_chain": {"name": "source_chain", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "destination_chain": {"name": "destination_chain", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "", "meta": {}, "data_type": "NUMBER(38,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "source_address": {"name": "source_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "destination_address": {"name": "destination_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "coin_type": {"name": "coin_type", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "bridge_address": {"name": "bridge_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "wormhole_outbound_id": {"name": "wormhole_outbound_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/silver/defi/bridge/silver_defi.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "tx_digest", "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["silver", "defi", "non_core"]}, "created_at": 1756141890.9100246, "relation_name": "SUI.silver_bridge.wormhole_outbound", "raw_code": "-- depends_on: {{ ref('bronze__checkpoints') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = \"tx_digest\",\n    cluster_by = ['modified_timestamp::DATE','block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['silver','defi','non_core']\n) }}\n\n{% if execute %}\n\n{% if is_incremental() %}\n{% set min_bd_query %}\n\nSELECT\n    MIN(\n        block_timestamp :: DATE\n    )\nFROM\n    {{ ref('core__fact_events') }}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    ) {% endset %}\n    {% set min_bd = run_query(min_bd_query) [0] [0] %}\n{% endif %}\n{% endif %}\n\nWITH wh_mess AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        event_index,\n        tx_sender,\n        parsed_json,\n        CASE\n            WHEN event_address = '0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a' THEN TRUE\n            ELSE FALSE\n        END AS is_basic\n    FROM\n        {{ ref('core__fact_events') }}\n    WHERE\n        tx_succeeded\n        AND (\n            (\n                event_address = '0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a'\n                AND event_resource = 'WormholeMessage' {# AND block_timestamp :: DATE >= '2025-07-01' #}\n            )\n            OR (\n                package_id = '0x2aa6c5d56376c371f88a6cc42e852824994993cb9bab8d3e6450cbe3cb32b94e'\n                AND event_resource = 'DepositForBurn' {# AND block_timestamp :: DATE >= '2025-07-01' #}\n            )\n        )\n\n{% if is_incremental() %}\nAND modified_timestamp >= (\n    SELECT\n        MAX(modified_timestamp)\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nbc AS (\n    SELECT\n        A.tx_digest,\n        b.event_index,\n        A.coin_type,\n        A.amount\n    FROM\n        {{ ref('core__fact_balance_changes') }} A\n        JOIN wh_mess b\n        ON A.tx_digest = b.tx_digest\n        AND A.address_owner = b.tx_sender\n    WHERE\n        amount < 0\n\n{% if is_incremental() %}\nAND A.block_timestamp :: DATE :: DATE >= '{{ min_bd }}'\n{% endif %}\n\nqualify ROW_NUMBER() over(\n    PARTITION BY A.tx_digest\n    ORDER BY\n        balance_change_index DESC\n) = 1\n)\nSELECT\n    A.checkpoint_number,\n    A.block_timestamp,\n    A.tx_digest,\n    A.tx_sender,\n    A.event_index,\n    0 AS source_chain,\n    NULL :: INT AS destination_chain,\n    COALESCE(\n        -1 * bc.amount,\n        C.parsed_json :amount :: INT\n    ) AS amount,\n    A.tx_sender AS source_address,\n    NULL AS destination_address,\n    bc.coin_type,\n    '0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a' AS bridge_address,\n    {{ dbt_utils.generate_surrogate_key(['a.tx_digest']) }} AS wormhole_outbound_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    wh_mess A\n    JOIN bc USING (\n        tx_digest,\n        event_index\n    )\n    LEFT JOIN wh_mess C\n    ON A.tx_digest = C.tx_digest\n    AND C.is_basic = FALSE\nWHERE\n    A.is_basic", "language": "sql", "refs": [{"name": "bronze__checkpoints", "package": null, "version": null}, {"name": "core__fact_events", "package": null, "version": null}, {"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.run_query"], "nodes": ["model.sui_models.bronze__checkpoints", "model.sui_models.core__fact_events", "model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/bridge/silver_bridge__wormhole_outbound.sql", "compiled": true, "compiled_code": "-- depends_on: SUI.bronze.checkpoints\n\n\n\n\n\n\n    \n\n\n\nWITH wh_mess AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        event_index,\n        tx_sender,\n        parsed_json,\n        CASE\n            WHEN event_address = '0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a' THEN TRUE\n            ELSE FALSE\n        END AS is_basic\n    FROM\n        SUI.core.fact_events\n    WHERE\n        tx_succeeded\n        AND (\n            (\n                event_address = '0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a'\n                AND event_resource = 'WormholeMessage' \n            )\n            OR (\n                package_id = '0x2aa6c5d56376c371f88a6cc42e852824994993cb9bab8d3e6450cbe3cb32b94e'\n                AND event_resource = 'DepositForBurn' \n            )\n        )\n\n\nAND modified_timestamp >= (\n    SELECT\n        MAX(modified_timestamp)\n    FROM\n        SUI.silver_bridge.wormhole_outbound\n)\n\n),\nbc AS (\n    SELECT\n        A.tx_digest,\n        b.event_index,\n        A.coin_type,\n        A.amount\n    FROM\n        SUI.core.fact_balance_changes A\n        JOIN wh_mess b\n        ON A.tx_digest = b.tx_digest\n        AND A.address_owner = b.tx_sender\n    WHERE\n        amount < 0\n\n\nAND A.block_timestamp :: DATE :: DATE >= '2025-03-05'\n\n\nqualify ROW_NUMBER() over(\n    PARTITION BY A.tx_digest\n    ORDER BY\n        balance_change_index DESC\n) = 1\n)\nSELECT\n    A.checkpoint_number,\n    A.block_timestamp,\n    A.tx_digest,\n    A.tx_sender,\n    A.event_index,\n    0 AS source_chain,\n    NULL :: INT AS destination_chain,\n    COALESCE(\n        -1 * bc.amount,\n        C.parsed_json :amount :: INT\n    ) AS amount,\n    A.tx_sender AS source_address,\n    NULL AS destination_address,\n    bc.coin_type,\n    '0x5306f64e312b581766351c07af79c72fcb1cd25147157fdc2f8ad76de9a3fb6a' AS bridge_address,\n    \n    \nmd5(cast(coalesce(cast(a.tx_digest as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS wormhole_outbound_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id\nFROM\n    wh_mess A\n    JOIN bc USING (\n        tx_digest,\n        event_index\n    )\n    LEFT JOIN wh_mess C\n    ON A.tx_digest = C.tx_digest\n    AND C.is_basic = FALSE\nWHERE\n    A.is_basic", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "3a195cb8930105826b447a4a6c94c56327d4dbc39671f9bdf1227b7cd3bccd1b"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.silver_bridge__wormhole_inbound": {"database": "SUI", "schema": "silver_bridge", "name": "silver_bridge__wormhole_inbound", "resource_type": "model", "package_name": "sui_models", "path": "silver/defi/bridge/silver_bridge__wormhole_inbound.sql", "original_file_path": "models/silver/defi/bridge/silver_bridge__wormhole_inbound.sql", "unique_id": "model.sui_models.silver_bridge__wormhole_inbound", "fqn": ["sui_models", "silver", "defi", "bridge", "silver_bridge__wormhole_inbound"], "alias": "wormhole_inbound", "checksum": {"name": "sha256", "checksum": "8b4c344d1f89a704c2b5512a3a60b5f944d66986b1dba2f742728086a66325b6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "defi", "non_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_digest", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["silver", "defi", "non_core"], "description": "", "columns": {"checkpoint_number": {"name": "checkpoint_number", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "tx_digest": {"name": "tx_digest", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "tx_sender": {"name": "tx_sender", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "event_index": {"name": "event_index", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "source_chain": {"name": "source_chain", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "destination_chain": {"name": "destination_chain", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "", "meta": {}, "data_type": "NUMBER(38,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "source_address": {"name": "source_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "destination_address": {"name": "destination_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "coin_type": {"name": "coin_type", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "bridge_address": {"name": "bridge_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "wormhole_inbound_id": {"name": "wormhole_inbound_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/silver/defi/bridge/silver_defi.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "tx_digest", "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["silver", "defi", "non_core"]}, "created_at": 1756141890.9073832, "relation_name": "SUI.silver_bridge.wormhole_inbound", "raw_code": "-- depends_on: {{ ref('bronze__checkpoints') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = \"tx_digest\",\n    cluster_by = ['modified_timestamp::DATE','block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['silver','defi','non_core']\n) }}\n\n{% if execute %}\n\n{% if is_incremental() %}\n{% set min_bd_query %}\n\nSELECT\n    MIN(\n        block_timestamp :: DATE\n    )\nFROM\n    {{ ref('core__fact_events') }}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    ) {% endset %}\n    {% set min_bd = run_query(min_bd_query) [0] [0] %}\n{% endif %}\n{% endif %}\n\nWITH wh_mess AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        event_index,\n        tx_sender\n    FROM\n        {{ ref('core__fact_events') }}\n    WHERE\n        tx_succeeded\n        AND event_address = '0x26efee2b51c911237888e5dc6702868abca3c7ac12c53f76ef8eba0697695e3d'\n        AND event_resource = 'TransferRedeemed' {# AND block_timestamp :: DATE >= '2025-07-01' #}\n\n{% if is_incremental() %}\nAND modified_timestamp >= (\n    SELECT\n        MAX(modified_timestamp)\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nbc AS (\n    SELECT\n        A.tx_digest,\n        b.event_index,\n        A.coin_type,\n        A.amount\n    FROM\n        {{ ref('core__fact_balance_changes') }} A\n        JOIN wh_mess b\n        ON A.tx_digest = b.tx_digest\n    WHERE\n        amount > 0\n        AND A.address_owner = A.tx_sender\n\n{% if is_incremental() %}\nAND A.block_timestamp :: DATE :: DATE >= '{{ min_bd }}'\n{% endif %}\n\nqualify ROW_NUMBER() over(\n    PARTITION BY A.tx_digest\n    ORDER BY\n        balance_change_index DESC\n) = 1\n)\nSELECT\n    A.checkpoint_number,\n    A.block_timestamp,\n    A.tx_digest,\n    A.tx_sender,\n    A.event_index,\n    NULL :: INT AS source_chain,\n    0 AS destination_chain,\n    bc.amount AS amount,\n    NULL AS source_address,\n    A.tx_sender AS destination_address,\n    bc.coin_type,\n    '0x26efee2b51c911237888e5dc6702868abca3c7ac12c53f76ef8eba0697695e3d' AS bridge_address,\n    {{ dbt_utils.generate_surrogate_key(['a.tx_digest']) }} AS wormhole_inbound_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    wh_mess A\n    JOIN bc USING (\n        tx_digest,\n        event_index\n    )", "language": "sql", "refs": [{"name": "bronze__checkpoints", "package": null, "version": null}, {"name": "core__fact_events", "package": null, "version": null}, {"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.run_query"], "nodes": ["model.sui_models.bronze__checkpoints", "model.sui_models.core__fact_events", "model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/bridge/silver_bridge__wormhole_inbound.sql", "compiled": true, "compiled_code": "-- depends_on: SUI.bronze.checkpoints\n\n\n\n\n\n\n    \n\n\n\nWITH wh_mess AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        event_index,\n        tx_sender\n    FROM\n        SUI.core.fact_events\n    WHERE\n        tx_succeeded\n        AND event_address = '0x26efee2b51c911237888e5dc6702868abca3c7ac12c53f76ef8eba0697695e3d'\n        AND event_resource = 'TransferRedeemed' \n\n\nAND modified_timestamp >= (\n    SELECT\n        MAX(modified_timestamp)\n    FROM\n        SUI.silver_bridge.wormhole_inbound\n)\n\n),\nbc AS (\n    SELECT\n        A.tx_digest,\n        b.event_index,\n        A.coin_type,\n        A.amount\n    FROM\n        SUI.core.fact_balance_changes A\n        JOIN wh_mess b\n        ON A.tx_digest = b.tx_digest\n    WHERE\n        amount > 0\n        AND A.address_owner = A.tx_sender\n\n\nAND A.block_timestamp :: DATE :: DATE >= '2025-03-05'\n\n\nqualify ROW_NUMBER() over(\n    PARTITION BY A.tx_digest\n    ORDER BY\n        balance_change_index DESC\n) = 1\n)\nSELECT\n    A.checkpoint_number,\n    A.block_timestamp,\n    A.tx_digest,\n    A.tx_sender,\n    A.event_index,\n    NULL :: INT AS source_chain,\n    0 AS destination_chain,\n    bc.amount AS amount,\n    NULL AS source_address,\n    A.tx_sender AS destination_address,\n    bc.coin_type,\n    '0x26efee2b51c911237888e5dc6702868abca3c7ac12c53f76ef8eba0697695e3d' AS bridge_address,\n    \n    \nmd5(cast(coalesce(cast(a.tx_digest as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS wormhole_inbound_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id\nFROM\n    wh_mess A\n    JOIN bc USING (\n        tx_digest,\n        event_index\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "8cc8e582eae8fb81c36221c517ea65316375c134fc4773c198c0f736ac49b38f"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.silver_bridge__sui_bridge_outbound": {"database": "SUI", "schema": "silver_bridge", "name": "silver_bridge__sui_bridge_outbound", "resource_type": "model", "package_name": "sui_models", "path": "silver/defi/bridge/silver_bridge__sui_bridge_outbound.sql", "original_file_path": "models/silver/defi/bridge/silver_bridge__sui_bridge_outbound.sql", "unique_id": "model.sui_models.silver_bridge__sui_bridge_outbound", "fqn": ["sui_models", "silver", "defi", "bridge", "silver_bridge__sui_bridge_outbound"], "alias": "sui_bridge_outbound", "checksum": {"name": "sha256", "checksum": "0c496104cc8e11d8c30aaedb9e135f1013dcd1e36821b21d2bb0cdf24b1bf51c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "defi", "non_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_digest", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["silver", "defi", "non_core"], "description": "", "columns": {"checkpoint_number": {"name": "checkpoint_number", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "tx_digest": {"name": "tx_digest", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "tx_sender": {"name": "tx_sender", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "event_index": {"name": "event_index", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "source_chain": {"name": "source_chain", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "destination_chain": {"name": "destination_chain", "description": "", "meta": {}, "data_type": "NUMBER(18,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "", "meta": {}, "data_type": "NUMBER(38,0)", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "source_address": {"name": "source_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "destination_address": {"name": "destination_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "coin_type": {"name": "coin_type", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "bridge_address": {"name": "bridge_address", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "sui_bridge_outbound_id": {"name": "sui_bridge_outbound_id", "description": "", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "inserted_timestamp": {"name": "inserted_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "modified_timestamp": {"name": "modified_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "block_timestamp": {"name": "block_timestamp", "description": "", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "_invocation_id": {"name": "_invocation_id", "description": "", "meta": {}, "data_type": "TEXT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/silver/defi/bridge/silver_defi.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "tx_digest", "cluster_by": ["modified_timestamp::DATE", "block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["silver", "defi", "non_core"]}, "created_at": 1756141890.904855, "relation_name": "SUI.silver_bridge.sui_bridge_outbound", "raw_code": "-- depends_on: {{ ref('bronze__checkpoints') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = \"tx_digest\",\n    cluster_by = ['modified_timestamp::DATE','block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['silver','defi','non_core']\n) }}\n\n{% if execute %}\n\n{% if is_incremental() %}\n{% set min_bd_query %}\n\nSELECT\n    MIN(\n        block_timestamp :: DATE\n    )\nFROM\n    {{ ref('core__fact_events') }}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp)\n        FROM\n            {{ this }}\n    ) {% endset %}\n    {% set min_bd = run_query(min_bd_query) [0] [0] %}\n{% endif %}\n{% endif %}\n\nWITH base_events AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        tx_sender,\n        event_index,\n        parsed_json,\n        modified_timestamp\n    FROM\n        {{ ref('core__fact_events') }}\n    WHERE\n        tx_succeeded\n        AND event_address = '0x000000000000000000000000000000000000000000000000000000000000000b'\n        AND event_resource = 'TokenDepositedEvent' {# AND block_timestamp :: DATE >= '2025-07-01' #}\n\n{% if is_incremental() %}\nAND modified_timestamp >= (\n    SELECT\n        MAX(modified_timestamp)\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\ndeposits_base AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        tx_sender,\n        event_index,\n        '0x' || LISTAGG(\n            CASE\n                WHEN s.value :: INTEGER = 0 THEN '00'\n                WHEN s.value :: INTEGER < 16 THEN '0' || SUBSTR(\n                    '0123456789abcdef',\n                    s.value :: INTEGER + 1,\n                    1\n                )\n                ELSE SUBSTR('0123456789abcdef', FLOOR(s.value :: INTEGER / 16) + 1, 1) || SUBSTR('0123456789abcdef', MOD(s.value :: INTEGER, 16) + 1, 1)\n            END,\n            ''\n        ) within GROUP (\n            ORDER BY\n                s.index\n        ) AS sender_address,\n        parsed_json :source_chain :: INT AS source_chain,\n        parsed_json :target_chain :: INT AS target_chain,\n        parsed_json :token_type :: STRING AS token_type,\n        parsed_json :amount :: bigint AS amount,\n        parsed_json :seq_num :: INT AS seq_num,\n        modified_timestamp\n    FROM\n        base_events e,\n        LATERAL FLATTEN(\n            input => e.parsed_json :sender_address\n        ) s\n    GROUP BY\n        ALL\n),\ndeposits_target AS (\n    SELECT\n        tx_digest,\n        event_index,\n        '0x' || LISTAGG(\n            CASE\n                WHEN s.value :: INTEGER = 0 THEN '00'\n                WHEN s.value :: INTEGER < 16 THEN '0' || SUBSTR(\n                    '0123456789abcdef',\n                    s.value :: INTEGER + 1,\n                    1\n                )\n                ELSE SUBSTR('0123456789abcdef', FLOOR(s.value :: INTEGER / 16) + 1, 1) || SUBSTR('0123456789abcdef', MOD(s.value :: INTEGER, 16) + 1, 1)\n            END,\n            ''\n        ) within GROUP (\n            ORDER BY\n                s.index\n        ) AS target_address\n    FROM\n        base_events e,\n        LATERAL FLATTEN(\n            input => e.parsed_json :target_address\n        ) s\n    GROUP BY\n        ALL\n),\nbc AS (\n    SELECT\n        A.tx_digest,\n        b.event_index,\n        A.coin_type\n    FROM\n        {{ ref('core__fact_balance_changes') }} A\n        JOIN deposits_base b\n        ON A.tx_digest = b.tx_digest\n        AND A.address_owner = b.sender_address\n        AND - A.amount = b.amount\n\n{% if is_incremental() %}\nWHERE\n    A.block_timestamp :: DATE :: DATE >= '{{ min_bd }}'\n{% endif %}\n\nqualify ROW_NUMBER() over(\n    PARTITION BY A.tx_digest\n    ORDER BY\n        balance_change_index DESC\n) = 1\n)\nSELECT\n    A.checkpoint_number,\n    A.block_timestamp,\n    A.tx_digest,\n    A.tx_sender,\n    A.event_index,\n    A.source_chain,\n    A.target_chain AS destination_chain,\n    A.amount,\n    A.sender_address AS source_address,\n    b.target_address AS destination_address,\n    bc.coin_type,\n    '0x000000000000000000000000000000000000000000000000000000000000000b' AS bridge_address,\n    {{ dbt_utils.generate_surrogate_key(['tx_digest']) }} AS sui_bridge_outbound_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    deposits_base A\n    JOIN deposits_target b USING (\n        tx_digest,\n        event_index\n    )\n    JOIN bc USING (\n        tx_digest,\n        event_index\n    )", "language": "sql", "refs": [{"name": "bronze__checkpoints", "package": null, "version": null}, {"name": "core__fact_events", "package": null, "version": null}, {"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key", "macro.dbt.run_query"], "nodes": ["model.sui_models.bronze__checkpoints", "model.sui_models.core__fact_events", "model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/bridge/silver_bridge__sui_bridge_outbound.sql", "compiled": true, "compiled_code": "-- depends_on: SUI.bronze.checkpoints\n\n\n\n\n\n\n    \n\n\n\nWITH base_events AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        tx_sender,\n        event_index,\n        parsed_json,\n        modified_timestamp\n    FROM\n        SUI.core.fact_events\n    WHERE\n        tx_succeeded\n        AND event_address = '0x000000000000000000000000000000000000000000000000000000000000000b'\n        AND event_resource = 'TokenDepositedEvent' \n\n\nAND modified_timestamp >= (\n    SELECT\n        MAX(modified_timestamp)\n    FROM\n        SUI.silver_bridge.sui_bridge_outbound\n)\n\n),\ndeposits_base AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        tx_sender,\n        event_index,\n        '0x' || LISTAGG(\n            CASE\n                WHEN s.value :: INTEGER = 0 THEN '00'\n                WHEN s.value :: INTEGER < 16 THEN '0' || SUBSTR(\n                    '0123456789abcdef',\n                    s.value :: INTEGER + 1,\n                    1\n                )\n                ELSE SUBSTR('0123456789abcdef', FLOOR(s.value :: INTEGER / 16) + 1, 1) || SUBSTR('0123456789abcdef', MOD(s.value :: INTEGER, 16) + 1, 1)\n            END,\n            ''\n        ) within GROUP (\n            ORDER BY\n                s.index\n        ) AS sender_address,\n        parsed_json :source_chain :: INT AS source_chain,\n        parsed_json :target_chain :: INT AS target_chain,\n        parsed_json :token_type :: STRING AS token_type,\n        parsed_json :amount :: bigint AS amount,\n        parsed_json :seq_num :: INT AS seq_num,\n        modified_timestamp\n    FROM\n        base_events e,\n        LATERAL FLATTEN(\n            input => e.parsed_json :sender_address\n        ) s\n    GROUP BY\n        ALL\n),\ndeposits_target AS (\n    SELECT\n        tx_digest,\n        event_index,\n        '0x' || LISTAGG(\n            CASE\n                WHEN s.value :: INTEGER = 0 THEN '00'\n                WHEN s.value :: INTEGER < 16 THEN '0' || SUBSTR(\n                    '0123456789abcdef',\n                    s.value :: INTEGER + 1,\n                    1\n                )\n                ELSE SUBSTR('0123456789abcdef', FLOOR(s.value :: INTEGER / 16) + 1, 1) || SUBSTR('0123456789abcdef', MOD(s.value :: INTEGER, 16) + 1, 1)\n            END,\n            ''\n        ) within GROUP (\n            ORDER BY\n                s.index\n        ) AS target_address\n    FROM\n        base_events e,\n        LATERAL FLATTEN(\n            input => e.parsed_json :target_address\n        ) s\n    GROUP BY\n        ALL\n),\nbc AS (\n    SELECT\n        A.tx_digest,\n        b.event_index,\n        A.coin_type\n    FROM\n        SUI.core.fact_balance_changes A\n        JOIN deposits_base b\n        ON A.tx_digest = b.tx_digest\n        AND A.address_owner = b.sender_address\n        AND - A.amount = b.amount\n\n\nWHERE\n    A.block_timestamp :: DATE :: DATE >= '2025-03-05'\n\n\nqualify ROW_NUMBER() over(\n    PARTITION BY A.tx_digest\n    ORDER BY\n        balance_change_index DESC\n) = 1\n)\nSELECT\n    A.checkpoint_number,\n    A.block_timestamp,\n    A.tx_digest,\n    A.tx_sender,\n    A.event_index,\n    A.source_chain,\n    A.target_chain AS destination_chain,\n    A.amount,\n    A.sender_address AS source_address,\n    b.target_address AS destination_address,\n    bc.coin_type,\n    '0x000000000000000000000000000000000000000000000000000000000000000b' AS bridge_address,\n    \n    \nmd5(cast(coalesce(cast(tx_digest as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS sui_bridge_outbound_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id\nFROM\n    deposits_base A\n    JOIN deposits_target b USING (\n        tx_digest,\n        event_index\n    )\n    JOIN bc USING (\n        tx_digest,\n        event_index\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "f2561d38ecf19ceed3ed7d82dead651c7e853604d84c677adfd6384eb1d7c90e"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.silver_bridge__all_bridges": {"database": "SUI", "schema": "silver_bridge", "name": "silver_bridge__all_bridges", "resource_type": "model", "package_name": "sui_models", "path": "silver/defi/bridge/silver_bridge__all_bridges.sql", "original_file_path": "models/silver/defi/bridge/silver_bridge__all_bridges.sql", "unique_id": "model.sui_models.silver_bridge__all_bridges", "fqn": ["sui_models", "silver", "defi", "bridge", "silver_bridge__all_bridges"], "alias": "all_bridges", "checksum": {"name": "sha256", "checksum": "79109b5fe9e425d51375f1aa7ca6d27cd6011827797a9dd7be90878e3bcadcfc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver", "defi", "non_core"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["silver", "defi", "non_core"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["silver", "defi", "non_core"]}, "created_at": 1756141888.7530417, "relation_name": "SUI.silver_bridge.all_bridges", "raw_code": "-- depends_on: {{ ref('bronze__checkpoints') }}\n{{ config (\n    materialized = \"view\",\n    tags = ['silver','defi','non_core']\n) }}\n\nWITH all_bridges AS (\n    {{ dbt_utils.union_relations(\n        relations=[\n            ref('silver_bridge__sui_bridge_outbound'),\n            ref('silver_bridge__sui_bridge_inbound'),            \n            ref('silver_bridge__wormhole_inbound'),\n            ref('silver_bridge__wormhole_outbound'),             \n        ] \n    ) }}\n)\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_sender,\n    event_index,\n    source_chain,\n    destination_chain,\n    amount,\n    source_address,\n    destination_address,\n    coin_type,\n    bridge_address,\n    COALESCE(\n        sui_bridge_outbound_id,\n        sui_bridge_inbound_id,\n        wormhole_outbound_id,\n        wormhole_inbound_id\n    ) AS all_bridges_id,\n    inserted_timestamp,\n    modified_timestamp,\n    _INVOCATION_ID,\n    CASE\n        WHEN _dbt_source_relation LIKE '%inbound%' THEN 'inbound'\n        WHEN _dbt_source_relation LIKE '%outbound%' THEN 'outbound'\n    END AS direction,\n    REPLACE(\n        REPLACE(\n            REPLACE(\n                SPLIT_PART(\n                    _dbt_source_relation,\n                    '.',\n                    3\n                ),\n                '_inbound',\n                ''\n            ),\n            '_outbound',\n            ''\n        ),\n        '_',\n        ' '\n    ) AS platform\nFROM\n    all_bridges", "language": "sql", "refs": [{"name": "bronze__checkpoints", "package": null, "version": null}, {"name": "silver_bridge__sui_bridge_outbound", "package": null, "version": null}, {"name": "silver_bridge__sui_bridge_inbound", "package": null, "version": null}, {"name": "silver_bridge__wormhole_inbound", "package": null, "version": null}, {"name": "silver_bridge__wormhole_outbound", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"], "nodes": ["model.sui_models.bronze__checkpoints", "model.sui_models.silver_bridge__sui_bridge_outbound", "model.sui_models.silver_bridge__sui_bridge_inbound", "model.sui_models.silver_bridge__wormhole_inbound", "model.sui_models.silver_bridge__wormhole_outbound"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/bridge/silver_bridge__all_bridges.sql", "compiled": true, "compiled_code": "-- depends_on: SUI.bronze.checkpoints\n\n\nWITH all_bridges AS (\n    \n\n        (\n            select\n                cast('SUI.silver_bridge.sui_bridge_outbound' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CHECKPOINT_NUMBER\" as NUMBER(18,0)) as \"CHECKPOINT_NUMBER\" ,\n                    cast(\"TX_DIGEST\" as character varying(16777216)) as \"TX_DIGEST\" ,\n                    cast(\"TX_SENDER\" as character varying(16777216)) as \"TX_SENDER\" ,\n                    cast(\"EVENT_INDEX\" as NUMBER(18,0)) as \"EVENT_INDEX\" ,\n                    cast(\"SOURCE_CHAIN\" as NUMBER(18,0)) as \"SOURCE_CHAIN\" ,\n                    cast(\"DESTINATION_CHAIN\" as NUMBER(18,0)) as \"DESTINATION_CHAIN\" ,\n                    cast(\"AMOUNT\" as NUMBER(38,0)) as \"AMOUNT\" ,\n                    cast(\"SOURCE_ADDRESS\" as character varying(16777216)) as \"SOURCE_ADDRESS\" ,\n                    cast(\"DESTINATION_ADDRESS\" as character varying(16777216)) as \"DESTINATION_ADDRESS\" ,\n                    cast(\"COIN_TYPE\" as character varying(16777216)) as \"COIN_TYPE\" ,\n                    cast(\"BRIDGE_ADDRESS\" as character varying(16777216)) as \"BRIDGE_ADDRESS\" ,\n                    cast(\"SUI_BRIDGE_OUTBOUND_ID\" as character varying(16777216)) as \"SUI_BRIDGE_OUTBOUND_ID\" ,\n                    cast(\"INSERTED_TIMESTAMP\" as TIMESTAMP_NTZ) as \"INSERTED_TIMESTAMP\" ,\n                    cast(\"MODIFIED_TIMESTAMP\" as TIMESTAMP_NTZ) as \"MODIFIED_TIMESTAMP\" ,\n                    cast(\"BLOCK_TIMESTAMP\" as TIMESTAMP_NTZ) as \"BLOCK_TIMESTAMP\" ,\n                    cast(\"_INVOCATION_ID\" as character varying(16777216)) as \"_INVOCATION_ID\" ,\n                    cast(null as character varying(16777216)) as \"SUI_BRIDGE_INBOUND_ID\" ,\n                    cast(null as character varying(16777216)) as \"WORMHOLE_INBOUND_ID\" ,\n                    cast(null as character varying(16777216)) as \"WORMHOLE_OUTBOUND_ID\" \n\n            from SUI.silver_bridge.sui_bridge_outbound\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('SUI.silver_bridge.sui_bridge_inbound' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CHECKPOINT_NUMBER\" as NUMBER(18,0)) as \"CHECKPOINT_NUMBER\" ,\n                    cast(\"TX_DIGEST\" as character varying(16777216)) as \"TX_DIGEST\" ,\n                    cast(\"TX_SENDER\" as character varying(16777216)) as \"TX_SENDER\" ,\n                    cast(\"EVENT_INDEX\" as NUMBER(18,0)) as \"EVENT_INDEX\" ,\n                    cast(\"SOURCE_CHAIN\" as NUMBER(18,0)) as \"SOURCE_CHAIN\" ,\n                    cast(\"DESTINATION_CHAIN\" as NUMBER(18,0)) as \"DESTINATION_CHAIN\" ,\n                    cast(\"AMOUNT\" as NUMBER(38,0)) as \"AMOUNT\" ,\n                    cast(\"SOURCE_ADDRESS\" as character varying(16777216)) as \"SOURCE_ADDRESS\" ,\n                    cast(\"DESTINATION_ADDRESS\" as character varying(16777216)) as \"DESTINATION_ADDRESS\" ,\n                    cast(\"COIN_TYPE\" as character varying(16777216)) as \"COIN_TYPE\" ,\n                    cast(\"BRIDGE_ADDRESS\" as character varying(16777216)) as \"BRIDGE_ADDRESS\" ,\n                    cast(null as character varying(16777216)) as \"SUI_BRIDGE_OUTBOUND_ID\" ,\n                    cast(\"INSERTED_TIMESTAMP\" as TIMESTAMP_NTZ) as \"INSERTED_TIMESTAMP\" ,\n                    cast(\"MODIFIED_TIMESTAMP\" as TIMESTAMP_NTZ) as \"MODIFIED_TIMESTAMP\" ,\n                    cast(\"BLOCK_TIMESTAMP\" as TIMESTAMP_NTZ) as \"BLOCK_TIMESTAMP\" ,\n                    cast(\"_INVOCATION_ID\" as character varying(16777216)) as \"_INVOCATION_ID\" ,\n                    cast(\"SUI_BRIDGE_INBOUND_ID\" as character varying(16777216)) as \"SUI_BRIDGE_INBOUND_ID\" ,\n                    cast(null as character varying(16777216)) as \"WORMHOLE_INBOUND_ID\" ,\n                    cast(null as character varying(16777216)) as \"WORMHOLE_OUTBOUND_ID\" \n\n            from SUI.silver_bridge.sui_bridge_inbound\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('SUI.silver_bridge.wormhole_inbound' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CHECKPOINT_NUMBER\" as NUMBER(18,0)) as \"CHECKPOINT_NUMBER\" ,\n                    cast(\"TX_DIGEST\" as character varying(16777216)) as \"TX_DIGEST\" ,\n                    cast(\"TX_SENDER\" as character varying(16777216)) as \"TX_SENDER\" ,\n                    cast(\"EVENT_INDEX\" as NUMBER(18,0)) as \"EVENT_INDEX\" ,\n                    cast(\"SOURCE_CHAIN\" as NUMBER(18,0)) as \"SOURCE_CHAIN\" ,\n                    cast(\"DESTINATION_CHAIN\" as NUMBER(18,0)) as \"DESTINATION_CHAIN\" ,\n                    cast(\"AMOUNT\" as NUMBER(38,0)) as \"AMOUNT\" ,\n                    cast(\"SOURCE_ADDRESS\" as character varying(16777216)) as \"SOURCE_ADDRESS\" ,\n                    cast(\"DESTINATION_ADDRESS\" as character varying(16777216)) as \"DESTINATION_ADDRESS\" ,\n                    cast(\"COIN_TYPE\" as character varying(16777216)) as \"COIN_TYPE\" ,\n                    cast(\"BRIDGE_ADDRESS\" as character varying(16777216)) as \"BRIDGE_ADDRESS\" ,\n                    cast(null as character varying(16777216)) as \"SUI_BRIDGE_OUTBOUND_ID\" ,\n                    cast(\"INSERTED_TIMESTAMP\" as TIMESTAMP_NTZ) as \"INSERTED_TIMESTAMP\" ,\n                    cast(\"MODIFIED_TIMESTAMP\" as TIMESTAMP_NTZ) as \"MODIFIED_TIMESTAMP\" ,\n                    cast(\"BLOCK_TIMESTAMP\" as TIMESTAMP_NTZ) as \"BLOCK_TIMESTAMP\" ,\n                    cast(\"_INVOCATION_ID\" as character varying(16777216)) as \"_INVOCATION_ID\" ,\n                    cast(null as character varying(16777216)) as \"SUI_BRIDGE_INBOUND_ID\" ,\n                    cast(\"WORMHOLE_INBOUND_ID\" as character varying(16777216)) as \"WORMHOLE_INBOUND_ID\" ,\n                    cast(null as character varying(16777216)) as \"WORMHOLE_OUTBOUND_ID\" \n\n            from SUI.silver_bridge.wormhole_inbound\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('SUI.silver_bridge.wormhole_outbound' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"CHECKPOINT_NUMBER\" as NUMBER(18,0)) as \"CHECKPOINT_NUMBER\" ,\n                    cast(\"TX_DIGEST\" as character varying(16777216)) as \"TX_DIGEST\" ,\n                    cast(\"TX_SENDER\" as character varying(16777216)) as \"TX_SENDER\" ,\n                    cast(\"EVENT_INDEX\" as NUMBER(18,0)) as \"EVENT_INDEX\" ,\n                    cast(\"SOURCE_CHAIN\" as NUMBER(18,0)) as \"SOURCE_CHAIN\" ,\n                    cast(\"DESTINATION_CHAIN\" as NUMBER(18,0)) as \"DESTINATION_CHAIN\" ,\n                    cast(\"AMOUNT\" as NUMBER(38,0)) as \"AMOUNT\" ,\n                    cast(\"SOURCE_ADDRESS\" as character varying(16777216)) as \"SOURCE_ADDRESS\" ,\n                    cast(\"DESTINATION_ADDRESS\" as character varying(16777216)) as \"DESTINATION_ADDRESS\" ,\n                    cast(\"COIN_TYPE\" as character varying(16777216)) as \"COIN_TYPE\" ,\n                    cast(\"BRIDGE_ADDRESS\" as character varying(16777216)) as \"BRIDGE_ADDRESS\" ,\n                    cast(null as character varying(16777216)) as \"SUI_BRIDGE_OUTBOUND_ID\" ,\n                    cast(\"INSERTED_TIMESTAMP\" as TIMESTAMP_NTZ) as \"INSERTED_TIMESTAMP\" ,\n                    cast(\"MODIFIED_TIMESTAMP\" as TIMESTAMP_NTZ) as \"MODIFIED_TIMESTAMP\" ,\n                    cast(\"BLOCK_TIMESTAMP\" as TIMESTAMP_NTZ) as \"BLOCK_TIMESTAMP\" ,\n                    cast(\"_INVOCATION_ID\" as character varying(16777216)) as \"_INVOCATION_ID\" ,\n                    cast(null as character varying(16777216)) as \"SUI_BRIDGE_INBOUND_ID\" ,\n                    cast(null as character varying(16777216)) as \"WORMHOLE_INBOUND_ID\" ,\n                    cast(\"WORMHOLE_OUTBOUND_ID\" as character varying(16777216)) as \"WORMHOLE_OUTBOUND_ID\" \n\n            from SUI.silver_bridge.wormhole_outbound\n\n            \n        )\n\n        \n)\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_sender,\n    event_index,\n    source_chain,\n    destination_chain,\n    amount,\n    source_address,\n    destination_address,\n    coin_type,\n    bridge_address,\n    COALESCE(\n        sui_bridge_outbound_id,\n        sui_bridge_inbound_id,\n        wormhole_outbound_id,\n        wormhole_inbound_id\n    ) AS all_bridges_id,\n    inserted_timestamp,\n    modified_timestamp,\n    _INVOCATION_ID,\n    CASE\n        WHEN _dbt_source_relation LIKE '%inbound%' THEN 'inbound'\n        WHEN _dbt_source_relation LIKE '%outbound%' THEN 'outbound'\n    END AS direction,\n    REPLACE(\n        REPLACE(\n            REPLACE(\n                SPLIT_PART(\n                    _dbt_source_relation,\n                    '.',\n                    3\n                ),\n                '_inbound',\n                ''\n            ),\n            '_outbound',\n            ''\n        ),\n        '_',\n        ' '\n    ) AS platform\nFROM\n    all_bridges", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.streamline__transactions": {"database": "SUI", "schema": "streamline", "name": "streamline__transactions", "resource_type": "model", "package_name": "sui_models", "path": "streamline/core/streamline__transactions.sql", "original_file_path": "models/streamline/core/streamline__transactions.sql", "unique_id": "model.sui_models.streamline__transactions", "fqn": ["sui_models", "streamline", "core", "streamline__transactions"], "alias": "transactions", "checksum": {"name": "sha256", "checksum": "a9f58de087356ea5676b297164918c81daa56d63fb82797e914d8014d2fc1b35"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["streamline_realtime"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "\n    \n    ALTER TABLE\n        {{this.schema}}.{{this.identifier}}\n    ADD\n        search optimization ON EQUALITY(tx_digest)\n    \n", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["tx_digest"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": "block_timestamp::DATE", "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["streamline_realtime"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["tx_digest"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": "block_timestamp::DATE", "tags": ["streamline_realtime"], "post-hook": "\n    \n    ALTER TABLE\n        {{this.schema}}.{{this.identifier}}\n    ADD\n        search optimization ON EQUALITY(tx_digest)\n    \n"}, "created_at": 1756141888.7835941, "relation_name": "SUI.streamline.transactions", "raw_code": "{{ config (\n    materialized = \"incremental\",\n    unique_key = ['tx_digest'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    cluster_by = \"block_timestamp::DATE\",\n    tags = ['streamline_realtime'],\n    post_hook = enable_search_optimization(\n        '{{this.schema}}',\n        '{{this.identifier}}',\n        'ON EQUALITY(tx_digest)'\n    )\n) }}\n\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    b.index AS tx_index,\n    b.value :: STRING AS tx_digest,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id,\nFROM\n    {{ ref(\"streamline__checkpoints_complete\") }},\n    LATERAL FLATTEN(\n        transactions_array\n    ) b\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: DATE) modified_timestamp\n        FROM\n            {{ this }})\n        {% endif %}", "language": "sql", "refs": [{"name": "streamline__checkpoints_complete", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sui_models.enable_search_optimization", "macro.dbt.is_incremental"], "nodes": ["model.sui_models.streamline__checkpoints_complete"]}, "compiled_path": "target/compiled/sui_models/models/streamline/core/streamline__transactions.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    b.index AS tx_index,\n    b.value :: STRING AS tx_digest,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id,\nFROM\n    SUI.streamline.checkpoints_complete,\n    LATERAL FLATTEN(\n        transactions_array\n    ) b\n\n\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: DATE) modified_timestamp\n        FROM\n            SUI.streamline.transactions)\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.streamline__chainhead": {"database": "SUI", "schema": "streamline", "name": "streamline__chainhead", "resource_type": "model", "package_name": "sui_models", "path": "streamline/core/streamline__chainhead.sql", "original_file_path": "models/streamline/core/streamline__chainhead.sql", "unique_id": "model.sui_models.streamline__chainhead", "fqn": ["sui_models", "streamline", "core", "streamline__chainhead"], "alias": "chainhead", "checksum": {"name": "sha256", "checksum": "82b2b140569ea3dee37bf0288c0f9c8c526ffc35714a5d72ec40e2ddc13247b9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["streamline_view"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["streamline_view"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["streamline_view"]}, "created_at": 1756141888.793386, "relation_name": "SUI.streamline.chainhead", "raw_code": "{{ config (\n    materialized = \"view\",\n    tags = ['streamline_view']\n) }}\n\nSELECT\n    {{ target.database }}.live.udf_api(\n        'POST',\n        '{Service}/{Authentication}',\n        OBJECT_CONSTRUCT(\n            'Content-Type',\n            'application/json',\n            'fsc-quantum-state',\n            'livequery'\n        ),\n        OBJECT_CONSTRUCT(\n            'jsonrpc',\n            '2.0',\n            'id',\n            1,\n            'method',\n            'sui_getLatestCheckpointSequenceNumber',\n            'params',\n            ARRAY_CONSTRUCT()\n        ),\n        'Vault/prod/sui/quicknode/mainnet'\n    ) :data: \"result\" :: INT AS checkpoint_number", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/sui_models/models/streamline/core/streamline__chainhead.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    SUI.live.udf_api(\n        'POST',\n        '{Service}/{Authentication}',\n        OBJECT_CONSTRUCT(\n            'Content-Type',\n            'application/json',\n            'fsc-quantum-state',\n            'livequery'\n        ),\n        OBJECT_CONSTRUCT(\n            'jsonrpc',\n            '2.0',\n            'id',\n            1,\n            'method',\n            'sui_getLatestCheckpointSequenceNumber',\n            'params',\n            ARRAY_CONSTRUCT()\n        ),\n        'Vault/prod/sui/quicknode/mainnet'\n    ) :data: \"result\" :: INT AS checkpoint_number", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.streamline__checkpoints": {"database": "SUI", "schema": "streamline", "name": "streamline__checkpoints", "resource_type": "model", "package_name": "sui_models", "path": "streamline/core/streamline__checkpoints.sql", "original_file_path": "models/streamline/core/streamline__checkpoints.sql", "unique_id": "model.sui_models.streamline__checkpoints", "fqn": ["sui_models", "streamline", "core", "streamline__checkpoints"], "alias": "checkpoints", "checksum": {"name": "sha256", "checksum": "98b96fa95bca9c1dec9732634232e0d3c3c110b611acb26cbe9ef756b83b766f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["streamline_view"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["streamline_view"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["streamline_view"]}, "created_at": 1756141888.7983048, "relation_name": "SUI.streamline.checkpoints", "raw_code": "{{ config (\n    materialized = \"view\",\n    tags = ['streamline_view']\n) }}\n\nSELECT\n    _id AS checkpoint_number\nFROM\n    {{ source(\n        'crosschain_silver',\n        'number_sequence'\n    ) }}\nWHERE\n    _id >= 96605300 -- first block of 2025\n    AND _id <= (\n        SELECT\n            MAX(checkpoint_number)\n        FROM\n            {{ ref('streamline__chainhead') }}\n    )", "language": "sql", "refs": [{"name": "streamline__chainhead", "package": null, "version": null}], "sources": [["crosschain_silver", "number_sequence"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sui_models.crosschain_silver.number_sequence", "model.sui_models.streamline__chainhead"]}, "compiled_path": "target/compiled/sui_models/models/streamline/core/streamline__checkpoints.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    _id AS checkpoint_number\nFROM\n    crosschain.silver.number_sequence\nWHERE\n    _id >= 96605300 -- first block of 2025\n    AND _id <= (\n        SELECT\n            MAX(checkpoint_number)\n        FROM\n            SUI.streamline.chainhead\n    )", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.streamline__transactions_complete": {"database": "SUI", "schema": "streamline", "name": "streamline__transactions_complete", "resource_type": "model", "package_name": "sui_models", "path": "streamline/core/complete/streamline__transactions_complete.sql", "original_file_path": "models/streamline/core/complete/streamline__transactions_complete.sql", "unique_id": "model.sui_models.streamline__transactions_complete", "fqn": ["sui_models", "streamline", "core", "complete", "streamline__transactions_complete"], "alias": "transactions_complete", "checksum": {"name": "sha256", "checksum": "9ea30982c3a47b77ed6ddd5bfd0652aa3f7b6e3f32ef096d01e53effd3fa2b88"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["streamline_realtime"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "\n    \n    ALTER TABLE\n        {{this.schema}}.{{this.identifier}}\n    ADD\n        search optimization ON EQUALITY(tx_digest)\n    \n", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["tx_digest"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": "block_timestamp::DATE", "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["streamline_realtime"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["tx_digest"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": "block_timestamp::DATE", "tags": ["streamline_realtime"], "post-hook": "\n    \n    ALTER TABLE\n        {{this.schema}}.{{this.identifier}}\n    ADD\n        search optimization ON EQUALITY(tx_digest)\n    \n"}, "created_at": 1756141888.800554, "relation_name": "SUI.streamline.transactions_complete", "raw_code": "-- depends_on: {{ ref('bronze__transactions') }}\n-- depends_on: {{ ref('bronze__transactions_FR') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = ['tx_digest'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    cluster_by = \"block_timestamp::DATE\",\n    tags = ['streamline_realtime'],\n    post_hook = enable_search_optimization(\n        '{{this.schema}}',\n        '{{this.identifier}}',\n        'ON EQUALITY(tx_digest)'\n    ),\n) }}\n\nSELECT\n    DATA :\"checkpoint\" :: bigint AS checkpoint_number,\n    DATA :\"digest\" :: STRING AS tx_digest,\n    TO_TIMESTAMP(\n        DATA :\"timestampMs\"\n    ) AS block_timestamp,\n    partition_key,\n    _inserted_timestamp,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    file_name,\n    '{{ invocation_id }}' AS _invocation_id,\nFROM\n\n{% if is_incremental() %}\n{{ ref('bronze__transactions') }}\n{% else %}\n    {{ ref('bronze__transactions_FR') }}\n{% endif %}\nWHERE\n    DATA :error IS NULL\n    AND block_timestamp IS NOT NULL\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        COALESCE(MAX(_INSERTED_TIMESTAMP), '1970-01-01' :: DATE) max_INSERTED_TIMESTAMP\n    FROM\n        {{ this }})\n    {% endif %}\n\n    qualify ROW_NUMBER() over (\n        PARTITION BY tx_digest\n        ORDER BY\n            _inserted_timestamp DESC\n    ) = 1", "language": "sql", "refs": [{"name": "bronze__transactions", "package": null, "version": null}, {"name": "bronze__transactions_FR", "package": null, "version": null}, {"name": "bronze__transactions_FR", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sui_models.enable_search_optimization", "macro.dbt.is_incremental"], "nodes": ["model.sui_models.bronze__transactions", "model.sui_models.bronze__transactions_FR"]}, "compiled_path": "target/compiled/sui_models/models/streamline/core/complete/streamline__transactions_complete.sql", "compiled": true, "compiled_code": "-- depends_on: SUI.bronze.transactions\n-- depends_on: SUI.bronze.transactions_FR\n\n\nSELECT\n    DATA :\"checkpoint\" :: bigint AS checkpoint_number,\n    DATA :\"digest\" :: STRING AS tx_digest,\n    TO_TIMESTAMP(\n        DATA :\"timestampMs\"\n    ) AS block_timestamp,\n    partition_key,\n    _inserted_timestamp,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    file_name,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id,\nFROM\n\n\nSUI.bronze.transactions\n\nWHERE\n    DATA :error IS NULL\n    AND block_timestamp IS NOT NULL\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        COALESCE(MAX(_INSERTED_TIMESTAMP), '1970-01-01' :: DATE) max_INSERTED_TIMESTAMP\n    FROM\n        SUI.streamline.transactions_complete)\n    \n\n    qualify ROW_NUMBER() over (\n        PARTITION BY tx_digest\n        ORDER BY\n            _inserted_timestamp DESC\n    ) = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.streamline__checkpoints_complete": {"database": "SUI", "schema": "streamline", "name": "streamline__checkpoints_complete", "resource_type": "model", "package_name": "sui_models", "path": "streamline/core/complete/streamline__checkpoints_complete.sql", "original_file_path": "models/streamline/core/complete/streamline__checkpoints_complete.sql", "unique_id": "model.sui_models.streamline__checkpoints_complete", "fqn": ["sui_models", "streamline", "core", "complete", "streamline__checkpoints_complete"], "alias": "checkpoints_complete", "checksum": {"name": "sha256", "checksum": "2cebf80fc94ad15a1d1df292773b1dd6f53e10d197015b4b2589b336f9e441bc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["streamline_realtime"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "\n    \n    ALTER TABLE\n        {{this.schema}}.{{this.identifier}}\n    ADD\n        search optimization ON EQUALITY(checkpoint_number)\n    \n", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["checkpoint_number"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": "ROUND(checkpoint_number, -5)", "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["streamline_realtime"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["checkpoint_number"], "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": "ROUND(checkpoint_number, -5)", "tags": ["streamline_realtime"], "post-hook": "\n    \n    ALTER TABLE\n        {{this.schema}}.{{this.identifier}}\n    ADD\n        search optimization ON EQUALITY(checkpoint_number)\n    \n"}, "created_at": 1756141888.8083124, "relation_name": "SUI.streamline.checkpoints_complete", "raw_code": "-- depends_on: {{ ref('bronze__checkpoints') }}\n-- depends_on: {{ ref('bronze__checkpoints_FR') }}\n{{ config (\n    materialized = \"incremental\",\n    unique_key = ['checkpoint_number'],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    cluster_by = \"ROUND(checkpoint_number, -5)\",\n    tags = ['streamline_realtime'],\n    post_hook = enable_search_optimization(\n        '{{this.schema}}',\n        '{{this.identifier}}',\n        'ON EQUALITY(checkpoint_number)'\n    ),\n) }}\n\nSELECT\n    DATA :\"result\": \"sequenceNumber\" :: bigint AS checkpoint_number,\n    TO_TIMESTAMP(\n        DATA :\"result\" :\"timestampMs\"\n    ) AS block_timestamp,\n    DATA :\"result\": \"transactions\" AS transactions_array,\n    ARRAY_SIZE(\n        DATA :\"result\": \"transactions\"\n    ) AS tx_count,\n    partition_key,\n    _inserted_timestamp,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    file_name,\n    '{{ invocation_id }}' AS _invocation_id,\nFROM\n\n{% if is_incremental() %}\n{{ ref('bronze__checkpoints') }}\n{% else %}\n    {{ ref('bronze__checkpoints_FR') }}\n{% endif %}\nWHERE\n    DATA :error IS NULL\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        COALESCE(MAX(_INSERTED_TIMESTAMP), '1970-01-01' :: DATE) max_INSERTED_TIMESTAMP\n    FROM\n        {{ this }})\n    {% endif %}\n\n    qualify ROW_NUMBER() over (\n        PARTITION BY checkpoint_number\n        ORDER BY\n            _inserted_timestamp DESC\n    ) = 1", "language": "sql", "refs": [{"name": "bronze__checkpoints", "package": null, "version": null}, {"name": "bronze__checkpoints_FR", "package": null, "version": null}, {"name": "bronze__checkpoints_FR", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sui_models.enable_search_optimization", "macro.dbt.is_incremental"], "nodes": ["model.sui_models.bronze__checkpoints", "model.sui_models.bronze__checkpoints_FR"]}, "compiled_path": "target/compiled/sui_models/models/streamline/core/complete/streamline__checkpoints_complete.sql", "compiled": true, "compiled_code": "-- depends_on: SUI.bronze.checkpoints\n-- depends_on: SUI.bronze.checkpoints_FR\n\n\nSELECT\n    DATA :\"result\": \"sequenceNumber\" :: bigint AS checkpoint_number,\n    TO_TIMESTAMP(\n        DATA :\"result\" :\"timestampMs\"\n    ) AS block_timestamp,\n    DATA :\"result\": \"transactions\" AS transactions_array,\n    ARRAY_SIZE(\n        DATA :\"result\": \"transactions\"\n    ) AS tx_count,\n    partition_key,\n    _inserted_timestamp,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    file_name,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id,\nFROM\n\n\nSUI.bronze.checkpoints\n\nWHERE\n    DATA :error IS NULL\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        COALESCE(MAX(_INSERTED_TIMESTAMP), '1970-01-01' :: DATE) max_INSERTED_TIMESTAMP\n    FROM\n        SUI.streamline.checkpoints_complete)\n    \n\n    qualify ROW_NUMBER() over (\n        PARTITION BY checkpoint_number\n        ORDER BY\n            _inserted_timestamp DESC\n    ) = 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.streamline__transactions_realtime": {"database": "SUI", "schema": "streamline", "name": "streamline__transactions_realtime", "resource_type": "model", "package_name": "sui_models", "path": "streamline/core/realtime/streamline__transactions_realtime.sql", "original_file_path": "models/streamline/core/realtime/streamline__transactions_realtime.sql", "unique_id": "model.sui_models.streamline__transactions_realtime", "fqn": ["sui_models", "streamline", "core", "realtime", "streamline__transactions_realtime"], "alias": "transactions_realtime", "checksum": {"name": "sha256", "checksum": "df7779364724ef22a0c2467cfbab6276f2d8b2ab6d62e18d1ae6275efba8d834"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["streamline_realtime"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        NULL\n    \n", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["streamline_realtime"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["streamline_realtime"], "post-hook": "\n    \n        \n    SELECT\n        NULL\n    \n"}, "created_at": 1756141888.8159254, "relation_name": "SUI.streamline.transactions_realtime", "raw_code": "{{ config (\n    materialized = \"view\",\n    post_hook = fsc_utils.if_data_call_function_v2(\n        func = 'streamline.udf_bulk_rest_api_v2',\n        target = \"{{this.schema}}.{{this.identifier}}\",\n        params ={ \"external_table\" :\"transactions\",\n        \"sql_limit\" :\"800000\",\n        \"producer_batch_size\" :\"100000\",\n        \"worker_batch_size\" :\"2500\",\n        \"async_concurrent_requests\" :\"8\",\n        \"sql_source\" :\"{{this.identifier}}\",\n        'exploded_key': '[\"result\"]',\n        \"order_by_column\": \"checkpoint_number DESC\" }\n    ),\n    tags = ['streamline_realtime']\n) }}\n\nWITH {# last_3_days AS (\n\nSELECT\n    sequence_number\nFROM\n    {{ ref(\"_sequence_lookback\") }}\n),\n#}\ntxs AS (\n    SELECT\n        A.tx_digest,\n        A.tx_index,\n        A.checkpoint_number,\n        A.block_timestamp\n    FROM\n        {{ ref(\"streamline__transactions\") }} A\n        LEFT JOIN {{ ref(\"streamline__transactions_complete\") }}\n        b\n        ON A.tx_digest = b.tx_digest\n        AND A.block_timestamp :: DATE = b.block_timestamp :: DATE\n    WHERE\n        b.tx_digest IS NULL {# AND sequence_number >= (\n    SELECT\n        sequence_number\n    FROM\n        last_3_days\n) #}\n),\ntx_grouped AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        FLOOR(\n            tx_index / 50\n        ) grp,\n        ARRAY_AGG(\n            tx_digest\n        ) AS tx_param,\n        COUNT(1) AS tx_count_in_request\n    FROM\n        txs\n    GROUP BY\n        checkpoint_number,\n        block_timestamp,\n        grp\n)\nSELECT\n    checkpoint_number,\n    tx_count_in_request,\n    to_char(\n        block_timestamp,\n        'YYYY_MM_DD_HH_MI_SS_FF3'\n    ) AS block_timestamp,\n    ROUND(\n        checkpoint_number,\n        -4\n    ) :: INT AS partition_key,\n    {{ target.database }}.live.udf_api(\n        'POST',\n        '{Service}/{Authentication}',\n        OBJECT_CONSTRUCT(\n            'Content-Type',\n            'application/json'\n        ),\n        OBJECT_CONSTRUCT(\n            'jsonrpc',\n            '2.0',\n            'id',\n            checkpoint_number,\n            'method',\n            'sui_multiGetTransactionBlocks',\n            'params',\n            ARRAY_CONSTRUCT(\n                tx_param,\n                OBJECT_CONSTRUCT(\n                    'showInput',\n                    TRUE,\n                    'showRawInput',\n                    FALSE,\n                    'showEffects',\n                    TRUE,\n                    'showEvents',\n                    TRUE,\n                    'showRawEffects',\n                    FALSE,\n                    'showObjectChanges',\n                    TRUE,\n                    'showBalanceChanges',\n                    TRUE\n                )\n            )\n        ),\n        'Vault/prod/sui/quicknode/mainnet'\n    ) AS request\nFROM\n    tx_grouped\nORDER BY\n    block_timestamp DESC\nLIMIT\n    800000", "language": "sql", "refs": [{"name": "streamline__transactions", "package": null, "version": null}, {"name": "streamline__transactions_complete", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.if_data_call_function_v2"], "nodes": ["model.sui_models.streamline__transactions", "model.sui_models.streamline__transactions_complete"]}, "compiled_path": "target/compiled/sui_models/models/streamline/core/realtime/streamline__transactions_realtime.sql", "compiled": true, "compiled_code": "\n\nWITH \ntxs AS (\n    SELECT\n        A.tx_digest,\n        A.tx_index,\n        A.checkpoint_number,\n        A.block_timestamp\n    FROM\n        SUI.streamline.transactions A\n        LEFT JOIN SUI.streamline.transactions_complete\n        b\n        ON A.tx_digest = b.tx_digest\n        AND A.block_timestamp :: DATE = b.block_timestamp :: DATE\n    WHERE\n        b.tx_digest IS NULL \n),\ntx_grouped AS (\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        FLOOR(\n            tx_index / 50\n        ) grp,\n        ARRAY_AGG(\n            tx_digest\n        ) AS tx_param,\n        COUNT(1) AS tx_count_in_request\n    FROM\n        txs\n    GROUP BY\n        checkpoint_number,\n        block_timestamp,\n        grp\n)\nSELECT\n    checkpoint_number,\n    tx_count_in_request,\n    to_char(\n        block_timestamp,\n        'YYYY_MM_DD_HH_MI_SS_FF3'\n    ) AS block_timestamp,\n    ROUND(\n        checkpoint_number,\n        -4\n    ) :: INT AS partition_key,\n    SUI.live.udf_api(\n        'POST',\n        '{Service}/{Authentication}',\n        OBJECT_CONSTRUCT(\n            'Content-Type',\n            'application/json'\n        ),\n        OBJECT_CONSTRUCT(\n            'jsonrpc',\n            '2.0',\n            'id',\n            checkpoint_number,\n            'method',\n            'sui_multiGetTransactionBlocks',\n            'params',\n            ARRAY_CONSTRUCT(\n                tx_param,\n                OBJECT_CONSTRUCT(\n                    'showInput',\n                    TRUE,\n                    'showRawInput',\n                    FALSE,\n                    'showEffects',\n                    TRUE,\n                    'showEvents',\n                    TRUE,\n                    'showRawEffects',\n                    FALSE,\n                    'showObjectChanges',\n                    TRUE,\n                    'showBalanceChanges',\n                    TRUE\n                )\n            )\n        ),\n        'Vault/prod/sui/quicknode/mainnet'\n    ) AS request\nFROM\n    tx_grouped\nORDER BY\n    block_timestamp DESC\nLIMIT\n    800000", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.streamline__checkpoints_realtime": {"database": "SUI", "schema": "streamline", "name": "streamline__checkpoints_realtime", "resource_type": "model", "package_name": "sui_models", "path": "streamline/core/realtime/streamline__checkpoints_realtime.sql", "original_file_path": "models/streamline/core/realtime/streamline__checkpoints_realtime.sql", "unique_id": "model.sui_models.streamline__checkpoints_realtime", "fqn": ["sui_models", "streamline", "core", "realtime", "streamline__checkpoints_realtime"], "alias": "checkpoints_realtime", "checksum": {"name": "sha256", "checksum": "7a2227b645d2393cf1e3e99f5b21bba69098934d644c4f9f028ec8e25b0d9b8c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["streamline_realtime"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        NULL\n    \n", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["streamline_realtime"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["streamline_realtime"], "post-hook": "\n    \n        \n    SELECT\n        NULL\n    \n"}, "created_at": 1756141888.827353, "relation_name": "SUI.streamline.checkpoints_realtime", "raw_code": "{{ config (\n    materialized = \"view\",\n    post_hook = fsc_utils.if_data_call_function_v2(\n        func = 'streamline.udf_bulk_rest_api_v2',\n        target = \"{{this.schema}}.{{this.identifier}}\",\n        params ={ \"external_table\" :\"checkpoints\",\n        \"sql_limit\" :\"600000\",\n        \"producer_batch_size\" :\"200000\",\n        \"worker_batch_size\" :\"50000\",\n        \"async_concurrent_requests\" :\"25\",\n        \"sql_source\" :\"{{this.identifier}}\",\n        \"order_by_column\": \"checkpoint_number DESC\" }\n    ),\n    tags = ['streamline_realtime']\n) }}\n\nWITH checks AS (\n\n    SELECT\n        checkpoint_number\n    FROM\n        {{ ref(\"streamline__checkpoints\") }}\n    EXCEPT\n    SELECT\n        checkpoint_number\n    FROM\n        {{ ref(\"streamline__checkpoints_complete\") }}\n)\nSELECT\n    checkpoint_number,\n    ROUND(\n        checkpoint_number,\n        -4\n    ) :: INT AS partition_key,\n    {{ target.database }}.live.udf_api(\n        'POST',\n        '{Service}/{Authentication}',\n        OBJECT_CONSTRUCT(\n            'Content-Type',\n            'application/json'\n        ),\n        OBJECT_CONSTRUCT(\n            'jsonrpc',\n            '2.0',\n            'id',\n            checkpoint_number,\n            'method',\n            'sui_getCheckpoint',\n            'params',\n            ARRAY_CONSTRUCT(\n                checkpoint_number :: STRING\n            )\n        ),\n        'Vault/prod/sui/quicknode/mainnet'\n    ) AS request\nFROM\n    checks", "language": "sql", "refs": [{"name": "streamline__checkpoints", "package": null, "version": null}, {"name": "streamline__checkpoints_complete", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.if_data_call_function_v2"], "nodes": ["model.sui_models.streamline__checkpoints", "model.sui_models.streamline__checkpoints_complete"]}, "compiled_path": "target/compiled/sui_models/models/streamline/core/realtime/streamline__checkpoints_realtime.sql", "compiled": true, "compiled_code": "\n\nWITH checks AS (\n\n    SELECT\n        checkpoint_number\n    FROM\n        SUI.streamline.checkpoints\n    EXCEPT\n    SELECT\n        checkpoint_number\n    FROM\n        SUI.streamline.checkpoints_complete\n)\nSELECT\n    checkpoint_number,\n    ROUND(\n        checkpoint_number,\n        -4\n    ) :: INT AS partition_key,\n    SUI.live.udf_api(\n        'POST',\n        '{Service}/{Authentication}',\n        OBJECT_CONSTRUCT(\n            'Content-Type',\n            'application/json'\n        ),\n        OBJECT_CONSTRUCT(\n            'jsonrpc',\n            '2.0',\n            'id',\n            checkpoint_number,\n            'method',\n            'sui_getCheckpoint',\n            'params',\n            ARRAY_CONSTRUCT(\n                checkpoint_number :: STRING\n            )\n        ),\n        'Vault/prod/sui/quicknode/mainnet'\n    ) AS request\nFROM\n    checks", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.price__ez_asset_metadata": {"database": "SUI", "schema": "price", "name": "price__ez_asset_metadata", "resource_type": "model", "package_name": "sui_models", "path": "gold/prices/price__ez_asset_metadata.sql", "original_file_path": "models/gold/prices/price__ez_asset_metadata.sql", "unique_id": "model.sui_models.price__ez_asset_metadata", "fqn": ["sui_models", "gold", "prices", "price__ez_asset_metadata"], "alias": "ez_asset_metadata", "checksum": {"name": "sha256", "checksum": "3202211bfbd133dcd725b78b0f4e77c9ec4e25b37552d30aab4d2137b3679826"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold_prices", "core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(token_address, symbol)", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ez_asset_metadata_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["gold_prices", "core"], "description": "A convenience table holding prioritized asset metadata and other relevant details pertaining to each token_address and native asset. This data set is highly curated and contains metadata for one unique asset per blockchain.", "columns": {"ASSET_ID": {"name": "ASSET_ID", "description": "The unique identifier representing the asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "NAME": {"name": "NAME", "description": "The name of asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "SYMBOL": {"name": "SYMBOL", "description": "The symbol of asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "The specific address representing the asset on a specific platform. This will be NULL if referring to a native asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The Blockchain, Network, or Platform for this asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimals for the asset. May be NULL.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "IS_NATIVE": {"name": "IS_NATIVE", "description": "A flag indicating assets native to the respective blockchain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_IS_VERIFIED": {"name": "TOKEN_IS_VERIFIED", "description": "Boolean flag indicating whether the token or price record is verified by Flipside's crosschain curation process. Verified tokens are prioritized for analytics and are considered reliable for most use cases. Unverified tokens may be incomplete, deprecated, or experimental.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "IS_DEPRECATED": {"name": "IS_DEPRECATED", "description": "A flag indicating if the asset is deprecated or no longer supported by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EZ_ASSET_METADATA_ID": {"name": "EZ_ASSET_METADATA_ID", "description": "Unique identifier for the token metadata record, linking metadata to on-chain token types. Used for metadata management, registry operations, and analytics joins. Example: 'tokenmeta_123'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/gold/prices/price__ez_asset_metadata.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "unique_key": "ez_asset_metadata_id", "tags": ["gold_prices", "core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(token_address, symbol)"}, "created_at": 1756141891.0545497, "relation_name": "SUI.price.ez_asset_metadata", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'merge',\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    unique_key = 'ez_asset_metadata_id',\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(token_address, symbol)\",\n    tags = ['gold_prices','core']\n) }}\n\nSELECT\n    token_address,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    blockchain,\n    CASE\n        WHEN token_address = '0x2::sui::SUI' THEN TRUE\n        ELSE FALSE\n    END AS is_native,\n    is_deprecated,\n    COALESCE(\n        is_verified,\n        FALSE\n    ) AS token_is_verified,\n    {{ dbt_utils.generate_surrogate_key(['complete_token_asset_metadata_id']) }} AS ez_asset_metadata_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__complete_token_asset_metadata') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp > (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            {{ this }})\n        {% endif %}", "language": "sql", "refs": [{"name": "silver__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.sui_models.silver__complete_token_asset_metadata"]}, "compiled_path": "target/compiled/sui_models/models/gold/prices/price__ez_asset_metadata.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    token_address,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    blockchain,\n    CASE\n        WHEN token_address = '0x2::sui::SUI' THEN TRUE\n        ELSE FALSE\n    END AS is_native,\n    is_deprecated,\n    COALESCE(\n        is_verified,\n        FALSE\n    ) AS token_is_verified,\n    \n    \nmd5(cast(coalesce(cast(complete_token_asset_metadata_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS ez_asset_metadata_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    SUI.silver.complete_token_asset_metadata\n\n\nWHERE\n    modified_timestamp > (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            SUI.price.ez_asset_metadata)\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["TOKEN_ADDRESS"], "time_spine": null}, "model.sui_models.price__ez_prices_hourly": {"database": "SUI", "schema": "price", "name": "price__ez_prices_hourly", "resource_type": "model", "package_name": "sui_models", "path": "gold/prices/price__ez_prices_hourly.sql", "original_file_path": "models/gold/prices/price__ez_prices_hourly.sql", "unique_id": "model.sui_models.price__ez_prices_hourly", "fqn": ["sui_models", "gold", "prices", "price__ez_prices_hourly"], "alias": "ez_prices_hourly", "checksum": {"name": "sha256", "checksum": "f721a71212023ef7376d717f5a15cde3e1c937f559eae2855be3780fa3b9200d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold_prices", "core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(token_address, symbol)", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ez_prices_hourly_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["hour::DATE"], "merge_exclude_columns": ["inserted_timestamp"], "incremental_predicates": ["dynamic_range_predicate", "HOUR::date"]}, "tags": ["gold_prices", "core"], "description": "A convenience table for determining token prices by address and blockchain, and native asset prices by symbol and blockchain. This data set is highly curated and contains metadata for one price per hour per unique asset and blockchain.", "columns": {"HOUR": {"name": "HOUR", "description": "Hour that the price was recorded at.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "The specific address representing the asset on a specific platform. This will be NULL if referring to a native asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "SYMBOL": {"name": "SYMBOL", "description": "The symbol of asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The Blockchain, Network, or Platform for this asset.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimals for the asset. May be NULL.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PRICE": {"name": "PRICE", "description": "Closing price of the recorded hour in USD.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "IS_NATIVE": {"name": "IS_NATIVE", "description": "A flag indicating assets native to the respective blockchain.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "IS_IMPUTED": {"name": "IS_IMPUTED", "description": "A flag indicating if the price was imputed, or derived, from the last arriving record. This is generally used for tokens with low-liquidity or inconsistent reporting.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_IS_VERIFIED": {"name": "TOKEN_IS_VERIFIED", "description": "Boolean flag indicating whether the token or price record is verified by Flipside's crosschain curation process. Verified tokens are prioritized for analytics and are considered reliable for most use cases. Unverified tokens may be incomplete, deprecated, or experimental.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "IS_DEPRECATED": {"name": "IS_DEPRECATED", "description": "A flag indicating if the asset is deprecated or no longer supported by the provider.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EZ_PRICES_HOURLY_ID": {"name": "EZ_PRICES_HOURLY_ID", "description": "Unique identifier for the token metadata record, linking metadata to on-chain token types. Used for metadata management, registry operations, and analytics joins. Example: 'tokenmeta_123'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/gold/prices/price__ez_prices_hourly.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "incremental_predicates": ["dynamic_range_predicate", "HOUR::date"], "unique_key": "ez_prices_hourly_id", "cluster_by": ["hour::DATE"], "tags": ["gold_prices", "core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(token_address, symbol)"}, "created_at": 1756141890.9337378, "relation_name": "SUI.price.ez_prices_hourly", "raw_code": "{{ config(\n    materialized = 'incremental',\n    incremental_strategy = 'merge',\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    incremental_predicates = [\"dynamic_range_predicate\", \"HOUR::date\"],\n    unique_key = 'ez_prices_hourly_id',\n    cluster_by = ['hour::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(token_address, symbol)\",\n    tags = ['gold_prices','core']\n) }}\n\nSELECT\n    HOUR,\n    token_address,\n    symbol,\n    NAME,\n    decimals,\n    price,\n    blockchain,\n    CASE\n        WHEN token_address = '0x2::sui::SUI' THEN TRUE\n        ELSE FALSE\n    END AS is_native,\n    is_deprecated,\n    is_imputed,\n    COALESCE(\n        is_verified,\n        FALSE\n    ) AS token_is_verified,\n    {{ dbt_utils.generate_surrogate_key(['complete_token_prices_id']) }} AS ez_prices_hourly_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__complete_token_prices') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp > (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            {{ this }})\n        {% endif %}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.sui_models.silver__complete_token_prices"]}, "compiled_path": "target/compiled/sui_models/models/gold/prices/price__ez_prices_hourly.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    HOUR,\n    token_address,\n    symbol,\n    NAME,\n    decimals,\n    price,\n    blockchain,\n    CASE\n        WHEN token_address = '0x2::sui::SUI' THEN TRUE\n        ELSE FALSE\n    END AS is_native,\n    is_deprecated,\n    is_imputed,\n    COALESCE(\n        is_verified,\n        FALSE\n    ) AS token_is_verified,\n    \n    \nmd5(cast(coalesce(cast(complete_token_prices_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS ez_prices_hourly_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    SUI.silver.complete_token_prices\n\n\nWHERE\n    modified_timestamp > (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            SUI.price.ez_prices_hourly)\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["HOUR", "TOKEN_ADDRESS"], "time_spine": null}, "model.sui_models.core__fact_balance_changes": {"database": "SUI", "schema": "core", "name": "core__fact_balance_changes", "resource_type": "model", "package_name": "sui_models", "path": "gold/core/core__fact_balance_changes.sql", "original_file_path": "models/gold/core/core__fact_balance_changes.sql", "unique_id": "model.sui_models.core__fact_balance_changes", "fqn": ["sui_models", "gold", "core", "core__fact_balance_changes"], "alias": "fact_balance_changes", "checksum": {"name": "sha256", "checksum": "f9e2c8dd77395ade1a3e53eddbb7ab58d3b9f74c0eb0cc9be2685e9409af0736"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold", "core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_transaction_balance_changes_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["gold", "core"], "description": "Fact table recording every token and coin balance change event on the Sui blockchain at the finest granularity. Each row represents a single balance delta (positive or negative) for a specific owner, coin type, and transaction, capturing the full flow of assets across wallets and contracts. Includes object IDs, transaction context, and ownership metadata, supporting precise tracking of token movements, portfolio changes, and treasury operations. Enables reconstruction of wallet balances, detection of large transfers, and analysis of token velocity. Data is derived from transaction execution effects and object state transitions, following Sui's explicit ownership and versioning model.", "columns": {"CHECKPOINT_NUMBER": {"name": "CHECKPOINT_NUMBER", "description": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_DIGEST": {"name": "TX_DIGEST", "description": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_KIND": {"name": "TX_KIND", "description": "The type of transaction executed. Values include 'Programmable Transaction Block' (PTB) for user-submitted transactions (up to 1,024 commands) and 'System Transaction' for validator/network operations. Determines execution path, available operations, and analytics grouping. Example: 'ProgrammableTransactionBlock'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SENDER": {"name": "TX_SENDER", "description": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MESSAGE_VERSION": {"name": "MESSAGE_VERSION", "description": "The version of the transaction data structure, supporting protocol evolution and backward compatibility. Currently uses 'TransactionDataV1'. Ensures analytics remain robust across protocol upgrades. Example: '1'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BALANCE_CHANGE_INDEX": {"name": "BALANCE_CHANGE_INDEX", "description": "Zero-based index ordering balance changes within a transaction. Tracks the sequence of balance modifications for accurate financial analysis and reconciliation. Example: 0.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "COIN_TYPE": {"name": "COIN_TYPE", "description": "Fully qualified Move type identifier for coins/tokens. Format: {package}::{module}::{struct}. Example: '0x2::sui::SUI' for native SUI token. Essential for DeFi analytics, token classification, and cross-asset analysis.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "AMOUNT": {"name": "AMOUNT", "description": "Token quantity in the smallest unit (MIST for SUI). Integer value; 1 SUI = 1,000,000,000 MIST. Used for precise financial calculations, balance tracking, and token flow analysis. Example: 1000000000.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "OBJECT_OWNER": {"name": "OBJECT_OWNER", "description": "Indicates how the object is owned and accessed. Types: Address-owned, Shared (consensus), Immutable (public), Object-owned. Determines access patterns and transaction requirements. Example: 'Shared'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ADDRESS_OWNER": {"name": "ADDRESS_OWNER", "description": "The 32-byte Sui address (hex with 0x prefix) that owns this object when it has address-based ownership. Address-owned objects are controlled by a specific account and can only be accessed by their owner, providing exclusive control and enabling efficient parallel processing since they don't require consensus. Used for wallet analytics, ownership tracking, and transaction authorization analysis. When null, the object has a different ownership type (shared, immutable, or object-owned). Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "FACT_TRANSACTION_BALANCE_CHANGES_ID": {"name": "FACT_TRANSACTION_BALANCE_CHANGES_ID", "description": "Surrogate key for the balance changes fact table. Generated unique identifier by combining transaction digest and balance change index, guaranteeing uniqueness for each balance change event. Critical for financial analysis, reconciliation, and tracking token flows at the most granular level. In Sui, this enables accurate wallet balance reconstruction, detection of large transfers, and portfolio analytics across all addresses and token types.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "fact_transaction_balance_changes_id", "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["gold", "core"]}, "created_at": 1756141891.0670917, "relation_name": "SUI.core.fact_balance_changes", "raw_code": "{{ config (\n    materialized = \"incremental\",\n    unique_key = \"fact_transaction_balance_changes_id\",\n    cluster_by = ['block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['gold','core']\n) }}\n\nWITH base AS (\n\n    SELECT\n        A.checkpoint_number,\n        A.block_timestamp,\n        A.tx_digest,\n        A.transaction_json :\"transaction\" :\"data\" :\"transaction\" :\"kind\" :: STRING AS tx_kind,\n        A.transaction_json :\"transaction\" :\"data\" :\"sender\" :: STRING AS tx_sender,\n        A.transaction_json :\"transaction\" :\"data\" :\"messageVersion\" :: STRING AS message_version,\n        CASE\n            WHEN transaction_json :\"effects\" :\"status\" :\"status\" = 'failure' THEN FALSE\n            ELSE TRUE\n        END AS tx_succeeded,\n        b.index AS balance_change_index,\n        b.value AS bc_value,\n        bc_value :\"amount\" :: bigint AS amount,\n        bc_value :\"coinType\" :: STRING AS coin_type,\n        bc_value :\"owner\" :\"AddressOwner\" :: STRING AS address_owner,\n        bc_value :\"owner\" :\"ObjectOwner\" :: STRING AS object_owner,\n    FROM\n        {{ ref('silver__transactions') }} A,\n        LATERAL FLATTEN(\n            A.transaction_json :\"balanceChanges\"\n        ) b\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            {{ this }})\n        {% endif %}\n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_kind,\n    tx_sender,\n    message_version,\n    tx_succeeded,\n    balance_change_index,\n    coin_type,\n    amount,\n    object_owner,\n    address_owner,\n    {{ dbt_utils.generate_surrogate_key(['tx_digest','balance_change_index']) }} AS fact_transaction_balance_changes_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    base", "language": "sql", "refs": [{"name": "silver__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sui_models.silver__transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/core__fact_balance_changes.sql", "compiled": true, "compiled_code": "\n\nWITH base AS (\n\n    SELECT\n        A.checkpoint_number,\n        A.block_timestamp,\n        A.tx_digest,\n        A.transaction_json :\"transaction\" :\"data\" :\"transaction\" :\"kind\" :: STRING AS tx_kind,\n        A.transaction_json :\"transaction\" :\"data\" :\"sender\" :: STRING AS tx_sender,\n        A.transaction_json :\"transaction\" :\"data\" :\"messageVersion\" :: STRING AS message_version,\n        CASE\n            WHEN transaction_json :\"effects\" :\"status\" :\"status\" = 'failure' THEN FALSE\n            ELSE TRUE\n        END AS tx_succeeded,\n        b.index AS balance_change_index,\n        b.value AS bc_value,\n        bc_value :\"amount\" :: bigint AS amount,\n        bc_value :\"coinType\" :: STRING AS coin_type,\n        bc_value :\"owner\" :\"AddressOwner\" :: STRING AS address_owner,\n        bc_value :\"owner\" :\"ObjectOwner\" :: STRING AS object_owner,\n    FROM\n        SUI.silver.transactions A,\n        LATERAL FLATTEN(\n            A.transaction_json :\"balanceChanges\"\n        ) b\n\n\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            SUI.core.fact_balance_changes)\n        \n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_kind,\n    tx_sender,\n    message_version,\n    tx_succeeded,\n    balance_change_index,\n    coin_type,\n    amount,\n    object_owner,\n    address_owner,\n    \n    \nmd5(cast(coalesce(cast(tx_digest as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(balance_change_index as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS fact_transaction_balance_changes_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    base", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "f484b55db2a7ad15b23b5fc7ac05faae2d1d9a7e3f7186bcdc1a7cf4f26deeca"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["FACT_TRANSACTION_BALANCE_CHANGES_ID"], "time_spine": null}, "model.sui_models.core__dim_tokens": {"database": "SUI", "schema": "core", "name": "core__dim_tokens", "resource_type": "model", "package_name": "sui_models", "path": "gold/core/core__dim_tokens.sql", "original_file_path": "models/gold/core/core__dim_tokens.sql", "unique_id": "model.sui_models.core__dim_tokens", "fqn": ["sui_models", "gold", "core", "core__dim_tokens"], "alias": "dim_tokens", "checksum": {"name": "sha256", "checksum": "7f43ff8ac80b2a33ffae5f95535c5b860efad086f49554ac9fb33d9431ca1064"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold", "core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "coin_type", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["gold", "core"], "description": "Dimension table providing authoritative metadata for all fungible and non-fungible tokens on the Sui blockchain. Includes decimals, symbols, names, descriptions, and icon URLs sourced from on-chain metadata and Move package definitions. Serves as the canonical reference for token identification, decimal normalization, and UI display across analytics workflows. Data is sourced from bronze_api__coin_metadata and cross-referenced with on-chain Move modules, covering both native SUI and custom tokens. Essential for accurate balance calculations, token flow analysis, and user-facing applications. Supports lineage tracing from raw on-chain metadata to analytics-ready token attributes.", "columns": {"COIN_TYPE": {"name": "COIN_TYPE", "description": "Fully qualified Move type identifier for coins/tokens. Format: {package}::{module}::{struct}. Example: '0x2::sui::SUI' for native SUI token. Essential for DeFi analytics, token classification, and cross-asset analysis.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "DECIMALS": {"name": "DECIMALS", "description": "Number of decimal places for the token. Integer value defining token precision (e.g., 9 for SUI means 1 SUI = 1,000,000,000 MIST). Essential for accurate token amount calculations, display formatting, and cross-token analytics. Example: 9.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "SYMBOL": {"name": "SYMBOL", "description": "Short string symbol for the token (e.g., 'SUI', 'USDC'). Used for user-friendly token identification, UI display, and analytics grouping. Example: 'SUI'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "NAME": {"name": "NAME", "description": "Full descriptive name of the token. Human-readable string for complete token identification, used in interfaces and analytics. Example: 'Sui Token'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "DESCRIPTION": {"name": "DESCRIPTION", "description": "Detailed description of the token's purpose, features, and technical details. Used for documentation, analytics, and user interfaces. Example: 'Native token of the Sui blockchain, used for gas and staking.'", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ICON_URL": {"name": "ICON_URL", "description": "Web URL pointing to the token's icon image. Used for visual representation in wallets, dApps, and analytics dashboards. Example: 'https://assets.sui.io/icons/sui.svg'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "OBJECT_ID": {"name": "OBJECT_ID", "description": "Unique identifier for the token metadata record, linking metadata to on-chain token types. Used for metadata management, registry operations, and analytics joins. Example: 'tokenmeta_123'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "DIM_TOKENS_ID": {"name": "DIM_TOKENS_ID", "description": "Surrogate key for the tokens dimension table. Generated unique identifier for each token metadata record, typically derived from the coin type or on-chain metadata. Enables efficient token lookups, joins across fact tables, and lineage tracing from raw on-chain data to analytics-ready attributes. In Sui, this is critical for accurate token identification, decimal normalization, and cross-model analytics involving token flows and balances.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "coin_type", "merge_exclude_columns": ["inserted_timestamp"], "tags": ["gold", "core"]}, "created_at": 1756141891.062324, "relation_name": "SUI.core.dim_tokens", "raw_code": "{{ config (\n    materialized = \"incremental\",\n    unique_key = \"coin_type\",\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['gold','core']\n) }}\n\nSELECT\n    coin_type,\n    decimals,\n    symbol,\n    NAME,\n    description,\n    icon_url,\n    object_id,\n    {{ dbt_utils.generate_surrogate_key(['coin_type']) }} AS dim_tokens_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('bronze_api__coin_metadata') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp) AS modified_timestamp\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "bronze_api__coin_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.sui_models.bronze_api__coin_metadata"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/core__dim_tokens.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    coin_type,\n    decimals,\n    symbol,\n    NAME,\n    description,\n    icon_url,\n    object_id,\n    \n    \nmd5(cast(coalesce(cast(coin_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS dim_tokens_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    SUI.bronze_api.coin_metadata\n\n\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(modified_timestamp) AS modified_timestamp\n        FROM\n            SUI.core.dim_tokens\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "b4a893cf6f35afbe78729a9160aca9b389560ef87945819986f93621e631ba5f"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["COIN_TYPE", "DIM_TOKENS_ID"], "time_spine": null}, "model.sui_models.core__dim_labels": {"database": "SUI", "schema": "core", "name": "core__dim_labels", "resource_type": "model", "package_name": "sui_models", "path": "gold/core/core__dim_labels.sql", "original_file_path": "models/gold/core/core__dim_labels.sql", "unique_id": "model.sui_models.core__dim_labels", "fqn": ["sui_models", "gold", "core", "core__dim_labels"], "alias": "dim_labels", "checksum": {"name": "sha256", "checksum": "c3a0e89aff079f744f494be7d6447ae53378a585275bdf7f7dfc1dceb5f1bad8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold", "core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address)", "transaction": true, "index": null}, {"sql": "DELETE FROM {{ this }} WHERE address in (select address from {{ ref('silver__crosschain_labels') }} where _is_deleted = TRUE);", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["address"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["gold", "core"], "description": "The labels table is a store of one-to-one address identifiers, or an address name. Labels are broken out into a \"type\" (such as cex, dex, dapp, games, etc.) and a \"subtype\" (ex: contract_deployer, hot_wallet, token_contract, etc.) in order to help classify each address name into similar groups. Our labels are sourced from many different places, but can primarily be grouped into two categories: automatic and manual. Automatic labels are continuously labeled based on certain criteria, such as a known contract deploying another contract, behavior based algorithms for finding deposit wallets, and consistent data pulls of custom protocol APIs. Manual labels are done periodically to find addresses that cannot be found programmatically such as finding new protocol addresses, centralized exchange hot wallets, or trending addresses. Labels can also be added by our community by using our add-a-label tool (https://science.flipsidecrypto.xyz/add-a-label/).A label can be removed by our labels team if it is found to be incorrect or no longer relevant; this generally will only happen for mislabeled deposit wallets.", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "Raw address string", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always ton. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "CREATOR": {"name": "CREATOR", "description": "Name of the label creator - for now, this will always be \"Flipside.\"", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A broad category that describes what a label is representing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "Adds more detail to the label type.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "LABEL": {"name": "LABEL", "description": "The label or name of the address.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "Name of the labeled address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "DIM_LABELS_ID": {"name": "DIM_LABELS_ID", "description": "Unique primary key for the dimension table, used as the main identifier for each record.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when this record was inserted.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when this record was last modified.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": ["address"], "incremental_strategy": "merge", "merge_exclude_columns": ["inserted_timestamp"], "tags": ["gold", "core"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address)", "DELETE FROM {{ this }} WHERE address in (select address from {{ ref('silver__crosschain_labels') }} where _is_deleted = TRUE);"]}, "created_at": 1756141891.0975904, "relation_name": "SUI.core.dim_labels", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['address'],\n    incremental_strategy = 'merge',\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    post_hook = [\"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(address)\", \"DELETE FROM {{ this }} WHERE address in (select address from {{ ref('silver__crosschain_labels') }} where _is_deleted = TRUE);\",],\n    tags = ['gold','core']\n) }}\n\nSELECT\n    blockchain,\n    creator,\n    address,\n    label_type,\n    label_subtype,\n    project_name AS label,\n    address_name,\n    labels_combined_id AS dim_labels_id,\n    inserted_timestamp,\n    modified_timestamp\nFROM\n    {{ ref('silver__crosschain_labels') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(\n                modified_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}", "language": "sql", "refs": [{"name": "silver__crosschain_labels", "package": null, "version": null}, {"name": "silver__crosschain_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.sui_models.silver__crosschain_labels"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/core__dim_labels.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    blockchain,\n    creator,\n    address,\n    label_type,\n    label_subtype,\n    project_name AS label,\n    address_name,\n    labels_combined_id AS dim_labels_id,\n    inserted_timestamp,\n    modified_timestamp\nFROM\n    SUI.silver.crosschain_labels\n\n\nWHERE\n    modified_timestamp >= (\n        SELECT\n            MAX(\n                modified_timestamp\n            )\n        FROM\n            SUI.core.dim_labels\n    )\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ADDRESS"], "time_spine": null}, "model.sui_models.core__fact_events": {"database": "SUI", "schema": "core", "name": "core__fact_events", "resource_type": "model", "package_name": "sui_models", "path": "gold/core/core__fact_events.sql", "original_file_path": "models/gold/core/core__fact_events.sql", "unique_id": "model.sui_models.core__fact_events", "fqn": ["sui_models", "gold", "core", "core__fact_events"], "alias": "fact_events", "checksum": {"name": "sha256", "checksum": "e91cdd7b1276b288d690c10078d305e69ac729039e837929d96a6412ef2b4e77"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold", "core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_events_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["gold", "core"], "description": "Fact table logging all events emitted by Move smart contracts and system operations during transaction execution on Sui. Each event is a structured data emission containing contract-specific or protocol-level information, including event type, JSON payload, emitting module, and transaction context. Enables deep dApp analytics, protocol monitoring, and behavioral analysis by exposing granular details of on-chain activity. Events are indexed by transaction and checkpoint, supporting real-time monitoring, anomaly detection, and business intelligence use cases. Essential for understanding contract interactions, user engagement, and protocol-level trends in the Sui ecosystem.", "columns": {"CHECKPOINT_NUMBER": {"name": "CHECKPOINT_NUMBER", "description": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_DIGEST": {"name": "TX_DIGEST", "description": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_KIND": {"name": "TX_KIND", "description": "The type of transaction executed. Values include 'Programmable Transaction Block' (PTB) for user-submitted transactions (up to 1,024 commands) and 'System Transaction' for validator/network operations. Determines execution path, available operations, and analytics grouping. Example: 'ProgrammableTransactionBlock'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SENDER": {"name": "TX_SENDER", "description": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MESSAGE_VERSION": {"name": "MESSAGE_VERSION", "description": "The version of the transaction data structure, supporting protocol evolution and backward compatibility. Currently uses 'TransactionDataV1'. Ensures analytics remain robust across protocol upgrades. Example: '1'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Zero-based index ordering events within a transaction. Ensures deterministic event ordering for sequence reconstruction and analytics. Example: 1.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TYPE": {"name": "TYPE", "description": "Type/category of object state modification or event. Enum: created, modified, deleted, wrapped, unwrapped (for changes); event type string (for events). Used for lifecycle analysis and state transition tracking. Example: 'created'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EVENT_ADDRESS": {"name": "EVENT_ADDRESS", "description": "Sui address (32-byte hex) that triggered the event emission. Used for filtering, access control, and user activity analytics. Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EVENT_MODULE": {"name": "EVENT_MODULE", "description": "Name of the Move module that emitted the event. Used for module-specific event filtering and analytics. Example: 'coin'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EVENT_RESOURCE": {"name": "EVENT_RESOURCE", "description": "Fully qualified type signature of the event struct. Format: {package_id}::{module}::{struct_name}<type_parameters>. Enables type-safe event deserialization and schema tracking. Example: '0x2::coin::TransferEvent<0x2::sui::SUI>'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PACKAGE_ID": {"name": "PACKAGE_ID", "description": "Unique identifier (object ID) of the Move package containing the event module. Used for package-level analytics, deployment tracking, and contract lineage. Example: '0x2'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TRANSACTION_MODULE": {"name": "TRANSACTION_MODULE", "description": "Name of the module executed in the transaction that emitted the event. Links events to transaction context for flow analysis. Example: 'pay_sui'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "SENDER": {"name": "SENDER", "description": "Sui address (32-byte hex) representing the transaction or event sender. Used for authorization, security analysis, and user activity tracking. Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PARSED_JSON": {"name": "PARSED_JSON", "description": "JSON object representing the event data, with structure varying by event type. Provides structured, machine-readable event data for analytics, dApp monitoring, and real-time applications. Example: {\"amount\": \"1000000\", \"recipient\": \"0xabc...\"}.", "meta": {}, "data_type": "VARIANT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "FACT_EVENTS_ID": {"name": "FACT_EVENTS_ID", "description": "Surrogate key for the events fact table. Generated unique identifier combining transaction digest and event index, ensuring each event emission is uniquely addressable. Used as the primary key for event tracking, analytics workflows, and cross-model joins. In Sui, this supports granular dApp analytics, protocol monitoring, and event-driven application logic by enabling precise event referencing and lineage analysis.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "fact_events_id", "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["gold", "core"]}, "created_at": 1756141891.0813851, "relation_name": "SUI.core.fact_events", "raw_code": "{{ config (\n    materialized = \"incremental\",\n    unique_key = \"fact_events_id\",\n    cluster_by = ['block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['gold','core']\n) }}\n\nWITH base AS (\n\n    SELECT\n        A.checkpoint_number,\n        A.block_timestamp,\n        A.tx_digest,\n        A.transaction_json :\"transaction\" :\"data\" :\"transaction\" :\"kind\" :: STRING AS tx_kind,\n        A.transaction_json :\"transaction\" :\"data\" :\"sender\" :: STRING AS tx_sender,\n        A.transaction_json :\"transaction\" :\"data\" :\"messageVersion\" :: STRING AS message_version,\n        CASE\n            WHEN transaction_json :\"effects\" :\"status\" :\"status\" = 'failure' THEN FALSE\n            ELSE TRUE\n        END AS tx_succeeded,\n        b.value AS event_value,\n        event_value :\"id\" :\"eventSeq\" :: INT AS event_index,\n        event_value :\"packageId\" :: STRING AS package_id,\n        event_value :\"transactionModule\" :: STRING AS transaction_module,\n        event_value :\"sender\" :: STRING AS sender,\n        event_value :\"type\" :: STRING AS TYPE,\n        event_value :\"parsedJson\" AS parsed_json\n    FROM\n        {{ ref('silver__transactions') }} A,\n        LATERAL FLATTEN(\n            A.transaction_json :\"events\"\n        ) b\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            {{ this }})\n        {% endif %}\n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_kind,\n    tx_sender,\n    message_version,\n    tx_succeeded,\n    event_index,\n    TYPE,\n    SPLIT_PART(\n        TYPE,\n        '::',\n        1\n    ) AS event_address,\n    SPLIT_PART(\n        TYPE,\n        '::',\n        2\n    ) AS event_module,\n    REPLACE(\n        TYPE,\n        event_address || '::' || event_module || '::'\n    ) AS event_resource,\n    package_id,\n    transaction_module,\n    sender,\n    parsed_json,\n    {{ dbt_utils.generate_surrogate_key(['tx_digest','event_index']) }} AS fact_events_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    base", "language": "sql", "refs": [{"name": "silver__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sui_models.silver__transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/core__fact_events.sql", "compiled": true, "compiled_code": "\n\nWITH base AS (\n\n    SELECT\n        A.checkpoint_number,\n        A.block_timestamp,\n        A.tx_digest,\n        A.transaction_json :\"transaction\" :\"data\" :\"transaction\" :\"kind\" :: STRING AS tx_kind,\n        A.transaction_json :\"transaction\" :\"data\" :\"sender\" :: STRING AS tx_sender,\n        A.transaction_json :\"transaction\" :\"data\" :\"messageVersion\" :: STRING AS message_version,\n        CASE\n            WHEN transaction_json :\"effects\" :\"status\" :\"status\" = 'failure' THEN FALSE\n            ELSE TRUE\n        END AS tx_succeeded,\n        b.value AS event_value,\n        event_value :\"id\" :\"eventSeq\" :: INT AS event_index,\n        event_value :\"packageId\" :: STRING AS package_id,\n        event_value :\"transactionModule\" :: STRING AS transaction_module,\n        event_value :\"sender\" :: STRING AS sender,\n        event_value :\"type\" :: STRING AS TYPE,\n        event_value :\"parsedJson\" AS parsed_json\n    FROM\n        SUI.silver.transactions A,\n        LATERAL FLATTEN(\n            A.transaction_json :\"events\"\n        ) b\n\n\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            SUI.core.fact_events)\n        \n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_kind,\n    tx_sender,\n    message_version,\n    tx_succeeded,\n    event_index,\n    TYPE,\n    SPLIT_PART(\n        TYPE,\n        '::',\n        1\n    ) AS event_address,\n    SPLIT_PART(\n        TYPE,\n        '::',\n        2\n    ) AS event_module,\n    REPLACE(\n        TYPE,\n        event_address || '::' || event_module || '::'\n    ) AS event_resource,\n    package_id,\n    transaction_module,\n    sender,\n    parsed_json,\n    \n    \nmd5(cast(coalesce(cast(tx_digest as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(event_index as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS fact_events_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    base", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "c69c238dc4b58234b3e64227535dc4d0b9417596d8302d1818fb362220925c85"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["FACT_EVENTS_ID"], "time_spine": null}, "model.sui_models.core__fact_changes": {"database": "SUI", "schema": "core", "name": "core__fact_changes", "resource_type": "model", "package_name": "sui_models", "path": "gold/core/core__fact_changes.sql", "original_file_path": "models/gold/core/core__fact_changes.sql", "unique_id": "model.sui_models.core__fact_changes", "fqn": ["sui_models", "gold", "core", "core__fact_changes"], "alias": "fact_changes", "checksum": {"name": "sha256", "checksum": "f8d0a71230c78b73968e5347b70f2c90eefbf5c3dcb36665cf9c66bc0b284d70"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold", "core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_changes_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["gold", "core"], "description": "Fact table capturing all object state transitions on the Sui blockchain, including creation, mutation, deletion, wrapping, and unwrapping of objects. Each record documents the full lifecycle of Sui objects (NFTs, coins, packages, etc.) as they are manipulated by transactions. Includes object IDs, versions, types, and ownership changes, enabling forensic analysis, compliance reporting, and application behavior tracing. Supports lineage analysis by linking object changes to specific transactions, epochs, and owners. Critical for understanding Sui's object-centric data model and for tracking resource flows, upgrades, and state mutations across the network.", "columns": {"CHECKPOINT_NUMBER": {"name": "CHECKPOINT_NUMBER", "description": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_DIGEST": {"name": "TX_DIGEST", "description": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_KIND": {"name": "TX_KIND", "description": "The type of transaction executed. Values include 'Programmable Transaction Block' (PTB) for user-submitted transactions (up to 1,024 commands) and 'System Transaction' for validator/network operations. Determines execution path, available operations, and analytics grouping. Example: 'ProgrammableTransactionBlock'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SENDER": {"name": "TX_SENDER", "description": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MESSAGE_VERSION": {"name": "MESSAGE_VERSION", "description": "The version of the transaction data structure, supporting protocol evolution and backward compatibility. Currently uses 'TransactionDataV1'. Ensures analytics remain robust across protocol upgrades. Example: '1'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "CHANGE_INDEX": {"name": "CHANGE_INDEX", "description": "Zero-based sequential index ordering object state changes within a transaction. Ensures atomicity and correct ordering for analytics and lineage tracing. Example: 2.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TYPE": {"name": "TYPE", "description": "Type/category of object state modification or event. Enum: created, modified, deleted, wrapped, unwrapped (for changes); event type string (for events). Used for lifecycle analysis and state transition tracking. Example: 'created'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "SENDER": {"name": "SENDER", "description": "Sui address (32-byte hex) representing the transaction or event sender. Used for authorization, security analysis, and user activity tracking. Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "DIGEST": {"name": "DIGEST", "description": "32-byte cryptographic hash (hex) of object contents, using SHA-256. Used for content verification, integrity checking, and unauthorized modification detection. Example: 'a1b2c3...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "OBJECT_ID": {"name": "OBJECT_ID", "description": "Globally unique 32-byte identifier for Sui objects. Hex string, primary key for object tracking, provenance, and asset history. Example: '0x1234abcd...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "OBJECT_TYPE": {"name": "OBJECT_TYPE", "description": "Move type signature governing the object's structure and behavior. Format: {package}::{module}::{struct}<type_parameters>. Enables type-based classification and filtering. Example: '0x2::coin::Coin<0x2::sui::SUI>'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "VERSION": {"name": "VERSION", "description": "8-byte unsigned integer incremented with every object modification. Tracks mutation frequency and supports version-based conflict resolution. Initial value: 1. Example: 5.", "meta": {}, "data_type": "BIGINT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PREVIOUS_VERSION": {"name": "PREVIOUS_VERSION", "description": "Version number immediately preceding the current object version. Enables historical state reconstruction and audit trails. Value: current_version - 1 (0 for initial creation). Example: 4.", "meta": {}, "data_type": "BIGINT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "OBJECT_OWNER": {"name": "OBJECT_OWNER", "description": "Indicates how the object is owned and accessed. Types: Address-owned, Shared (consensus), Immutable (public), Object-owned. Determines access patterns and transaction requirements. Example: 'Shared'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ADDRESS_OWNER": {"name": "ADDRESS_OWNER", "description": "The 32-byte Sui address (hex with 0x prefix) that owns this object when it has address-based ownership. Address-owned objects are controlled by a specific account and can only be accessed by their owner, providing exclusive control and enabling efficient parallel processing since they don't require consensus. Used for wallet analytics, ownership tracking, and transaction authorization analysis. When null, the object has a different ownership type (shared, immutable, or object-owned). Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "SHARED_OWNER": {"name": "SHARED_OWNER", "description": "Variant data structure indicating this object has shared ownership, meaning it's accessible to everyone on the network and requires consensus validation for modifications. Shared objects enable coordination between multiple addresses but incur higher transaction costs due to consensus requirements. Used for marketplaces, escrows, AMMs, and other multi-user scenarios. Contains metadata about the shared object's initial version and access permissions. When null, the object has address-based, immutable, or object-based ownership. Example: {\"initial_shared_version\": 123}.", "meta": {}, "data_type": "VARIANT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PACKAGE_ID": {"name": "PACKAGE_ID", "description": "Unique identifier (object ID) of the Move package containing the event module. Used for package-level analytics, deployment tracking, and contract lineage. Example: '0x2'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODULES": {"name": "MODULES", "description": "Comma-separated list of Move module names contained within the package. Modules define the package's functionality and can be called by transactions to execute smart contract logic. Each module has a unique name within its package and contains functions, structs, and resources. Used for analyzing package composition, tracking module usage patterns, and understanding smart contract functionality. Example: 'coin,transfer,governance'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "FACT_CHANGES_ID": {"name": "FACT_CHANGES_ID", "description": "Surrogate key for the object changes fact table. Generated unique identifier by combining transaction digest and change index, ensuring each object state transition is uniquely tracked. Supports object lifecycle analysis, state tracking, and forensic investigations. In Sui, this is essential for tracing the full history of NFTs, coins, and other on-chain objects, supporting compliance, provenance, and application behavior analytics.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "fact_changes_id", "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["gold", "core"]}, "created_at": 1756141891.0729098, "relation_name": "SUI.core.fact_changes", "raw_code": "{{ config (\n    materialized = \"incremental\",\n    unique_key = \"fact_changes_id\",\n    cluster_by = ['block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['gold','core']\n) }}\n\nWITH base AS (\n\n    SELECT\n        A.checkpoint_number,\n        A.block_timestamp,\n        A.tx_digest,\n        A.transaction_json :\"transaction\" :\"data\" :\"transaction\" :\"kind\" :: STRING AS tx_kind,\n        A.transaction_json :\"transaction\" :\"data\" :\"sender\" :: STRING AS tx_sender,\n        A.transaction_json :\"transaction\" :\"data\" :\"messageVersion\" :: STRING AS message_version,\n        CASE\n            WHEN transaction_json :\"effects\" :\"status\" :\"status\" = 'failure' THEN FALSE\n            ELSE TRUE\n        END AS tx_succeeded,\n        b.index AS change_index,\n        b.value AS change_value,\n        change_value :\"type\" :: STRING AS TYPE,\n        change_value :\"sender\" :: STRING AS sender,\n        change_value :\"digest\" :: STRING AS digest,\n        change_value :\"objectId\" :: STRING AS object_id,\n        change_value :\"objectType\" :: STRING AS object_type,\n        change_value :\"version\" :: bigint AS version,\n        change_value :\"previousVersion\" :: bigint AS previous_version,\n        change_value :\"owner\" :\"ObjectOwner\" :: STRING AS object_owner,\n        change_value :\"owner\" :\"AddressOwner\" :: STRING AS address_owner,\n        change_value :\"owner\" :\"Shared\" AS shared_owner,\n        change_value :\"packageId\" :: STRING AS package_id,\n        change_value :\"modules\" :: STRING AS modules\n    FROM\n        {{ ref('silver__transactions') }} A,\n        LATERAL FLATTEN(\n            A.transaction_json :\"objectChanges\"\n        ) b\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            {{ this }})\n        {% endif %}\n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_kind,\n    tx_sender,\n    message_version,\n    tx_succeeded,\n    change_index,\n    TYPE,\n    sender,\n    digest,\n    object_id,\n    object_type,\n    version,\n    previous_version,\n    object_owner,\n    address_owner,\n    shared_owner,\n    package_id,\n    modules,\n    {{ dbt_utils.generate_surrogate_key(['tx_digest','change_index']) }} AS fact_changes_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    base", "language": "sql", "refs": [{"name": "silver__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sui_models.silver__transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/core__fact_changes.sql", "compiled": true, "compiled_code": "\n\nWITH base AS (\n\n    SELECT\n        A.checkpoint_number,\n        A.block_timestamp,\n        A.tx_digest,\n        A.transaction_json :\"transaction\" :\"data\" :\"transaction\" :\"kind\" :: STRING AS tx_kind,\n        A.transaction_json :\"transaction\" :\"data\" :\"sender\" :: STRING AS tx_sender,\n        A.transaction_json :\"transaction\" :\"data\" :\"messageVersion\" :: STRING AS message_version,\n        CASE\n            WHEN transaction_json :\"effects\" :\"status\" :\"status\" = 'failure' THEN FALSE\n            ELSE TRUE\n        END AS tx_succeeded,\n        b.index AS change_index,\n        b.value AS change_value,\n        change_value :\"type\" :: STRING AS TYPE,\n        change_value :\"sender\" :: STRING AS sender,\n        change_value :\"digest\" :: STRING AS digest,\n        change_value :\"objectId\" :: STRING AS object_id,\n        change_value :\"objectType\" :: STRING AS object_type,\n        change_value :\"version\" :: bigint AS version,\n        change_value :\"previousVersion\" :: bigint AS previous_version,\n        change_value :\"owner\" :\"ObjectOwner\" :: STRING AS object_owner,\n        change_value :\"owner\" :\"AddressOwner\" :: STRING AS address_owner,\n        change_value :\"owner\" :\"Shared\" AS shared_owner,\n        change_value :\"packageId\" :: STRING AS package_id,\n        change_value :\"modules\" :: STRING AS modules\n    FROM\n        SUI.silver.transactions A,\n        LATERAL FLATTEN(\n            A.transaction_json :\"objectChanges\"\n        ) b\n\n\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            SUI.core.fact_changes)\n        \n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_kind,\n    tx_sender,\n    message_version,\n    tx_succeeded,\n    change_index,\n    TYPE,\n    sender,\n    digest,\n    object_id,\n    object_type,\n    version,\n    previous_version,\n    object_owner,\n    address_owner,\n    shared_owner,\n    package_id,\n    modules,\n    \n    \nmd5(cast(coalesce(cast(tx_digest as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(change_index as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS fact_changes_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    base", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "87ec849a3ba3ec69ab2beba66affcab88b59c85db7943317fed2ed4a921f983e"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["FACT_CHANGES_ID"], "time_spine": null}, "model.sui_models.core__fact_transaction_blocks": {"database": "SUI", "schema": "core", "name": "core__fact_transaction_blocks", "resource_type": "model", "package_name": "sui_models", "path": "gold/core/core__fact_transaction_blocks.sql", "original_file_path": "models/gold/core/core__fact_transaction_blocks.sql", "unique_id": "model.sui_models.core__fact_transaction_blocks", "fqn": ["sui_models", "gold", "core", "core__fact_transaction_blocks"], "alias": "fact_transaction_blocks", "checksum": {"name": "sha256", "checksum": "b11135405b933f85719035c4fa455ef85f51332e4525b9e8bb2ccbc1569c1b73"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold", "core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_digest", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["gold", "core"], "description": "Fact table providing detailed metadata for every transaction block executed on the Sui blockchain. Includes transaction hash, sender, success status, gas usage, fee breakdowns, error codes, and dependency tracking. Serves as the primary source for transaction-level analytics, fee optimization, and network performance monitoring. Supports lineage tracing from transaction inputs to execution outcomes, including gas smashing, storage fee rebates, and error diagnostics. Critical for understanding Sui's transaction model, user behavior, and application performance at scale.", "columns": {"CHECKPOINT_NUMBER": {"name": "CHECKPOINT_NUMBER", "description": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_DIGEST": {"name": "TX_DIGEST", "description": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_KIND": {"name": "TX_KIND", "description": "The type of transaction executed. Values include 'Programmable Transaction Block' (PTB) for user-submitted transactions (up to 1,024 commands) and 'System Transaction' for validator/network operations. Determines execution path, available operations, and analytics grouping. Example: 'ProgrammableTransactionBlock'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SENDER": {"name": "TX_SENDER", "description": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MESSAGE_VERSION": {"name": "MESSAGE_VERSION", "description": "The version of the transaction data structure, supporting protocol evolution and backward compatibility. Currently uses 'TransactionDataV1'. Ensures analytics remain robust across protocol upgrades. Example: '1'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_FEE": {"name": "TX_FEE", "description": "Total gas fee paid for transaction execution, denominated in SUI tokens. Calculated as (computation_cost + storage_cost - storage_rebate) / 1e9. Used for economic modeling, fee optimization, and cost analysis. Example: 0.00123 (SUI).", "meta": {}, "data_type": "FLOAT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_ERROR": {"name": "TX_ERROR", "description": "Error message and code if the transaction failed. Human-readable string with error details for diagnostics, debugging, and error pattern analysis. Example: 'MoveAbort: InsufficientBalance'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_DEPENDENCIES": {"name": "TX_DEPENDENCIES", "description": "Array of transaction digests that this transaction depends on for object versions. Establishes transaction ordering and causality, supporting dependency analysis and complex flow tracing. Example: ['6Qk8...9Xz', '7Yl2...3Ab'].", "meta": {}, "data_type": "VARIANT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "GAS_USED_COMPUTATION_FEE": {"name": "GAS_USED_COMPUTATION_FEE", "description": "Total computation cost in MIST units (1 SUI = 1e9 MIST) for executing the transaction. Calculated as computation_units * gas_price. Used for analyzing transaction complexity and validator workload. Example: 1000000.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "GAS_USED_NON_REFUNDABLE_STORAGE_FEE": {"name": "GAS_USED_NON_REFUNDABLE_STORAGE_FEE", "description": "Portion of storage fees (in MIST) that cannot be reclaimed, ensuring storage fund sustainability. Calculated as storage_units * storage_price * 0.01. Used for economic modeling and storage fund analysis. Example: 10000.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "GAS_USED_STORAGE_FEE": {"name": "GAS_USED_STORAGE_FEE", "description": "Total cost (in MIST) for storing data on-chain. Calculated as storage_units * storage_price. Users pay this upfront for perpetual storage. Used for storage analytics and cost modeling. Example: 500000.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "GAS_USED_STORAGE_REBATE": {"name": "GAS_USED_STORAGE_REBATE", "description": "Refund amount (in MIST) when previously stored data is deleted. Calculated as original_storage_fee * 0.99. Incentivizes data cleanup and efficient storage usage. Example: 495000.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "GAS_PRICE": {"name": "GAS_PRICE", "description": "User-submitted price per computation unit (in MIST). Structure: reference_gas_price + optional tip. Determines transaction priority and total cost. Used for fee market analysis and optimization. Example: 1000.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "GAS_BUDGET": {"name": "GAS_BUDGET", "description": "Maximum amount (in MIST) user is willing to pay for transaction execution. Protects users from excessive fees. Minimum: 2,000 MIST, Maximum: 50,000,000,000 MIST. Used for transaction planning and cost control. Example: 1000000.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "GAS_OWNER": {"name": "GAS_OWNER", "description": "Sui address responsible for paying gas fees. Enables sponsored transactions (third-party gas payment). Used for payment model analytics and gasless UX studies. Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "FACT_TRANSACTION_BLOCKS_ID": {"name": "FACT_TRANSACTION_BLOCKS_ID", "description": "Surrogate key for the transaction blocks fact table. Generated unique identifier based on transaction digest, providing a one-to-one mapping to each transaction block. Enables efficient transaction-level analysis, performance monitoring, and lineage tracing from transaction inputs to execution outcomes. In Sui, this is critical for understanding transaction dependencies, gas usage, and execution results at scale.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "tx_digest", "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["gold", "core"]}, "created_at": 1756141891.0876005, "relation_name": "SUI.core.fact_transaction_blocks", "raw_code": "{{ config (\n    materialized = \"incremental\",\n    unique_key = \"tx_digest\",\n    cluster_by = ['block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['gold','core']\n) }}\n\nWITH base AS (\n\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        transaction_json :\"transaction\" :\"data\" :\"transaction\" :\"kind\" :: STRING AS tx_kind,\n        transaction_json :\"transaction\" :\"data\" :\"sender\" :: STRING AS tx_sender,\n        transaction_json :\"transaction\" :\"data\" :\"messageVersion\" :: STRING AS message_version,\n        CASE\n            WHEN transaction_json :\"effects\" :\"status\" :\"status\" = 'failure' THEN FALSE\n            ELSE TRUE\n        END AS tx_succeeded,\n        transaction_json :\"effects\" :\"status\" :\"error\" :: STRING AS tx_error,\n        {# transaction_json :\"transaction\" :txSignatures AS tx_signatures, #}\n        transaction_json :\"effects\": \"dependencies\" AS tx_dependencies,\n        {# transaction_json :\"effects\": \"gasObject\" :\"reference\" :\"digest\" :: STRING AS gas_digest, #}\n        transaction_json :\"effects\": \"gasUsed\" :\"computationCost\" :: bigint AS gas_used_computation_fee,\n        transaction_json :\"effects\": \"gasUsed\" :\"nonRefundableStorageFee\" :: bigint AS gas_used_non_refundable_storage_fee,\n        transaction_json :\"effects\": \"gasUsed\" :\"storageCost\" :: bigint AS gas_used_storage_fee,\n        transaction_json :\"effects\": \"gasUsed\" :\"storageRebate\" :: bigint AS gas_used_storage_rebate,\n        transaction_json :\"transaction\" :\"data\" :\"gasData\" :\"budget\" :: bigint AS gas_budget,\n        transaction_json :\"transaction\" :\"data\" :\"gasData\" :\"owner\" :: STRING AS gas_owner,\n        transaction_json :\"transaction\" :\"data\" :\"gasData\" :\"price\" :: bigint AS gas_price,\n        {# transaction_json :\"transaction\" :\"data\" :\"gasData\" :\"payment\" AS gas_payments, #}\n        (\n            gas_used_computation_fee + gas_used_storage_fee - gas_used_storage_rebate\n        ) / pow(\n            10,\n            9\n        ) AS tx_fee\n    FROM\n        {{ ref('silver__transactions') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            {{ this }})\n        {% endif %}\n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_kind,\n    tx_sender,\n    message_version,\n    tx_fee,\n    tx_succeeded,\n    tx_error,\n    tx_dependencies,\n    gas_used_computation_fee,\n    gas_used_non_refundable_storage_fee,\n    gas_used_storage_fee,\n    gas_used_storage_rebate,\n    gas_price,\n    gas_budget,\n    gas_owner,\n    {{ dbt_utils.generate_surrogate_key(['tx_digest']) }} AS fact_transaction_blocks_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    base", "language": "sql", "refs": [{"name": "silver__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sui_models.silver__transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/core__fact_transaction_blocks.sql", "compiled": true, "compiled_code": "\n\nWITH base AS (\n\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        transaction_json :\"transaction\" :\"data\" :\"transaction\" :\"kind\" :: STRING AS tx_kind,\n        transaction_json :\"transaction\" :\"data\" :\"sender\" :: STRING AS tx_sender,\n        transaction_json :\"transaction\" :\"data\" :\"messageVersion\" :: STRING AS message_version,\n        CASE\n            WHEN transaction_json :\"effects\" :\"status\" :\"status\" = 'failure' THEN FALSE\n            ELSE TRUE\n        END AS tx_succeeded,\n        transaction_json :\"effects\" :\"status\" :\"error\" :: STRING AS tx_error,\n        \n        transaction_json :\"effects\": \"dependencies\" AS tx_dependencies,\n        \n        transaction_json :\"effects\": \"gasUsed\" :\"computationCost\" :: bigint AS gas_used_computation_fee,\n        transaction_json :\"effects\": \"gasUsed\" :\"nonRefundableStorageFee\" :: bigint AS gas_used_non_refundable_storage_fee,\n        transaction_json :\"effects\": \"gasUsed\" :\"storageCost\" :: bigint AS gas_used_storage_fee,\n        transaction_json :\"effects\": \"gasUsed\" :\"storageRebate\" :: bigint AS gas_used_storage_rebate,\n        transaction_json :\"transaction\" :\"data\" :\"gasData\" :\"budget\" :: bigint AS gas_budget,\n        transaction_json :\"transaction\" :\"data\" :\"gasData\" :\"owner\" :: STRING AS gas_owner,\n        transaction_json :\"transaction\" :\"data\" :\"gasData\" :\"price\" :: bigint AS gas_price,\n        \n        (\n            gas_used_computation_fee + gas_used_storage_fee - gas_used_storage_rebate\n        ) / pow(\n            10,\n            9\n        ) AS tx_fee\n    FROM\n        SUI.silver.transactions\n\n\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            SUI.core.fact_transaction_blocks)\n        \n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_kind,\n    tx_sender,\n    message_version,\n    tx_fee,\n    tx_succeeded,\n    tx_error,\n    tx_dependencies,\n    gas_used_computation_fee,\n    gas_used_non_refundable_storage_fee,\n    gas_used_storage_fee,\n    gas_used_storage_rebate,\n    gas_price,\n    gas_budget,\n    gas_owner,\n    \n    \nmd5(cast(coalesce(cast(tx_digest as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS fact_transaction_blocks_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    base", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "44298f4fe0a3b62be2339195012b5204f33030bbcad5767cd3a97b3f10a07aca"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["FACT_TRANSACTION_BLOCKS_ID", "TX_DIGEST"], "time_spine": null}, "model.sui_models.core__fact_transaction_inputs": {"database": "SUI", "schema": "core", "name": "core__fact_transaction_inputs", "resource_type": "model", "package_name": "sui_models", "path": "gold/core/core__fact_transaction_inputs.sql", "original_file_path": "models/gold/core/core__fact_transaction_inputs.sql", "unique_id": "model.sui_models.core__fact_transaction_inputs", "fqn": ["sui_models", "gold", "core", "core__fact_transaction_inputs"], "alias": "fact_transaction_inputs", "checksum": {"name": "sha256", "checksum": "270c17b95a79cde0a461d86d1f863223a7afabbe14cee65adb2067873a414b40"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold", "core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_transaction_inputs_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["gold", "core"], "description": "Fact table enumerating all inputs consumed by transactions on the Sui blockchain, including owned objects, shared objects, pure values, and input types. Each record details the object ID, version, mutability, and ownership at the time of transaction execution. Enables dependency analysis, resource utilization tracking, and validation of transaction atomicity. Supports analytics on input complexity, shared object usage, and transaction parallelism. Essential for understanding how Sui's object-centric model enables parallel execution and for tracing the full dependency graph of complex transactions.", "columns": {"CHECKPOINT_NUMBER": {"name": "CHECKPOINT_NUMBER", "description": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_DIGEST": {"name": "TX_DIGEST", "description": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_KIND": {"name": "TX_KIND", "description": "The type of transaction executed. Values include 'Programmable Transaction Block' (PTB) for user-submitted transactions (up to 1,024 commands) and 'System Transaction' for validator/network operations. Determines execution path, available operations, and analytics grouping. Example: 'ProgrammableTransactionBlock'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SENDER": {"name": "TX_SENDER", "description": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MESSAGE_VERSION": {"name": "MESSAGE_VERSION", "description": "The version of the transaction data structure, supporting protocol evolution and backward compatibility. Currently uses 'TransactionDataV1'. Ensures analytics remain robust across protocol upgrades. Example: '1'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INPUT_INDEX": {"name": "INPUT_INDEX", "description": "Zero-based index referencing inputs within a programmable transaction block. Links commands to their inputs for dependency and resource usage analysis. Example: 0.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TYPE": {"name": "TYPE", "description": "Type/category of object state modification or event. Enum: created, modified, deleted, wrapped, unwrapped (for changes); event type string (for events). Used for lifecycle analysis and state transition tracking. Example: 'created'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "VERSION": {"name": "VERSION", "description": "8-byte unsigned integer incremented with every object modification. Tracks mutation frequency and supports version-based conflict resolution. Initial value: 1. Example: 5.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "OBJECT_ID": {"name": "OBJECT_ID", "description": "Globally unique 32-byte identifier for Sui objects. Hex string, primary key for object tracking, provenance, and asset history. Example: '0x1234abcd...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "OBJECT_TYPE": {"name": "OBJECT_TYPE", "description": "Move type signature governing the object's structure and behavior. Format: {package}::{module}::{struct}<type_parameters>. Enables type-based classification and filtering. Example: '0x2::coin::Coin<0x2::sui::SUI>'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "DIGEST": {"name": "DIGEST", "description": "32-byte cryptographic hash (hex) of object contents, using SHA-256. Used for content verification, integrity checking, and unauthorized modification detection. Example: 'a1b2c3...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "VALUE": {"name": "VALUE", "description": "Actual data content of the object or input value, encoded using Binary Canonical Serialization (BCS). Used for content analysis, debugging, and advanced analytics. Example: '0x010203...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "VALUE_TYPE": {"name": "VALUE_TYPE", "description": "Move type of the object's value content or input value type. Fully qualified type name with generics, supporting type-safe deserialization and schema evolution. Example: '0x2::coin::Coin<0x2::sui::SUI>'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INITIAL_SHARED_VERSION": {"name": "INITIAL_SHARED_VERSION", "description": "Version number at which an object was first shared. Nullable u64 (None for non-shared objects). Determines consensus requirements and helps analyze shared object contention. Example: 3.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MUTABLE": {"name": "MUTABLE", "description": "Boolean flag indicating if the object can be modified. true = mutable, false = immutable. Affects performance, access patterns, and caching. Example: true.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "FACT_TRANSACTION_INPUTS_ID": {"name": "FACT_TRANSACTION_INPUTS_ID", "description": "Surrogate key for the transaction inputs fact table. Generated unique identifier by combining transaction digest and input index, ensuring each input to a transaction is uniquely addressable. Supports dependency analysis, resource utilization tracking, and validation of transaction atomicity. In Sui, this enables detailed tracing of input objects, shared object usage, and parallel execution patterns.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "fact_transaction_inputs_id", "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["gold", "core"]}, "created_at": 1756141891.0923052, "relation_name": "SUI.core.fact_transaction_inputs", "raw_code": "{{ config (\n    materialized = \"incremental\",\n    unique_key = \"fact_transaction_inputs_id\",\n    cluster_by = ['block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['gold','core']\n) }}\n\nWITH base AS (\n\n    SELECT\n        A.checkpoint_number,\n        A.block_timestamp,\n        A.tx_digest,\n        A.transaction_json :\"transaction\" :\"data\" :\"transaction\" :\"kind\" :: STRING AS tx_kind,\n        A.transaction_json :\"transaction\" :\"data\" :\"sender\" :: STRING AS tx_sender,\n        A.transaction_json :\"transaction\" :\"data\" :\"messageVersion\" :: STRING AS message_version,\n        CASE\n            WHEN transaction_json :\"effects\" :\"status\" :\"status\" = 'failure' THEN FALSE\n            ELSE TRUE\n        END AS tx_succeeded,\n        b.index AS input_index,\n        b.value AS input_value,\n        input_value :\"initialSharedVersion\" :: STRING AS initial_shared_version,\n        input_value :\"mutable\" :: BOOLEAN AS mutable,\n        input_value :\"objectId\" :: STRING AS object_id,\n        input_value :\"objectType\" :: STRING AS object_type,\n        input_value :\"type\" :: STRING AS TYPE,\n        input_value :\"version\" :: bigint AS version,\n        input_value :\"digest\" :: STRING AS digest,\n        input_value :\"value\" :: STRING AS VALUE,\n        input_value :\"valueType\" :: STRING AS value_type\n    FROM\n        {{ ref('silver__transactions') }} A,\n        LATERAL FLATTEN(\n            A.transaction_json :\"transaction\" :\"data\" :\"transaction\": \"inputs\"\n        ) b\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            {{ this }})\n        {% endif %}\n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_kind,\n    tx_sender,\n    message_version,\n    tx_succeeded,\n    input_index,\n    TYPE,\n    version,\n    object_id,\n    object_type,\n    digest,\n    VALUE,\n    value_type,\n    initial_shared_version,\n    mutable,\n    {{ dbt_utils.generate_surrogate_key(['tx_digest','input_index']) }} AS fact_transaction_inputs_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    base", "language": "sql", "refs": [{"name": "silver__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sui_models.silver__transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/core__fact_transaction_inputs.sql", "compiled": true, "compiled_code": "\n\nWITH base AS (\n\n    SELECT\n        A.checkpoint_number,\n        A.block_timestamp,\n        A.tx_digest,\n        A.transaction_json :\"transaction\" :\"data\" :\"transaction\" :\"kind\" :: STRING AS tx_kind,\n        A.transaction_json :\"transaction\" :\"data\" :\"sender\" :: STRING AS tx_sender,\n        A.transaction_json :\"transaction\" :\"data\" :\"messageVersion\" :: STRING AS message_version,\n        CASE\n            WHEN transaction_json :\"effects\" :\"status\" :\"status\" = 'failure' THEN FALSE\n            ELSE TRUE\n        END AS tx_succeeded,\n        b.index AS input_index,\n        b.value AS input_value,\n        input_value :\"initialSharedVersion\" :: STRING AS initial_shared_version,\n        input_value :\"mutable\" :: BOOLEAN AS mutable,\n        input_value :\"objectId\" :: STRING AS object_id,\n        input_value :\"objectType\" :: STRING AS object_type,\n        input_value :\"type\" :: STRING AS TYPE,\n        input_value :\"version\" :: bigint AS version,\n        input_value :\"digest\" :: STRING AS digest,\n        input_value :\"value\" :: STRING AS VALUE,\n        input_value :\"valueType\" :: STRING AS value_type\n    FROM\n        SUI.silver.transactions A,\n        LATERAL FLATTEN(\n            A.transaction_json :\"transaction\" :\"data\" :\"transaction\": \"inputs\"\n        ) b\n\n\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            SUI.core.fact_transaction_inputs)\n        \n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_kind,\n    tx_sender,\n    message_version,\n    tx_succeeded,\n    input_index,\n    TYPE,\n    version,\n    object_id,\n    object_type,\n    digest,\n    VALUE,\n    value_type,\n    initial_shared_version,\n    mutable,\n    \n    \nmd5(cast(coalesce(cast(tx_digest as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(input_index as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS fact_transaction_inputs_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    base", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "1cbed98d9c24347ebd15b7d13b25f7150ada89a8e3ba2cee87e0420261243378"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["FACT_TRANSACTION_INPUTS_ID"], "time_spine": null}, "model.sui_models.core__fact_checkpoints": {"database": "SUI", "schema": "core", "name": "core__fact_checkpoints", "resource_type": "model", "package_name": "sui_models", "path": "gold/core/core__fact_checkpoints.sql", "original_file_path": "models/gold/core/core__fact_checkpoints.sql", "unique_id": "model.sui_models.core__fact_checkpoints", "fqn": ["sui_models", "gold", "core", "core__fact_checkpoints"], "alias": "fact_checkpoints", "checksum": {"name": "sha256", "checksum": "56eddbb96cc171168aa1ba1d827ce60d2e44978cc8221b74731c793912785506"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold", "core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "checkpoint_number", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["gold", "core"], "description": "Fact table representing all finalized checkpoints on the Sui blockchain, which serve as consensus points bundling multiple transactions for finality and recovery. Each checkpoint aggregates metadata such as checkpoint sequence number, timestamp, transaction count, validator signatures, and epoch information. Checkpoints are produced via the Mysticeti consensus mechanism approximately every 250ms, providing the backbone for time series analysis (TPS, latency, validator participation). This table is essential for measuring network throughput, tracking validator performance, and ensuring data integrity. Supports analytics on epoch transitions, validator set changes, and network health.", "columns": {"CHECKPOINT_NUMBER": {"name": "CHECKPOINT_NUMBER", "description": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EPOCH": {"name": "EPOCH", "description": "Epoch number (integer) representing a fixed period (~24h) with a stable validator set and protocol configuration. Used for tracking validator changes, protocol upgrades, and time-based partitioning. Example: 42.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "CHECKPOINT_DIGEST": {"name": "CHECKPOINT_DIGEST", "description": "32-byte cryptographic hash (Base58) uniquely identifying checkpoint contents. Used for checkpoint verification, integrity checking, and chain continuity. Example: '6Qk8...9Xz'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PREVIOUS_DIGEST": {"name": "PREVIOUS_DIGEST", "description": "Hash of the previous checkpoint, maintaining blockchain continuity. Used for history verification and chain analysis. Example: '5Jk7...8Yz'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "NETWORK_TOTAL_TRANSACTIONS": {"name": "NETWORK_TOTAL_TRANSACTIONS", "description": "Cumulative count of all transactions processed by the network up to this checkpoint. Monotonically increasing integer, key metric for network growth, adoption, and throughput analysis. Example: 10000000.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "VALIDATOR_SIGNATURE": {"name": "VALIDATOR_SIGNATURE", "description": "Aggregated BLS signature (Base64) from validator quorum (>2/3) for checkpoint finality. Provides Byzantine fault-tolerant consensus proof. Used for security analysis and validator participation tracking. Example: 'MEUCIQ...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_COUNT": {"name": "TX_COUNT", "description": "Total number of transactions included in the checkpoint. Used for measuring checkpoint size, throughput, and network performance. Example: 250.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TRANSACTIONS_ARRAY": {"name": "TRANSACTIONS_ARRAY", "description": "Array of transaction digests included in the checkpoint. Used for transaction finality tracking, checkpoint analysis, and reconstructing checkpoint composition. Example: ['6Qk8...9Xz', '7Yl2...3Ab'].", "meta": {}, "data_type": "VARIANT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "FACT_CHECKPOINTS_ID": {"name": "FACT_CHECKPOINTS_ID", "description": "Surrogate key for the checkpoint fact table. Generated unique identifier for each checkpoint record, typically constructed from the checkpoint number or digest. Ensures row-level uniqueness and supports efficient joins, indexing, and lineage tracing across all checkpoint-related analytics. In Sui, this enables fast correlation of checkpoint metadata with transactions, validator signatures, and epoch transitions. Essential for time series analysis, network health monitoring, and data integrity verification.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "checkpoint_number", "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["gold", "core"]}, "created_at": 1756141891.0777862, "relation_name": "SUI.core.fact_checkpoints", "raw_code": "{{ config (\n    materialized = \"incremental\",\n    unique_key = \"checkpoint_number\",\n    cluster_by = ['block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['gold','core']\n) }}\n\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    checkpoint_json :\"epoch\" :: INT AS epoch,\n    checkpoint_json :\"digest\" :: STRING AS checkpoint_digest,\n    checkpoint_json :\"previousDigest\" :: STRING AS previous_digest,\n    checkpoint_json :\"networkTotalTransactions\" :: bigint AS network_total_transactions,\n    checkpoint_json :\"validatorSignature\" :: STRING AS validator_signature,\n    ARRAY_SIZE(\n        checkpoint_json :\"transactions\"\n    ) AS tx_count,\n    checkpoint_json :\"transactions\" AS transactions_array,\n    {{ dbt_utils.generate_surrogate_key(['checkpoint_number']) }} AS fact_checkpoints_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__checkpoints') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            {{ this }})\n        {% endif %}", "language": "sql", "refs": [{"name": "silver__checkpoints", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.sui_models.silver__checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/core__fact_checkpoints.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    checkpoint_json :\"epoch\" :: INT AS epoch,\n    checkpoint_json :\"digest\" :: STRING AS checkpoint_digest,\n    checkpoint_json :\"previousDigest\" :: STRING AS previous_digest,\n    checkpoint_json :\"networkTotalTransactions\" :: bigint AS network_total_transactions,\n    checkpoint_json :\"validatorSignature\" :: STRING AS validator_signature,\n    ARRAY_SIZE(\n        checkpoint_json :\"transactions\"\n    ) AS tx_count,\n    checkpoint_json :\"transactions\" AS transactions_array,\n    \n    \nmd5(cast(coalesce(cast(checkpoint_number as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS fact_checkpoints_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    SUI.silver.checkpoints\n\n\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            SUI.core.fact_checkpoints)\n        ", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "fc2b20e9b6c43707ca57a9afbc57b0a54c16face1697a32e6ece48dbc6db9f32"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["CHECKPOINT_NUMBER", "FACT_CHECKPOINTS_ID"], "time_spine": null}, "model.sui_models.core__fact_transactions": {"database": "SUI", "schema": "core", "name": "core__fact_transactions", "resource_type": "model", "package_name": "sui_models", "path": "gold/core/core__fact_transactions.sql", "original_file_path": "models/gold/core/core__fact_transactions.sql", "unique_id": "model.sui_models.core__fact_transactions", "fqn": ["sui_models", "gold", "core", "core__fact_transactions"], "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "a6228526e81177de6195601767dc169b19fbc6c76c6abe5c4ca3bcd75b1473c8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold", "core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_transactions_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["gold", "core"], "description": "Fact table decomposing every transaction on the Sui blockchain into its constituent commands and payloads. Each row represents a single command (e.g., Move call, transfer, split, merge) within a programmable transaction block, capturing execution order, command type, and argument details. Enables granular analysis of smart contract interactions, dApp usage patterns, and transaction complexity. Supports lineage tracing from high-level user actions to low-level on-chain effects, including Move function calls and resource transfers. Critical for protocol analytics, developer adoption tracking, and understanding composability in the Sui ecosystem.", "columns": {"CHECKPOINT_NUMBER": {"name": "CHECKPOINT_NUMBER", "description": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_DIGEST": {"name": "TX_DIGEST", "description": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_KIND": {"name": "TX_KIND", "description": "The type of transaction executed. Values include 'Programmable Transaction Block' (PTB) for user-submitted transactions (up to 1,024 commands) and 'System Transaction' for validator/network operations. Determines execution path, available operations, and analytics grouping. Example: 'ProgrammableTransactionBlock'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SENDER": {"name": "TX_SENDER", "description": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MESSAGE_VERSION": {"name": "MESSAGE_VERSION", "description": "The version of the transaction data structure, supporting protocol evolution and backward compatibility. Currently uses 'TransactionDataV1'. Ensures analytics remain robust across protocol upgrades. Example: '1'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PAYLOAD_INDEX": {"name": "PAYLOAD_INDEX", "description": "Zero-based index of the payload within a programmable transaction block. Orders transaction commands for flow analysis. Example: 0.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PAYLOAD_TYPE": {"name": "PAYLOAD_TYPE", "description": "Type of command in a programmable transaction block. Values: MoveCall, TransferObjects, SplitCoins, etc. Used for dApp interaction and protocol analytics. Example: 'MoveCall'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PAYLOAD_DETAILS": {"name": "PAYLOAD_DETAILS", "description": "Structured details about the specific payload command. Varies by payload type; includes all arguments and context. Used for deep transaction and smart contract analytics. Example: {\"function\": \"transfer\", \"args\": [\"0xabc...\", 1000]}.", "meta": {}, "data_type": "VARIANT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "FACT_TRANSACTIONS_ID": {"name": "FACT_TRANSACTIONS_ID", "description": "Surrogate key for the transactions fact table. Generated unique identifier by combining transaction digest and payload index, uniquely identifying each command or payload within a programmable transaction block. Essential for command-level analytics, smart contract interaction tracking, and composability analysis in Sui's multi-command transaction model.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": "fact_transactions_id", "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["gold", "core"]}, "created_at": 1756141891.096043, "relation_name": "SUI.core.fact_transactions", "raw_code": "{{ config (\n    materialized = \"incremental\",\n    unique_key = \"fact_transactions_id\",\n    cluster_by = ['block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['gold','core']\n) }}\n\nWITH base AS (\n\n    SELECT\n        A.checkpoint_number,\n        A.block_timestamp,\n        A.tx_digest,\n        A.transaction_json :\"transaction\" :\"data\" :\"transaction\" :\"kind\" :: STRING AS tx_kind,\n        A.transaction_json :\"transaction\" :\"data\" :\"sender\" :: STRING AS tx_sender,\n        A.transaction_json :\"transaction\" :\"data\" :\"messageVersion\" :: STRING AS message_version,\n        CASE\n            WHEN transaction_json :\"effects\" :\"status\" :\"status\" = 'failure' THEN FALSE\n            ELSE TRUE\n        END AS tx_succeeded,\n        b.index AS payload_index,\n        C.key AS payload_type,\n        C.value AS payload_details\n    FROM\n        {{ ref('silver__transactions') }} A,\n        LATERAL FLATTEN(\n            A.transaction_json :\"transaction\" :\"data\" :\"transaction\": \"transactions\"\n        ) b,\n        LATERAL FLATTEN(\n            b.value\n        ) C\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            {{ this }})\n        {% endif %}\n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_kind,\n    tx_sender,\n    message_version,\n    tx_succeeded,\n    payload_index,\n    payload_type,\n    payload_details,\n    {{ dbt_utils.generate_surrogate_key(['tx_digest','payload_index']) }} AS fact_transactions_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    base", "language": "sql", "refs": [{"name": "silver__transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sui_models.silver__transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/core__fact_transactions.sql", "compiled": true, "compiled_code": "\n\nWITH base AS (\n\n    SELECT\n        A.checkpoint_number,\n        A.block_timestamp,\n        A.tx_digest,\n        A.transaction_json :\"transaction\" :\"data\" :\"transaction\" :\"kind\" :: STRING AS tx_kind,\n        A.transaction_json :\"transaction\" :\"data\" :\"sender\" :: STRING AS tx_sender,\n        A.transaction_json :\"transaction\" :\"data\" :\"messageVersion\" :: STRING AS message_version,\n        CASE\n            WHEN transaction_json :\"effects\" :\"status\" :\"status\" = 'failure' THEN FALSE\n            ELSE TRUE\n        END AS tx_succeeded,\n        b.index AS payload_index,\n        C.key AS payload_type,\n        C.value AS payload_details\n    FROM\n        SUI.silver.transactions A,\n        LATERAL FLATTEN(\n            A.transaction_json :\"transaction\" :\"data\" :\"transaction\": \"transactions\"\n        ) b,\n        LATERAL FLATTEN(\n            b.value\n        ) C\n\n\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            SUI.core.fact_transactions)\n        \n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_kind,\n    tx_sender,\n    message_version,\n    tx_succeeded,\n    payload_index,\n    payload_type,\n    payload_details,\n    \n    \nmd5(cast(coalesce(cast(tx_digest as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(payload_index as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS fact_transactions_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    base", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "7a1b8428a8f6fd72947215e6abb3c5aec5d957794e859d35136bc4638c78f5c2"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["FACT_TRANSACTIONS_ID"], "time_spine": null}, "model.sui_models.core__ez_transfers": {"database": "SUI", "schema": "core", "name": "core__ez_transfers", "resource_type": "model", "package_name": "sui_models", "path": "gold/core/core__ez_transfers.sql", "original_file_path": "models/gold/core/core__ez_transfers.sql", "unique_id": "model.sui_models.core__ez_transfers", "fqn": ["sui_models", "gold", "core", "core__ez_transfers"], "alias": "ez_transfers", "checksum": {"name": "sha256", "checksum": "7c20a09c1fffc942f96e2b98835776c4f85b8855f22ffc7cc340a838c616ae11"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_digest, tx_sender, sender, receiver, coin_type, symbol);", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["tx_digest", "balance_change_index"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": true, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::DATE"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["core"], "description": "Enhanced fact table providing user-friendly transfer analytics by joining core transfer data with token metadata. Each row represents a single transfer event enriched with normalized amounts (decimal-adjusted), token symbols, and human-readable identifiers. Serves as the primary table for transfer analysis, portfolio tracking, and user-facing applications by converting raw blockchain amounts into meaningful values. The amount_normalized field automatically applies decimal precision adjustments based on token metadata, enabling direct comparison across different token types and simplifying balance calculations. Includes all transfer metadata from the base fact table while adding token symbols for easy identification and normalized amounts for accurate financial analysis. Essential for dashboards, reporting tools, and analytics workflows that require human-readable token information and precise decimal calculations.", "columns": {"CHECKPOINT_NUMBER": {"name": "CHECKPOINT_NUMBER", "description": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_DIGEST": {"name": "TX_DIGEST", "description": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BALANCE_CHANGE_INDEX": {"name": "BALANCE_CHANGE_INDEX", "description": "Zero-based index ordering balance changes within a transaction. Tracks the sequence of balance modifications for accurate financial analysis and reconciliation. Example: 0.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SENDER": {"name": "TX_SENDER", "description": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "SENDER": {"name": "SENDER", "description": "Sui address (32-byte hex) representing the transaction or event sender. Used for authorization, security analysis, and user activity tracking. Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "RECEIVER": {"name": "RECEIVER", "description": "Sui address (32-byte hex) representing the transaction or event receiver. Used for tracking destination addresses, transfer flows, and recipient analytics. In transfer contexts, this is the address receiving tokens or assets. Example: '0xdef456...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "COIN_TYPE": {"name": "COIN_TYPE", "description": "Fully qualified Move type identifier for coins/tokens. Format: {package}::{module}::{struct}. Example: '0x2::sui::SUI' for native SUI token. Essential for DeFi analytics, token classification, and cross-asset analysis.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "SYMBOL": {"name": "SYMBOL", "description": "Short string symbol for the token (e.g., 'SUI', 'USDC'). Used for user-friendly token identification, UI display, and analytics grouping. Example: 'SUI'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "AMOUNT_RAW": {"name": "AMOUNT_RAW", "description": "Token quantity in the smallest unit (MIST for SUI). Integer value; 1 SUI = 1,000,000,000 MIST. Used for precise financial calculations, balance tracking, and token flow analysis. Example: 1000000000.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "AMOUNT": {"name": "AMOUNT", "description": "Decimal-adjusted token amount calculated by dividing the raw amount by 10^decimals. Provides human-readable token quantities that can be directly compared across different token types. Essential for financial analysis, balance calculations, and user-facing applications where raw blockchain amounts need to be converted to meaningful values. Example: if amount is 1000000000 and decimals is 9, amount_normalized would be 1.0.", "meta": {}, "data_type": "FLOAT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "AMOUNT_USD": {"name": "AMOUNT_USD", "description": "USD value of the amount at transaction time.\n\nExample: 1000.50", "meta": {}, "data_type": "FLOAT", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_IS_VERIFIED": {"name": "TOKEN_IS_VERIFIED", "description": "Boolean flag indicating whether the token or price record is verified by Flipside's crosschain curation process. Verified tokens are prioritized for analytics and are considered reliable for most use cases. Unverified tokens may be incomplete, deprecated, or experimental.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EZ_TRANSFERS_ID": {"name": "EZ_TRANSFERS_ID", "description": "Surrogate key for the enhanced transfers table. Generated unique identifier by combining transaction digest and balance change index, ensuring each transfer event enriched with token metadata is uniquely addressable. Used as the primary key for user-friendly transfer analytics, dashboard queries, and cross-model joins. In Sui, this supports transfer analysis with normalized amounts and token symbols, enabling easy identification and comparison of token movements.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/gold/core/gold_core.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": true}, "materialized": "incremental", "unique_key": ["tx_digest", "balance_change_index"], "incremental_strategy": "merge", "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::DATE"], "merge_exclude_columns": ["inserted_timestamp"], "cluster_by": ["block_timestamp::DATE"], "tags": ["core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_digest, tx_sender, sender, receiver, coin_type, symbol);"}, "created_at": 1756141891.1048756, "relation_name": "SUI.core.ez_transfers", "raw_code": "{{ config(\n    materialized = 'incremental',\n    unique_key = ['tx_digest','balance_change_index'],\n    incremental_strategy = 'merge',\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::DATE\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_digest, tx_sender, sender, receiver, coin_type, symbol);\",\n    tags = ['core']\n) }}\n\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    balance_change_index,\n    tx_succeeded,\n    tx_sender,\n    sender,\n    receiver,\n    ft.coin_type,\n    COALESCE(\n        dt.symbol,\n        eph.symbol\n    ) AS symbol,\n    amount_raw,\n    CASE\n        WHEN COALESCE(\n            dt.decimals,\n            0\n        ) <> 0 THEN amount_raw / power(\n            10,\n            dt.decimals\n        )\n    END AS amount,\n    ROUND(\n        amount * eph.price,\n        2\n    ) AS amount_usd,\n    COALESCE(\n        eph.token_is_verified,\n        FALSE\n    ) AS token_is_verified,\n    {{ dbt_utils.generate_surrogate_key(\n        ['tx_digest','balance_change_index']\n    ) }} AS ez_transfers_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    {{ ref('silver__transfers') }}\n    ft\n    LEFT JOIN {{ ref('core__dim_tokens') }}\n    dt\n    ON ft.coin_type = dt.coin_type\n    LEFT JOIN {{ ref('price__ez_prices_hourly') }}\n    eph\n    ON ft.coin_type = eph.token_address\n    AND DATE_TRUNC(\n        'HOUR',\n        ft.block_timestamp\n    ) = eph.hour\nWHERE\n    amount IS NOT NULL\n\n{% if is_incremental() %}\nAND ft.modified_timestamp >= (\n    SELECT\n        MAX(modified_timestamp)\n    FROM\n        {{ this }}\n)\n{% endif %}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}, {"name": "core__dim_tokens", "package": null, "version": null}, {"name": "price__ez_prices_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.sui_models.silver__transfers", "model.sui_models.core__dim_tokens", "model.sui_models.price__ez_prices_hourly"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/core__ez_transfers.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    balance_change_index,\n    tx_succeeded,\n    tx_sender,\n    sender,\n    receiver,\n    ft.coin_type,\n    COALESCE(\n        dt.symbol,\n        eph.symbol\n    ) AS symbol,\n    amount_raw,\n    CASE\n        WHEN COALESCE(\n            dt.decimals,\n            0\n        ) <> 0 THEN amount_raw / power(\n            10,\n            dt.decimals\n        )\n    END AS amount,\n    ROUND(\n        amount * eph.price,\n        2\n    ) AS amount_usd,\n    COALESCE(\n        eph.token_is_verified,\n        FALSE\n    ) AS token_is_verified,\n    \n    \nmd5(cast(coalesce(cast(tx_digest as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(balance_change_index as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS ez_transfers_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    SUI.silver.transfers\n    ft\n    LEFT JOIN SUI.core.dim_tokens\n    dt\n    ON ft.coin_type = dt.coin_type\n    LEFT JOIN SUI.price.ez_prices_hourly\n    eph\n    ON ft.coin_type = eph.token_address\n    AND DATE_TRUNC(\n        'HOUR',\n        ft.block_timestamp\n    ) = eph.hour\nWHERE\n    amount IS NOT NULL\n\n\nAND ft.modified_timestamp >= (\n    SELECT\n        MAX(modified_timestamp)\n    FROM\n        SUI.core.ez_transfers\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": true, "alias_types": true, "checksum": "7ef31c9f1b4c2c570417fc751b01b145b82a8bb1717fffbf54281fddd50d1b59"}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["EZ_TRANSFERS_ID"], "time_spine": null}, "model.sui_models.defi__ez_bridge_activity": {"database": "SUI", "schema": "defi", "name": "defi__ez_bridge_activity", "resource_type": "model", "package_name": "sui_models", "path": "gold/defi/defi__ez_bridge_activity.sql", "original_file_path": "models/gold/defi/defi__ez_bridge_activity.sql", "unique_id": "model.sui_models.defi__ez_bridge_activity", "fqn": ["sui_models", "gold", "defi", "defi__ez_bridge_activity"], "alias": "ez_bridge_activity", "checksum": {"name": "sha256", "checksum": "d61891ef4da55a6db4f24a3af72846b7e994fbb27658fb4bea7367e713d1b9e9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["gold", "non_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": ["block_timestamp::DATE", "tx_digest", "event_index"], "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["gold", "non_core"], "description": "Enhanced fact table providing comprehensive cross-chain bridge analytics by consolidating bridge-related events from multiple protocols (Sui Bridge, Wormhole) into a unified dataset. Each row represents a single cross-chain asset movement event enriched with protocol metadata, token information, and USD pricing. Serves as the primary table for cross-chain DeFi analysis, bridge protocol comparison, and capital flow tracking by normalizing bridge events across different protocols into a consistent format. The table automatically applies decimal precision adjustments and USD conversions, enabling direct comparison of bridge volumes and user activity across different chains and token types. Includes complete transaction context, source/destination chain mapping, and protocol identification to support comprehensive cross-chain analytics, security monitoring, and risk assessment. Essential for DeFi dashboards, bridge protocol analysis, and multi-chain ecosystem studies that require unified cross-chain data and standardized bridge event tracking.", "columns": {"CHECKPOINT_NUMBER": {"name": "CHECKPOINT_NUMBER", "description": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": "TIMESTAMP_NTZ", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_DIGEST": {"name": "TX_DIGEST", "description": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_SENDER": {"name": "TX_SENDER", "description": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Zero-based index ordering events within a transaction. Ensures deterministic event ordering for sequence reconstruction and analytics. Example: 1.", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "bridge_address": {"name": "bridge_address", "description": "The Sui object or package address handling the bridge operation.\n\nExample: '0x26efee2b51c911237888e5dc6702868abca3c7ac12c53f76ef8eba0697695e3d'", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "platform": {"name": "platform", "description": "The protocol or application facilitating the cross-chain bridge transfer.\n\nExample: 'wormhole'", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "protocol": {"name": "protocol", "description": "The protocol or application facilitating the cross-chain bridge transfer.\n\nExample: 'wormhole'", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "protocol_version": {"name": "protocol_version", "description": "The version of  protocol or application facilitating the cross-chain bridge transfer.\n\nExample: 'v1'", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "direction": {"name": "direction", "description": "The directions of the cross-chain bridge transfer.\n\nExample: 'inbound'", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "source_chain": {"name": "source_chain", "description": "The originating blockchain network for the bridged assets.\n\nExample: 'ethereum'", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "destination_chain": {"name": "destination_chain", "description": "The target blockchain network for the bridged assets.\n\nExample: 'ethereum'", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "sender": {"name": "sender", "description": "The Sui address that directly sent tokens to the bridge contract.\n\nExample: '0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890'", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "receiver": {"name": "receiver", "description": "The address designated to receive tokens on the destination chain (or on the source chain, for intermediate steps).\n\nExample: '0x9876543210987654321098765432109876543210987654321098765432109876'", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "coin_type": {"name": "coin_type", "description": "Fully qualified Move type identifier for coins/tokens. Format: {package}::{module}::{struct}. Example: '0x2::sui::SUI' for native SUI token. Essential for DeFi analytics, token classification, and cross-asset analysis.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "symbol": {"name": "symbol", "description": "Short string symbol for the token (e.g., 'SUI', 'USDC'). Used for user-friendly token identification, UI display, and analytics grouping. Example: 'SUI'.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "amount_unadj": {"name": "amount_unadj", "description": "The raw token amount without decimal adjustment.\n\nExample: 1000000000", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "amount": {"name": "amount", "description": "The decimal-adjusted amount of tokens bridged.\n\nExample: 1.0", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "amount_usd": {"name": "amount_usd", "description": "The hourly close USD value of bridged tokens at the time of the transaction.\n\nExample: 1000.50", "meta": {}, "data_type": "NUMBER", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "token_is_verified": {"name": "token_is_verified", "description": "Boolean flag indicating whether the token or price record is verified by Flipside's crosschain curation process. Verified tokens are prioritized for analytics and are considered reliable for most use cases. Unverified tokens may be incomplete, deprecated, or experimental.", "meta": {}, "data_type": "BOOLEAN", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "ez_bridge_activity_id": {"name": "ez_bridge_activity_id", "description": "Surrogate key for the events table. Generated unique identifier combining transaction digest and event index, ensuring each event emission is uniquely addressable. Used as the primary key for event tracking, analytics workflows, and cross-model joins. In Sui, this supports granular dApp analytics, protocol monitoring, and event-driven application logic by enabling precise event referencing and lineage analysis.", "meta": {}, "data_type": "VARCHAR", "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/gold/defi/gold_defi.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "contract": {"enforced": false}, "materialized": "incremental", "unique_key": ["block_timestamp::DATE", "tx_digest", "event_index"], "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["gold", "non_core"]}, "created_at": 1756141891.3132513, "relation_name": "SUI.defi.ez_bridge_activity", "raw_code": "{{ config (\n    materialized = \"incremental\",\n    unique_key = ['block_timestamp::DATE','tx_digest','event_index'],\n    cluster_by = ['block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    tags = ['gold','non_core']\n) }}\n\nWITH base AS (\n\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        tx_sender,\n        event_index,\n        source_chain,\n        destination_chain,\n        amount AS amount_unadj,\n        source_address,\n        destination_address,\n        coin_type,\n        bridge_address,\n        all_bridges_id,\n        inserted_timestamp,\n        modified_timestamp,\n        _INVOCATION_ID,\n        direction,\n        platform\n    FROM\n        {{ ref('silver_bridge__all_bridges') }}\n\n{% if is_incremental() %}\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            {{ this }})\n        {% endif %}\n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_sender,\n    event_index,\n    bridge_address,\n    platform,\n    platform AS protocol,\n    'v1' AS protocol_version,\n    direction,\n    CASE\n        source_chain\n        WHEN 0 THEN 'sui'\n        WHEN 10 THEN 'ethereum'\n    END AS source_chain,\n    CASE\n        destination_chain\n        WHEN 0 THEN 'sui'\n        WHEN 10 THEN 'ethereum'\n    END AS destination_chain,\n    source_address AS sender,\n    destination_address AS receiver,\n    coin_type,\n    b.symbol AS symbol,\n    amount_unadj,\n    amount_unadj / pow(\n        10,\n        b.decimals\n    ) AS amount,\n    amount * C.price AS amount_usd,\n    COALESCE(\n        C.token_is_verified,\n        FALSE\n    ) AS token_is_verified,\n    all_bridges_id AS ez_bridge_activity_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    base A\n    LEFT JOIN {{ ref('core__dim_tokens') }}\n    b USING(coin_type)\n    LEFT JOIN {{ ref('price__ez_prices_hourly') }} C\n    ON A.coin_type = C.token_address\n    AND DATE_TRUNC(\n        'hour',\n        block_timestamp\n    ) = C.hour", "language": "sql", "refs": [{"name": "silver_bridge__all_bridges", "package": null, "version": null}, {"name": "core__dim_tokens", "package": null, "version": null}, {"name": "price__ez_prices_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.sui_models.silver_bridge__all_bridges", "model.sui_models.core__dim_tokens", "model.sui_models.price__ez_prices_hourly"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/defi__ez_bridge_activity.sql", "compiled": true, "compiled_code": "\n\nWITH base AS (\n\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        tx_sender,\n        event_index,\n        source_chain,\n        destination_chain,\n        amount AS amount_unadj,\n        source_address,\n        destination_address,\n        coin_type,\n        bridge_address,\n        all_bridges_id,\n        inserted_timestamp,\n        modified_timestamp,\n        _INVOCATION_ID,\n        direction,\n        platform\n    FROM\n        SUI.silver_bridge.all_bridges\n\n\nWHERE\n    modified_timestamp >= (\n        SELECT\n            COALESCE(MAX(modified_timestamp), '1970-01-01' :: TIMESTAMP) AS modified_timestamp\n        FROM\n            SUI.defi.ez_bridge_activity)\n        \n    )\nSELECT\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    tx_sender,\n    event_index,\n    bridge_address,\n    platform,\n    platform AS protocol,\n    'v1' AS protocol_version,\n    direction,\n    CASE\n        source_chain\n        WHEN 0 THEN 'sui'\n        WHEN 10 THEN 'ethereum'\n    END AS source_chain,\n    CASE\n        destination_chain\n        WHEN 0 THEN 'sui'\n        WHEN 10 THEN 'ethereum'\n    END AS destination_chain,\n    source_address AS sender,\n    destination_address AS receiver,\n    coin_type,\n    b.symbol AS symbol,\n    amount_unadj,\n    amount_unadj / pow(\n        10,\n        b.decimals\n    ) AS amount,\n    amount * C.price AS amount_usd,\n    COALESCE(\n        C.token_is_verified,\n        FALSE\n    ) AS token_is_verified,\n    all_bridges_id AS ez_bridge_activity_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    base A\n    LEFT JOIN SUI.core.dim_tokens\n    b USING(coin_type)\n    LEFT JOIN SUI.price.ez_prices_hourly C\n    ON A.coin_type = C.token_address\n    AND DATE_TRUNC(\n        'hour',\n        block_timestamp\n    ) = C.hour", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["ez_bridge_activity_id"], "time_spine": null}, "model.sui_models.defi__ez_dex_swaps": {"database": "SUI", "schema": "defi", "name": "defi__ez_dex_swaps", "resource_type": "model", "package_name": "sui_models", "path": "gold/defi/defi__ez_dex_swaps.sql", "original_file_path": "models/gold/defi/defi__ez_dex_swaps.sql", "unique_id": "model.sui_models.defi__ez_dex_swaps", "fqn": ["sui_models", "gold", "defi", "defi__ez_dex_swaps"], "alias": "ez_dex_swaps", "checksum": {"name": "sha256", "checksum": "590a370099b1abdd48d94a430f1484482f613074f6c8071e20c3dab6ff0d72bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["non_core"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_digest, trader_address, platform_address);", "transaction": true, "index": null}], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ez_dex_swaps_id", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["non_core"], "description": "## Description\nThis table provides a comprehensive view of decentralized exchange (DEX) swap activity across the Sui blockchain ecosystem, enriched with token pricing, metadata, and user labels. It consolidates swap events from seven major DEX protocols (Cetus, Turbos, Bluefin, Aftermath AMM, FlowX, DeepBook, and Momentum) into a standardized format with USD valuations, token metadata, and enhanced labeling. The model transforms raw swap data by adding price information, decimal-adjusted amounts, USD volume calculations, and human-readable labels for platforms, pools, and traders. This enables cross-protocol DeFi analytics, volume comparisons, and comprehensive trading pattern analysis.\n\n## Key Use Cases\n- Cross-protocol DeFi volume analysis and market share comparison\n- Token pair trading volume and liquidity analysis\n- DEX performance benchmarking and protocol adoption tracking\n- Trader behavior analysis and wallet clustering\n- USD-denominated volume metrics and financial reporting\n- Token flow tracking and cross-protocol arbitrage detection\n- Fee revenue analysis and protocol economics modeling\n- Real-time DeFi dashboard development and monitoring\n\n## Important Relationships\n- Sources data from `sui.silver.dex_swaps` for base swap events\n- Enriches with token pricing from `crosschain.price.ez_prices_hourly` for USD calculations\n- Joins with `crosschain.core.dim_labels` for platform, pool, and trader labeling\n- Supports downstream DeFi analytics and cross-protocol dashboards\n- Provides foundation for token flow analysis and market microstructure studies\n\n## Commonly-used Fields\n- `platform` and `platform_name`: Essential for protocol-specific analysis and filtering\n- `amount_in_usd` and `amount_out_usd`: Critical for volume analysis and financial reporting\n- `swap_volume_usd`: Primary field for cross-protocol volume comparisons and market analysis\n- `token_in_symbol` and `token_out_symbol`: Key for token pair analysis and trading pattern identification\n- `block_timestamp`: Primary field for time-series analysis and trend detection\n- `trader_address` and `trader_name`: Essential for wallet tracking and user behavior analysis\n- `pool_address` and `pool_name`: Important for liquidity pool analysis and pool-specific metrics", "columns": {"CHECKPOINT_NUMBER": {"name": "CHECKPOINT_NUMBER", "description": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TX_DIGEST": {"name": "TX_DIGEST", "description": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Zero-based index ordering events within a transaction. Ensures deterministic event ordering for sequence reconstruction and analytics. Example: 1.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PLATFORM_ADDRESS": {"name": "PLATFORM_ADDRESS", "description": "The smart contract address of the DEX platform that facilitated this swap. This represents the deployed contract address for the specific DEX protocol on the Sui blockchain. Used for contract verification, security analysis, and linking to platform-specific metadata and configurations. Essential for protocol-specific analysis and filtering across different DeFi platforms.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PLATFORM_NAME": {"name": "PLATFORM_NAME", "description": "The human-readable name of the DEX platform, derived from address labeling or defaulting to the platform address if no label exists. This field provides user-friendly platform identification for analytics, reporting, and dashboard displays. Examples include \"Cetus AMM\", \"Turbos Finance\", \"Bluefin\", etc. Essential for protocol-specific analysis and cross-platform comparisons.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The address of the liquidity pool involved in the swap. For protocols that use AMM (Automated Market Maker) pools, this identifies the specific pool contract. May be NULL for order book-based protocols like DeepBook or centralized limit order protocols. Essential for pool-specific analytics, liquidity analysis, and understanding which pools are most active for different token pairs.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "POOL_NAME": {"name": "POOL_NAME", "description": "The human-readable name of the liquidity pool involved in the swap, derived from address labeling or defaulting to the pool address if no label exists. This field provides user-friendly pool identification for analytics and reporting. Examples might include \"SUI-USDC Pool\", \"ETH-USDT Pool\", etc. Essential for pool-specific analysis and liquidity concentration studies.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "AMOUNT_IN_RAW": {"name": "AMOUNT_IN_RAW", "description": "The raw amount of tokens being swapped in (input amount) before any decimal adjustments. This represents the exact on-chain token amount as it appears in the swap event. Preserves precision for accurate calculations and is essential for volume analysis, price impact calculations, and swap size distribution analysis. Critical for calculating swap rates and understanding the actual token amounts exchanged in each swap.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "AMOUNT_OUT_RAW": {"name": "AMOUNT_OUT_RAW", "description": "The raw amount of tokens being swapped out (output amount) before any decimal adjustments. This represents the exact on-chain token amount that the user receives from the swap. Critical for calculating swap rates, slippage analysis, and understanding the actual token amounts exchanged in each swap. Essential for volume analysis and swap size distribution analysis.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "A_TO_B": {"name": "A_TO_B", "description": "A boolean flag indicating the direction of the swap within the pool. When TRUE, the swap goes from token A to token B; when FALSE, it goes from token B to token A. This field is protocol-specific and may be NULL for some DEX platforms. Important for understanding swap direction and pool token ordering conventions. Follows each protocol's specific pool token ordering conventions.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "FEE_AMOUNT_RAW": {"name": "FEE_AMOUNT_RAW", "description": "The raw amount of fees charged for the swap transaction. This includes protocol fees, liquidity provider fees, and any other transaction costs. May be 0 for protocols that don't charge explicit fees or when fees are embedded in the swap amounts. Essential for fee revenue analysis and total cost of trading calculations. For some protocols like Aftermath, this may be NULL as fees are handled differently.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "PARTNER_ADDRESS": {"name": "PARTNER_ADDRESS", "description": "The address of a partner or affiliate that facilitated the swap (if applicable). Used primarily by Cetus for their partner program where swaps can be routed through partner contracts. May be NULL for most protocols or when no partner was involved. Useful for tracking partner performance and affiliate program analytics within the DEX ecosystem.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "STEPS": {"name": "STEPS", "description": "The number of steps or hops required to complete the swap. For simple swaps, this is typically 1. For complex swaps involving multiple pools or routing through multiple protocols, this indicates the number of intermediate steps. Essential for understanding swap complexity and routing efficiency across different protocols. Critical for analyzing multi-hop swaps and routing optimization.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_IN_TYPE": {"name": "TOKEN_IN_TYPE", "description": "The full type identifier of the token being swapped in (input token). This follows Sui's Move type format (e.g., \"0x2::sui::SUI\" for the native SUI token). Essential for token identification, pricing lookups, and token-specific analytics. Used for calculating USD values and token pair analysis. Some models ensure proper formatting by adding '0x' prefix if missing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_IN_ADDRESS": {"name": "TOKEN_IN_ADDRESS", "description": "The extracted token address from the full token type identifier, representing the contract address of the input token. This field is derived by splitting the token_in_type on '::' and taking the first component. For native SUI tokens, this will be '0x2'. Essential for token identification, pricing lookups, and cross-model joins with token metadata tables.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_IN_SYMBOL": {"name": "TOKEN_IN_SYMBOL", "description": "The trading symbol for the input token, such as 'SUI', 'USDC', 'USDT', etc. This field is populated from token price data and provides user-friendly token identification for analytics and reporting. May be NULL for tokens without established price data. Essential for token pair analysis and trading pattern identification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_IN_NAME": {"name": "TOKEN_IN_NAME", "description": "The full descriptive name of the input token, such as 'Sui Token', 'USD Coin', 'Tether USD', etc. This field is populated from token price data and provides complete token identification for analytics and reporting. May be NULL for tokens without established price data. Useful for comprehensive token analysis and user interface displays.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_OUT_TYPE": {"name": "TOKEN_OUT_TYPE", "description": "The full type identifier of the token being swapped out (output token). This follows Sui's Move type format and represents the token that the user receives from the swap. Critical for token pair analysis, swap rate calculations, and understanding token flow patterns across the DeFi ecosystem. Some models ensure proper formatting by adding '0x' prefix if missing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_OUT_ADDRESS": {"name": "TOKEN_OUT_ADDRESS", "description": "The extracted token address from the full token type identifier, representing the contract address of the output token. This field is derived by splitting the token_out_type on '::' and taking the first component. For native SUI tokens, this will be '0x2'. Essential for token identification, pricing lookups, and cross-model joins with token metadata tables.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_OUT_SYMBOL": {"name": "TOKEN_OUT_SYMBOL", "description": "The trading symbol for the output token, such as 'SUI', 'USDC', 'USDT', etc. This field is populated from token price data and provides user-friendly token identification for analytics and reporting. May be NULL for tokens without established price data. Essential for token pair analysis and trading pattern identification.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_OUT_NAME": {"name": "TOKEN_OUT_NAME", "description": "The full descriptive name of the output token, such as 'Sui Token', 'USD Coin', 'Tether USD', etc. This field is populated from token price data and provides complete token identification for analytics and reporting. May be NULL for tokens without established price data. Useful for comprehensive token analysis and user interface displays.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "AMOUNT_IN": {"name": "AMOUNT_IN", "description": "The decimal-adjusted amount of tokens being swapped in (input amount), calculated by dividing the raw amount by the token's decimal places. This field provides human-readable token amounts for analysis and reporting. For example, if amount_in_raw is 1000000000 and token_in_decimals is 9, then amount_in would be 1.0. Essential for user-friendly volume analysis and token flow calculations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "AMOUNT_OUT": {"name": "AMOUNT_OUT", "description": "The decimal-adjusted amount of tokens being swapped out (output amount), calculated by dividing the raw amount by the token's decimal places. This field provides human-readable token amounts for analysis and reporting. For example, if amount_out_raw is 500000000 and token_out_decimals is 6, then amount_out would be 500.0. Critical for calculating swap rates and understanding actual token exchange ratios.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "FEE_AMOUNT": {"name": "FEE_AMOUNT", "description": "The decimal-adjusted amount of fees charged for the swap transaction, calculated by dividing the raw fee amount by the input token's decimal places. This field provides human-readable fee amounts for cost analysis and reporting. May be NULL when no fees are charged or when fee information is not available. Essential for fee revenue analysis and total cost of trading calculations.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_IN_PRICE": {"name": "TOKEN_IN_PRICE", "description": "The USD price of the input token at the time of the swap, sourced from hourly price data. This field enables USD-denominated volume calculations and financial analysis. May be NULL for tokens without available price data. Essential for calculating amount_in_usd and swap_volume_usd fields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_OUT_PRICE": {"name": "TOKEN_OUT_PRICE", "description": "The USD price of the output token at the time of the swap, sourced from hourly price data. This field enables USD-denominated volume calculations and financial analysis. May be NULL for tokens without available price data. Essential for calculating amount_out_usd and swap_volume_usd fields.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_IN_DECIMALS": {"name": "TOKEN_IN_DECIMALS", "description": "The number of decimal places for the input token, used for converting raw amounts to human-readable values. This field is sourced from token price data or defaults to common values (6 for USDC/USDT, 9 for others). Essential for accurate amount_in calculations and token precision handling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TOKEN_OUT_DECIMALS": {"name": "TOKEN_OUT_DECIMALS", "description": "The number of decimal places for the output token, used for converting raw amounts to human-readable values. This field is sourced from token price data or defaults to common values (6 for USDC/USDT, 9 for others). Essential for accurate amount_out calculations and token precision handling.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "AMOUNT_IN_USD": {"name": "AMOUNT_IN_USD", "description": "The USD value of the input token amount, calculated as amount_in * token_in_price. This field provides USD-denominated volume metrics for financial analysis and reporting. May be NULL when token_in_price is not available. Essential for cross-protocol volume comparisons and financial reporting.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "AMOUNT_OUT_USD": {"name": "AMOUNT_OUT_USD", "description": "The USD value of the output token amount, calculated as amount_out * token_out_price. This field provides USD-denominated volume metrics for financial analysis and reporting. May be NULL when token_out_price is not available. Essential for cross-protocol volume comparisons and financial reporting.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "SWAP_VOLUME_USD": {"name": "SWAP_VOLUME_USD", "description": "The USD volume of the swap, calculated as the average of amount_in_usd and amount_out_usd when both prices are available, or using whichever price is available when only one is present. This field provides the primary metric for volume analysis and cross-protocol comparisons. May be NULL when no price data is available. Essential for DeFi volume analytics and market analysis.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "TRADER_ADDRESS": {"name": "TRADER_ADDRESS", "description": "The address of the wallet or account that initiated the swap. May be NULL for some protocols that don't explicitly track the trader address in their events. Essential for user behavior analysis, wallet tracking, and understanding individual trader patterns and preferences across different DEX platforms. For some protocols like Aftermath, this is extracted from the transaction sender.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "EZ_DEX_SWAPS_ID": {"name": "EZ_DEX_SWAPS_ID", "description": "A unique surrogate key generated from the combination of transaction identifiers and swap details. For the general DEX table, this combines tx_digest and event_index. For protocol-specific tables like Aftermath, this may include additional fields like trader_address, token_in_type, token_out_type, amount_in_raw, and amount_out_raw. This provides a stable, unique identifier for each swap event that can be used as a primary key for downstream analytics and data modeling. Ensures data integrity and prevents duplicate processing.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "INSERTED_TIMESTAMP": {"name": "INSERTED_TIMESTAMP", "description": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "MODIFIED_TIMESTAMP": {"name": "MODIFIED_TIMESTAMP", "description": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "_INVOCATION_ID": {"name": "_INVOCATION_ID", "description": "A unique identifier for the dbt run that created or updated this record. This field is used for data lineage tracking and debugging purposes. Helps identify which specific dbt execution was responsible for processing each record and enables traceability back to the source code and configuration used. Essential for ETL monitoring, data quality tracking, and troubleshooting pipeline issues.", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "sui_models://models/gold/defi/gold_defi.yml", "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "ez_dex_swaps_id", "cluster_by": ["block_timestamp::DATE"], "incremental_predicates": ["dynamic_range_predicate", "block_timestamp::date"], "merge_exclude_columns": ["inserted_timestamp"], "tags": ["non_core"], "post-hook": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_digest, trader_address, platform_address);"}, "created_at": 1756141891.3208075, "relation_name": "SUI.defi.ez_dex_swaps", "raw_code": "{{ config (\n    materialized = \"incremental\",\n    unique_key = \"ez_dex_swaps_id\",\n    cluster_by = ['block_timestamp::DATE'],\n    incremental_predicates = [\"dynamic_range_predicate\", \"block_timestamp::date\"],\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION ON EQUALITY(tx_digest, trader_address, platform_address);\",\n    tags = ['non_core']\n) }}\n\nWITH base_swaps AS (\n\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        event_index,\n        event_module,\n        platform_address,\n        pool_address,\n        amount_in_raw,\n        amount_out_raw,\n        a_to_b,\n        fee_amount_raw,\n        partner_address,\n        steps,\n        token_in_type,\n        token_out_type,\n        trader_address,\n        dex_swaps_id,\n        modified_timestamp\n    FROM {{ ref('silver__dex_swaps') }}\n    WHERE \n{% if is_incremental() %}\n    modified_timestamp >= (\n            SELECT COALESCE(MAX(modified_timestamp), '1900-01-01'::TIMESTAMP)\n            FROM {{ this }}\n        )\n        AND\n{% endif %}\n    token_in_type IS NOT NULL \n    AND token_out_type IS NOT NULL\n    \n    UNION ALL\n    \n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        event_index,\n        event_module,\n        platform_address,\n        pool_address,\n        amount_in_raw,\n        amount_out_raw,\n        a_to_b,\n        fee_amount_raw,\n        partner_address,\n        steps,\n        token_in_type,\n        token_out_type,\n        trader_address,\n        dex_swaps_id,\n        modified_timestamp\n    FROM {{ ref('silver__aftermath_dex_swaps') }}\n{% if is_incremental() %}\n        WHERE modified_timestamp >= (\n            SELECT COALESCE(MAX(modified_timestamp), '1900-01-01'::TIMESTAMP)\n            FROM {{ this }}\n        )\n{% endif %}\n),\nprices AS (\n    SELECT\n        hour,\n        token_address,\n        symbol,\n        name,\n        decimals,\n        price,\n        blockchain,\n        is_native,\n        token_is_verified\n    FROM\n        {{ ref('price__ez_prices_hourly') }}\n),\n\ntoken_prices_in AS (\n    SELECT \n        bs.*,\n        -- Extract token address from full type for price/token joining\n        SPLIT(bs.token_in_type, '::')[0] as token_in_address,\n        SPLIT(bs.token_out_type, '::')[0] as token_out_address,\n        \n        -- Price data for token_in with SUI native handling\n        COALESCE(\n            p_in_std.price, \n            p_in_native.price\n        ) as token_in_price,\n        \n        -- Decimals prioritizing dim_tokens first, then price data, then default\n        COALESCE(\n            dim_in.decimals,\n            p_in_std.decimals, \n            p_in_native.decimals,\n            9  -- Standard is 9 decimals\n        ) as token_in_decimals,\n        \n        COALESCE(dim_in.symbol, p_in_std.symbol, p_in_native.symbol) as token_in_symbol,\n        COALESCE(dim_in.name, p_in_std.name, p_in_native.name) as token_in_name\n        \n    FROM base_swaps bs\n    \n    -- Join with dim_tokens for token metadata\n    LEFT JOIN {{ ref('core__dim_tokens') }} dim_in\n        ON lower(bs.token_in_type) = lower(dim_in.coin_type)\n    \n    -- Standard token address join\n    LEFT JOIN prices p_in_std \n        ON LOWER(bs.token_in_type) = LOWER(p_in_std.token_address)\n        AND p_in_std.blockchain = 'sui'\n        AND p_in_std.hour = DATE_TRUNC('hour', bs.block_timestamp)\n        \n    -- Native SUI join (for 0x2 and 0x000...002 addresses)\n    LEFT JOIN prices p_in_native\n        ON (bs.token_in_type = '0x2::sui::SUI' OR bs.token_in_type = '0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI')\n        AND p_in_native.blockchain = 'sui'\n        AND p_in_native.is_native = true\n        AND p_in_native.hour = DATE_TRUNC('hour', bs.block_timestamp)\n\n),\n\nwith_all_prices AS (\n    SELECT \n        tpi.*,\n        \n        -- Price data for token_out with SUI native handling\n        COALESCE(\n            p_out_std.price, \n            p_out_native.price\n        ) as token_out_price,\n        \n        -- Decimals prioritizing dim_tokens first, then price data, then default\n        COALESCE(\n            dim_out.decimals,\n            p_out_std.decimals, \n            p_out_native.decimals, \n            9  -- Standard is 9 decimals\n        ) as token_out_decimals,\n        \n        COALESCE(dim_out.symbol, p_out_std.symbol, p_out_native.symbol) as token_out_symbol,\n        COALESCE(dim_out.name, p_out_std.name, p_out_native.name) as token_out_name\n        \n    FROM token_prices_in tpi\n    \n    -- Join with dim_tokens for token metadata  \n    LEFT JOIN {{ ref('core__dim_tokens') }} dim_out\n        ON lower(tpi.token_out_type) = lower(dim_out.coin_type)\n    \n    -- Standard token address join\n    LEFT JOIN prices p_out_std \n        ON LOWER(tpi.token_out_type) = LOWER(p_out_std.token_address)\n        AND p_out_std.blockchain = 'sui'\n        AND p_out_std.hour = DATE_TRUNC('hour', tpi.block_timestamp)\n        \n    -- Native SUI join (for 0x2 and 0x000...002 addresses)\n    LEFT JOIN prices p_out_native\n        ON (tpi.token_out_type = '0x2::sui::SUI' OR tpi.token_out_type = '0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI')\n        AND p_out_native.blockchain = 'sui'\n        AND p_out_native.is_native = true\n        AND p_out_native.hour = DATE_TRUNC('hour', tpi.block_timestamp)\n),\n\nwith_labels AS (\n    SELECT \n        wap.*,\n        \n        -- Platform/contract labels\n        l_platform.address_name as platform_address_label,\n        l_platform.label as platform_project_name,\n        \n        -- Pool labels  \n        l_pool.address_name as pool_address_label,\n        l_pool.label as pool_project_name\n        \n    FROM with_all_prices wap\n    \n    -- Platform address labels\n    LEFT JOIN {{ ref('core__dim_labels') }} l_platform\n        ON LOWER(wap.platform_address) = LOWER(l_platform.address)\n        AND l_platform.blockchain = 'sui'\n        AND l_platform.label_type IN ('dex', 'defi')\n        \n    -- Pool address labels\n    LEFT JOIN {{ ref('core__dim_labels') }} l_pool\n        ON LOWER(wap.pool_address) = LOWER(l_pool.address)\n        AND l_pool.blockchain = 'sui'\n        AND l_pool.label_subtype = 'pool'\n)\n\nSELECT\n    -- Core identifiers\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    event_index,\n    \n    -- Platform information\n    platform_address,\n    COALESCE(platform_project_name, pool_project_name, event_module) as platform_name,\n    pool_address,\n    COALESCE(pool_address_label, pool_address) as pool_name,\n    \n    -- Swap details\n    amount_in_raw,\n    amount_out_raw,\n    a_to_b,\n    fee_amount_raw,\n    partner_address,\n    steps,\n    \n    -- Token information\n    token_in_type,\n    token_in_address,\n    token_in_symbol,\n    token_in_name,\n    token_out_type,\n    token_out_address,\n    token_out_symbol,\n    token_out_name,\n    \n    -- Adjusted amounts\n    amount_in_raw / POW(10, token_in_decimals) as amount_in,\n    amount_out_raw / POW(10, token_out_decimals) as amount_out,\n    CASE \n        WHEN fee_amount_raw IS NOT NULL AND fee_amount_raw > 0 \n        THEN fee_amount_raw / POW(10, token_in_decimals)\n        ELSE NULL \n    END as fee_amount,\n    \n    -- Price information\n    token_in_price,\n    token_out_price,\n    token_in_decimals,\n    token_out_decimals,\n    \n    -- USD volumes\n    CASE \n        WHEN token_in_price IS NOT NULL \n        THEN (amount_in_raw / POW(10, token_in_decimals)) * token_in_price\n        ELSE NULL \n    END as amount_in_usd,\n    \n    CASE \n        WHEN token_out_price IS NOT NULL \n        THEN (amount_out_raw / POW(10, token_out_decimals)) * token_out_price\n        ELSE NULL \n    END as amount_out_usd,\n    \n    -- Average the two sides when both prices available, otherwise use whichever is available\n    CASE \n        WHEN token_in_price IS NOT NULL AND token_out_price IS NOT NULL \n        THEN ((amount_in_raw / POW(10, token_in_decimals)) * token_in_price + \n              (amount_out_raw / POW(10, token_out_decimals)) * token_out_price) / 2\n        WHEN token_in_price IS NOT NULL \n        THEN (amount_in_raw / POW(10, token_in_decimals)) * token_in_price\n        WHEN token_out_price IS NOT NULL \n        THEN (amount_out_raw / POW(10, token_out_decimals)) * token_out_price\n        ELSE NULL \n    END as swap_volume_usd,\n    \n    -- Trader information\n    trader_address,\n    \n    -- Metadata\n    dex_swaps_id AS ez_dex_swaps_id,\n    SYSDATE() AS inserted_timestamp,\n    modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\n    \nFROM\n    with_labels", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}, {"name": "silver__aftermath_dex_swaps", "package": null, "version": null}, {"name": "price__ez_prices_hourly", "package": null, "version": null}, {"name": "core__dim_tokens", "package": null, "version": null}, {"name": "core__dim_tokens", "package": null, "version": null}, {"name": "core__dim_labels", "package": null, "version": null}, {"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.sui_models.silver__dex_swaps", "model.sui_models.silver__aftermath_dex_swaps", "model.sui_models.price__ez_prices_hourly", "model.sui_models.core__dim_tokens", "model.sui_models.core__dim_labels"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/defi__ez_dex_swaps.sql", "compiled": true, "compiled_code": "\n\nWITH base_swaps AS (\n\n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        event_index,\n        event_module,\n        platform_address,\n        pool_address,\n        amount_in_raw,\n        amount_out_raw,\n        a_to_b,\n        fee_amount_raw,\n        partner_address,\n        steps,\n        token_in_type,\n        token_out_type,\n        trader_address,\n        dex_swaps_id,\n        modified_timestamp\n    FROM SUI.silver.dex_swaps\n    WHERE \n\n    modified_timestamp >= (\n            SELECT COALESCE(MAX(modified_timestamp), '1900-01-01'::TIMESTAMP)\n            FROM SUI.defi.ez_dex_swaps\n        )\n        AND\n\n    token_in_type IS NOT NULL \n    AND token_out_type IS NOT NULL\n    \n    UNION ALL\n    \n    SELECT\n        checkpoint_number,\n        block_timestamp,\n        tx_digest,\n        event_index,\n        event_module,\n        platform_address,\n        pool_address,\n        amount_in_raw,\n        amount_out_raw,\n        a_to_b,\n        fee_amount_raw,\n        partner_address,\n        steps,\n        token_in_type,\n        token_out_type,\n        trader_address,\n        dex_swaps_id,\n        modified_timestamp\n    FROM SUI.silver.aftermath_dex_swaps\n\n        WHERE modified_timestamp >= (\n            SELECT COALESCE(MAX(modified_timestamp), '1900-01-01'::TIMESTAMP)\n            FROM SUI.defi.ez_dex_swaps\n        )\n\n),\nprices AS (\n    SELECT\n        hour,\n        token_address,\n        symbol,\n        name,\n        decimals,\n        price,\n        blockchain,\n        is_native,\n        token_is_verified\n    FROM\n        SUI.price.ez_prices_hourly\n),\n\ntoken_prices_in AS (\n    SELECT \n        bs.*,\n        -- Extract token address from full type for price/token joining\n        SPLIT(bs.token_in_type, '::')[0] as token_in_address,\n        SPLIT(bs.token_out_type, '::')[0] as token_out_address,\n        \n        -- Price data for token_in with SUI native handling\n        COALESCE(\n            p_in_std.price, \n            p_in_native.price\n        ) as token_in_price,\n        \n        -- Decimals prioritizing dim_tokens first, then price data, then default\n        COALESCE(\n            dim_in.decimals,\n            p_in_std.decimals, \n            p_in_native.decimals,\n            9  -- Standard is 9 decimals\n        ) as token_in_decimals,\n        \n        COALESCE(dim_in.symbol, p_in_std.symbol, p_in_native.symbol) as token_in_symbol,\n        COALESCE(dim_in.name, p_in_std.name, p_in_native.name) as token_in_name\n        \n    FROM base_swaps bs\n    \n    -- Join with dim_tokens for token metadata\n    LEFT JOIN SUI.core.dim_tokens dim_in\n        ON lower(bs.token_in_type) = lower(dim_in.coin_type)\n    \n    -- Standard token address join\n    LEFT JOIN prices p_in_std \n        ON LOWER(bs.token_in_type) = LOWER(p_in_std.token_address)\n        AND p_in_std.blockchain = 'sui'\n        AND p_in_std.hour = DATE_TRUNC('hour', bs.block_timestamp)\n        \n    -- Native SUI join (for 0x2 and 0x000...002 addresses)\n    LEFT JOIN prices p_in_native\n        ON (bs.token_in_type = '0x2::sui::SUI' OR bs.token_in_type = '0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI')\n        AND p_in_native.blockchain = 'sui'\n        AND p_in_native.is_native = true\n        AND p_in_native.hour = DATE_TRUNC('hour', bs.block_timestamp)\n\n),\n\nwith_all_prices AS (\n    SELECT \n        tpi.*,\n        \n        -- Price data for token_out with SUI native handling\n        COALESCE(\n            p_out_std.price, \n            p_out_native.price\n        ) as token_out_price,\n        \n        -- Decimals prioritizing dim_tokens first, then price data, then default\n        COALESCE(\n            dim_out.decimals,\n            p_out_std.decimals, \n            p_out_native.decimals, \n            9  -- Standard is 9 decimals\n        ) as token_out_decimals,\n        \n        COALESCE(dim_out.symbol, p_out_std.symbol, p_out_native.symbol) as token_out_symbol,\n        COALESCE(dim_out.name, p_out_std.name, p_out_native.name) as token_out_name\n        \n    FROM token_prices_in tpi\n    \n    -- Join with dim_tokens for token metadata  \n    LEFT JOIN SUI.core.dim_tokens dim_out\n        ON lower(tpi.token_out_type) = lower(dim_out.coin_type)\n    \n    -- Standard token address join\n    LEFT JOIN prices p_out_std \n        ON LOWER(tpi.token_out_type) = LOWER(p_out_std.token_address)\n        AND p_out_std.blockchain = 'sui'\n        AND p_out_std.hour = DATE_TRUNC('hour', tpi.block_timestamp)\n        \n    -- Native SUI join (for 0x2 and 0x000...002 addresses)\n    LEFT JOIN prices p_out_native\n        ON (tpi.token_out_type = '0x2::sui::SUI' OR tpi.token_out_type = '0x0000000000000000000000000000000000000000000000000000000000000002::sui::SUI')\n        AND p_out_native.blockchain = 'sui'\n        AND p_out_native.is_native = true\n        AND p_out_native.hour = DATE_TRUNC('hour', tpi.block_timestamp)\n),\n\nwith_labels AS (\n    SELECT \n        wap.*,\n        \n        -- Platform/contract labels\n        l_platform.address_name as platform_address_label,\n        l_platform.label as platform_project_name,\n        \n        -- Pool labels  \n        l_pool.address_name as pool_address_label,\n        l_pool.label as pool_project_name\n        \n    FROM with_all_prices wap\n    \n    -- Platform address labels\n    LEFT JOIN SUI.core.dim_labels l_platform\n        ON LOWER(wap.platform_address) = LOWER(l_platform.address)\n        AND l_platform.blockchain = 'sui'\n        AND l_platform.label_type IN ('dex', 'defi')\n        \n    -- Pool address labels\n    LEFT JOIN SUI.core.dim_labels l_pool\n        ON LOWER(wap.pool_address) = LOWER(l_pool.address)\n        AND l_pool.blockchain = 'sui'\n        AND l_pool.label_subtype = 'pool'\n)\n\nSELECT\n    -- Core identifiers\n    checkpoint_number,\n    block_timestamp,\n    tx_digest,\n    event_index,\n    \n    -- Platform information\n    platform_address,\n    COALESCE(platform_project_name, pool_project_name, event_module) as platform_name,\n    pool_address,\n    COALESCE(pool_address_label, pool_address) as pool_name,\n    \n    -- Swap details\n    amount_in_raw,\n    amount_out_raw,\n    a_to_b,\n    fee_amount_raw,\n    partner_address,\n    steps,\n    \n    -- Token information\n    token_in_type,\n    token_in_address,\n    token_in_symbol,\n    token_in_name,\n    token_out_type,\n    token_out_address,\n    token_out_symbol,\n    token_out_name,\n    \n    -- Adjusted amounts\n    amount_in_raw / POW(10, token_in_decimals) as amount_in,\n    amount_out_raw / POW(10, token_out_decimals) as amount_out,\n    CASE \n        WHEN fee_amount_raw IS NOT NULL AND fee_amount_raw > 0 \n        THEN fee_amount_raw / POW(10, token_in_decimals)\n        ELSE NULL \n    END as fee_amount,\n    \n    -- Price information\n    token_in_price,\n    token_out_price,\n    token_in_decimals,\n    token_out_decimals,\n    \n    -- USD volumes\n    CASE \n        WHEN token_in_price IS NOT NULL \n        THEN (amount_in_raw / POW(10, token_in_decimals)) * token_in_price\n        ELSE NULL \n    END as amount_in_usd,\n    \n    CASE \n        WHEN token_out_price IS NOT NULL \n        THEN (amount_out_raw / POW(10, token_out_decimals)) * token_out_price\n        ELSE NULL \n    END as amount_out_usd,\n    \n    -- Average the two sides when both prices available, otherwise use whichever is available\n    CASE \n        WHEN token_in_price IS NOT NULL AND token_out_price IS NOT NULL \n        THEN ((amount_in_raw / POW(10, token_in_decimals)) * token_in_price + \n              (amount_out_raw / POW(10, token_out_decimals)) * token_out_price) / 2\n        WHEN token_in_price IS NOT NULL \n        THEN (amount_in_raw / POW(10, token_in_decimals)) * token_in_price\n        WHEN token_out_price IS NOT NULL \n        THEN (amount_out_raw / POW(10, token_out_decimals)) * token_out_price\n        ELSE NULL \n    END as swap_volume_usd,\n    \n    -- Trader information\n    trader_address,\n    \n    -- Metadata\n    dex_swaps_id AS ez_dex_swaps_id,\n    SYSDATE() AS inserted_timestamp,\n    modified_timestamp,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id\n    \nFROM\n    with_labels", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": ["EZ_DEX_SWAPS_ID"], "time_spine": null}, "model.sui_models.bronze__transactions_FR": {"database": "SUI", "schema": "bronze", "name": "bronze__transactions_FR", "resource_type": "model", "package_name": "sui_models", "path": "bronze/bronze__transactions_FR.sql", "original_file_path": "models/bronze/bronze__transactions_FR.sql", "unique_id": "model.sui_models.bronze__transactions_FR", "fqn": ["sui_models", "bronze", "bronze__transactions_FR"], "alias": "transactions_FR", "checksum": {"name": "sha256", "checksum": "3ae40618f088c430644fa707687d638f3678cb381585069a0f9a90cf67fa634b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1756141888.9397793, "relation_name": "SUI.bronze.transactions_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_query_fr(\n    model = 'transactions',\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '_', 1) AS INTEGER)\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "transactions"], ["bronze_streamline", "transactions"]], "metrics": [], "depends_on": {"macros": ["macro.sui_models.streamline_external_table_query_fr"], "nodes": ["source.sui_models.bronze_streamline.transactions"]}, "compiled_path": "target/compiled/sui_models/models/bronze/bronze__transactions_FR.sql", "compiled": true, "compiled_code": "\n\nWITH meta AS (\n    SELECT\n       registered_on AS _inserted_timestamp,\n        file_name,\n        CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '_', 1) AS INTEGER) AS partition_key\n    FROM\n        TABLE(\n            information_schema.external_table_files(\n                table_name => 'streamline.sui.transactions'\n            )\n        ) A\n)\nSELECT\n    s.*,\n    b.file_name,\n    b._inserted_timestamp\nFROM\n    streamline.sui.transactions\n    s\nJOIN \n    meta b\n    ON b.file_name = metadata$filename\n    AND b.partition_key = s.partition_key\nWHERE\n    b.partition_key = s.partition_key\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.bronze__checkpoints_FR": {"database": "SUI", "schema": "bronze", "name": "bronze__checkpoints_FR", "resource_type": "model", "package_name": "sui_models", "path": "bronze/bronze__checkpoints_FR.sql", "original_file_path": "models/bronze/bronze__checkpoints_FR.sql", "unique_id": "model.sui_models.bronze__checkpoints_FR", "fqn": ["sui_models", "bronze", "bronze__checkpoints_FR"], "alias": "checkpoints_FR", "checksum": {"name": "sha256", "checksum": "9687aba17c70bde2b01b00e6bbcf3bb373d11e82c76b3798af4d5dedef652892"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1756141888.9460838, "relation_name": "SUI.bronze.checkpoints_FR", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_query_fr(\n    model = 'checkpoints',\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '_', 1) AS INTEGER)\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "checkpoints"], ["bronze_streamline", "checkpoints"]], "metrics": [], "depends_on": {"macros": ["macro.sui_models.streamline_external_table_query_fr"], "nodes": ["source.sui_models.bronze_streamline.checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/bronze/bronze__checkpoints_FR.sql", "compiled": true, "compiled_code": "\n\nWITH meta AS (\n    SELECT\n       registered_on AS _inserted_timestamp,\n        file_name,\n        CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '_', 1) AS INTEGER) AS partition_key\n    FROM\n        TABLE(\n            information_schema.external_table_files(\n                table_name => 'streamline.sui.checkpoints'\n            )\n        ) A\n)\nSELECT\n    s.*,\n    b.file_name,\n    b._inserted_timestamp\nFROM\n    streamline.sui.checkpoints\n    s\nJOIN \n    meta b\n    ON b.file_name = metadata$filename\n    AND b.partition_key = s.partition_key\nWHERE\n    b.partition_key = s.partition_key\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.bronze__checkpoints": {"database": "SUI", "schema": "bronze", "name": "bronze__checkpoints", "resource_type": "model", "package_name": "sui_models", "path": "bronze/bronze__checkpoints.sql", "original_file_path": "models/bronze/bronze__checkpoints.sql", "unique_id": "model.sui_models.bronze__checkpoints", "fqn": ["sui_models", "bronze", "bronze__checkpoints"], "alias": "checkpoints", "checksum": {"name": "sha256", "checksum": "cc562da6bff33889ac01c226b88baff03c1f96de10b14f1496065bc13a5cd75e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1756141888.952772, "relation_name": "SUI.bronze.checkpoints", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_query(\n    model = 'checkpoints',\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '_', 1) AS INTEGER)\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "checkpoints"], ["bronze_streamline", "checkpoints"]], "metrics": [], "depends_on": {"macros": ["macro.sui_models.streamline_external_table_query"], "nodes": ["source.sui_models.bronze_streamline.checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/bronze/bronze__checkpoints.sql", "compiled": true, "compiled_code": "\n\nWITH meta AS (\n    SELECT\n        job_created_time AS _inserted_timestamp,\n        file_name,\n        CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '_', 1) AS INTEGER) AS partition_key\n    FROM\n        TABLE(\n            information_schema.external_table_file_registration_history(\n                start_time => DATEADD('day', -3, CURRENT_TIMESTAMP()),\n                table_name => 'streamline.sui.checkpoints')\n            ) A\n)\nSELECT\n    s.*,\n    b.file_name,\n    b._inserted_timestamp\nFROM\n    streamline.sui.checkpoints\n    s\nJOIN \n    meta b\n    ON b.file_name = metadata$filename\n    AND b.partition_key = s.partition_key\nWHERE\n    b.partition_key = s.partition_key\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.bronze_api__coin_metadata": {"database": "SUI", "schema": "bronze_api", "name": "bronze_api__coin_metadata", "resource_type": "model", "package_name": "sui_models", "path": "bronze/bronze_api__coin_metadata.sql", "original_file_path": "models/bronze/bronze_api__coin_metadata.sql", "unique_id": "model.sui_models.bronze_api__coin_metadata", "fqn": ["sui_models", "bronze", "bronze_api__coin_metadata"], "alias": "coin_metadata", "checksum": {"name": "sha256", "checksum": "c3ce3618e03accc2e0bea1b164634e1355515bfee593aeb3b4a2993d8b767018"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["silver"], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": false, "unique_key": "coin_type", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "merge_exclude_columns": ["inserted_timestamp"]}, "tags": ["silver"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "incremental", "unique_key": "coin_type", "merge_exclude_columns": ["inserted_timestamp"], "full_refresh": false, "tags": ["silver"]}, "created_at": 1756141888.9592597, "relation_name": "SUI.bronze_api.coin_metadata", "raw_code": "{{ config (\n    materialized = 'incremental',\n    unique_key = \"coin_type\",\n    merge_exclude_columns = [\"inserted_timestamp\"],\n    full_refresh = false,\n    tags = ['silver']\n) }}\n\nWITH coins AS (\n\n    SELECT\n        A.coin_type,\n        x\n    FROM\n        (\n            SELECT\n                A.coin_type,\n                COUNT(1) x\n            FROM\n                {{ ref('core__fact_balance_changes') }} A\n            GROUP BY\n                1\n        ) A\n\n{% if is_incremental() %}\nLEFT JOIN (\n    SELECT\n        coin_type\n    FROM\n        {{ this }}\n    WHERE\n        decimals IS NOT NULL --rerun if decimals is null and inserted_timestamp is within the last 7 days (if the token still doesnt have decimals after 7 day then we will stop trying)\n        OR (\n            decimals IS NULL\n            AND inserted_timestamp > CURRENT_DATE -7\n            AND modified_timestamp :: DATE < CURRENT_DATE -2\n        )\n) b\nON A.coin_type = b.coin_type\nWHERE\n    b.coin_type IS NULL\n{% endif %}\nORDER BY\n    x DESC\nLIMIT\n    10\n), lq AS (\n    SELECT\n        coin_type,\n        {{ target.database }}.live.udf_api(\n            'POST',\n            {# '{Service}/{Authentication}', #}\n            'https://sui-mainnet-endpoint.blockvision.org/',\n            OBJECT_CONSTRUCT(\n                'Content-Type',\n                'application/json',\n                'fsc-quantum-state',\n                'livequery'\n            ),\n            OBJECT_CONSTRUCT(\n                'jsonrpc',\n                '2.0',\n                'id',\n                1,\n                'method',\n                'suix_getCoinMetadata',\n                'params',\n                ARRAY_CONSTRUCT(\n                    coin_type\n                )\n            ) {# ,\n            'Vault/prod/sui/quicknode/mainnet' #}\n        ) :data: \"result\" AS DATA\n    FROM\n        coins\n)\nSELECT\n    coin_type,\n    DATA :decimals :: INT AS decimals,\n    DATA :description :: STRING AS description,\n    DATA :iconUrl :: STRING AS icon_url,\n    DATA :name :: STRING AS NAME,\n    DATA :symbol :: STRING AS symbol,\n    DATA :id :: STRING AS object_id,\n    {{ dbt_utils.generate_surrogate_key(['coin_type']) }} AS coin_metadata_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    '{{ invocation_id }}' AS _invocation_id\nFROM\n    lq", "language": "sql", "refs": [{"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/bronze/bronze_api__coin_metadata.sql", "compiled": true, "compiled_code": "\n\nWITH coins AS (\n\n    SELECT\n        A.coin_type,\n        x\n    FROM\n        (\n            SELECT\n                A.coin_type,\n                COUNT(1) x\n            FROM\n                SUI.core.fact_balance_changes A\n            GROUP BY\n                1\n        ) A\n\n\nLEFT JOIN (\n    SELECT\n        coin_type\n    FROM\n        SUI.bronze_api.coin_metadata\n    WHERE\n        decimals IS NOT NULL --rerun if decimals is null and inserted_timestamp is within the last 7 days (if the token still doesnt have decimals after 7 day then we will stop trying)\n        OR (\n            decimals IS NULL\n            AND inserted_timestamp > CURRENT_DATE -7\n            AND modified_timestamp :: DATE < CURRENT_DATE -2\n        )\n) b\nON A.coin_type = b.coin_type\nWHERE\n    b.coin_type IS NULL\n\nORDER BY\n    x DESC\nLIMIT\n    10\n), lq AS (\n    SELECT\n        coin_type,\n        SUI.live.udf_api(\n            'POST',\n            \n            'https://sui-mainnet-endpoint.blockvision.org/',\n            OBJECT_CONSTRUCT(\n                'Content-Type',\n                'application/json',\n                'fsc-quantum-state',\n                'livequery'\n            ),\n            OBJECT_CONSTRUCT(\n                'jsonrpc',\n                '2.0',\n                'id',\n                1,\n                'method',\n                'suix_getCoinMetadata',\n                'params',\n                ARRAY_CONSTRUCT(\n                    coin_type\n                )\n            ) \n        ) :data: \"result\" AS DATA\n    FROM\n        coins\n)\nSELECT\n    coin_type,\n    DATA :decimals :: INT AS decimals,\n    DATA :description :: STRING AS description,\n    DATA :iconUrl :: STRING AS icon_url,\n    DATA :name :: STRING AS NAME,\n    DATA :symbol :: STRING AS symbol,\n    DATA :id :: STRING AS object_id,\n    \n    \nmd5(cast(coalesce(cast(coin_type as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) AS coin_metadata_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp,\n    'ca8a73ed-9c56-4588-ad9b-84c8768c87c9' AS _invocation_id\nFROM\n    lq", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.bronze__transactions": {"database": "SUI", "schema": "bronze", "name": "bronze__transactions", "resource_type": "model", "package_name": "sui_models", "path": "bronze/bronze__transactions.sql", "original_file_path": "models/bronze/bronze__transactions.sql", "unique_id": "model.sui_models.bronze__transactions", "fqn": ["sui_models", "bronze", "bronze__transactions"], "alias": "transactions", "checksum": {"name": "sha256", "checksum": "c52b6802ecb2be8cf53a66bdc13d492de4be13f51da0df580304b5eb9758e025"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view"}, "created_at": 1756141888.9702036, "relation_name": "SUI.bronze.transactions", "raw_code": "{{ config (\n    materialized = 'view'\n) }}\n{{ streamline_external_table_query(\n    model = 'transactions',\n    partition_function = \"CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '_', 1) AS INTEGER)\"\n) }}", "language": "sql", "refs": [], "sources": [["bronze_streamline", "transactions"], ["bronze_streamline", "transactions"]], "metrics": [], "depends_on": {"macros": ["macro.sui_models.streamline_external_table_query"], "nodes": ["source.sui_models.bronze_streamline.transactions"]}, "compiled_path": "target/compiled/sui_models/models/bronze/bronze__transactions.sql", "compiled": true, "compiled_code": "\n\nWITH meta AS (\n    SELECT\n        job_created_time AS _inserted_timestamp,\n        file_name,\n        CAST(SPLIT_PART(SPLIT_PART(file_name, '/', 3), '_', 1) AS INTEGER) AS partition_key\n    FROM\n        TABLE(\n            information_schema.external_table_file_registration_history(\n                start_time => DATEADD('day', -3, CURRENT_TIMESTAMP()),\n                table_name => 'streamline.sui.transactions')\n            ) A\n)\nSELECT\n    s.*,\n    b.file_name,\n    b._inserted_timestamp\nFROM\n    streamline.sui.transactions\n    s\nJOIN \n    meta b\n    ON b.file_name = metadata$filename\n    AND b.partition_key = s.partition_key\nWHERE\n    b.partition_key = s.partition_key\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.bronze__complete_token_asset_metadata": {"database": "SUI", "schema": "bronze", "name": "bronze__complete_token_asset_metadata", "resource_type": "model", "package_name": "sui_models", "path": "bronze/prices/bronze__complete_token_asset_metadata.sql", "original_file_path": "models/bronze/prices/bronze__complete_token_asset_metadata.sql", "unique_id": "model.sui_models.bronze__complete_token_asset_metadata", "fqn": ["sui_models", "bronze", "prices", "bronze__complete_token_asset_metadata"], "alias": "complete_token_asset_metadata", "checksum": {"name": "sha256", "checksum": "03203c64cd926c027b21db6d4275267d502ff602b0e9788123366bbf2bbe6a5c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze_prices"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["bronze_prices"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["bronze_prices"]}, "created_at": 1756141888.9764693, "relation_name": "SUI.bronze.complete_token_asset_metadata", "raw_code": "{{ config (\n    materialized = 'view',\n    tags = ['bronze_prices']\n) }}\n\nSELECT\n    token_address,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    blockchain,\n    blockchain_name,\n    blockchain_id,\n    is_deprecated,\n    is_verified,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_token_asset_metadata_id,\n    _invocation_id\nFROM\n    {{ source(\n        'crosschain_silver',\n        'complete_token_asset_metadata'\n    ) }}\nWHERE\n    blockchain = 'sui'\n    AND len(token_address) > 1", "language": "sql", "refs": [], "sources": [["crosschain_silver", "complete_token_asset_metadata"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sui_models.crosschain_silver.complete_token_asset_metadata"]}, "compiled_path": "target/compiled/sui_models/models/bronze/prices/bronze__complete_token_asset_metadata.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    token_address,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    blockchain,\n    blockchain_name,\n    blockchain_id,\n    is_deprecated,\n    is_verified,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_token_asset_metadata_id,\n    _invocation_id\nFROM\n    crosschain.silver.complete_token_asset_metadata\nWHERE\n    blockchain = 'sui'\n    AND len(token_address) > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.sui_models.bronze__complete_token_prices": {"database": "SUI", "schema": "bronze", "name": "bronze__complete_token_prices", "resource_type": "model", "package_name": "sui_models", "path": "bronze/prices/bronze__complete_token_prices.sql", "original_file_path": "models/bronze/prices/bronze__complete_token_prices.sql", "unique_id": "model.sui_models.bronze__complete_token_prices", "fqn": ["sui_models", "bronze", "prices", "bronze__complete_token_prices"], "alias": "complete_token_prices", "checksum": {"name": "sha256", "checksum": "8cd46190983f80046e5ce1d548de2999927176347298a3d518357a6721f9d139"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["bronze_prices"], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["bronze_prices"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "view", "tags": ["bronze_prices"]}, "created_at": 1756141888.9786468, "relation_name": "SUI.bronze.complete_token_prices", "raw_code": "{{ config (\n    materialized = 'view',\n    tags = ['bronze_prices']\n) }}\n\nSELECT\n    HOUR,\n    token_address,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    price,\n    blockchain,\n    blockchain_name,\n    blockchain_id,\n    is_imputed,\n    is_deprecated,\n    is_verified,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_token_prices_id,\n    _invocation_id\nFROM\n    {{ source(\n        'crosschain_silver',\n        'complete_token_prices'\n    ) }}\nWHERE\n    blockchain = 'sui'\n    AND len(token_address) > 1", "language": "sql", "refs": [], "sources": [["crosschain_silver", "complete_token_prices"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.sui_models.crosschain_silver.complete_token_prices"]}, "compiled_path": "target/compiled/sui_models/models/bronze/prices/bronze__complete_token_prices.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    HOUR,\n    token_address,\n    asset_id,\n    symbol,\n    NAME,\n    decimals,\n    price,\n    blockchain,\n    blockchain_name,\n    blockchain_id,\n    is_imputed,\n    is_deprecated,\n    is_verified,\n    provider,\n    source,\n    _inserted_timestamp,\n    inserted_timestamp,\n    modified_timestamp,\n    complete_token_prices_id,\n    _invocation_id\nFROM\n    crosschain.silver.complete_token_prices\nWHERE\n    blockchain = 'sui'\n    AND len(token_address) > 1", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "operation.sui_models.sui_models-on-run-start-0": {"database": "SUI", "schema": "sui_models-on-run-start-0", "name": "sui_models-on-run-start-0", "resource_type": "operation", "package_name": "sui_models", "path": "hooks/sui_models-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.sui_models.sui_models-on-run-start-0", "fqn": ["sui_models", "hooks", "sui_models-on-run-start-0"], "alias": "sui_models-on-run-start-0", "checksum": {"name": "sha256", "checksum": "4287a2f86f08d89408f5066ab685c16dfeeaad98be64cdcfd1df8190a37ca15c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.1218536, "relation_name": null, "raw_code": "{{create_sps()}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sui_models.create_sps"], "nodes": []}, "compiled_path": "target/compiled/sui_models/./dbt_project.yml/hooks/sui_models-on-run-start-0.sql", "compiled": true, "compiled_code": "\n    \n        CREATE schema IF NOT EXISTS _internal;\ncreate or replace procedure _internal.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `CREATE OR REPLACE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA IF EXISTS ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n        snowflake.execute({sqlText: `GRANT USAGE ON DATABASE ${DESTINATION_DB_NAME} TO ROLE AWS_LAMBDA_SUI_API`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL SCHEMAS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_SUI;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_SUI;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_SUI;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_SUI;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_SUI;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT USAGE ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE AWS_LAMBDA_SUI_API;`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`})\n\n        var existing_tags = snowflake.execute({sqlText: `SHOW TAGS IN DATABASE ${DESTINATION_DB_NAME};`});\n        while (existing_tags.next()) {\n            var schema = existing_tags.getColumnValue(4);\n            var tag_name = existing_tags.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TAG ${DESTINATION_DB_NAME}.${schema}.${tag_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n\n    return true\n$$;\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "operation.sui_models.sui_models-on-run-start-1": {"database": "SUI", "schema": "sui_models-on-run-start-1", "name": "sui_models-on-run-start-1", "resource_type": "operation", "package_name": "sui_models", "path": "hooks/sui_models-on-run-start-1.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.sui_models.sui_models-on-run-start-1", "fqn": ["sui_models", "hooks", "sui_models-on-run-start-1"], "alias": "sui_models-on-run-start-1", "checksum": {"name": "sha256", "checksum": "4287a2f86f08d89408f5066ab685c16dfeeaad98be64cdcfd1df8190a37ca15c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.1346927, "relation_name": null, "raw_code": "{{create_udfs()}}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sui_models.create_udfs"], "nodes": []}, "compiled_path": "target/compiled/sui_models/./dbt_project.yml/hooks/sui_models-on-run-start-1.sql", "compiled": true, "compiled_code": "\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 1}, "operation.sui_models.sui_models-on-run-end-0": {"database": "SUI", "schema": "sui_models-on-run-end-0", "name": "sui_models-on-run-end-0", "resource_type": "operation", "package_name": "sui_models", "path": "hooks/sui_models-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.sui_models.sui_models-on-run-end-0", "fqn": ["sui_models", "hooks", "sui_models-on-run-end-0"], "alias": "sui_models-on-run-end-0", "checksum": {"name": "sha256", "checksum": "4287a2f86f08d89408f5066ab685c16dfeeaad98be64cdcfd1df8190a37ca15c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.1406958, "relation_name": null, "raw_code": "{{ apply_meta_as_tags(results) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.sui_models.apply_meta_as_tags"], "nodes": []}, "compiled_path": "target/compiled/sui_models/./dbt_project.yml/hooks/sui_models-on-run-end-0.sql", "compiled": true, "compiled_code": "\n    \n        \n        \n        \n        \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "model.fsc_utils._datashare___create_gold": {"database": "SUI", "schema": "_datashare", "name": "_datashare___create_gold", "resource_type": "model", "package_name": "fsc_utils", "path": "datashare/_datashare___create_gold.sql", "original_file_path": "models/datashare/_datashare___create_gold.sql", "unique_id": "model.fsc_utils._datashare___create_gold", "fqn": ["fsc_utils", "datashare", "_datashare___create_gold"], "alias": "_create_gold", "checksum": {"name": "sha256", "checksum": "e05db71a87f76f4cff0b9c4d1b83b975ef424d147379e2442907b1004f709887"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ddl_hash", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "merge_update_columns": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "merge", "unique_key": "ddl_hash", "merge_update_columns": [], "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.2268329, "relation_name": "SUI._datashare._create_gold", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    incremental_strategy = 'merge',\n    unique_key = 'ddl_hash',\n    merge_update_columns = [],\n    )\n}}\n{% if execute %}\nSELECT\n$${{- fsc_utils.generate_datashare_ddl() -}}$$ AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at\n{% else %}\nSELECT\nnull as ddl,\nnull as ddl_hash,\nnull as ddl_created_at\nfrom dual limit 0\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.generate_datashare_ddl"], "nodes": []}, "compiled_path": "target/compiled/fsc_utils/models/datashare/_datashare___create_gold.sql", "compiled": true, "compiled_code": "\n\nSELECT\n$$\nBEGIN\nCREATE DATABASE IF NOT EXISTS __NEW__;\nCREATE SCHEMA IF NOT EXISTS __NEW__.price;\nCREATE SCHEMA IF NOT EXISTS __NEW__.silver;\nCREATE SCHEMA IF NOT EXISTS __NEW__.core;\nCREATE SCHEMA IF NOT EXISTS __NEW__.bronze_api;\nCREATE SCHEMA IF NOT EXISTS __NEW__.defi;\nCREATE SCHEMA IF NOT EXISTS __NEW__.silver_bridge;\nCREATE OR REPLACE VIEW __NEW__.PRICE.EZ_ASSET_METADATA copy grants AS SELECT * FROM __SOURCE__.PRICE.EZ_ASSET_METADATA;\nCREATE OR REPLACE VIEW __NEW__.PRICE.EZ_PRICES_HOURLY copy grants AS SELECT * FROM __SOURCE__.PRICE.EZ_PRICES_HOURLY;\nCREATE OR REPLACE VIEW __NEW__.CORE.FACT_BALANCE_CHANGES copy grants AS SELECT * FROM __SOURCE__.CORE.FACT_BALANCE_CHANGES;\nCREATE OR REPLACE VIEW __NEW__.CORE.DIM_TOKENS copy grants AS SELECT * FROM __SOURCE__.CORE.DIM_TOKENS;\nCREATE OR REPLACE VIEW __NEW__.CORE.DIM_LABELS copy grants AS SELECT * FROM __SOURCE__.CORE.DIM_LABELS;\nCREATE OR REPLACE VIEW __NEW__.CORE.FACT_EVENTS copy grants AS SELECT * FROM __SOURCE__.CORE.FACT_EVENTS;\nCREATE OR REPLACE VIEW __NEW__.CORE.FACT_CHANGES copy grants AS SELECT * FROM __SOURCE__.CORE.FACT_CHANGES;\nCREATE OR REPLACE VIEW __NEW__.CORE.FACT_TRANSACTION_BLOCKS copy grants AS SELECT * FROM __SOURCE__.CORE.FACT_TRANSACTION_BLOCKS;\nCREATE OR REPLACE VIEW __NEW__.CORE.FACT_TRANSACTION_INPUTS copy grants AS SELECT * FROM __SOURCE__.CORE.FACT_TRANSACTION_INPUTS;\nCREATE OR REPLACE VIEW __NEW__.CORE.FACT_CHECKPOINTS copy grants AS SELECT * FROM __SOURCE__.CORE.FACT_CHECKPOINTS;\nCREATE OR REPLACE VIEW __NEW__.CORE.FACT_TRANSACTIONS copy grants AS SELECT * FROM __SOURCE__.CORE.FACT_TRANSACTIONS;\nCREATE OR REPLACE VIEW __NEW__.CORE.EZ_TRANSFERS copy grants AS SELECT * FROM __SOURCE__.CORE.EZ_TRANSFERS;\nCREATE OR REPLACE VIEW __NEW__.DEFI.EZ_BRIDGE_ACTIVITY copy grants AS SELECT * FROM __SOURCE__.DEFI.EZ_BRIDGE_ACTIVITY;\nCREATE OR REPLACE VIEW __NEW__.DEFI.EZ_DEX_SWAPS copy grants AS SELECT * FROM __SOURCE__.DEFI.EZ_DEX_SWAPS;\nEND$$ AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.fsc_utils._datashare___create_udfs": {"database": "SUI", "schema": "_datashare", "name": "_datashare___create_udfs", "resource_type": "model", "package_name": "fsc_utils", "path": "datashare/_datashare___create_udfs.sql", "original_file_path": "models/datashare/_datashare___create_udfs.sql", "unique_id": "model.fsc_utils._datashare___create_udfs", "fqn": ["fsc_utils", "datashare", "_datashare___create_udfs"], "alias": "_create_udfs", "checksum": {"name": "sha256", "checksum": "fc39e053d81b2ed8b8106cf5c917ea005b96942a61f37ee4850a838c6c8f7ce6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": "merge", "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "ddl_hash", "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true, "merge_update_columns": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "merge", "unique_key": "ddl_hash", "merge_update_columns": [], "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.2364378, "relation_name": "SUI._datashare._create_udfs", "raw_code": "{{\n  config(\n    materialized = 'incremental',\n    incremental_strategy = 'merge',\n    unique_key = 'ddl_hash',\n    merge_update_columns = [],\n    )\n}}\n{% if execute %}\nSELECT\nCONCAT_WS('\\n',{{- fsc_utils.generate_datashare_udf_ddl().strip() -}}) AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at\n{% else %}\nSELECT\nnull as ddl,\nnull as ddl_hash,\nnull as ddl_created_at\nfrom dual limit 0\n{% endif %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.fsc_utils.generate_datashare_udf_ddl"], "nodes": []}, "compiled_path": "target/compiled/fsc_utils/models/datashare/_datashare___create_udfs.sql", "compiled": true, "compiled_code": "\n\nSELECT\nCONCAT_WS('\\n','BEGIN','CREATE DATABASE IF NOT EXISTS __NEW__;','USE DATABASE __NEW__;','CREATE SCHEMA IF NOT EXISTS UTILS;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_hex_to_int(\n            hex STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE PYTHON\nSTRICT IMMUTABLE\nRUNTIME_VERSION = \\'3.9\\'\nHANDLER = \\'hex_to_int\\'\n\n    AS\n    $$\n    \ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int(\\'200000000000000000000000000000211\\');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(\\'0x200000000000000000000000000000211\\');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    return (str(int(hex, 16)) if hex and hex != \"0x\" else None)\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_hex_to_int(\n            encoding STRING,\n            hex STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE PYTHON\nSTRICT IMMUTABLE\nRUNTIME_VERSION = \\'3.9\\'\nHANDLER = \\'hex_to_int\\'\n\n    AS\n    $$\n    \ndef hex_to_int(encoding, hex) -> str:\n  \"\"\"\n  Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n  hex_to_int(\\'hex\\', \\'200000000000000000000000000000211\\');\n  >> 680564733841876926926749214863536423441\n  hex_to_int(\\'hex\\', \\'0x200000000000000000000000000000211\\');\n  >> 680564733841876926926749214863536423441\n  hex_to_int(\\'hex\\', NULL);\n  >> NULL\n  hex_to_int(\\'s2c\\', \\'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf\\');\n  >> -440911153\n  \"\"\"\n  if not hex:\n    return None\n  if encoding.lower() == \\'s2c\\':\n    if hex[0:2].lower() != \\'0x\\':\n      hex = f\\'0x{hex}\\'\n\n    bits = len(hex[2:])*4\n    value = int(hex, 0)\n    if value & (1 << (bits-1)):\n        value -= 1 << bits\n    return str(value)\n  else:\n    return str(int(hex, 16))\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_hex_to_string(\n            hex STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE SQL\nSTRICT IMMUTABLE\n\n    AS\n    $$\n    SELECT\n  LTRIM(regexp_replace(\n    try_hex_decode_string(hex),\n      \\'[\\\\x00-\\\\x1F\\\\x7F-\\\\x9F\\\\xAD]\\', \\'\\', 1))\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_evm_text_signature(\n            abi VARIANT\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.9\\'\nHANDLER = \\'get_simplified_signature\\'\n\n    AS\n    $$\n    \n\ndef get_simplified_signature(abi):\n    def generate_signature(inputs):\n        signature_parts = []\n        for input_data in inputs:\n            if \\'components\\' in input_data:\n                component_signature_parts = []\n                components = input_data[\\'components\\']\n                component_signature_parts.extend(generate_signature(components))\n                component_signature_parts[-1] = component_signature_parts[-1].rstrip(\",\")\n                if input_data[\\'type\\'].endswith(\\'[]\\'):\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \")[],\")\n                else:\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \"),\")\n            else:\n                signature_parts.append(input_data[\\'type\\'].replace(\\'enum \\', \\'\\').replace(\\' payable\\', \\'\\') + \",\")\n        return signature_parts\n\n    signature_parts = [abi[\\'name\\'] + \"(\"]\n    signature_parts.extend(generate_signature(abi[\\'inputs\\']))\n    signature_parts[-1] = signature_parts[-1].rstrip(\",\") + \")\"\n    return \"\".join(signature_parts)\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_keccak256(\n            event_name VARCHAR(255)\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.9\\'\nPACKAGES = (\\'pycryptodome==3.15.0\\')\nHANDLER = \\'udf_encode\\'\n\n    AS\n    $$\n    \nfrom Crypto.Hash import keccak\n\ndef udf_encode(event_name):\n    keccak_hash = keccak.new(digest_bits=256)\n    keccak_hash.update(event_name.encode(\\'utf-8\\'))\n    return \\'0x\\' + keccak_hash.hexdigest()\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_decimal_adjust(\n            input string,\n            adjustment int\n    )\n    COPY GRANTS\n    RETURNS VARCHAR\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.9\\'\nHANDLER = \\'custom_divide\\'\n\n    AS\n    $$\n    \n\nfrom decimal import Decimal, ROUND_DOWN\n\ndef custom_divide(input, adjustment):\n    try:\n        if adjustment is None or input is None:\n            return None\n\n        # Perform the division using Decimal type\n        result = Decimal(input) / pow(10, Decimal(adjustment))\n\n        # Determine the number of decimal places in the result\n        decimal_places = max(0, -result.as_tuple().exponent)\n\n        # Convert the result to a string representation without scientific notation and with dynamic decimal precision\n        result_str = \"{:.{prec}f}\".format(result, prec=decimal_places)\n\n        return result_str\n    except Exception as e:\n        return None\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_cron_to_prior_timestamps(\n            workflow_name STRING,\n            workflow_schedule STRING\n    )\n    COPY GRANTS\n    RETURNS TABLE(workflow_name STRING, workflow_schedule STRING, timestamp TIMESTAMP_NTZ)\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.9\\'\nPACKAGES = (\\'croniter\\')\nHANDLER = \\'TimestampGenerator\\'\n\n    AS\n    $$\n    \nimport croniter\nimport datetime\n\nclass TimestampGenerator:\n\n    def __init__(self):\n        pass\n\n    def process(self, workflow_name, workflow_schedule):\n        for timestamp in self.generate_timestamps(workflow_name, workflow_schedule):\n            yield (workflow_name, workflow_schedule, timestamp)\n\n    def generate_timestamps(self, workflow_name, workflow_schedule):\n        # Create a cron iterator object\n        cron = croniter.croniter(workflow_schedule)\n\n        # Generate timestamps for the prev 10 runs\n        timestamps = []\n        for i in range(10):\n            prev_run = cron.get_prev(datetime.datetime)\n            timestamps.append(prev_run)\n\n        return timestamps\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_transform_logs(\n            decoded VARIANT\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.9\\'\nHANDLER = \\'transform\\'\n\n    AS\n    $$\n    \n\nfrom copy import deepcopy\n\ndef transform_tuple(components: list, values: list):\n    transformed_values = []\n    for i, component in enumerate(components):\n        if i < len(values):\n            if component[\"type\"] == \"tuple\":\n                transformed_values.append({\"value\": transform_tuple(component[\"components\"], values[i]), **component})\n            elif component[\"type\"] == \"tuple[]\":\n                if not values[i]:\n                    transformed_values.append({\"value\": [], **component})\n                    continue\n                sub_values = [transform_tuple(component[\"components\"], v) for v in values[i]]\n                transformed_values.append({\"value\": sub_values, **component})\n            else:\n                transformed_values.append({\"value\": values[i], **component})\n    return {item[\"name\"]: item[\"value\"] for item in transformed_values}\n\ndef transform_event(event: dict):\n    new_event = deepcopy(event)\n    if new_event.get(\"components\"):\n        components = new_event.get(\"components\")\n\n        if not new_event[\"value\"]:\n            return new_event\n\n        if isinstance(new_event[\"value\"][0], list):\n            result_list = []\n            for value_set in new_event[\"value\"]:\n                result_list.append(transform_tuple(components, value_set))\n            new_event[\"value\"] = result_list\n\n        else:\n            new_event[\"value\"] = transform_tuple(components, new_event[\"value\"])\n\n        return new_event\n\n    else:\n        return event\n\ndef transform(events: dict):\n    try:\n        results = [\n            transform_event(event) if event.get(\"decoded\") else event\n            for event in events[\"data\"]\n        ]\n        events[\"data\"] = results\n        return events\n    except:\n        return events\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_base58_to_hex(\n            base58 STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.9\\'\nHANDLER = \\'transform_base58_to_hex\\'\n\n    AS\n    $$\n    \n\ndef transform_base58_to_hex(base58):\n    if base58 is None:\n        return \\'Invalid input\\'\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    base_count = len(ALPHABET)\n\n    num = 0\n    leading_zeros = 0\n\n    for char in base58:\n        if char == \\'1\\':\n            leading_zeros += 1\n        else:\n            break\n\n    for char in base58:\n        num *= base_count\n        if char in ALPHABET:\n            num += ALPHABET.index(char)\n        else:\n            return \\'Invalid character in input\\'\n\n    hex_string = hex(num)[2:]\n\n    if len(hex_string) % 2 != 0:\n        hex_string = \\'0\\' + hex_string\n\n    hex_leading_zeros = \\'00\\' * leading_zeros\n\n    return \\'0x\\' + hex_leading_zeros + hex_string\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_hex_to_base58(\n            input STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.9\\'\nHANDLER = \\'transform_hex_to_base58\\'\n\n    AS\n    $$\n    \n\ndef transform_hex_to_base58(input):\n    if input is None or not input.startswith(\\'0x\\'):\n        return \\'Invalid input\\'\n\n    input = input[2:]\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(input)\n    num = int.from_bytes(byte_array, \\'big\\')\n\n    encoded = \\'\\'\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = \\'1\\' + encoded\n        else:\n            break\n\n    return encoded\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_hex_to_bech32(\n            input STRING,\n            hrp STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.9\\'\nHANDLER = \\'transform_hex_to_bech32\\'\n\n    AS\n    $$\n    \n\ndef transform_hex_to_bech32(input, hrp=\\'\\'):\n    CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n\n    def bech32_polymod(values):\n        generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n        checksum = 1\n        for value in values:\n            top = checksum >> 25\n            checksum = ((checksum & 0x1ffffff) << 5) ^ value\n            for i in range(5):\n                checksum ^= generator[i] if ((top >> i) & 1) else 0\n        return checksum\n\n    def bech32_hrp_expand(hrp):\n        return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n\n    def bech32_create_checksum(hrp, data):\n        values = bech32_hrp_expand(hrp) + data\n        polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n        return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n\n    def bech32_convertbits(data, from_bits, to_bits, pad=True):\n        acc = 0\n        bits = 0\n        ret = []\n        maxv = (1 << to_bits) - 1\n        max_acc = (1 << (from_bits + to_bits - 1)) - 1\n        for value in data:\n            acc = ((acc << from_bits) | value) & max_acc\n            bits += from_bits\n            while bits >= to_bits:\n                bits -= to_bits\n                ret.append((acc >> bits) & maxv)\n        if pad and bits:\n            ret.append((acc << (to_bits - bits)) & maxv)\n        return ret\n\n    if input is None or not input.startswith(\\'0x\\'):\n        return \\'Invalid input\\'\n\n    input = input[2:]\n\n    data = bytes.fromhex(input)\n    data5bit = bech32_convertbits(list(data), 8, 5)\n\n    if data5bit is None:\n        return \\'Data conversion failed\\'\n\n    checksum = bech32_create_checksum(hrp, data5bit)\n\n    return hrp + \\'1\\' + \\'\\'.join([CHARSET[d] for d in data5bit + checksum])\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_hex_to_algorand(\n            input STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.9\\'\nHANDLER = \\'transform_hex_to_algorand\\'\n\n    AS\n    $$\n    \n\nimport hashlib\nimport base64\n\ndef transform_hex_to_algorand(input):\n    if input is None or not input.startswith(\\'0x\\'):\n        return \\'Invalid input\\'\n\n    input = input[2:]\n    public_key_bytes = bytearray.fromhex(input)\n\n    sha512_256_hash = hashlib.new(\\'sha512_256\\', public_key_bytes).digest()\n\n    checksum = sha512_256_hash[-4:]\n\n    algorand_address = base64.b32encode(public_key_bytes + checksum).decode(\\'utf-8\\').rstrip(\\'=\\')\n\n    return algorand_address\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_hex_to_tezos(\n            input STRING,\n            prefix STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.9\\'\nHANDLER = \\'transform_hex_to_tezos\\'\n\n    AS\n    $$\n    \n\nimport hashlib\n\ndef transform_hex_to_tezos(input, prefix):\n    if input is None or not input.startswith(\\'0x\\'):\n        return \\'Invalid input\\'\n\n    input = input[2:]\n\n    if len(input) != 40:\n        return \\'Invalid length\\'\n\n    hash_bytes = bytes.fromhex(input)\n\n    prefixes = {\n        \\'tz1\\': \\'06a19f\\',  # Ed25519\n        \\'tz2\\': \\'06a1a1\\',  # Secp256k1\n        \\'tz3\\': \\'06a1a4\\'   # P-256\n    }\n\n    if prefix not in prefixes:\n        return \\'Invalid prefix: Must be tz1, tz2, or tz3\\'\n\n    prefix_bytes = bytes.fromhex(prefixes[prefix])\n\n    prefixed_hash = prefix_bytes + hash_bytes\n\n    checksum = hashlib.sha256(hashlib.sha256(prefixed_hash).digest()).digest()[:4]\n\n    full_hash = prefixed_hash + checksum\n\n    tezos_address = transform_hex_to_base58(full_hash.hex())\n\n    return tezos_address\n\ndef transform_hex_to_base58(input):\n    if input is None:\n        return None\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(input)\n    num = int.from_bytes(byte_array, \\'big\\')\n\n    encoded = \\'\\'\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = \\'1\\' + encoded\n        else:\n            break\n\n    return encoded\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udf_detect_overflowed_responses(\n            file_url STRING,\n            index_cols ARRAY\n    )\n    COPY GRANTS\n    RETURNS ARRAY\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.11\\'\nCOMMENT = \\'Detect overflowed responses larger than 16MB\\'\nPACKAGES = (\\'snowflake-snowpark-python\\', \\'pandas\\')\nHANDLER = \\'main\\'\n\n    AS\n    $$\n    \n\nimport pandas as pd\nfrom snowflake.snowpark.files import SnowflakeFile\n\nVARCHAR_MAX = 16_777_216\ndef main(file_url, index_cols):\n    with SnowflakeFile.open(file_url, \\'rb\\') as f:\n        df = pd.read_json(f, lines=True, compression=\\'gzip\\')\n    data_length = df[\"data\"].astype(str).apply(len)\n    return df[data_length > VARCHAR_MAX][index_cols].values.tolist()\n\n    $$;','\n    CREATE OR REPLACE  FUNCTION UTILS.udtf_flatten_overflowed_responses(\n            file_url STRING,\n            index_cols ARRAY,\n            index_vals ARRAY\n    )\n    COPY GRANTS\n    RETURNS table(\n      index_vals ARRAY,\n      block_number NUMBER,\n      metadata OBJECT,\n      seq NUMBER,\n      key STRING,\n      path STRING,\n      index NUMBER,\n      value_ VARIANT\n    )\n\n    LANGUAGE PYTHON\nRUNTIME_VERSION = \\'3.11\\'\nCOMMENT = \\'Flatten rows from a JSON file with overflowed responses larger than 16MB\\'\nPACKAGES = (\\'snowflake-snowpark-python\\', \\'pandas\\', \\'simplejson\\', \\'numpy\\')\nHANDLER = \\'FlattenRows\\'\n\n    AS\n    $$\n    \n\nimport logging\nimport simplejson as json\n\nimport numpy as np\nimport pandas as pd\nfrom snowflake.snowpark.files import SnowflakeFile\n\nVARCHAR_MAX = 16_777_216\n\nlogger = logging.getLogger(\"udtf_flatten_overflowed_responses\")\n\nclass Flatten:\n    \"\"\"\n    Recursive function to flatten a nested JSON file\n    \"\"\"\n\n    def __init__(self, mode: str, exploded_key: list) -> None:\n        self.mode = mode\n        self.exploded_key = exploded_key\n\n    def _flatten_response(\n        self,\n        response_key: str,\n        responses: str,\n        block_number: int,\n        metadata: dict,\n        seq_index: int = 0,\n        path: str = \"\",\n    ):\n        \"\"\"\n        Example:\n\n        input: {\"a\":1, \"b\":[77,88], \"c\": {\"d\":\"X\"}}\n\n        output:\n        - SEQ: A unique sequence number associated with the input record; the sequence is not guaranteed to be gap-free or ordered in any particular way.\n        - KEY: For maps or objects, this column contains the key to the exploded value.\n        - PATH: The path to the element within a data structure which needs to be flattened.\n        - INDEX: The index of the element, if it is an array; otherwise NULL.\n        - VALUE_: The value of the element of the flattened array/object.\n\n        \"\"\"\n        exploded_data = []\n        if self.mode == \"array\":\n            check_mode = isinstance(responses, list)\n        elif self.mode == \"dict\":\n            check_mode = isinstance(responses, dict)\n        elif self.mode == \"both\":\n            check_mode = isinstance(responses, list) or isinstance(responses, dict)\n\n        if check_mode:\n            if isinstance(responses, dict):\n                looped_keys = responses.keys()\n                for key in looped_keys:\n                    next_path = f\"{path}.{key}\" if path else key\n                    index = None\n                    exploded_data.append(\n                        {\n                            \"block_number\": block_number,\n                            \"metadata\": metadata,\n                            \"seq\": seq_index,\n                            \"key\": key,\n                            \"path\": next_path,\n                            \"index\": index,\n                            \"value_\": responses[key],\n                        }\n                    )\n                    exploded_data.extend(\n                        self._flatten_response(\n                            key,\n                            responses[key],\n                            block_number,\n                            metadata,\n                            seq_index,\n                            next_path,\n                        )\n                    )\n\n            elif isinstance(responses, list):\n                looped_keys = range(len(responses))\n                if response_key in self.exploded_key or len(self.exploded_key) == 0:\n                    for item_i, item in enumerate(responses):\n                        if response_key == \"result\":\n                            seq_index += 1\n                        index = item_i\n                        exploded_data.append(\n                            {\n                                \"block_number\": block_number,\n                                \"metadata\": metadata,\n                                \"seq\": seq_index,\n                                \"key\": None,\n                                \"path\": f\"{path}[{item_i}]\",\n                                \"index\": index,\n                                \"value_\": item,\n                            }\n                        )\n                        exploded_data.extend(\n                            self._flatten_response(\n                                item_i,\n                                item,\n                                block_number,\n                                metadata,\n                                seq_index,\n                                f\"{path}[{item_i}]\",\n                            )\n                        )\n\n        return exploded_data\n\nclass FlattenRows:\n    \"\"\"\n    Recursive function to flatten a given JSON file from Snowflake stage\n    \"\"\"\n    def process(self, file_url: str, index_cols: list, index_vals: list):\n        with SnowflakeFile.open(file_url, \\'rb\\') as f:\n            df = pd.read_json(f, lines=True, compression=\\'gzip\\')\n\n        df.set_index(index_cols, inplace=True, drop=False)\n        df = df.loc[index_vals]\n\n        flattener = Flatten(mode=\"both\", exploded_key=[])\n\n        df[\"value_\"] = df.apply(\n                lambda x: flattener._flatten_response(\n                    block_number=x[\"block_number\"], metadata=x[\"metadata\"], responses=x[\"data\"], response_key=None\n                ),\n                axis=\"columns\",\n            )\n        df[\"value_\"] = df[\"value_\"].apply(pd.DataFrame.from_records)\n        df[\"index_cols\"] = df.index\n        df = df[[\"index_cols\", \"value_\"]]\n        flattened = pd.concat(\n            df[\"value_\"].values.tolist(), keys=df[\"index_cols\"].values.tolist()\n        ).droplevel(-1)\n\n        cleansed = flattened.replace({np.nan: None})\n\n        overflow = cleansed[\"value_\"].astype(str).apply(len) > VARCHAR_MAX\n\n        cleansed.loc[overflow, [\"value_\"]] = None\n        temp_index_cols = list(range(len(index_cols)))\n        cleansed = cleansed.reset_index(names=temp_index_cols, drop=False)\n        cleansed[\"index_cols\"] = cleansed[temp_index_cols].apply(list, axis=1)\n        cleansed.drop(columns=temp_index_cols, inplace=True, errors=\"ignore\")\n        return list(cleansed[np.roll(cleansed.columns.values, 1).tolist()].itertuples(index=False, name=None))\n\n    $$;','END') AS ddl,\nmd5(ddl) AS ddl_hash,\nsysdate() as ddl_created_at\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.live__allow_list": {"database": "SUI", "schema": "live", "name": "live__allow_list", "resource_type": "model", "package_name": "livequery_models", "path": "live__allow_list.sql", "original_file_path": "models/live__allow_list.sql", "unique_id": "model.livequery_models.live__allow_list", "fqn": ["livequery_models", "live__allow_list"], "alias": "allow_list", "checksum": {"name": "sha256", "checksum": "0f0f0355e5f959d9d75458d90cee37209b5632f984414c3fcf65eca0e0e5de2b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {"select": ["INTERNAL_DEV"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "grants": {"+select": ["INTERNAL_DEV"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.3749096, "relation_name": "SUI.live.allow_list", "raw_code": "-- depends_on: {{ ref('live') }}\n{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\nSELECT '*.' || t.value AS allowed_domains\nFROM table(flatten(input => {{ this.database }}.live.udf_allow_list())) AS t\nORDER BY\n    split_part(allowed_domains, '.', -1),\n    split_part(allowed_domains, '.', -2),\n    split_part(allowed_domains, '.', -3)", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/live__allow_list.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\n\nSELECT '*.' || t.value AS allowed_domains\nFROM table(flatten(input => SUI.live.udf_allow_list())) AS t\nORDER BY\n    split_part(allowed_domains, '.', -1),\n    split_part(allowed_domains, '.', -2),\n    split_part(allowed_domains, '.', -3)", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.utils": {"database": "SUI", "schema": "utils", "name": "utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/core/utils.sql", "original_file_path": "models/deploy/core/utils.sql", "unique_id": "model.livequery_models.utils", "fqn": ["livequery_models", "deploy", "core", "utils"], "alias": "", "checksum": {"name": "sha256", "checksum": "306321713017a3700a99c47db3a99ca2f64fdf6fe567c883a7507f13bd8095c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"udf_json_rpc_call": {"name": "udf_json_rpc_call", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "udf_urlencode": {"name": "udf_urlencode", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "udf_int_to_binary": {"name": "udf_int_to_binary", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "udf_binary_to_int": {"name": "udf_binary_to_int", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "udf_evm_decode_log": {"name": "udf_evm_decode_log", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/core/utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.5092628, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_utils') }}\n{% set config = config_core_utils %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_core"], "nodes": ["model.livequery_models._utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n) -- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.live": {"database": "SUI", "schema": "live", "name": "live", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/core/live.sql", "original_file_path": "models/deploy/core/live.sql", "unique_id": "model.livequery_models.live", "fqn": ["livequery_models", "deploy", "core", "live"], "alias": "", "checksum": {"name": "sha256", "checksum": "71b371765e23aa22b9961eeaeb7657413cc7f6d5995b811f85a5c110ae1d4d00"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"udf_api_batched": {"name": "udf_api_batched", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "udf_api": {"name": "udf_api", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/core/live.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.3930826, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_utils') }}\n-- depends_on: {{ ref('utils') }}\n-- depends_on: {{ ref('_live') }}\n{% set config = config_core_live %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}, {"name": "_live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_core"], "nodes": ["model.livequery_models._utils", "model.livequery_models.utils", "model.livequery_models._live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n) -- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.secrets": {"database": "SUI", "schema": "secrets", "name": "secrets", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/core/secrets.sql", "original_file_path": "models/deploy/core/secrets.sql", "unique_id": "model.livequery_models.secrets", "fqn": ["livequery_models", "deploy", "core", "secrets"], "alias": "", "checksum": {"name": "sha256", "checksum": "ec1f117cc419f648463c64fca28b91e20fff87fa5b6f982ab8d75e74a3d1b052"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.396797, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_utils') }}\n-- depends_on: {{ ref('live') }}\n{% set config = config_core_secrets %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}, {"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_core"], "nodes": ["model.livequery_models._utils", "model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/secrets.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'secrets' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models._utils": {"database": "SUI", "schema": "_utils", "name": "_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/core/_utils.sql", "original_file_path": "models/deploy/core/_utils.sql", "unique_id": "model.livequery_models._utils", "fqn": ["livequery_models", "deploy", "core", "_utils"], "alias": "", "checksum": {"name": "sha256", "checksum": "3d202cb82095728dae3b02cdca6d2c5f9521ecf50b687a50739f44b5ee828015"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {"udf_introspect": {"name": "udf_introspect", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/core/_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.6879325, "relation_name": null, "raw_code": "{% set config = config_core__utils %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_core"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/_utils.sql", "compiled": true, "compiled_code": "\n\n\n    SELECT '_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models._live": {"database": "SUI", "schema": "_live", "name": "_live", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/core/_live.sql", "original_file_path": "models/deploy/core/_live.sql", "unique_id": "model.livequery_models._live", "fqn": ["livequery_models", "deploy", "core", "_live"], "alias": "", "checksum": {"name": "sha256", "checksum": "c96cbb9dfef8ff10375c8e187dc394f7a38d172e8df94f343761d485338f4036"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.4090538, "relation_name": null, "raw_code": "{% set config = config_core__live %}\n{{ ephemeral_deploy_core(config) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_core"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/_live.sql", "compiled": true, "compiled_code": "\n\n\n    SELECT '_live' as schema_", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.playgrounds__": {"database": "SUI", "schema": "playgrounds", "name": "playgrounds__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/playgrounds/playgrounds__.sql", "original_file_path": "models/deploy/marketplace/playgrounds/playgrounds__.sql", "unique_id": "model.livequery_models.playgrounds__", "fqn": ["livequery_models", "deploy", "marketplace", "playgrounds", "playgrounds__"], "alias": "", "checksum": {"name": "sha256", "checksum": "dcf2d8aba472812a413cd5630fb4e0ee4a84567370c1060b970a22c70fafda5c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"query_subgraph": {"name": "query_subgraph", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/playgrounds/playgrounds__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.6940832, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_playgrounds_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/playgrounds/playgrounds__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'playgrounds' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.chainbase_utils__": {"database": "SUI", "schema": "chainbase_utils", "name": "chainbase_utils__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/chainbase/chainbase_utils__.sql", "original_file_path": "models/deploy/marketplace/chainbase/chainbase_utils__.sql", "unique_id": "model.livequery_models.chainbase_utils__", "fqn": ["livequery_models", "deploy", "marketplace", "chainbase", "chainbase_utils__"], "alias": "", "checksum": {"name": "sha256", "checksum": "3acb77e875379304467b7de0996fdf7a1d519f6696cad8ab87754da38fe8e7fc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/chainbase/chainbase_utils__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.707043, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_chainbase_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/chainbase/chainbase_utils__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'chainbase_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.fred__": {"database": "SUI", "schema": "fred", "name": "fred__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/fred/fred__.sql", "original_file_path": "models/deploy/marketplace/fred/fred__.sql", "unique_id": "model.livequery_models.fred__", "fqn": ["livequery_models", "deploy", "marketplace", "fred", "fred__"], "alias": "", "checksum": {"name": "sha256", "checksum": "44274edd9fa472dbf09b042e45ed0dec8584a34b34f49150076d23588bbb461c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_series": {"name": "get_series", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/fred/fred__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.7133884, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_fred_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/fred/fred__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'fred' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.stakingrewards__": {"database": "SUI", "schema": "stakingrewards", "name": "stakingrewards__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/stakingrewards/stakingrewards__.sql", "original_file_path": "models/deploy/marketplace/stakingrewards/stakingrewards__.sql", "unique_id": "model.livequery_models.stakingrewards__", "fqn": ["livequery_models", "deploy", "marketplace", "stakingrewards", "stakingrewards__"], "alias": "", "checksum": {"name": "sha256", "checksum": "b106fc542269f4bca677dd36a22951b8cf79a5bfc8cf6c8fc6a63645c963a929"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"query": {"name": "query", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/stakingrewards/stakingrewards__ .yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.719555, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_stakingrewards_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/stakingrewards/stakingrewards__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'stakingrewards' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.credmark_utils__": {"database": "SUI", "schema": "credmark_utils", "name": "credmark_utils__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/credmark/credmark_utils__.sql", "original_file_path": "models/deploy/marketplace/credmark/credmark_utils__.sql", "unique_id": "model.livequery_models.credmark_utils__", "fqn": ["livequery_models", "deploy", "marketplace", "credmark", "credmark_utils__"], "alias": "", "checksum": {"name": "sha256", "checksum": "c62bd748a22e1fd79d1f6a3a0d41552de14eb226395e2af34a65562d50a76f64"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/credmark/credmark_utils__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.725658, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_credmark_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/credmark/credmark_utils__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'credmark_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.claude__": {"database": "SUI", "schema": "claude", "name": "claude__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/claude/claude__.sql", "original_file_path": "models/deploy/marketplace/claude/claude__.sql", "unique_id": "model.livequery_models.claude__", "fqn": ["livequery_models", "deploy", "marketplace", "claude", "claude__"], "alias": "", "checksum": {"name": "sha256", "checksum": "cb15d3f5b5d7729aff1364213fac0744ce29beab02da42469dece31efa00a740"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"post_messages": {"name": "post_messages", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "count_message_tokens": {"name": "count_message_tokens", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "list_models": {"name": "list_models", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_model": {"name": "get_model", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "post_messages_batch": {"name": "post_messages_batch", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "list_message_batches": {"name": "list_message_batches", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "list_message_batches_with_before": {"name": "list_message_batches_with_before", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "list_message_batches_with_after": {"name": "list_message_batches_with_after", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_message_batch": {"name": "get_message_batch", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_message_batch_results": {"name": "get_message_batch_results", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/claude/claude__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.735194, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_claude_messages_udfs,\n    config_claude_models_udfs,\n    config_claude_messages_batch_udfs\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/claude/claude__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'claude' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.claude_utils__claude_utils": {"database": "SUI", "schema": "claude_utils", "name": "claude_utils__claude_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/claude/claude_utils__claude_utils.sql", "original_file_path": "models/deploy/marketplace/claude/claude_utils__claude_utils.sql", "unique_id": "model.livequery_models.claude_utils__claude_utils", "fqn": ["livequery_models", "deploy", "marketplace", "claude", "claude_utils__claude_utils"], "alias": "claude_utils", "checksum": {"name": "sha256", "checksum": "3e5bc617d2624d81b1a35005e8a6ae350ffb42f3d5ba03cc227622d68fa0b9bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"post": {"name": "post", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/claude/claude_utils__claude_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.7990477, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_claude_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/claude/claude_utils__claude_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'claude_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.alchemy_transfers__alchemy_utils": {"database": "SUI", "schema": "alchemy_transfers", "name": "alchemy_transfers__alchemy_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.sql", "unique_id": "model.livequery_models.alchemy_transfers__alchemy_utils", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "alchemy_transfers__alchemy_utils"], "alias": "alchemy_utils", "checksum": {"name": "sha256", "checksum": "8cb330829c8dad88d151aa4a3834fd52f46021b69279a40be4090eed22644958"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_asset_transfers": {"name": "get_asset_transfers", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.9486792, "relation_name": null, "raw_code": "{%- set configs = [\n    config_alchemy_transfers_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('alchemy_utils__alchemy_utils') }}\n-- depends_on: {{ ref('live') }}", "language": "sql", "refs": [{"name": "alchemy_utils__alchemy_utils", "package": null, "version": null}, {"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.alchemy_utils__alchemy_utils", "model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.sql", "compiled": true, "compiled_code": "\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n) SELECT 'alchemy_transfers' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.alchemy_nfts__alchemy_utils": {"database": "SUI", "schema": "alchemy_nfts", "name": "alchemy_nfts__alchemy_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.sql", "unique_id": "model.livequery_models.alchemy_nfts__alchemy_utils", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "alchemy_nfts__alchemy_utils"], "alias": "alchemy_utils", "checksum": {"name": "sha256", "checksum": "d63ca11ed49d0af13d860d1f3189b8688027877baf40376a9583a5172882cb11"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_nfts": {"name": "get_nfts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_owners_for_token": {"name": "get_owners_for_token", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_owners_for_collection": {"name": "get_owners_for_collection", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "is_holder_of_collection": {"name": "is_holder_of_collection", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_contracts_for_owner": {"name": "get_contracts_for_owner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_nft_metadata": {"name": "get_nft_metadata", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_nft_metadata_batch": {"name": "get_nft_metadata_batch", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_contract_metadata": {"name": "get_contract_metadata", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_contract_metadata_batch": {"name": "get_contract_metadata_batch", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "invalidate_contract": {"name": "invalidate_contract", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "reingest_contract": {"name": "reingest_contract", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "search_contract_metadata": {"name": "search_contract_metadata", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_nfts_for_collection": {"name": "get_nfts_for_collection", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_spam_contracts": {"name": "get_spam_contracts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "is_spam_contract": {"name": "is_spam_contract", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "is_airdrop": {"name": "is_airdrop", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "report_spam": {"name": "report_spam", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_floor_price": {"name": "get_floor_price", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_nft_sales": {"name": "get_nft_sales", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "compute_rarity": {"name": "compute_rarity", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "summarize_nft_attributes": {"name": "summarize_nft_attributes", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.8306773, "relation_name": null, "raw_code": "{%- set configs = [\n    config_alchemy_nfts_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('alchemy_utils__alchemy_utils') }}\n-- depends_on: {{ ref('live') }}", "language": "sql", "refs": [{"name": "alchemy_utils__alchemy_utils", "package": null, "version": null}, {"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.alchemy_utils__alchemy_utils", "model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.sql", "compiled": true, "compiled_code": "\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n) SELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.alchemy_tokens__alchemy_utils": {"database": "SUI", "schema": "alchemy_tokens", "name": "alchemy_tokens__alchemy_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.sql", "unique_id": "model.livequery_models.alchemy_tokens__alchemy_utils", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "alchemy_tokens__alchemy_utils"], "alias": "alchemy_utils", "checksum": {"name": "sha256", "checksum": "cab9901d2c7c28454ef9180250f6d2b1e5a70a131308dc9f914f00d9bafbc6b6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_token_allowance": {"name": "get_token_allowance", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_token_balances": {"name": "get_token_balances", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_token_metadata": {"name": "get_token_metadata", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.806935, "relation_name": null, "raw_code": "{%- set configs = [\n    config_alchemy_tokens_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('alchemy_utils__alchemy_utils') }}\n-- depends_on: {{ ref('live') }}", "language": "sql", "refs": [{"name": "alchemy_utils__alchemy_utils", "package": null, "version": null}, {"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.alchemy_utils__alchemy_utils", "model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.sql", "compiled": true, "compiled_code": "\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n) SELECT 'alchemy_tokens' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.alchemy_utils__alchemy_utils": {"database": "SUI", "schema": "alchemy_utils", "name": "alchemy_utils__alchemy_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/alchemy/alchemy_utils__alchemy_utils.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_utils__alchemy_utils.sql", "unique_id": "model.livequery_models.alchemy_utils__alchemy_utils", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "alchemy_utils__alchemy_utils"], "alias": "alchemy_utils", "checksum": {"name": "sha256", "checksum": "f1262dc20957c1f57345d120d5fa804f99a3bbf73fdffb6bac4d1eb830ba841c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.4751167, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_alchemy_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_utils__alchemy_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.apilayer__": {"database": "SUI", "schema": "apilayer", "name": "apilayer__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/apilayer/apilayer__.sql", "original_file_path": "models/deploy/marketplace/apilayer/apilayer__.sql", "unique_id": "model.livequery_models.apilayer__", "fqn": ["livequery_models", "deploy", "marketplace", "apilayer", "apilayer__"], "alias": "", "checksum": {"name": "sha256", "checksum": "3bed74d4a9a1ec55eadec250ffcecb484876c79cf42be448591ceee377714c81"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/apilayer/apilayer__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.9549706, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_apilayer_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/apilayer/apilayer__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'apilayer' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.blockpour_utils__": {"database": "SUI", "schema": "blockpour_utils", "name": "blockpour_utils__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/blockpour/blockpour_utils__.sql", "original_file_path": "models/deploy/marketplace/blockpour/blockpour_utils__.sql", "unique_id": "model.livequery_models.blockpour_utils__", "fqn": ["livequery_models", "deploy", "marketplace", "blockpour", "blockpour_utils__"], "alias": "", "checksum": {"name": "sha256", "checksum": "b42854ed08d11ee40b146d93bafb5961ed3474bf0bd335a0b38a6a30822f4a4b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "post": {"name": "post", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/blockpour/blockpour_utils__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.9610047, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_blockpour_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/blockpour/blockpour_utils__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'blockpour_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.defillama__": {"database": "SUI", "schema": "defillama", "name": "defillama__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/defillama/defillama__.sql", "original_file_path": "models/deploy/marketplace/defillama/defillama__.sql", "unique_id": "model.livequery_models.defillama__", "fqn": ["livequery_models", "deploy", "marketplace", "defillama", "defillama__"], "alias": "", "checksum": {"name": "sha256", "checksum": "09036911befd5c87aa63e7467568c629ab1cc182664c632cf92b8fc60919f485"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/defillama/defillama__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.9729128, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_defillama_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/defillama/defillama__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'defillama' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.deepnftvalue__": {"database": "SUI", "schema": "deepnftvalue", "name": "deepnftvalue__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/deepnftvalue/deepnftvalue__.sql", "original_file_path": "models/deploy/marketplace/deepnftvalue/deepnftvalue__.sql", "unique_id": "model.livequery_models.deepnftvalue__", "fqn": ["livequery_models", "deploy", "marketplace", "deepnftvalue", "deepnftvalue__"], "alias": "", "checksum": {"name": "sha256", "checksum": "a71c5173a5afd11110e3e118e2e6bd5ade443d94407151e03397de3f6789c5f3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/deepnftvalue/deepnftvalue__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.9790502, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_deepnftvalue_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/deepnftvalue/deepnftvalue__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'deepnftvalue' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.helius_apis__helius_utils": {"database": "SUI", "schema": "helius_apis", "name": "helius_apis__helius_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/helius/helius_apis__helius_utils.sql", "original_file_path": "models/deploy/marketplace/helius/helius_apis__helius_utils.sql", "unique_id": "model.livequery_models.helius_apis__helius_utils", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "helius_apis__helius_utils"], "alias": "helius_utils", "checksum": {"name": "sha256", "checksum": "c2d9fec018a695c9fdb69fc0166d07df725eadaf4c6e1b1d52f8a1161cb3e09b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"token_metadata": {"name": "token_metadata", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "balances": {"name": "balances", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "parse_transactions": {"name": "parse_transactions", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/helius/helius_apis__helius_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.0337174, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_helius_apis_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('helius_utils__helius_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "helius_utils__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.helius_utils__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_apis__helius_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'helius_apis' as schema_-- depends_on: __dbt__cte__helius_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.helius_utils__helius_utils": {"database": "SUI", "schema": "helius_utils", "name": "helius_utils__helius_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/helius/helius_utils__helius_utils.sql", "original_file_path": "models/deploy/marketplace/helius/helius_utils__helius_utils.sql", "unique_id": "model.livequery_models.helius_utils__helius_utils", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "helius_utils__helius_utils"], "alias": "helius_utils", "checksum": {"name": "sha256", "checksum": "87bb2d3485bba61ea826583fa5a5773732b5cd9ca498be8b66e7d514f31f2b76"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.5093172, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_helius_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_utils__helius_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.helius_das__helius_utils": {"database": "SUI", "schema": "helius_das", "name": "helius_das__helius_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/helius/helius_das__helius_utils.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.sql", "unique_id": "model.livequery_models.helius_das__helius_utils", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "helius_das__helius_utils"], "alias": "helius_utils", "checksum": {"name": "sha256", "checksum": "28fa6015380d003e7edb1366c57119215d7fcecec9f00f660eef2b6011e94e7c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_asset": {"name": "get_asset", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_signatures_for_asset": {"name": "get_signatures_for_asset", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "search_assets": {"name": "search_assets", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_asset_proof": {"name": "get_asset_proof", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_assets_by_owner": {"name": "get_assets_by_owner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_assets_by_authority": {"name": "get_assets_by_authority", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_assets_by_creator": {"name": "get_assets_by_creator", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_assets_by_group": {"name": "get_assets_by_group", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/helius/helius_das__helius_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141891.9878955, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_helius_das_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('helius_utils__helius_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "helius_utils__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.helius_utils__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.zettablock__": {"database": "SUI", "schema": "zettablock", "name": "zettablock__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/zettablock/zettablock__.sql", "original_file_path": "models/deploy/marketplace/zettablock/zettablock__.sql", "unique_id": "model.livequery_models.zettablock__", "fqn": ["livequery_models", "deploy", "marketplace", "zettablock", "zettablock__"], "alias": "", "checksum": {"name": "sha256", "checksum": "1fcd113d09cfbd2ec5691bbcd8b9f392e45080f7f92e45df76bf2c3f7ce0f5c5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.5218904, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_zettablock_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/zettablock/zettablock__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'zettablock' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.espn__": {"database": "SUI", "schema": "espn", "name": "espn__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/espn/espn__.sql", "original_file_path": "models/deploy/marketplace/espn/espn__.sql", "unique_id": "model.livequery_models.espn__", "fqn": ["livequery_models", "deploy", "marketplace", "espn", "espn__"], "alias": "", "checksum": {"name": "sha256", "checksum": "87f5a3b7083b803d50ac3cf614a6b734aff4cd08c776829ba2c3d93706ed130c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/espn/espn__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.0504391, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_espn_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/espn/espn__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'espn' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.github_utils__github_utils": {"database": "SUI", "schema": "github_utils", "name": "github_utils__github_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/github/github_utils__github_utils.sql", "original_file_path": "models/deploy/marketplace/github/github_utils__github_utils.sql", "unique_id": "model.livequery_models.github_utils__github_utils", "fqn": ["livequery_models", "deploy", "marketplace", "github", "github_utils__github_utils"], "alias": "github_utils", "checksum": {"name": "sha256", "checksum": "73bfd31747254bf79ad2ca91c0d363c8c8f3ba518cf7828835b5a588cd69da6a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"octocat": {"name": "octocat", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/github/github_utils__github_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.0565474, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_github_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/github/github_utils__github_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'github_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.github_actions__github_utils": {"database": "SUI", "schema": "github_actions", "name": "github_actions__github_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/github/github_actions__github_utils.sql", "original_file_path": "models/deploy/marketplace/github/github_actions__github_utils.sql", "unique_id": "model.livequery_models.github_actions__github_utils", "fqn": ["livequery_models", "deploy", "marketplace", "github", "github_actions__github_utils"], "alias": "github_utils", "checksum": {"name": "sha256", "checksum": "708556920b602f295cd781689c359542552043117fa4dfe3164137e7e72d6a1c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"workflows": {"name": "workflows", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "runs": {"name": "runs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "workflow_runs": {"name": "workflow_runs", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/github/github_actions__github_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.0632994, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('github_utils__github_utils') }}\n{%- set configs = [\n    config_github_actions_udfs,\n    config_github_actions_udtfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "github_utils__github_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.github_utils__github_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/github/github_actions__github_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'github_utils' as schema_\n) -- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__github_utils\nSELECT 'github_actions' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.github_utils__github_utils", "sql": " __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'github_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.transpose__": {"database": "SUI", "schema": "transpose", "name": "transpose__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/transpose/transpose__.sql", "original_file_path": "models/deploy/marketplace/transpose/transpose__.sql", "unique_id": "model.livequery_models.transpose__", "fqn": ["livequery_models", "deploy", "marketplace", "transpose", "transpose__"], "alias": "", "checksum": {"name": "sha256", "checksum": "8d2ddcca714778664a2a954d5e7fadca4ff62b56e8013fce0c48b06bb2e2298d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/transpose/transpose__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.0805497, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_transpose_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/transpose/transpose__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'transpose' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.solscan__": {"database": "SUI", "schema": "solscan", "name": "solscan__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/solscan/solscan__.sql", "original_file_path": "models/deploy/marketplace/solscan/solscan__.sql", "unique_id": "model.livequery_models.solscan__", "fqn": ["livequery_models", "deploy", "marketplace", "solscan", "solscan__"], "alias": "", "checksum": {"name": "sha256", "checksum": "c65ffbc4dae2ec4fd19fb9863658f818db84f430a371dda7baf0a28636f4c603"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"public_api_get": {"name": "public_api_get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/solscan/solscan__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.0870008, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_solscan_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/solscan/solscan__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'solscan' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.allday__": {"database": "SUI", "schema": "allday", "name": "allday__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/allday/allday__.sql", "original_file_path": "models/deploy/marketplace/allday/allday__.sql", "unique_id": "model.livequery_models.allday__", "fqn": ["livequery_models", "deploy", "marketplace", "allday", "allday__"], "alias": "", "checksum": {"name": "sha256", "checksum": "aeba24365cef1ac3a11bd50bd89eecc3df0aee8b5f2e29a57a67ca3fb6bc9861"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"graphql": {"name": "graphql", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/allday/allday__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.0932033, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_allday_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/allday/allday__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'allday' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.reservoir__": {"database": "SUI", "schema": "reservoir", "name": "reservoir__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/reservoir/reservoir__.sql", "original_file_path": "models/deploy/marketplace/reservoir/reservoir__.sql", "unique_id": "model.livequery_models.reservoir__", "fqn": ["livequery_models", "deploy", "marketplace", "reservoir", "reservoir__"], "alias": "", "checksum": {"name": "sha256", "checksum": "6ccab30c4dc7b31ce65d169622b5fe6014875eb662a2f1e229c204348df72aac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/reservoir/reservoir__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.0994437, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_reservoir_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/reservoir/reservoir__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'reservoir' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.bitquery__": {"database": "SUI", "schema": "bitquery", "name": "bitquery__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/bitquery/bitquery__.sql", "original_file_path": "models/deploy/marketplace/bitquery/bitquery__.sql", "unique_id": "model.livequery_models.bitquery__", "fqn": ["livequery_models", "deploy", "marketplace", "bitquery", "bitquery__"], "alias": "", "checksum": {"name": "sha256", "checksum": "c41507cb784eab92dd6f9e91932240038ec5d054378a41b7af05b350294e3709"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"graphql": {"name": "graphql", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/bitquery/bitquery__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.1057217, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_bitquery_udfs\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/bitquery/bitquery__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'bitquery' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.topshot__": {"database": "SUI", "schema": "topshot", "name": "topshot__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/topshot/topshot__.sql", "original_file_path": "models/deploy/marketplace/topshot/topshot__.sql", "unique_id": "model.livequery_models.topshot__", "fqn": ["livequery_models", "deploy", "marketplace", "topshot", "topshot__"], "alias": "", "checksum": {"name": "sha256", "checksum": "114366c4e0f69de805b68085852b826d594dfae80b2dc66a4f95d2dd1dd63cc2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"graphql": {"name": "graphql", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/topshot/topshot__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.111912, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_topshot_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/topshot/topshot__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'topshot' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.zapper__": {"database": "SUI", "schema": "zapper", "name": "zapper__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/zapper/zapper__.sql", "original_file_path": "models/deploy/marketplace/zapper/zapper__.sql", "unique_id": "model.livequery_models.zapper__", "fqn": ["livequery_models", "deploy", "marketplace", "zapper", "zapper__"], "alias": "", "checksum": {"name": "sha256", "checksum": "74bdb58da84c5f7c07f56e4c29050414c05178b2c660b73aea40525db985e7f8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.5796404, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_zapper_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/zapper/zapper__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'zapper' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.cmc__": {"database": "SUI", "schema": "cmc", "name": "cmc__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/cmc/cmc__.sql", "original_file_path": "models/deploy/marketplace/cmc/cmc__.sql", "unique_id": "model.livequery_models.cmc__", "fqn": ["livequery_models", "deploy", "marketplace", "cmc", "cmc__"], "alias": "", "checksum": {"name": "sha256", "checksum": "c26c75aa21e109f25bcba7e695b7cef34df142384b567fce95de8b2374b33887"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/cmc/cmc__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.117881, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_cmc_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/cmc/cmc__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'cmc' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.strangelove__": {"database": "SUI", "schema": "strangelove", "name": "strangelove__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/strangelove/strangelove__.sql", "original_file_path": "models/deploy/marketplace/strangelove/strangelove__.sql", "unique_id": "model.livequery_models.strangelove__", "fqn": ["livequery_models", "deploy", "marketplace", "strangelove", "strangelove__"], "alias": "", "checksum": {"name": "sha256", "checksum": "bad70832540e2461bccfa1c03d382b89b0e187b55dfbcaa2aa8bf5abe76b3ec5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/strangelove/strangelove__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.1245644, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_strangelove_udfs\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/strangelove/strangelove__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'strangelove' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.subquery__": {"database": "SUI", "schema": "subquery", "name": "subquery__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/subquery/subquery__.sql", "original_file_path": "models/deploy/marketplace/subquery/subquery__.sql", "unique_id": "model.livequery_models.subquery__", "fqn": ["livequery_models", "deploy", "marketplace", "subquery", "subquery__"], "alias": "", "checksum": {"name": "sha256", "checksum": "41725d4e8e1a831be3ff17e4ce5f2bc8f80679f436e25b362be2ee01282f5dbf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"graphql": {"name": "graphql", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/subquery/subquery__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.131774, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_subquery_udfs\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/subquery/subquery__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'subquery' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.nftscan__": {"database": "SUI", "schema": "nftscan", "name": "nftscan__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/nftscan/nftscan__.sql", "original_file_path": "models/deploy/marketplace/nftscan/nftscan__.sql", "unique_id": "model.livequery_models.nftscan__", "fqn": ["livequery_models", "deploy", "marketplace", "nftscan", "nftscan__"], "alias": "", "checksum": {"name": "sha256", "checksum": "00b1f0a5c932642d40b70efec0522b85821fb640a2928f67258fa415902bb9fa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/nftscan/nftscan__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.137982, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_nftscan_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/nftscan/nftscan__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'nftscan' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.dappradar__": {"database": "SUI", "schema": "dappradar", "name": "dappradar__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/dappradar/dappradar__.sql", "original_file_path": "models/deploy/marketplace/dappradar/dappradar__.sql", "unique_id": "model.livequery_models.dappradar__", "fqn": ["livequery_models", "deploy", "marketplace", "dappradar", "dappradar__"], "alias": "", "checksum": {"name": "sha256", "checksum": "55abd3e81a034c665926ed47361d4d248da944b9adc4a57c1a19baa11a38af57"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/dappradar/dappradar__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.144377, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_dappradar_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/dappradar/dappradar__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'dappradar' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.opensea__": {"database": "SUI", "schema": "opensea", "name": "opensea__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/opensea/opensea__.sql", "original_file_path": "models/deploy/marketplace/opensea/opensea__.sql", "unique_id": "model.livequery_models.opensea__", "fqn": ["livequery_models", "deploy", "marketplace", "opensea", "opensea__"], "alias": "", "checksum": {"name": "sha256", "checksum": "0ea7806ecada9430a35a51a202c79a3632a56ba9b06b5bbca56473003fc14bba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/opensea/opensea__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.1507876, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_opensea_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/opensea/opensea__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'opensea' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.snapshot__": {"database": "SUI", "schema": "snapshot", "name": "snapshot__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/snapshot/snapshot__.sql", "original_file_path": "models/deploy/marketplace/snapshot/snapshot__.sql", "unique_id": "model.livequery_models.snapshot__", "fqn": ["livequery_models", "deploy", "marketplace", "snapshot", "snapshot__"], "alias": "", "checksum": {"name": "sha256", "checksum": "cabcd83e37dfb9424dd9a69490d63d1204dca1ef383d300ecad295ffaed3f6ac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"query": {"name": "query", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/snapshot/snapshot__ .yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.156842, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_snapshot_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/snapshot/snapshot__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'snapshot' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.footprint_utils__footprint_utils": {"database": "SUI", "schema": "footprint_utils", "name": "footprint_utils__footprint_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/footprint/footprint_utils__footprint_utils.sql", "original_file_path": "models/deploy/marketplace/footprint/footprint_utils__footprint_utils.sql", "unique_id": "model.livequery_models.footprint_utils__footprint_utils", "fqn": ["livequery_models", "deploy", "marketplace", "footprint", "footprint_utils__footprint_utils"], "alias": "footprint_utils", "checksum": {"name": "sha256", "checksum": "7b014ae6db72a2e0f20070bf29c433cb90b4d265f7342d52e2cea483ff06787f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/footprint/footprint_utils__footprint_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.162994, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_footprint_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/footprint/footprint_utils__footprint_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'footprint_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils": {"database": "SUI", "schema": "quicknode_ethereum_tokens", "name": "quicknode_ethereum_tokens__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_ethereum_tokens__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "63a3801533cd007c9e82ad7e4a566d5708f196ae7c5262d341bfc0b7cba8678b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_token_metadata_by_contract_address": {"name": "get_token_metadata_by_contract_address", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_token_metadata_by_symbol": {"name": "get_token_metadata_by_symbol", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_transactions_by_address": {"name": "get_transactions_by_address", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_wallet_token_balance": {"name": "get_wallet_token_balance", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_wallet_token_transactions": {"name": "get_wallet_token_transactions", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.1707852, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_ethereum_tokens_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('quicknode_utils__quicknode_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "quicknode_utils__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.quicknode_polygon_nfts__quicknode_utils": {"database": "SUI", "schema": "quicknode_polygon_nfts", "name": "quicknode_polygon_nfts__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_polygon_nfts__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "8fa2d0247ac0c24d068b4acad95177a66924ace12e33177403b37767e64273aa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"fetch_nft_collection_details": {"name": "fetch_nft_collection_details", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "fetch_nfts": {"name": "fetch_nfts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "fetch_nfts_by_collection": {"name": "fetch_nfts_by_collection", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_transfers_by_nft": {"name": "get_transfers_by_nft", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "verify_nfts_owner": {"name": "verify_nfts_owner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.254456, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_polygon_nfts_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('quicknode_utils__quicknode_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "quicknode_utils__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.quicknode_solana_nfts__quicknode_utils": {"database": "SUI", "schema": "quicknode_solana_nfts", "name": "quicknode_solana_nfts__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_solana_nfts__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_solana_nfts__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "321974e17cbe3269d6e2228a11da818de60d89f6114be913ef229dc0a5342ecc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"fetch_nfts": {"name": "fetch_nfts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "fetch_nfts_by_creator": {"name": "fetch_nfts_by_creator", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.2813041, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_solana_nfts_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('quicknode_utils__quicknode_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "quicknode_utils__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'quicknode_solana_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils": {"database": "SUI", "schema": "quicknode_ethereum_nfts", "name": "quicknode_ethereum_nfts__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_ethereum_nfts__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "01a0dba1033fe3cb3334fb37d12177d3ada4e9bafa4596bd1c2382df8ddd6aa6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"fetch_nft_collection_details": {"name": "fetch_nft_collection_details", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "fetch_nfts": {"name": "fetch_nfts", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "fetch_nfts_by_collection": {"name": "fetch_nfts_by_collection", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_transfers_by_nft": {"name": "get_transfers_by_nft", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "verify_nfts_owner": {"name": "verify_nfts_owner", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.2259467, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_ethereum_nfts_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('quicknode_utils__quicknode_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "quicknode_utils__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.quicknode_utils__quicknode_utils": {"database": "SUI", "schema": "quicknode_utils", "name": "quicknode_utils__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_utils__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_utils__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_utils__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_utils__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "19648edc7f037d57db6423d1103148840109bb643b983410a69cc4ee15bf4185"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.6564574, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_utils_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_utils__quicknode_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.quicknode_polygon_tokens__quicknode_utils": {"database": "SUI", "schema": "quicknode_polygon_tokens", "name": "quicknode_polygon_tokens__quicknode_utils", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.sql", "unique_id": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "quicknode_polygon_tokens__quicknode_utils"], "alias": "quicknode_utils", "checksum": {"name": "sha256", "checksum": "6eede1c8f6dd8dea7e02d996adf1f0e1d8985f42480ab38af9708ee181d5eaac"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_token_metadata_by_contract_address": {"name": "get_token_metadata_by_contract_address", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_token_metadata_by_symbol": {"name": "get_token_metadata_by_symbol", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_transactions_by_address": {"name": "get_transactions_by_address", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_wallet_token_balance": {"name": "get_wallet_token_balance", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}, "get_wallet_token_transactions": {"name": "get_wallet_token_transactions", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.1984591, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_quicknode_polygon_tokens_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}\n-- depends_on: {{ ref('quicknode_utils__quicknode_utils') }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}, {"name": "quicknode_utils__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.coingecko__": {"database": "SUI", "schema": "coingecko", "name": "coingecko__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/coingecko/coingecko__.sql", "original_file_path": "models/deploy/marketplace/coingecko/coingecko__.sql", "unique_id": "model.livequery_models.coingecko__", "fqn": ["livequery_models", "deploy", "marketplace", "coingecko", "coingecko__"], "alias": "", "checksum": {"name": "sha256", "checksum": "a0daf27e44aed8a6507b087f7b1274784d628e4edf2fae68148de64ac46f2b90"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/coingecko/coingecko__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.2932644, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_coingecko_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/coingecko/coingecko__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'coingecko' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.dapplooker__": {"database": "SUI", "schema": "dapplooker", "name": "dapplooker__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/dapplooker/dapplooker__.sql", "original_file_path": "models/deploy/marketplace/dapplooker/dapplooker__.sql", "unique_id": "model.livequery_models.dapplooker__", "fqn": ["livequery_models", "deploy", "marketplace", "dapplooker", "dapplooker__"], "alias": "", "checksum": {"name": "sha256", "checksum": "06c50a1b30747bf59e1de42dd9b078f327f3dc5d5b595ec3a4838e0d8de8869e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get_chart": {"name": "get_chart", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/dapplooker/dapplooker__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.299545, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_dapplooker_udfs\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/dapplooker/dapplooker__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'dapplooker' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.covalent__": {"database": "SUI", "schema": "covalent", "name": "covalent__", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/marketplace/covalent/covalent__.sql", "original_file_path": "models/deploy/marketplace/covalent/covalent__.sql", "unique_id": "model.livequery_models.covalent__", "fqn": ["livequery_models", "deploy", "marketplace", "covalent", "covalent__"], "alias": "", "checksum": {"name": "sha256", "checksum": "eb21a1d1de2f5a44abdba0379a7c265092caa8ae68a040b178b1f8a66ef0dbaa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["marketplace"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["marketplace"], "description": "", "columns": {"get": {"name": "get", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "config": {"meta": {}, "tags": []}, "tags": [], "granularity": null}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "livequery_models://models/deploy/marketplace/covalent/covalent__.yml", "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "marketplace", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141892.3054662, "relation_name": null, "raw_code": "-- depends_on: {{ ref('live') }}\n{%- set configs = [\n    config_covalent_udfs,\n    ] -%}\n{{- ephemeral_deploy_marketplace(configs) -}}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy_marketplace"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/covalent/covalent__.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: __dbt__cte__\nSELECT 'covalent' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.avalanche_c__testnet": {"database": "SUI", "schema": "avalanche_c", "name": "avalanche_c__testnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/avalanche_c__testnet.sql", "original_file_path": "models/deploy/evm/avalanche_c__testnet.sql", "unique_id": "model.livequery_models.avalanche_c__testnet", "fqn": ["livequery_models", "deploy", "evm", "avalanche_c__testnet"], "alias": "testnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.6834412, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/avalanche_c__testnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'avalanche_c' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.gnosis__mainnet": {"database": "SUI", "schema": "gnosis", "name": "gnosis__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/gnosis__mainnet.sql", "original_file_path": "models/deploy/evm/gnosis__mainnet.sql", "unique_id": "model.livequery_models.gnosis__mainnet", "fqn": ["livequery_models", "deploy", "evm", "gnosis__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.6964312, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/gnosis__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'gnosis' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.base__mainnet": {"database": "SUI", "schema": "base", "name": "base__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/base__mainnet.sql", "original_file_path": "models/deploy/evm/base__mainnet.sql", "unique_id": "model.livequery_models.base__mainnet", "fqn": ["livequery_models", "deploy", "evm", "base__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.7027297, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/base__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'base' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.harmony__testnet": {"database": "SUI", "schema": "harmony", "name": "harmony__testnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/harmony__testnet.sql", "original_file_path": "models/deploy/evm/harmony__testnet.sql", "unique_id": "model.livequery_models.harmony__testnet", "fqn": ["livequery_models", "deploy", "evm", "harmony__testnet"], "alias": "testnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.7089925, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/harmony__testnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'harmony' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.arbitrum_nova__mainnet": {"database": "SUI", "schema": "arbitrum_nova", "name": "arbitrum_nova__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/arbitrum_nova__mainnet.sql", "original_file_path": "models/deploy/evm/arbitrum_nova__mainnet.sql", "unique_id": "model.livequery_models.arbitrum_nova__mainnet", "fqn": ["livequery_models", "deploy", "evm", "arbitrum_nova__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.7152162, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/arbitrum_nova__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'arbitrum_nova' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.bsc__mainnet": {"database": "SUI", "schema": "bsc", "name": "bsc__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/bsc__mainnet.sql", "original_file_path": "models/deploy/evm/bsc__mainnet.sql", "unique_id": "model.livequery_models.bsc__mainnet", "fqn": ["livequery_models", "deploy", "evm", "bsc__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.7213845, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/bsc__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'bsc' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.base__goerli": {"database": "SUI", "schema": "base", "name": "base__goerli", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/base__goerli.sql", "original_file_path": "models/deploy/evm/base__goerli.sql", "unique_id": "model.livequery_models.base__goerli", "fqn": ["livequery_models", "deploy", "evm", "base__goerli"], "alias": "goerli", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.7275796, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/base__goerli.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'base' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.ethereum__goerli": {"database": "SUI", "schema": "ethereum", "name": "ethereum__goerli", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/ethereum__goerli.sql", "original_file_path": "models/deploy/evm/ethereum__goerli.sql", "unique_id": "model.livequery_models.ethereum__goerli", "fqn": ["livequery_models", "deploy", "evm", "ethereum__goerli"], "alias": "goerli", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.7354083, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/ethereum__goerli.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'ethereum' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.polygon__testnet": {"database": "SUI", "schema": "polygon", "name": "polygon__testnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/polygon__testnet.sql", "original_file_path": "models/deploy/evm/polygon__testnet.sql", "unique_id": "model.livequery_models.polygon__testnet", "fqn": ["livequery_models", "deploy", "evm", "polygon__testnet"], "alias": "testnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.7417257, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/polygon__testnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'polygon' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.celo__mainnet": {"database": "SUI", "schema": "celo", "name": "celo__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/celo__mainnet.sql", "original_file_path": "models/deploy/evm/celo__mainnet.sql", "unique_id": "model.livequery_models.celo__mainnet", "fqn": ["livequery_models", "deploy", "evm", "celo__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.7480757, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/celo__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'celo' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.ethereum__mainnet": {"database": "SUI", "schema": "ethereum", "name": "ethereum__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/ethereum__mainnet.sql", "original_file_path": "models/deploy/evm/ethereum__mainnet.sql", "unique_id": "model.livequery_models.ethereum__mainnet", "fqn": ["livequery_models", "deploy", "evm", "ethereum__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "42fcff256d5cc7381b3feee8e69fc5ac0df9c6c255bc772f793908ca1d70e640"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.7543995, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('_eth__logs') }}\n-- depends_on: {{ ref('_eth__decoded_logs') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions,\n    config_eth_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_eth__logs", "package": null, "version": null}, {"name": "_eth__decoded_logs", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models._eth__logs", "model.livequery_models._eth__decoded_logs", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/ethereum__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: SUI._eth.logs\n-- depends_on: SUI._eth.decoded_logs\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'ethereum' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.avalanche_c__mainnet": {"database": "SUI", "schema": "avalanche_c", "name": "avalanche_c__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/avalanche_c__mainnet.sql", "original_file_path": "models/deploy/evm/avalanche_c__mainnet.sql", "unique_id": "model.livequery_models.avalanche_c__mainnet", "fqn": ["livequery_models", "deploy", "evm", "avalanche_c__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.7610154, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/avalanche_c__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'avalanche_c' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.polygon_zkevm__testnet": {"database": "SUI", "schema": "polygon_zkevm", "name": "polygon_zkevm__testnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/polygon_zkevm__testnet.sql", "original_file_path": "models/deploy/evm/polygon_zkevm__testnet.sql", "unique_id": "model.livequery_models.polygon_zkevm__testnet", "fqn": ["livequery_models", "deploy", "evm", "polygon_zkevm__testnet"], "alias": "testnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.7671692, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/polygon_zkevm__testnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'polygon_zkevm' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.bsc__testnet": {"database": "SUI", "schema": "bsc", "name": "bsc__testnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/bsc__testnet.sql", "original_file_path": "models/deploy/evm/bsc__testnet.sql", "unique_id": "model.livequery_models.bsc__testnet", "fqn": ["livequery_models", "deploy", "evm", "bsc__testnet"], "alias": "testnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.775077, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/bsc__testnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'bsc' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.harmony__mainnet": {"database": "SUI", "schema": "harmony", "name": "harmony__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/harmony__mainnet.sql", "original_file_path": "models/deploy/evm/harmony__mainnet.sql", "unique_id": "model.livequery_models.harmony__mainnet", "fqn": ["livequery_models", "deploy", "evm", "harmony__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.7813435, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/harmony__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'harmony' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.fantom__mainnet": {"database": "SUI", "schema": "fantom", "name": "fantom__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/fantom__mainnet.sql", "original_file_path": "models/deploy/evm/fantom__mainnet.sql", "unique_id": "model.livequery_models.fantom__mainnet", "fqn": ["livequery_models", "deploy", "evm", "fantom__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.7877154, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/fantom__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'fantom' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.polygon_zkevm__mainnet": {"database": "SUI", "schema": "polygon_zkevm", "name": "polygon_zkevm__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/polygon_zkevm__mainnet.sql", "original_file_path": "models/deploy/evm/polygon_zkevm__mainnet.sql", "unique_id": "model.livequery_models.polygon_zkevm__mainnet", "fqn": ["livequery_models", "deploy", "evm", "polygon_zkevm__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.7941217, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/polygon_zkevm__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'polygon_zkevm' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.ethereum__sepolia": {"database": "SUI", "schema": "ethereum", "name": "ethereum__sepolia", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/ethereum__sepolia.sql", "original_file_path": "models/deploy/evm/ethereum__sepolia.sql", "unique_id": "model.livequery_models.ethereum__sepolia", "fqn": ["livequery_models", "deploy", "evm", "ethereum__sepolia"], "alias": "sepolia", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.8003461, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/ethereum__sepolia.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'ethereum' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.optimism__mainnet": {"database": "SUI", "schema": "optimism", "name": "optimism__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/optimism__mainnet.sql", "original_file_path": "models/deploy/evm/optimism__mainnet.sql", "unique_id": "model.livequery_models.optimism__mainnet", "fqn": ["livequery_models", "deploy", "evm", "optimism__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.806559, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/optimism__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'optimism' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.arbitrum_one__mainnet": {"database": "SUI", "schema": "arbitrum_one", "name": "arbitrum_one__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/arbitrum_one__mainnet.sql", "original_file_path": "models/deploy/evm/arbitrum_one__mainnet.sql", "unique_id": "model.livequery_models.arbitrum_one__mainnet", "fqn": ["livequery_models", "deploy", "evm", "arbitrum_one__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.8145702, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/arbitrum_one__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'arbitrum_one' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.optimism__goerli": {"database": "SUI", "schema": "optimism", "name": "optimism__goerli", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/optimism__goerli.sql", "original_file_path": "models/deploy/evm/optimism__goerli.sql", "unique_id": "model.livequery_models.optimism__goerli", "fqn": ["livequery_models", "deploy", "evm", "optimism__goerli"], "alias": "goerli", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.820759, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/optimism__goerli.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'optimism' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.polygon__mainnet": {"database": "SUI", "schema": "polygon", "name": "polygon__mainnet", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/polygon__mainnet.sql", "original_file_path": "models/deploy/evm/polygon__mainnet.sql", "unique_id": "model.livequery_models.polygon__mainnet", "fqn": ["livequery_models", "deploy", "evm", "polygon__mainnet"], "alias": "mainnet", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.8269665, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/polygon__mainnet.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'polygon' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models.arbitrum_one__goerli": {"database": "SUI", "schema": "arbitrum_one", "name": "arbitrum_one__goerli", "resource_type": "model", "package_name": "livequery_models", "path": "deploy/evm/arbitrum_one__goerli.sql", "original_file_path": "models/deploy/evm/arbitrum_one__goerli.sql", "unique_id": "model.livequery_models.arbitrum_one__goerli", "fqn": ["livequery_models", "deploy", "evm", "arbitrum_one__goerli"], "alias": "goerli", "checksum": {"name": "sha256", "checksum": "8c725e4159886bd772fafe91353b831e1cf87646cdcc19ece903da9b030354bf"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["evm"], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": ["evm"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "ephemeral", "tags": "evm", "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.833177, "relation_name": null, "raw_code": "-- depends_on: {{ ref('_evm__contracts_map') }}\n-- depends_on: {{ ref('_evm__abi_map') }}\n-- depends_on: {{ ref('_evm__native_symbol_map') }}\n-- depends_on: {{ ref('live') }}\n-- depends_on: {{ ref('utils') }}\n{%- set configs = [\n    config_evm_rpc_primitives,\n    config_evm_high_level_abstractions\n    ] -%}\n{{- ephemeral_deploy(configs) -}}", "language": "sql", "refs": [{"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "live", "package": null, "version": null}, {"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.ephemeral_deploy"], "nodes": ["model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/evm/arbitrum_one__goerli.sql", "compiled": true, "compiled_code": "with __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) -- depends_on: SUI._evm.contracts_map\n-- depends_on: SUI._evm.abi_map\n-- depends_on: SUI._evm.native_symbol_map\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n    SELECT 'arbitrum_one' as schema_", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models._evm__abi_map": {"database": "SUI", "schema": "_evm", "name": "_evm__abi_map", "resource_type": "model", "package_name": "livequery_models", "path": "mapping_tables/_evm__abi_map.sql", "original_file_path": "models/mapping_tables/_evm__abi_map.sql", "unique_id": "model.livequery_models._evm__abi_map", "fqn": ["livequery_models", "mapping_tables", "_evm__abi_map"], "alias": "abi_map", "checksum": {"name": "sha256", "checksum": "88cdfb107baea6454e6ea0bde9b36a8a135f15abba9d6588a18de46d8095fe46"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {"select": ["INTERNAL_DEV"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "grants": {"+select": ["INTERNAL_DEV"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.839226, "relation_name": "SUI._evm.abi_map", "raw_code": "{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\n\nSELECT\n    parent_contract_address,\n    event_name,\n    event_signature,\n    abi,\n    start_block,\n    end_block,\n    CASE blockchain\n        WHEN 'avalanche' THEN 'avalanche_c'\n        WHEN 'arbitrum' THEN 'arbitrum_one'\n        ELSE blockchain\n    END AS blockchain\nFROM\n    {{ source(\n        'crosschain',\n        'dim_evm_event_abis'\n    ) }}", "language": "sql", "refs": [], "sources": [["crosschain", "dim_evm_event_abis"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.livequery_models.crosschain.dim_evm_event_abis"]}, "compiled_path": "target/compiled/livequery_models/models/mapping_tables/_evm__abi_map.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    parent_contract_address,\n    event_name,\n    event_signature,\n    abi,\n    start_block,\n    end_block,\n    CASE blockchain\n        WHEN 'avalanche' THEN 'avalanche_c'\n        WHEN 'arbitrum' THEN 'arbitrum_one'\n        ELSE blockchain\n    END AS blockchain\nFROM\n    crosschain_dev.core.dim_evm_event_abis", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models._evm__contracts_map": {"database": "SUI", "schema": "_evm", "name": "_evm__contracts_map", "resource_type": "model", "package_name": "livequery_models", "path": "mapping_tables/_evm__contracts_map.sql", "original_file_path": "models/mapping_tables/_evm__contracts_map.sql", "unique_id": "model.livequery_models._evm__contracts_map", "fqn": ["livequery_models", "mapping_tables", "_evm__contracts_map"], "alias": "contracts_map", "checksum": {"name": "sha256", "checksum": "735a229e83b106abf3e7fdffae2618ac6f66f8662e74c6394f232a13d43e3bd9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {"select": ["INTERNAL_DEV"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "grants": {"+select": ["INTERNAL_DEV"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.8449364, "relation_name": "SUI._evm.contracts_map", "raw_code": "{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\n\nSELECT\n    address,\n    symbol,\n    decimals,\n    CASE\n    blockchain\n        WHEN 'avalanche' THEN 'avalanche_c'\n        WHEN 'arbitrum' THEN 'arbitrum_one'\n        ELSE blockchain\n    END AS blockchain\nFROM\n    {{ source(\n        'crosschain',\n        'dim_contracts'\n    ) }}", "language": "sql", "refs": [], "sources": [["crosschain", "dim_contracts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.livequery_models.crosschain.dim_contracts"]}, "compiled_path": "target/compiled/livequery_models/models/mapping_tables/_evm__contracts_map.sql", "compiled": true, "compiled_code": "\n\nSELECT\n    address,\n    symbol,\n    decimals,\n    CASE\n    blockchain\n        WHEN 'avalanche' THEN 'avalanche_c'\n        WHEN 'arbitrum' THEN 'arbitrum_one'\n        ELSE blockchain\n    END AS blockchain\nFROM\n    crosschain_dev.core.dim_contracts", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models._eth__logs": {"database": "SUI", "schema": "_eth", "name": "_eth__logs", "resource_type": "model", "package_name": "livequery_models", "path": "mapping_tables/_eth__logs.sql", "original_file_path": "models/mapping_tables/_eth__logs.sql", "unique_id": "model.livequery_models._eth__logs", "fqn": ["livequery_models", "mapping_tables", "_eth__logs"], "alias": "logs", "checksum": {"name": "sha256", "checksum": "dc768eb99a909adc99566d829040132c1ce1951fe6829a4a3b00859c4cf360ca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {"select": ["INTERNAL_DEV"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "grants": {"+select": ["INTERNAL_DEV"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.8521988, "relation_name": "SUI._eth.logs", "raw_code": "{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\n\nSELECT \n    BLOCK_NUMBER,\n    BLOCK_TIMESTAMP,\n    TX_HASH,\n    ORIGIN_FUNCTION_SIGNATURE,\n    ORIGIN_FROM_ADDRESS,\n    ORIGIN_TO_ADDRESS,\n    EVENT_INDEX,\n\tCONTRACT_ADDRESS,\n\tTOPICS,\n\tDATA,\n\tEVENT_REMOVED,\n\tTX_STATUS,\n\t_LOG_ID\nFROM\n    {{ source(\n        'ethereum_core',\n        'fact_event_logs'\n    ) }}", "language": "sql", "refs": [], "sources": [["ethereum_core", "fact_event_logs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.livequery_models.ethereum_core.fact_event_logs"]}, "compiled_path": "target/compiled/livequery_models/models/mapping_tables/_eth__logs.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    BLOCK_NUMBER,\n    BLOCK_TIMESTAMP,\n    TX_HASH,\n    ORIGIN_FUNCTION_SIGNATURE,\n    ORIGIN_FROM_ADDRESS,\n    ORIGIN_TO_ADDRESS,\n    EVENT_INDEX,\n\tCONTRACT_ADDRESS,\n\tTOPICS,\n\tDATA,\n\tEVENT_REMOVED,\n\tTX_STATUS,\n\t_LOG_ID\nFROM\n    ethereum_dev.core.fact_event_logs", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models._eth__decoded_logs": {"database": "SUI", "schema": "_eth", "name": "_eth__decoded_logs", "resource_type": "model", "package_name": "livequery_models", "path": "mapping_tables/_eth__decoded_logs.sql", "original_file_path": "models/mapping_tables/_eth__decoded_logs.sql", "unique_id": "model.livequery_models._eth__decoded_logs", "fqn": ["livequery_models", "mapping_tables", "_eth__decoded_logs"], "alias": "decoded_logs", "checksum": {"name": "sha256", "checksum": "bdfd9ed4bf06c0100047dd80065882219275da54624c6a8c090d27caf38be29e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {"select": ["INTERNAL_DEV"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "grants": {"+select": ["INTERNAL_DEV"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.8578837, "relation_name": "SUI._eth.decoded_logs", "raw_code": "{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\n\nSELECT \n    BLOCK_NUMBER,\n\tBLOCK_TIMESTAMP,\n\tTX_HASH,\n\tEVENT_INDEX,\n\tCONTRACT_ADDRESS,\n\tCONTRACT_NAME,\n\tEVENT_NAME,\n\tDECODED_LOG,\n\tFULL_DECODED_LOG,\n\tORIGIN_FUNCTION_SIGNATURE,\n\tORIGIN_FROM_ADDRESS,\n\tORIGIN_TO_ADDRESS,\n\tTOPICS,\n\tDATA,\n\tEVENT_REMOVED,\n\tTX_STATUS\nFROM\n    {{ source(\n        'ethereum_core',\n        'ez_decoded_event_logs'\n    ) }}", "language": "sql", "refs": [], "sources": [["ethereum_core", "ez_decoded_event_logs"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.livequery_models.ethereum_core.ez_decoded_event_logs"]}, "compiled_path": "target/compiled/livequery_models/models/mapping_tables/_eth__decoded_logs.sql", "compiled": true, "compiled_code": "\n\nSELECT \n    BLOCK_NUMBER,\n\tBLOCK_TIMESTAMP,\n\tTX_HASH,\n\tEVENT_INDEX,\n\tCONTRACT_ADDRESS,\n\tCONTRACT_NAME,\n\tEVENT_NAME,\n\tDECODED_LOG,\n\tFULL_DECODED_LOG,\n\tORIGIN_FUNCTION_SIGNATURE,\n\tORIGIN_FROM_ADDRESS,\n\tORIGIN_TO_ADDRESS,\n\tTOPICS,\n\tDATA,\n\tEVENT_REMOVED,\n\tTX_STATUS\nFROM\n    ethereum_dev.core.ez_decoded_event_logs", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "model.livequery_models._evm__native_symbol_map": {"database": "SUI", "schema": "_evm", "name": "_evm__native_symbol_map", "resource_type": "model", "package_name": "livequery_models", "path": "mapping_tables/_evm__native_symbol_map.sql", "original_file_path": "models/mapping_tables/_evm__native_symbol_map.sql", "unique_id": "model.livequery_models._evm__native_symbol_map", "fqn": ["livequery_models", "mapping_tables", "_evm__native_symbol_map"], "alias": "native_symbol_map", "checksum": {"name": "sha256", "checksum": "3ee1112fc9b568e4bfd16703969c64185eecb78266275f6572d30f9337f61b36"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {"select": ["INTERNAL_DEV"]}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"materialized": "view", "grants": {"+select": ["INTERNAL_DEV"]}, "copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.8636198, "relation_name": "SUI._evm.native_symbol_map", "raw_code": "{{ config(\n    materialized = 'view',\n    grants = {'+select': fromyaml(var('ROLES'))}\n) }}\n\nWITH blockchain_assets AS (\n\n    SELECT\n        'avalanche' AS blockchain,\n        'AVAX' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'avalanche' AS blockchain,\n        'AVAX' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'binance' AS blockchain,\n        'BNB' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'binance' AS blockchain,\n        'BNB' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'gnosis' AS blockchain,\n        'xDAI' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'ethereum' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'ethereum' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'ethereum' AS blockchain,\n        'ETH' AS asset_symbol,\n        'sepolia' AS network\n    UNION ALL\n    SELECT\n        'arbitrum_nova' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'arbitrum_one' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'arbitrum_one' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'base' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'fantom' AS blockchain,\n        'FTM' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'gnosis' AS blockchain,\n        'xDAI' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'harmony' AS blockchain,\n        'ONE' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'harmony' AS blockchain,\n        'ONE' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'optimism' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'optimism' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'polygon' AS blockchain,\n        'MATIC' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'polygon' AS blockchain,\n        'MATIC' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'polygon_zkevm' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'polygon_zkevm' AS blockchain,\n        'ETH' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'CELO' AS blockchain,\n        'CELO' AS asset_symbol,\n        'mainnet' AS network\n)\n\nSELECT\n    blockchain,\n    network,\n    asset_symbol AS symbol\nFROM\n    blockchain_assets", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": "target/compiled/livequery_models/models/mapping_tables/_evm__native_symbol_map.sql", "compiled": true, "compiled_code": "\n\nWITH blockchain_assets AS (\n\n    SELECT\n        'avalanche' AS blockchain,\n        'AVAX' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'avalanche' AS blockchain,\n        'AVAX' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'binance' AS blockchain,\n        'BNB' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'binance' AS blockchain,\n        'BNB' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'gnosis' AS blockchain,\n        'xDAI' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'ethereum' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'ethereum' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'ethereum' AS blockchain,\n        'ETH' AS asset_symbol,\n        'sepolia' AS network\n    UNION ALL\n    SELECT\n        'arbitrum_nova' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'arbitrum_one' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'arbitrum_one' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'base' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'fantom' AS blockchain,\n        'FTM' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'gnosis' AS blockchain,\n        'xDAI' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'harmony' AS blockchain,\n        'ONE' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'harmony' AS blockchain,\n        'ONE' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'optimism' AS blockchain,\n        'ETH' AS asset_symbol,\n        'goerli' AS network\n    UNION ALL\n    SELECT\n        'optimism' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'polygon' AS blockchain,\n        'MATIC' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'polygon' AS blockchain,\n        'MATIC' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'polygon_zkevm' AS blockchain,\n        'ETH' AS asset_symbol,\n        'mainnet' AS network\n    UNION ALL\n    SELECT\n        'polygon_zkevm' AS blockchain,\n        'ETH' AS asset_symbol,\n        'testnet' AS network\n    UNION ALL\n    SELECT\n        'CELO' AS blockchain,\n        'CELO' AS asset_symbol,\n        'mainnet' AS network\n)\n\nSELECT\n    blockchain,\n    network,\n    asset_symbol AS symbol\nFROM\n    blockchain_assets", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}, "analysis.livequery_models.test_crud_udfs_in_schema": {"database": "SUI", "schema": "test_crud_udfs_in_schema", "name": "test_crud_udfs_in_schema", "resource_type": "analysis", "package_name": "livequery_models", "path": "analysis/test_crud_udfs_in_schema.sql", "original_file_path": "analysis/test_crud_udfs_in_schema.sql", "unique_id": "analysis.livequery_models.test_crud_udfs_in_schema", "fqn": ["livequery_models", "analysis", "test_crud_udfs_in_schema"], "alias": "", "checksum": {"name": "sha256", "checksum": "f676dabac544030f70f1652a8d6908844809f667be9bd1c8719037b3070efab0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141889.958754, "relation_name": null, "raw_code": "{{crud_udfs_by_chain(config_evm_high_level_abstractions, 'ethereum', 'mainnet', false)}}\n{{- crud_udfs_by_chain(config_evm_rpc_primitives, \"ethereum\", None, False) -}}\n{{- crud_udfs_by_chain(config_evm_rpc_primitives, \"ethereum\", None, true) -}}", "language": "sql", "refs": [{"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__contracts_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__native_symbol_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}, {"name": "_evm__abi_map", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.crud_udfs_by_chain"], "nodes": ["model.livequery_models._evm__native_symbol_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__abi_map"]}, "compiled_path": "target/compiled/livequery_models/analysis/test_crud_udfs_in_schema.sql", "compiled": true, "compiled_code": "\n\n  \n    CREATE SCHEMA IF NOT EXISTS ethereum_mainnet;\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_native_balance(\n            wallet STRING\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the native asset balance at the latest block for a given address.$$\n\n    AS\n    $$\n    \nwith base as (select lower(wallet) AS wallet_address)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    symbol,\n    utils.udf_hex_to_int(ethereum_mainnet.udf_rpc_eth_get_balance(wallet_address,'latest')::string) AS raw_balance,\n    (raw_balance / POW(10,18))::float AS balance\nFROM base\nLEFT JOIN SUI._evm.native_symbol_map\non 'ethereum' = blockchain\nand 'mainnet' = network\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_native_balance(\n            wallets ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the native asset balances at the latest block for given addresses.$$\n\n    AS\n    $$\n    \nWITH address_inputs AS (\n    SELECT wallets AS wallet_array\n),\nflat_addresses AS (\n    SELECT lower(value::string) AS wallet_address\n    FROM address_inputs a,\n    LATERAL FLATTEN(input => a.wallet_array)\n),\nnode_call AS (\n    SELECT wallet_address,\n    ethereum_mainnet.udf_rpc_eth_get_balance(wallet_address,'latest')::string AS hex_balance\n    FROM flat_addresses\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    symbol,\n    utils.udf_hex_to_int(hex_balance) AS raw_balance,\n    (raw_balance / POW(10,18))::FLOAT AS balance\nFROM node_call\nLEFT JOIN SUI._evm.native_symbol_map\non 'ethereum' = blockchain\nand 'mainnet' = network\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_token_balance(\n            wallet STRING,\n            token STRING\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balance at the latest block for a given address and token address. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n     SELECT\n        lower(token) AS token_address,\n        lower(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n),\nnode_call AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        ethereum_mainnet.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN SUI._evm.contracts_map\n    ON token_address = address\n    and blockchain = 'ethereum'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM node_call\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_token_balance(\n            wallet STRING,\n            tokens ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances at the latest block for a given address and multiple token addresses. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n    SELECT tokens, wallet\n),\nflat_rows AS (\n    SELECT\n        lower(value::string) AS token_address,\n        lower(wallet::string) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n    FROM inputs,\n    LATERAL FLATTEN(input => tokens)\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        ethereum_mainnet.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        flat_rows\n    LEFT JOIN SUI._evm.contracts_map\n    ON token_address = address\n    and blockchain = 'ethereum'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_token_balance(\n            wallets ARRAY,\n            token STRING\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances at the latest block for multiple addresses and a single token address. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n    SELECT token, wallets\n),\nflat_rows AS (\n    SELECT\n        lower(value::string) AS wallet_address,\n        lower(token::string) AS token_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n    FROM inputs,\n    LATERAL FLATTEN(input => wallets)\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        ethereum_mainnet.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        flat_rows\n    LEFT JOIN SUI._evm.contracts_map\n    ON token_address = address\n    and blockchain = 'ethereum'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_token_balance(\n            wallets ARRAY,\n            tokens ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances at the latest block for multiple addresses and multiple token addresses. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n    SELECT tokens, wallets\n),\nflat_rows AS (\n    SELECT\n        lower(tokens.VALUE::STRING) AS token_address,\n        lower(wallets.VALUE::STRING) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n    FROM\n        inputs,\n        LATERAL FLATTEN(input => tokens) tokens,\n        LATERAL FLATTEN(input => wallets) wallets\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        ethereum_mainnet.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        flat_rows\n    LEFT JOIN SUI._evm.contracts_map\n    ON token_address = address\n    and blockchain = 'ethereum'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_token_balance(\n            wallet STRING,\n            token STRING,\n            block_number INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balance for a given address and token address at a specific block. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS data,\n        block_number\n), final AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        ethereum_mainnet.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN SUI._evm.contracts_map\n    ON token_address = address\n    AND blockchain = 'ethereum'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_token_balance(\n            wallet STRING,\n            token STRING,\n            block_numbers ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances for a given address and token address at multiple specific blocks. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS data\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        ethereum_mainnet.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN SUI._evm.contracts_map\n    ON token_address = address\n    AND blockchain = 'ethereum'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_token_balance(\n            wallets ARRAY,\n            token STRING,\n            block_number INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances for multiple addresses and a given token addresses at a specific block. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH wallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet, '0x', ''), 64, 0)\n        ) AS data\n    FROM wallets\n),\nfinal AS (\n    SELECT\n        wallet AS wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        ethereum_mainnet.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN SUI._evm.contracts_map\n    ON token_address = address\n    AND blockchain = 'ethereum'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_token_balance(\n            wallet STRING,\n            tokens ARRAY,\n            block_number INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances for a given address and multiple token addresses at a specific block. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH token_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        tokens\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        ethereum_mainnet.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN SUI._evm.contracts_map\n    ON token_address = address\n    AND blockchain = 'ethereum'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_token_balance(\n            wallet STRING,\n            tokens ARRAY,\n            block_numbers ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances for a given address and multiple token addresses at multiple specific blocks. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\ntoken_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        tokens\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        ethereum_mainnet.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN SUI._evm.contracts_map\n    ON token_address = address\n    AND blockchain = 'ethereum'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_token_balance(\n            wallets ARRAY,\n            tokens ARRAY,\n            block_number INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances for multiple addresses and multiple token addresses at a specific block. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH token_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\nwallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        tokens,\n        wallets\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        ethereum_mainnet.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN SUI._evm.contracts_map\n    ON token_address = address\n    AND blockchain = 'ethereum'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_token_balance(\n            wallets ARRAY,\n            tokens ARRAY,\n            block_numbers ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances for multiple addresses and multiple token addresses at multiple specific blocks. Supports ERC20 and ERC721 tokens.$$\n\n    AS\n    $$\n    \nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\nwallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ntoken_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        wallets,\n        tokens\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        ethereum_mainnet.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN SUI._evm.contracts_map\n    ON token_address = address\n    AND blockchain = 'ethereum'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_native_balance(\n            wallet STRING,\n            block_number INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the native asset balance for a given address at a specific block.$$\n\n    AS\n    $$\n    \nwith base as (select lower(wallet) AS wallet_address, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))) as hex_block)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    utils.udf_hex_to_int(ethereum_mainnet.udf_rpc_eth_get_balance(wallet_address,hex_block)::string) AS raw_balance,\n    (raw_balance / POW(10,18))::float AS balance\nFROM base\nLEFT JOIN SUI._evm.native_symbol_map\non 'ethereum' = blockchain\nand 'mainnet' = network\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_native_balance(\n            wallet STRING,\n            block_numbers ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the native asset balances for a given address at multiple specific blocks.$$\n\n    AS\n    $$\n    \nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\ninputs AS (\n    SELECT\n        wallet AS wallet_address,\n        block_number,\n        utils.udf_hex_to_int(ethereum_mainnet.udf_rpc_eth_get_balance(wallet, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX')))))::STRING AS raw_balance\n    FROM blocks\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    raw_balance,\n    (raw_balance::int / pow(10,18)) ::float as balance\nFROM inputs\nLEFT JOIN SUI._evm.native_symbol_map\non 'ethereum' = blockchain\nand 'mainnet' = network\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_native_balance(\n            wallets ARRAY,\n            block_number INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the native asset balances for multiple addresses at a specific block.$$\n\n    AS\n    $$\n    \nWITH wallet_inputs AS (\n    SELECT wallets\n),\nflat_wallets AS (\n    SELECT lower(value::string) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        wallet AS wallet_address,\n        block_number,\n        utils.udf_hex_to_int(ethereum_mainnet.udf_rpc_eth_get_balance(wallet, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX')))))::STRING AS raw_balance\n    FROM flat_wallets\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    raw_balance,\n    (raw_balance::int / pow(10,18)) ::float as balance\nFROM inputs\nLEFT JOIN SUI._evm.native_symbol_map\non 'ethereum' = blockchain\nand 'mainnet' = network\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_historical_native_balance(\n            wallets ARRAY,\n            block_numbers ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the native asset balances for multiple addresses at multiple specific blocks.$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n    SELECT wallets, block_numbers\n),\nflat_wallets AS (\n    SELECT lower(wallet.value::STRING) AS wallet, block.value::INTEGER AS block_number\n    FROM inputs,\n    LATERAL FLATTEN(input => wallets) wallet,\n    LATERAL FLATTEN(input => block_numbers) block\n),\nfinal AS (\n    SELECT\n        wallet AS wallet_address,\n        block_number,\n        utils.udf_hex_to_int(ethereum_mainnet.udf_rpc_eth_get_balance(wallet, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX')))))::STRING AS raw_balance\n    FROM flat_wallets\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    raw_balance,\n    (raw_balance::int / pow(10,18))::float as balance\nFROM final\nLEFT JOIN SUI._evm.native_symbol_map\non 'ethereum' = blockchain\nand 'mainnet' = network\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events(\n            address STRING\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the latest events emitted by a contract in the last 100 blocks.$$\n\n    AS\n    $$\n    \nWITH chainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n),\nnode_call AS (\n    SELECT\n        lower(address) AS contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM chainhead\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n)\nSELECT\n    case\n    when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$')\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    tx_hash,\n    block_number,\n    event_index,\n    contract_address,\n    event_topics,\n    event_data\nFROM node_flat\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events(\n            address STRING,\n            lookback INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the latest events emitted by a contract within the last `lookback` blocks. *Please note there are RPC limitations on this method.*$$\n\n    AS\n    $$\n    \nWITH chainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex\n),\nnode_call AS (\n    SELECT\n        lower(address) AS contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM chainhead\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n)\nSELECT\n    case\n    when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(lookback)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    tx_hash,\n    block_number,\n    event_index,\n    contract_address,\n    event_topics,\n    event_data\nFROM node_flat\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events(\n            addresses ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the latest events emitted by multiple contracts in the last 100 blocks.$$\n\n    AS\n    $$\n    \nWITH chainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n),\nnode_call AS (\n    SELECT\n        lower(address) AS contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM (\n        SELECT value::STRING AS address\n        FROM LATERAL FLATTEN(input => addresses)\n    ) inputs, chainhead\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n)\nSELECT\n    case\n    when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$')\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    tx_hash,\n    block_number,\n    event_index,\n    contract_address,\n    event_topics,\n    event_data\nFROM node_flat\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events(\n            addresses ARRAY,\n            lookback INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the latest events emitted by multiple contracts within the last `lookback` blocks. *Please note there are RPC limitations on this method.*$$\n\n    AS\n    $$\n    \nWITH chainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex\n),\nnode_call AS (\n    SELECT\n        lower(address) AS contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM (\n        SELECT value::STRING AS address\n        FROM LATERAL FLATTEN(input => addresses)\n    ) inputs, chainhead\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n)\nSELECT\n    case\n    when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(lookback)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    tx_hash,\n    block_number,\n    event_index,\n    contract_address,\n    event_topics,\n    event_data\nFROM node_flat\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events_decoded(\n            address STRING\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$RReturns the latest decoded events emitted by a contract in the last 100 blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/).$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n    SELECT lower(address::STRING) AS contract_address\n),\nchainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN SUI._evm.abi_map\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = 'ethereum'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case\n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') then 'Success'\n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events_decoded(\n            addresses ARRAY\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the latest decoded events emitted by multiple contracts in the last 100 blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/).$$\n\n    AS\n    $$\n    \nWITH base AS (SELECT addresses),\ninputs AS (\n    SELECT lower(value::STRING) AS contract_address\n    FROM base, LATERAL FLATTEN(input => addresses)\n),\nchainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN SUI._evm.abi_map\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = 'ethereum'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case\n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') then 'Success'\n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events_decoded(\n            address STRING,\n            lookback INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the latest decoded events emitted by a contract within the last `lookback` blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/). *Please note there are RPC limitations on this method.*$$\n\n    AS\n    $$\n    \nWITH inputs AS (\n    SELECT lower(address::STRING) AS contract_address\n),\nchainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex,\n        lookback\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN SUI._evm.abi_map\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = 'ethereum'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs,\n        lookback\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        lookback,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case\n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') and is_integer(n.lookback) then 'Success'\n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_latest_contract_events_decoded(\n            addresses ARRAY,\n            lookback INTEGER\n    )\n    COPY GRANTS\n    RETURNS TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the latest decoded events emitted by multiple contracts within the last `lookback` blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/). *Please note there are RPC limitations on this method.* $$\n\n    AS\n    $$\n    \nWITH base AS (SELECT addresses),\ninputs AS (\n    SELECT lower(value::STRING) AS contract_address\n    FROM base, LATERAL FLATTEN(input => addresses)\n),\nchainhead AS (\n    SELECT\n        ethereum_mainnet.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex,\n        lookback\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN SUI._evm.abi_map\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = 'ethereum'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        ethereum_mainnet.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs,\n        lookback\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        lookback,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case\n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') and is_integer(n.lookback) then 'Success'\n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input'\n    end as status,\n    'ethereum' AS blockchain,\n    'mainnet' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_fact_blocks(\n            block_height INTEGER,\n            to_latest BOOLEAN\n    )\n    COPY GRANTS\n    RETURNS TABLE(block_number INTEGER, block_timestamp TIMESTAMP_NTZ, network STRING, blockchain STRING, tx_count INTEGER, difficulty INTEGER, total_difficulty INTEGER, extra_data STRING, gas_limit INTEGER, gas_used INTEGER, hash STRING, parent_hash STRING, miner STRING, nonce INTEGER, receipts_root STRING, sha3_uncles STRING, size INTEGER, uncle_blocks VARIANT, block_header_json OBJECT, excess_blob_gas INTEGER, blob_gas_used INTEGER, fact_blocks_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ, withdrawals VARIANT, withdrawals_root STRING)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the block data for a given block height. If to_latest is true, it will continue fetching blocks until the latest block. Otherwise, it will fetch blocks until the block height is reached.$$\n\n    AS\n    $$\n    \nWITH spine AS (\n        \n        WITH heights AS (\n            \n            SELECT\n                ethereum_mainnet.udf_rpc('eth_blockNumber', []) as result,\n                utils.udf_hex_to_int(result)::integer AS latest_block_height,\n                COALESCE(\n                    block_height,\n                    latest_block_height\n                ) AS min_height,\n                iff(\n                    COALESCE(to_latest, false),\n                    latest_block_height,\n                    min_height\n                ) AS max_height\n    ),\n        block_spine AS (\n            SELECT\n                ROW_NUMBER() OVER (\n                    ORDER BY\n                        NULL\n                ) - 1 + COALESCE(block_height, latest_block_height)::integer AS block_number,\n                min_height,\n                IFF(\n                    COALESCE(to_latest, false),\n                    block_height,\n                    min_height\n                ) AS max_height,\n                latest_block_height\n            FROM\n                TABLE(generator(ROWCOUNT => 1000)),\n                heights qualify block_number BETWEEN min_height\n                AND max_height\n        )\n\n        SELECT\n            CEIL(ROW_NUMBER() OVER (ORDER BY block_number) / 10) AS batch_id,\n            block_number,\n            latest_block_height\n        FROM block_spine\n),\n    raw_block_txs AS (\n        \n    WITH blocks_agg AS (\n        SELECT\n            batch_id,\n            ARRAY_AGG(\n                utils.udf_json_rpc_call(\n                    'eth_getBlockByNumber',\n                    [utils.udf_int_to_hex(block_number), true]\n                )\n            ) AS params\n        FROM\n            spine\n        GROUP BY batch_id\n    ), result as (\n        SELECT\n            \n        live.udf_api(\n            '{endpoint}'\n            ,params\n            ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n        )::VARIANT:data::ARRAY AS data\n\n        FROM blocks_agg\n    )\n    , flattened as (\n        SELECT\n            COALESCE(value:result, {'error':value:error}) AS result\n        FROM result, LATERAL FLATTEN(input => result.data) v\n    )\n\n    SELECT\n        utils.udf_hex_to_int(result:number::STRING)::INT AS block_number,\n        result as data\n    FROM flattened\n),\n    silver_blocks AS (\n        \n    SELECT\n        block_number,\n        utils.udf_hex_to_int(DATA:timestamp::STRING)::TIMESTAMP AS block_timestamp,\n        utils.udf_hex_to_int(DATA:baseFeePerGas::STRING)::INT AS base_fee_per_gas,\n        utils.udf_hex_to_int(DATA:difficulty::STRING)::INT AS difficulty,\n        DATA:extraData::STRING AS extra_data,\n        utils.udf_hex_to_int(DATA:gasLimit::STRING)::INT AS gas_limit,\n        utils.udf_hex_to_int(DATA:gasUsed::STRING)::INT AS gas_used,\n        DATA:hash::STRING AS HASH,\n        DATA:logsBloom::STRING AS logs_bloom,\n        DATA:miner::STRING AS miner,\n        utils.udf_hex_to_int(DATA:nonce::STRING)::INT AS nonce,\n        utils.udf_hex_to_int(DATA:number::STRING)::INT AS NUMBER,\n        DATA:parentHash::STRING AS parent_hash,\n        DATA:receiptsRoot::STRING AS receipts_root,\n        DATA:sha3Uncles::STRING AS sha3_uncles,\n        utils.udf_hex_to_int(DATA:size::STRING)::INT AS SIZE,\n        DATA:stateRoot::STRING AS state_root,\n        utils.udf_hex_to_int(DATA:totalDifficulty::STRING)::INT AS total_difficulty,\n        ARRAY_SIZE(DATA:transactions) AS tx_count,\n        DATA:transactionsRoot::STRING AS transactions_root,\n        DATA:uncles AS uncles,\n        DATA:withdrawals AS withdrawals,\n        DATA:withdrawalsRoot::STRING AS withdrawals_root,\n        md5(\n            CAST(\n                COALESCE(\n                    CAST(block_number AS TEXT),\n                    '_dbt_utils_surrogate_key_null_'\n                ) AS TEXT\n            )\n        ) AS blocks_id,\n        utils.udf_hex_to_int(DATA:blobGasUsed::STRING)::INT AS blob_gas_used,\n        utils.udf_hex_to_int(DATA:excessBlobGas::STRING)::INT AS excess_blob_gas\n    FROM\n        raw_block_txs\n)\n    select\n        block_number,\n        block_timestamp,\n        'mainnet' AS network,\n        'ethereum' AS blockchain,\n        tx_count,\n        difficulty,\n        total_difficulty,\n        extra_data,\n        gas_limit,\n        gas_used,\n        HASH,\n        parent_hash,\n        miner,\n        nonce,\n        receipts_root,\n        sha3_uncles,\n        SIZE,\n        uncles AS uncle_blocks,\n        OBJECT_CONSTRUCT(\n            'baseFeePerGas',\n            base_fee_per_gas,\n            'difficulty',\n            difficulty,\n            'extraData',\n            extra_data,\n            'gasLimit',\n            gas_limit,\n            'gasUsed',\n            gas_used,\n            'hash',\n            HASH,\n            'logsBloom',\n            logs_bloom,\n            'miner',\n            miner,\n            'nonce',\n            nonce,\n            'number',\n            NUMBER,\n            'parentHash',\n            parent_hash,\n            'receiptsRoot',\n            receipts_root,\n            'sha3Uncles',\n            sha3_uncles,\n            'size',\n            SIZE,\n            'stateRoot',\n            state_root,\n            'timestamp',\n            block_timestamp,\n            'totalDifficulty',\n            total_difficulty,\n            'transactionsRoot',\n            transactions_root,\n            'uncles',\n            uncles,\n            'excessBlobGas',\n            excess_blob_gas,\n            'blobGasUsed',\n            blob_gas_used\n        ) AS block_header_json,\n        excess_blob_gas,\n        blob_gas_used,\n        block_number::STRING AS fact_blocks_id,\n        SYSDATE() AS inserted_timestamp,\n        SYSDATE() AS modified_timestamp,\n        withdrawals,\n        withdrawals_root\n    from silver_blocks\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_fact_event_logs(\n            block_height INTEGER,\n            to_latest BOOLEAN\n    )\n    COPY GRANTS\n    RETURNS TABLE(block_number INTEGER, block_timestamp TIMESTAMP_NTZ, tx_hash STRING, origin_function_signature STRING, origin_from_address STRING, origin_to_address STRING, event_index INTEGER, contract_address STRING, topics VARIANT, data STRING, event_removed BOOLEAN, tx_status STRING, _log_id STRING, fact_event_logs_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the logs for a given block height. If to_latest is true, it will continue fetching logs until the latest block. Otherwise, it will fetch logs until the block height is reached.$$\n\n    AS\n    $$\n    \nWITH spine AS (\n    \n        WITH heights AS (\n            \n            SELECT\n                ethereum_mainnet.udf_rpc('eth_blockNumber', []) as result,\n                utils.udf_hex_to_int(result)::integer AS latest_block_height,\n                COALESCE(\n                    block_height,\n                    latest_block_height\n                ) AS min_height,\n                iff(\n                    COALESCE(to_latest, false),\n                    latest_block_height,\n                    min_height\n                ) AS max_height\n    ),\n        block_spine AS (\n            SELECT\n                ROW_NUMBER() OVER (\n                    ORDER BY\n                        NULL\n                ) - 1 + COALESCE(block_height, latest_block_height)::integer AS block_number,\n                min_height,\n                IFF(\n                    COALESCE(to_latest, false),\n                    block_height,\n                    min_height\n                ) AS max_height,\n                latest_block_height\n            FROM\n                TABLE(generator(ROWCOUNT => 1000)),\n                heights qualify block_number BETWEEN min_height\n                AND max_height\n        )\n\n        SELECT\n            CEIL(ROW_NUMBER() OVER (ORDER BY block_number) / 5) AS batch_id,\n            block_number,\n            latest_block_height\n        FROM block_spine\n),\nraw_block_txs AS (\n    \n    WITH blocks_agg AS (\n        SELECT\n            batch_id,\n            ARRAY_AGG(\n                utils.udf_json_rpc_call(\n                    'eth_getBlockByNumber',\n                    [utils.udf_int_to_hex(block_number), true]\n                )\n            ) AS params\n        FROM\n            spine\n        GROUP BY batch_id\n    ), result as (\n        SELECT\n            \n        live.udf_api(\n            '{endpoint}'\n            ,params\n            ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n        )::VARIANT:data::ARRAY AS data\n\n        FROM blocks_agg\n    )\n    , flattened as (\n        SELECT\n            COALESCE(value:result, {'error':value:error}) AS result\n        FROM result, LATERAL FLATTEN(input => result.data) v\n    )\n\n    SELECT\n        utils.udf_hex_to_int(result:number::STRING)::INT AS block_number,\n        result as data\n    FROM flattened\n),\nraw_receipts AS (\n    \n    WITH blocks_agg AS (\n        SELECT\n            batch_id,\n            latest_block_height,\n            ARRAY_AGG(\n                utils.udf_json_rpc_call(\n                    'eth_getBlockReceipts',\n                    [utils.udf_int_to_hex(block_number)]\n                )\n            ) AS params\n        FROM\n            spine\n        GROUP BY 1,2\n    ),\n\n    get_batch_result AS (\n        SELECT\n            latest_block_height,\n            \n        live.udf_api(\n            '{endpoint}'\n            ,params\n            ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n        )::VARIANT:data::ARRAY AS data\n\n        FROM blocks_agg\n    )\n\n    SELECT\n        latest_block_height,\n        utils.udf_hex_to_int(w.value:blockNumber::STRING)::INT AS block_number,\n        w.value AS DATA\n    FROM\n        (SELECT\n            latest_block_height,\n            v.value:result AS DATA\n        FROM get_batch_result,\n            LATERAL FLATTEN(data) v), LATERAL FLATTEN(data) w\n),\nraw_logs AS (\n    \n    SELECT\n        r.block_number,\n        v.value\n    FROM\n        raw_receipts AS r,\n        lateral flatten(r.data:logs) v\n),\nraw_transactions AS (\n    \n    SELECT\n        block_number,\n        v.value as DATA\n    FROM\n        raw_block_txs AS r,\n        lateral flatten(r.data:transactions) v\n),\nblocks AS (\n    \n    SELECT\n        block_number,\n        utils.udf_hex_to_int(DATA:timestamp::STRING)::TIMESTAMP AS block_timestamp,\n        utils.udf_hex_to_int(DATA:baseFeePerGas::STRING)::INT AS base_fee_per_gas,\n        utils.udf_hex_to_int(DATA:difficulty::STRING)::INT AS difficulty,\n        DATA:extraData::STRING AS extra_data,\n        utils.udf_hex_to_int(DATA:gasLimit::STRING)::INT AS gas_limit,\n        utils.udf_hex_to_int(DATA:gasUsed::STRING)::INT AS gas_used,\n        DATA:hash::STRING AS HASH,\n        DATA:logsBloom::STRING AS logs_bloom,\n        DATA:miner::STRING AS miner,\n        utils.udf_hex_to_int(DATA:nonce::STRING)::INT AS nonce,\n        utils.udf_hex_to_int(DATA:number::STRING)::INT AS NUMBER,\n        DATA:parentHash::STRING AS parent_hash,\n        DATA:receiptsRoot::STRING AS receipts_root,\n        DATA:sha3Uncles::STRING AS sha3_uncles,\n        utils.udf_hex_to_int(DATA:size::STRING)::INT AS SIZE,\n        DATA:stateRoot::STRING AS state_root,\n        utils.udf_hex_to_int(DATA:totalDifficulty::STRING)::INT AS total_difficulty,\n        ARRAY_SIZE(DATA:transactions) AS tx_count,\n        DATA:transactionsRoot::STRING AS transactions_root,\n        DATA:uncles AS uncles,\n        DATA:withdrawals AS withdrawals,\n        DATA:withdrawalsRoot::STRING AS withdrawals_root,\n        md5(\n            CAST(\n                COALESCE(\n                    CAST(block_number AS TEXT),\n                    '_dbt_utils_surrogate_key_null_'\n                ) AS TEXT\n            )\n        ) AS blocks_id,\n        utils.udf_hex_to_int(DATA:blobGasUsed::STRING)::INT AS blob_gas_used,\n        utils.udf_hex_to_int(DATA:excessBlobGas::STRING)::INT AS excess_blob_gas\n    FROM\n        raw_block_txs\n),\nreceipts AS (\n    \n    SELECT\n        latest_block_height,\n        block_number,\n        DATA :blockHash::STRING AS block_hash,\n        utils.udf_hex_to_int(DATA :blockNumber::STRING)::INT AS blockNumber,\n        utils.udf_hex_to_int(DATA :cumulativeGasUsed::STRING)::INT AS cumulative_gas_used,\n        utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT / pow(10, 9) AS effective_gas_price,\n        DATA :from::STRING AS from_address,\n        utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS gas_used,\n        DATA :logs AS logs,\n        DATA :logsBloom::STRING AS logs_bloom,\n        utils.udf_hex_to_int(DATA :status::STRING)::INT AS status,\n        CASE\n            WHEN status = 1 THEN TRUE\n            ELSE FALSE\n        END AS tx_success,\n        CASE\n            WHEN status = 1 THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        DATA :to::STRING AS to_address1,\n        CASE\n            WHEN to_address1 = '' THEN NULL\n            ELSE to_address1\n        END AS to_address,\n        DATA :transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(DATA :transactionIndex::STRING)::INT AS POSITION,\n        utils.udf_hex_to_int(DATA :type::STRING)::INT AS TYPE,\n        utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT AS blob_gas_price,\n        utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS blob_gas_used\n    FROM\n        raw_receipts\n),\ntransactions AS (\n    \n    SELECT\n        A.block_number AS block_number,\n        A.data :blockHash::STRING AS block_hash,\n        utils.udf_hex_to_int(A.data :blockNumber::STRING)::INT AS blockNumber,\n        utils.udf_hex_to_int(A.data :chainId::STRING)::INT AS chain_id,\n        A.data :from::STRING AS from_address,\n        utils.udf_hex_to_int(A.data :gas::STRING)::INT AS gas,\n        utils.udf_hex_to_int(A.data :gasPrice::STRING)::INT / pow(10, 9) AS gas_price,\n        A.data :hash::STRING AS tx_hash,\n        A.data :input::STRING AS input_data,\n        SUBSTR(input_data, 1, 10) AS origin_function_signature,\n        utils.udf_hex_to_int(A.data :maxFeePerGas::STRING)::INT / pow(10, 9) AS max_fee_per_gas,\n        utils.udf_hex_to_int(\n            A.data :maxPriorityFeePerGas::STRING\n        )::INT / pow(10, 9) AS max_priority_fee_per_gas,\n        utils.udf_hex_to_int(A.data :nonce::STRING)::INT AS nonce,\n        A.data :r::STRING AS r,\n        A.data :s::STRING AS s,\n        A.data :to::STRING AS to_address1,\n        utils.udf_hex_to_int(A.data :transactionIndex::STRING)::INT AS POSITION,\n        A.data :type::STRING AS TYPE,\n        A.data :v::STRING AS v,\n        utils.udf_hex_to_int(A.data :value::STRING) AS value_precise_raw,\n        value_precise_raw * power(10, -18) AS value_precise,\n        value_precise::FLOAT AS VALUE,\n        A.data :accessList AS access_list,\n        A.data,\n        A.data: blobVersionedHashes::ARRAY AS blob_versioned_hashes,\n        utils.udf_hex_to_int(A.data: maxFeePerGas::STRING)::INT AS max_fee_per_blob_gas,\n        block_timestamp,\n        CASE\n            WHEN block_timestamp IS NULL\n            OR tx_status IS NULL THEN TRUE\n            ELSE FALSE\n        END AS is_pending,\n        r.gas_used,\n        tx_success,\n        tx_status,\n        cumulative_gas_used,\n        effective_gas_price,\n        utils.udf_hex_to_int(A.data :gasPrice) * power(10, -18) * r.gas_used AS tx_fee_precise,\n        COALESCE(tx_fee_precise::FLOAT, 0) AS tx_fee,\n        r.type as tx_type,\n        r.blob_gas_used,\n        r.blob_gas_price,\n    FROM\n        raw_transactions AS A\n        LEFT JOIN blocks AS b on b.block_number = A.block_number\n        LEFT JOIN receipts AS r on r.tx_hash = A.data :hash::STRING\n),\nlogs AS (\n    \n    SELECT\n        r.block_number,\n        txs.block_timestamp,\n        r.tx_hash,\n        txs.origin_function_signature,\n        r.from_address AS origin_from_address,\n        r.to_address AS origin_to_address,\n        utils.udf_hex_to_int(v.VALUE :logIndex::STRING)::INT AS event_index,\n        v.VALUE :address::STRING AS contract_address,\n        v.VALUE :blockHash::STRING AS block_hash,\n        v.VALUE :data::STRING AS DATA,\n        v.VALUE :removed::BOOLEAN AS event_removed,\n        v.VALUE :topics AS topics,\n        r.tx_status,\n        CASE\n            WHEN txs.block_timestamp IS NULL\n            OR txs.origin_function_signature IS NULL THEN TRUE\n            ELSE FALSE\n        END AS is_pending,\n    FROM\n        receipts AS r\n        LEFT JOIN transactions AS txs on txs.tx_hash = r.tx_hash,\n        lateral flatten(r.logs) v\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    event_index,\n    contract_address,\n    topics,\n    DATA,\n    event_removed,\n    tx_status,\n    CONCAT(\n        tx_hash :: STRING,\n        '-',\n        event_index :: STRING\n    ) AS _log_id,\n    md5(\n        cast(\n            coalesce(\n                cast(tx_hash as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) || '-' || coalesce(\n                cast(event_index as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) as TEXT\n        )\n    ) AS fact_event_logs_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM logs\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_fact_decoded_event_logs(\n            block_height INTEGER,\n            to_latest BOOLEAN\n    )\n    COPY GRANTS\n    RETURNS TABLE(block_number INTEGER, block_timestamp TIMESTAMP_NTZ, tx_hash STRING, event_index INTEGER, contract_address STRING, event_name STRING, decoded_log OBJECT, full_decoded_log VARIANT, fact_decoded_event_logs_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the decoded event logs data for a given block height. If to_latest is true, it will continue fetching blocks until the latest block. Otherwise, it will fetch blocks until the block height is reached.$$\n\n    AS\n    $$\n    \nWITH _ez_decoded_event_logs AS (\n    \n    WITH _fact_event_logs AS (\n        \n        WITH spine AS (\n            \n                WITH heights AS (\n                    \n                    SELECT\n                        ethereum_mainnet.udf_rpc('eth_blockNumber', []) as result,\n                        utils.udf_hex_to_int(result)::integer AS latest_block_height,\n                        COALESCE(\n                            block_height,\n                            latest_block_height\n                        ) AS min_height,\n                        iff(\n                            COALESCE(to_latest, false),\n                            latest_block_height,\n                            min_height\n                        ) AS max_height\n            ),\n                block_spine AS (\n                    SELECT\n                        ROW_NUMBER() OVER (\n                            ORDER BY\n                                NULL\n                        ) - 1 + COALESCE(block_height, latest_block_height)::integer AS block_number,\n                        min_height,\n                        IFF(\n                            COALESCE(to_latest, false),\n                            block_height,\n                            min_height\n                        ) AS max_height,\n                        latest_block_height\n                    FROM\n                        TABLE(generator(ROWCOUNT => 1000)),\n                        heights qualify block_number BETWEEN min_height\n                        AND max_height\n                )\n\n                SELECT\n                    CEIL(ROW_NUMBER() OVER (ORDER BY block_number) / 5) AS batch_id,\n                    block_number,\n                    latest_block_height\n                FROM block_spine\n        ),\n        raw_block_txs AS (\n            \n            WITH blocks_agg AS (\n                SELECT\n                    batch_id,\n                    ARRAY_AGG(\n                        utils.udf_json_rpc_call(\n                            'eth_getBlockByNumber',\n                            [utils.udf_int_to_hex(block_number), true]\n                        )\n                    ) AS params\n                FROM\n                    spine\n                GROUP BY batch_id\n            ), result as (\n                SELECT\n                    \n                live.udf_api(\n                    '{endpoint}'\n                    ,params\n                    ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n                )::VARIANT:data::ARRAY AS data\n\n                FROM blocks_agg\n            )\n            , flattened as (\n                SELECT\n                    COALESCE(value:result, {'error':value:error}) AS result\n                FROM result, LATERAL FLATTEN(input => result.data) v\n            )\n\n            SELECT\n                utils.udf_hex_to_int(result:number::STRING)::INT AS block_number,\n                result as data\n            FROM flattened\n        ),\n        raw_receipts AS (\n            \n            WITH blocks_agg AS (\n                SELECT\n                    batch_id,\n                    latest_block_height,\n                    ARRAY_AGG(\n                        utils.udf_json_rpc_call(\n                            'eth_getBlockReceipts',\n                            [utils.udf_int_to_hex(block_number)]\n                        )\n                    ) AS params\n                FROM\n                    spine\n                GROUP BY 1,2\n            ),\n\n            get_batch_result AS (\n                SELECT\n                    latest_block_height,\n                    \n                live.udf_api(\n                    '{endpoint}'\n                    ,params\n                    ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n                )::VARIANT:data::ARRAY AS data\n\n                FROM blocks_agg\n            )\n\n            SELECT\n                latest_block_height,\n                utils.udf_hex_to_int(w.value:blockNumber::STRING)::INT AS block_number,\n                w.value AS DATA\n            FROM\n                (SELECT\n                    latest_block_height,\n                    v.value:result AS DATA\n                FROM get_batch_result,\n                    LATERAL FLATTEN(data) v), LATERAL FLATTEN(data) w\n        ),\n        raw_logs AS (\n            \n            SELECT\n                r.block_number,\n                v.value\n            FROM\n                raw_receipts AS r,\n                lateral flatten(r.data:logs) v\n        ),\n        raw_transactions AS (\n            \n            SELECT\n                block_number,\n                v.value as DATA\n            FROM\n                raw_block_txs AS r,\n                lateral flatten(r.data:transactions) v\n        ),\n        blocks AS (\n            \n            SELECT\n                block_number,\n                utils.udf_hex_to_int(DATA:timestamp::STRING)::TIMESTAMP AS block_timestamp,\n                utils.udf_hex_to_int(DATA:baseFeePerGas::STRING)::INT AS base_fee_per_gas,\n                utils.udf_hex_to_int(DATA:difficulty::STRING)::INT AS difficulty,\n                DATA:extraData::STRING AS extra_data,\n                utils.udf_hex_to_int(DATA:gasLimit::STRING)::INT AS gas_limit,\n                utils.udf_hex_to_int(DATA:gasUsed::STRING)::INT AS gas_used,\n                DATA:hash::STRING AS HASH,\n                DATA:logsBloom::STRING AS logs_bloom,\n                DATA:miner::STRING AS miner,\n                utils.udf_hex_to_int(DATA:nonce::STRING)::INT AS nonce,\n                utils.udf_hex_to_int(DATA:number::STRING)::INT AS NUMBER,\n                DATA:parentHash::STRING AS parent_hash,\n                DATA:receiptsRoot::STRING AS receipts_root,\n                DATA:sha3Uncles::STRING AS sha3_uncles,\n                utils.udf_hex_to_int(DATA:size::STRING)::INT AS SIZE,\n                DATA:stateRoot::STRING AS state_root,\n                utils.udf_hex_to_int(DATA:totalDifficulty::STRING)::INT AS total_difficulty,\n                ARRAY_SIZE(DATA:transactions) AS tx_count,\n                DATA:transactionsRoot::STRING AS transactions_root,\n                DATA:uncles AS uncles,\n                DATA:withdrawals AS withdrawals,\n                DATA:withdrawalsRoot::STRING AS withdrawals_root,\n                md5(\n                    CAST(\n                        COALESCE(\n                            CAST(block_number AS TEXT),\n                            '_dbt_utils_surrogate_key_null_'\n                        ) AS TEXT\n                    )\n                ) AS blocks_id,\n                utils.udf_hex_to_int(DATA:blobGasUsed::STRING)::INT AS blob_gas_used,\n                utils.udf_hex_to_int(DATA:excessBlobGas::STRING)::INT AS excess_blob_gas\n            FROM\n                raw_block_txs\n        ),\n        receipts AS (\n            \n            SELECT\n                latest_block_height,\n                block_number,\n                DATA :blockHash::STRING AS block_hash,\n                utils.udf_hex_to_int(DATA :blockNumber::STRING)::INT AS blockNumber,\n                utils.udf_hex_to_int(DATA :cumulativeGasUsed::STRING)::INT AS cumulative_gas_used,\n                utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT / pow(10, 9) AS effective_gas_price,\n                DATA :from::STRING AS from_address,\n                utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS gas_used,\n                DATA :logs AS logs,\n                DATA :logsBloom::STRING AS logs_bloom,\n                utils.udf_hex_to_int(DATA :status::STRING)::INT AS status,\n                CASE\n                    WHEN status = 1 THEN TRUE\n                    ELSE FALSE\n                END AS tx_success,\n                CASE\n                    WHEN status = 1 THEN 'SUCCESS'\n                    ELSE 'FAIL'\n                END AS tx_status,\n                DATA :to::STRING AS to_address1,\n                CASE\n                    WHEN to_address1 = '' THEN NULL\n                    ELSE to_address1\n                END AS to_address,\n                DATA :transactionHash::STRING AS tx_hash,\n                utils.udf_hex_to_int(DATA :transactionIndex::STRING)::INT AS POSITION,\n                utils.udf_hex_to_int(DATA :type::STRING)::INT AS TYPE,\n                utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT AS blob_gas_price,\n                utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS blob_gas_used\n            FROM\n                raw_receipts\n        ),\n        transactions AS (\n            \n            SELECT\n                A.block_number AS block_number,\n                A.data :blockHash::STRING AS block_hash,\n                utils.udf_hex_to_int(A.data :blockNumber::STRING)::INT AS blockNumber,\n                utils.udf_hex_to_int(A.data :chainId::STRING)::INT AS chain_id,\n                A.data :from::STRING AS from_address,\n                utils.udf_hex_to_int(A.data :gas::STRING)::INT AS gas,\n                utils.udf_hex_to_int(A.data :gasPrice::STRING)::INT / pow(10, 9) AS gas_price,\n                A.data :hash::STRING AS tx_hash,\n                A.data :input::STRING AS input_data,\n                SUBSTR(input_data, 1, 10) AS origin_function_signature,\n                utils.udf_hex_to_int(A.data :maxFeePerGas::STRING)::INT / pow(10, 9) AS max_fee_per_gas,\n                utils.udf_hex_to_int(\n                    A.data :maxPriorityFeePerGas::STRING\n                )::INT / pow(10, 9) AS max_priority_fee_per_gas,\n                utils.udf_hex_to_int(A.data :nonce::STRING)::INT AS nonce,\n                A.data :r::STRING AS r,\n                A.data :s::STRING AS s,\n                A.data :to::STRING AS to_address1,\n                utils.udf_hex_to_int(A.data :transactionIndex::STRING)::INT AS POSITION,\n                A.data :type::STRING AS TYPE,\n                A.data :v::STRING AS v,\n                utils.udf_hex_to_int(A.data :value::STRING) AS value_precise_raw,\n                value_precise_raw * power(10, -18) AS value_precise,\n                value_precise::FLOAT AS VALUE,\n                A.data :accessList AS access_list,\n                A.data,\n                A.data: blobVersionedHashes::ARRAY AS blob_versioned_hashes,\n                utils.udf_hex_to_int(A.data: maxFeePerGas::STRING)::INT AS max_fee_per_blob_gas,\n                block_timestamp,\n                CASE\n                    WHEN block_timestamp IS NULL\n                    OR tx_status IS NULL THEN TRUE\n                    ELSE FALSE\n                END AS is_pending,\n                r.gas_used,\n                tx_success,\n                tx_status,\n                cumulative_gas_used,\n                effective_gas_price,\n                utils.udf_hex_to_int(A.data :gasPrice) * power(10, -18) * r.gas_used AS tx_fee_precise,\n                COALESCE(tx_fee_precise::FLOAT, 0) AS tx_fee,\n                r.type as tx_type,\n                r.blob_gas_used,\n                r.blob_gas_price,\n            FROM\n                raw_transactions AS A\n                LEFT JOIN blocks AS b on b.block_number = A.block_number\n                LEFT JOIN receipts AS r on r.tx_hash = A.data :hash::STRING\n        ),\n        logs AS (\n            \n            SELECT\n                r.block_number,\n                txs.block_timestamp,\n                r.tx_hash,\n                txs.origin_function_signature,\n                r.from_address AS origin_from_address,\n                r.to_address AS origin_to_address,\n                utils.udf_hex_to_int(v.VALUE :logIndex::STRING)::INT AS event_index,\n                v.VALUE :address::STRING AS contract_address,\n                v.VALUE :blockHash::STRING AS block_hash,\n                v.VALUE :data::STRING AS DATA,\n                v.VALUE :removed::BOOLEAN AS event_removed,\n                v.VALUE :topics AS topics,\n                r.tx_status,\n                CASE\n                    WHEN txs.block_timestamp IS NULL\n                    OR txs.origin_function_signature IS NULL THEN TRUE\n                    ELSE FALSE\n                END AS is_pending,\n            FROM\n                receipts AS r\n                LEFT JOIN transactions AS txs on txs.tx_hash = r.tx_hash,\n                lateral flatten(r.logs) v\n        )\n        SELECT\n            block_number,\n            block_timestamp,\n            tx_hash,\n            origin_function_signature,\n            origin_from_address,\n            origin_to_address,\n            event_index,\n            contract_address,\n            topics,\n            DATA,\n            event_removed,\n            tx_status,\n            CONCAT(\n                tx_hash :: STRING,\n                '-',\n                event_index :: STRING\n            ) AS _log_id,\n            md5(\n                cast(\n                    coalesce(\n                        cast(tx_hash as TEXT),\n                        '_dbt_utils_surrogate_key_null_'\n                    ) || '-' || coalesce(\n                        cast(event_index as TEXT),\n                        '_dbt_utils_surrogate_key_null_'\n                    ) as TEXT\n                )\n            ) AS fact_event_logs_id,\n            SYSDATE() AS inserted_timestamp,\n            SYSDATE() AS modified_timestamp\n        FROM logs\n    ),\n\n    _silver_decoded_logs AS (\n        SELECT\n            block_number,\n            block_timestamp,\n            tx_hash,\n            origin_function_signature,\n            origin_from_address,\n            origin_to_address,\n            event_index,\n            topics,\n            DATA,\n            contract_address,\n            OBJECT_CONSTRUCT('topics', topics, 'data', data, 'address', contract_address) AS event_data,\n            abi,\n            utils.udf_evm_decode_log(abi, event_data)[0] AS decoded_data,\n            event_removed,\n            decoded_data:name::string AS event_name,\n            ethereum.utils.udf_transform_logs(decoded_data) AS transformed,\n            _log_id,\n            inserted_timestamp,\n            tx_status\n        FROM\n            _fact_event_logs\n        JOIN\n            ethereum.core.dim_contract_abis\n        USING\n            (contract_address)\n        WHERE\n            tx_status = 'SUCCESS'\n    ),\n\n    _flatten_logs AS (\n        SELECT\n            b.tx_hash,\n            b.block_number,\n            b.event_index,\n            b.event_name,\n            b.contract_address,\n            b.decoded_data,\n            b.transformed,\n            b._log_id,\n            b.inserted_timestamp,\n            OBJECT_AGG(\n                DISTINCT CASE\n                    WHEN v.value :name = '' THEN CONCAT(\n                        'anonymous_',\n                        v.index\n                    )\n                    ELSE v.value :name\n                END,\n                v.value :value\n            ) AS decoded_flat\n        FROM\n            _silver_decoded_logs b,\n            LATERAL FLATTEN(\n                input => b.transformed :data\n            ) v\n        GROUP BY\n            b.tx_hash,\n            b.block_number,\n            b.event_index,\n            b.event_name,\n            b.contract_address,\n            b.decoded_data,\n            b.transformed,\n            b._log_id,\n            b.inserted_timestamp\n    )\n\n    SELECT\n        block_number,\n        C.block_timestamp,\n        B.tx_hash,\n        B.event_index,\n        B.contract_address,\n        D.name AS contract_name,\n        B.event_name,\n        B.decoded_flat AS decoded_log,\n        B.decoded_data AS full_decoded_log,\n        C.origin_function_signature,\n        C.origin_from_address,\n        C.origin_to_address,\n        C.topics,\n        C.DATA,\n        C.event_removed,\n        C.tx_status,\n        md5(_log_id) AS fact_decoded_event_logs_id,\n        SYSDATE() AS inserted_timestamp,\n        SYSDATE() AS modified_timestamp\n    FROM _flatten_logs AS B\n    LEFT JOIN _silver_decoded_logs AS C USING (block_number, _log_id)\n    LEFT JOIN ethereum.core.dim_contracts AS D\n        ON B.contract_address = D.address\n)\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_index,\n    contract_address,\n    event_name,\n    decoded_log,\n    full_decoded_log,\n    fact_decoded_event_logs_id,\n    inserted_timestamp,\n    modified_timestamp\nFROM _ez_decoded_event_logs\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_fact_decoded_traces(\n            block_height INTEGER,\n            to_latest BOOLEAN\n    )\n    COPY GRANTS\n    RETURNS TABLE(block_number INTEGER, tx_hash STRING, block_timestamp TIMESTAMP_NTZ, tx_status STRING, tx_position INTEGER, trace_index INTEGER, from_address STRING, to_address STRING, VALUE FLOAT, value_precise_raw STRING, value_precise STRING, gas INTEGER, gas_used INTEGER, TYPE STRING, identifier STRING, sub_traces INTEGER, error_reason STRING, trace_status STRING, input STRING, output STRING, function_name STRING, decoded_input_data VARIANT, decoded_output_data VARIANT, fact_decoded_traces_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the decoded traces data for a given block height. If to_latest is true,\n it will continue fetching blocks until the latest block. Otherwise,\n it will fetch blocks until the block height is reached.$$\n\n    AS\n    $$\n    \nWITH spine AS (\n    \n        WITH heights AS (\n            \n            SELECT\n                ethereum_mainnet.udf_rpc('eth_blockNumber', []) as result,\n                utils.udf_hex_to_int(result)::integer AS latest_block_height,\n                COALESCE(\n                    block_height,\n                    latest_block_height\n                ) AS min_height,\n                iff(\n                    COALESCE(to_latest, false),\n                    latest_block_height,\n                    min_height\n                ) AS max_height\n    ),\n        block_spine AS (\n            SELECT\n                ROW_NUMBER() OVER (\n                    ORDER BY\n                        NULL\n                ) - 1 + COALESCE(block_height, latest_block_height)::integer AS block_number,\n                min_height,\n                IFF(\n                    COALESCE(to_latest, false),\n                    block_height,\n                    min_height\n                ) AS max_height,\n                latest_block_height\n            FROM\n                TABLE(generator(ROWCOUNT => 1000)),\n                heights qualify block_number BETWEEN min_height\n                AND max_height\n        )\n\n        SELECT\n            CEIL(ROW_NUMBER() OVER (ORDER BY block_number) / 5) AS batch_id,\n            block_number,\n            latest_block_height\n        FROM block_spine\n),\nraw_receipts AS (\n    \n    WITH blocks_agg AS (\n        SELECT\n            batch_id,\n            latest_block_height,\n            ARRAY_AGG(\n                utils.udf_json_rpc_call(\n                    'eth_getBlockReceipts',\n                    [utils.udf_int_to_hex(block_number)]\n                )\n            ) AS params\n        FROM\n            spine\n        GROUP BY 1,2\n    ),\n\n    get_batch_result AS (\n        SELECT\n            latest_block_height,\n            \n        live.udf_api(\n            '{endpoint}'\n            ,params\n            ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n        )::VARIANT:data::ARRAY AS data\n\n        FROM blocks_agg\n    )\n\n    SELECT\n        latest_block_height,\n        utils.udf_hex_to_int(w.value:blockNumber::STRING)::INT AS block_number,\n        w.value AS DATA\n    FROM\n        (SELECT\n            latest_block_height,\n            v.value:result AS DATA\n        FROM get_batch_result,\n            LATERAL FLATTEN(data) v), LATERAL FLATTEN(data) w\n),\nraw_block_txs AS (\n    \n    WITH blocks_agg AS (\n        SELECT\n            batch_id,\n            ARRAY_AGG(\n                utils.udf_json_rpc_call(\n                    'eth_getBlockByNumber',\n                    [utils.udf_int_to_hex(block_number), true]\n                )\n            ) AS params\n        FROM\n            spine\n        GROUP BY batch_id\n    ), result as (\n        SELECT\n            \n        live.udf_api(\n            '{endpoint}'\n            ,params\n            ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n        )::VARIANT:data::ARRAY AS data\n\n        FROM blocks_agg\n    )\n    , flattened as (\n        SELECT\n            COALESCE(value:result, {'error':value:error}) AS result\n        FROM result, LATERAL FLATTEN(input => result.data) v\n    )\n\n    SELECT\n        utils.udf_hex_to_int(result:number::STRING)::INT AS block_number,\n        result as data\n    FROM flattened\n),\nraw_transactions AS (\n    \n    SELECT\n        block_number,\n        v.value as DATA\n    FROM\n        raw_block_txs AS r,\n        lateral flatten(r.data:transactions) v\n),\nblocks AS (\n    \n    SELECT\n        block_number,\n        utils.udf_hex_to_int(DATA:timestamp::STRING)::TIMESTAMP AS block_timestamp,\n        utils.udf_hex_to_int(DATA:baseFeePerGas::STRING)::INT AS base_fee_per_gas,\n        utils.udf_hex_to_int(DATA:difficulty::STRING)::INT AS difficulty,\n        DATA:extraData::STRING AS extra_data,\n        utils.udf_hex_to_int(DATA:gasLimit::STRING)::INT AS gas_limit,\n        utils.udf_hex_to_int(DATA:gasUsed::STRING)::INT AS gas_used,\n        DATA:hash::STRING AS HASH,\n        DATA:logsBloom::STRING AS logs_bloom,\n        DATA:miner::STRING AS miner,\n        utils.udf_hex_to_int(DATA:nonce::STRING)::INT AS nonce,\n        utils.udf_hex_to_int(DATA:number::STRING)::INT AS NUMBER,\n        DATA:parentHash::STRING AS parent_hash,\n        DATA:receiptsRoot::STRING AS receipts_root,\n        DATA:sha3Uncles::STRING AS sha3_uncles,\n        utils.udf_hex_to_int(DATA:size::STRING)::INT AS SIZE,\n        DATA:stateRoot::STRING AS state_root,\n        utils.udf_hex_to_int(DATA:totalDifficulty::STRING)::INT AS total_difficulty,\n        ARRAY_SIZE(DATA:transactions) AS tx_count,\n        DATA:transactionsRoot::STRING AS transactions_root,\n        DATA:uncles AS uncles,\n        DATA:withdrawals AS withdrawals,\n        DATA:withdrawalsRoot::STRING AS withdrawals_root,\n        md5(\n            CAST(\n                COALESCE(\n                    CAST(block_number AS TEXT),\n                    '_dbt_utils_surrogate_key_null_'\n                ) AS TEXT\n            )\n        ) AS blocks_id,\n        utils.udf_hex_to_int(DATA:blobGasUsed::STRING)::INT AS blob_gas_used,\n        utils.udf_hex_to_int(DATA:excessBlobGas::STRING)::INT AS excess_blob_gas\n    FROM\n        raw_block_txs\n),\nreceipts AS (\n    \n    SELECT\n        latest_block_height,\n        block_number,\n        DATA :blockHash::STRING AS block_hash,\n        utils.udf_hex_to_int(DATA :blockNumber::STRING)::INT AS blockNumber,\n        utils.udf_hex_to_int(DATA :cumulativeGasUsed::STRING)::INT AS cumulative_gas_used,\n        utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT / pow(10, 9) AS effective_gas_price,\n        DATA :from::STRING AS from_address,\n        utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS gas_used,\n        DATA :logs AS logs,\n        DATA :logsBloom::STRING AS logs_bloom,\n        utils.udf_hex_to_int(DATA :status::STRING)::INT AS status,\n        CASE\n            WHEN status = 1 THEN TRUE\n            ELSE FALSE\n        END AS tx_success,\n        CASE\n            WHEN status = 1 THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        DATA :to::STRING AS to_address1,\n        CASE\n            WHEN to_address1 = '' THEN NULL\n            ELSE to_address1\n        END AS to_address,\n        DATA :transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(DATA :transactionIndex::STRING)::INT AS POSITION,\n        utils.udf_hex_to_int(DATA :type::STRING)::INT AS TYPE,\n        utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT AS blob_gas_price,\n        utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS blob_gas_used\n    FROM\n        raw_receipts\n),\ntransactions AS (\n    \n    SELECT\n        A.block_number AS block_number,\n        A.data :blockHash::STRING AS block_hash,\n        utils.udf_hex_to_int(A.data :blockNumber::STRING)::INT AS blockNumber,\n        utils.udf_hex_to_int(A.data :chainId::STRING)::INT AS chain_id,\n        A.data :from::STRING AS from_address,\n        utils.udf_hex_to_int(A.data :gas::STRING)::INT AS gas,\n        utils.udf_hex_to_int(A.data :gasPrice::STRING)::INT / pow(10, 9) AS gas_price,\n        A.data :hash::STRING AS tx_hash,\n        A.data :input::STRING AS input_data,\n        SUBSTR(input_data, 1, 10) AS origin_function_signature,\n        utils.udf_hex_to_int(A.data :maxFeePerGas::STRING)::INT / pow(10, 9) AS max_fee_per_gas,\n        utils.udf_hex_to_int(\n            A.data :maxPriorityFeePerGas::STRING\n        )::INT / pow(10, 9) AS max_priority_fee_per_gas,\n        utils.udf_hex_to_int(A.data :nonce::STRING)::INT AS nonce,\n        A.data :r::STRING AS r,\n        A.data :s::STRING AS s,\n        A.data :to::STRING AS to_address1,\n        utils.udf_hex_to_int(A.data :transactionIndex::STRING)::INT AS POSITION,\n        A.data :type::STRING AS TYPE,\n        A.data :v::STRING AS v,\n        utils.udf_hex_to_int(A.data :value::STRING) AS value_precise_raw,\n        value_precise_raw * power(10, -18) AS value_precise,\n        value_precise::FLOAT AS VALUE,\n        A.data :accessList AS access_list,\n        A.data,\n        A.data: blobVersionedHashes::ARRAY AS blob_versioned_hashes,\n        utils.udf_hex_to_int(A.data: maxFeePerGas::STRING)::INT AS max_fee_per_blob_gas,\n        block_timestamp,\n        CASE\n            WHEN block_timestamp IS NULL\n            OR tx_status IS NULL THEN TRUE\n            ELSE FALSE\n        END AS is_pending,\n        r.gas_used,\n        tx_success,\n        tx_status,\n        cumulative_gas_used,\n        effective_gas_price,\n        utils.udf_hex_to_int(A.data :gasPrice) * power(10, -18) * r.gas_used AS tx_fee_precise,\n        COALESCE(tx_fee_precise::FLOAT, 0) AS tx_fee,\n        r.type as tx_type,\n        r.blob_gas_used,\n        r.blob_gas_price,\n    FROM\n        raw_transactions AS A\n        LEFT JOIN blocks AS b on b.block_number = A.block_number\n        LEFT JOIN receipts AS r on r.tx_hash = A.data :hash::STRING\n),\nraw_traces AS (\n    \n    WITH blocks_agg AS (\n        SELECT\n            batch_id,\n            ARRAY_AGG(\n                utils.udf_json_rpc_call(\n                    'debug_traceBlockByNumber',\n                    [utils.udf_int_to_hex(s.block_number), {'tracer': 'callTracer'}],\n                    s.block_number -- to put block_number in the id to retrieve the block numberlater\n                )\n            ) AS params\n        FROM\n            spine s\n        GROUP BY batch_id\n    ), result as (\n        SELECT\n            \n        live.udf_api(\n            '{endpoint}'\n            ,params\n            ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n        )::VARIANT:data::ARRAY AS data\n\n        FROM blocks_agg\n    ), flattened as (\n        SELECT\n            value:id::INT AS block_number,\n            COALESCE(value:result, {'error':value:error}) AS result\n        FROM result, LATERAL FLATTEN(input => result.data) v\n    )\n\n    SELECT\n        s.block_number,\n        v.index::INT AS tx_position, -- mimic's streamline's logic to add tx_position\n        v.value:result AS full_traces,\n        SYSDATE() AS _inserted_timestamp\n    FROM flattened s,\n    LATERAL FLATTEN(input => result) v\n),\n\n\n    flatten_traces AS (\n        SELECT\n            block_number,\n            tx_position,\n            IFF(\n                path IN (\n                    'result',\n                    'result.value',\n                    'result.type',\n                    'result.to',\n                    'result.input',\n                    'result.gasUsed',\n                    'result.gas',\n                    'result.from',\n                    'result.output',\n                    'result.error',\n                    'result.revertReason',\n                    'gasUsed',\n                    'gas',\n                    'type',\n                    'to',\n                    'from',\n                    'value',\n                    'input',\n                    'error',\n                    'output',\n                    'revertReason'\n                ),\n                'ORIGIN',\n                REGEXP_REPLACE(REGEXP_REPLACE(path, '[^0-9]+', '_'), '^_|_$', '')\n            ) AS trace_address,\n            _inserted_timestamp,\n            OBJECT_AGG(\n                key,\n                VALUE\n            ) AS trace_json,\n            CASE\n                WHEN trace_address = 'ORIGIN' THEN NULL\n                WHEN POSITION(\n                    '_' IN trace_address\n                ) = 0 THEN 'ORIGIN'\n                ELSE REGEXP_REPLACE(\n                    trace_address,\n                    '_[0-9]+$',\n                    '',\n                    1,\n                    1\n                )\n            END AS parent_trace_address,\n            SPLIT(\n                trace_address,\n                '_'\n            ) AS str_array\n        FROM\n            raw_traces,\n            TABLE(\n                FLATTEN(\n                    input => PARSE_JSON(full_traces),\n                    recursive => TRUE\n                )\n            ) f\n        WHERE\n            f.index IS NULL\n            AND f.key != 'calls'\n            AND f.path != 'result'\n        GROUP BY\n            block_number,\n            tx_position,\n            trace_address,\n            _inserted_timestamp\n    ),\n    sub_traces AS (\n        SELECT\n            block_number,\n            tx_position,\n            parent_trace_address,\n            COUNT(*) AS sub_traces\n        FROM\n            flatten_traces\n        GROUP BY\n            block_number,\n            tx_position,\n            parent_trace_address\n    ),\n    num_array AS (\n        SELECT\n            block_number,\n            tx_position,\n            trace_address,\n            ARRAY_AGG(flat_value) AS num_array\n        FROM\n            (\n                SELECT\n                    block_number,\n                    tx_position,\n                    trace_address,\n                    IFF(\n                        VALUE :: STRING = 'ORIGIN',\n                        -1,\n                        VALUE :: INT\n                    ) AS flat_value\n                FROM\n                    flatten_traces,\n                    LATERAL FLATTEN (\n                        input => str_array\n                    )\n            )\n        GROUP BY\n            block_number,\n            tx_position,\n            trace_address\n    ),\n    cleaned_traces AS (\n        SELECT\n            b.block_number,\n            b.tx_position,\n            b.trace_address,\n            IFNULL(\n                sub_traces,\n                0\n            ) AS sub_traces,\n            num_array,\n            ROW_NUMBER() over (\n                PARTITION BY b.block_number,\n                b.tx_position\n                ORDER BY\n                    num_array ASC\n            ) - 1 AS trace_index,\n            trace_json,\n            b._inserted_timestamp\n        FROM\n            flatten_traces b\n            LEFT JOIN sub_traces s\n            ON b.block_number = s.block_number\n            AND b.tx_position = s.tx_position\n            AND b.trace_address = s.parent_trace_address\n            JOIN num_array n\n            ON b.block_number = n.block_number\n            AND b.tx_position = n.tx_position\n            AND b.trace_address = n.trace_address\n    ),\n    final_traces AS (\n        SELECT\n            tx_position,\n            trace_index,\n            block_number,\n            trace_address,\n            trace_json :error :: STRING AS error_reason,\n            trace_json :from :: STRING AS from_address,\n            trace_json :to :: STRING AS to_address,\n            IFNULL(\n                utils.udf_hex_to_int(\n                    trace_json :value :: STRING\n                ),\n                '0'\n            ) AS eth_value_precise_raw,\n            ethereum.utils.udf_decimal_adjust(\n                eth_value_precise_raw,\n                18\n            ) AS eth_value_precise,\n            eth_value_precise :: FLOAT AS eth_value,\n            utils.udf_hex_to_int(\n                trace_json :gas :: STRING\n            ) :: INT AS gas,\n            utils.udf_hex_to_int(\n                trace_json :gasUsed :: STRING\n            ) :: INT AS gas_used,\n            trace_json :input :: STRING AS input,\n            trace_json :output :: STRING AS output,\n            trace_json :type :: STRING AS TYPE,\n            concat_ws(\n                '_',\n                TYPE,\n                trace_address\n            ) AS identifier,\n            concat_ws(\n                '-',\n                block_number,\n                tx_position,\n                identifier\n            ) AS _call_id,\n            _inserted_timestamp,\n            trace_json AS DATA,\n            sub_traces\n        FROM\n            cleaned_traces\n    ),\n    new_records AS (\n        SELECT\n            f.block_number,\n            t.tx_hash,\n            t.block_timestamp,\n            t.tx_status,\n            f.tx_position,\n            f.trace_index,\n            f.from_address,\n            f.to_address,\n            f.eth_value_precise_raw,\n            f.eth_value_precise,\n            f.eth_value,\n            f.gas,\n            f.gas_used,\n            f.input,\n            f.output,\n            f.type,\n            f.identifier,\n            f.sub_traces,\n            f.error_reason,\n            IFF(\n                f.error_reason IS NULL,\n                'SUCCESS',\n                'FAIL'\n            ) AS trace_status,\n            f.data,\n            IFF(\n                t.tx_hash IS NULL\n                OR t.block_timestamp IS NULL\n                OR t.tx_status IS NULL,\n                TRUE,\n                FALSE\n            ) AS is_pending,\n            f._call_id,\n            f._inserted_timestamp\n        FROM\n            final_traces f\n            LEFT OUTER JOIN transactions t\n            ON f.tx_position = t.position\n            AND f.block_number = t.block_number\n    ),\n    traces_final AS (\n        SELECT\n            block_number,\n            tx_hash,\n            block_timestamp,\n            tx_status,\n            tx_position,\n            trace_index,\n            from_address,\n            to_address,\n            eth_value_precise_raw,\n            eth_value_precise,\n            eth_value,\n            gas,\n            gas_used,\n            input,\n            output,\n            TYPE,\n            identifier,\n            sub_traces,\n            error_reason,\n            trace_status,\n            DATA,\n            is_pending,\n            _call_id,\n            _inserted_timestamp\n        FROM\n            new_records\n    )\n,\n\ndecoded_traces AS (\n    SELECT\n        t.block_number,\n        t.tx_hash,\n        t.block_timestamp,\n        t.tx_status,\n        t.tx_position,\n        t.trace_index,\n        t.from_address,\n        t.to_address,\n        t.eth_value AS VALUE,\n        t.eth_value_precise_raw AS value_precise_raw,\n        t.eth_value_precise AS value_precise,\n        t.gas,\n        t.gas_used,\n        t.TYPE AS TYPE,\n        t.identifier,\n        t.sub_traces,\n        t.error_reason,\n        t.trace_status,\n        A.abi AS abi,\n        A.function_name AS function_name,\n        CASE\n            WHEN TYPE = 'DELEGATECALL' THEN from_address\n            ELSE to_address\n        END AS abi_address,\n        t.input AS input,\n        COALESCE(\n            t.output,\n            '0x'\n        ) AS output,\n        OBJECT_CONSTRUCT('input', input, 'output', output, 'function_name', function_name) AS function_data,\n        utils.udf_evm_decode_trace(abi, function_data)[0] AS decoded_data\n    FROM traces_final t\n    INNER JOIN ethereum.SILVER.COMPLETE_FUNCTION_ABIS A\n        ON A.parent_contract_address = abi_address\n        AND LEFT(\n            t.input,\n            10\n        ) = LEFT(\n            A.function_signature,\n            10\n        )\n        AND t.block_number BETWEEN A.start_block\n        AND A.end_block\n    AND t.block_number IS NOT NULL\n\n)\n\nSELECT\n    block_number,\n    tx_hash,\n    block_timestamp,\n    tx_status,\n    tx_position,\n    trace_index,\n    from_address,\n    to_address,\n    VALUE,\n    value_precise_raw,\n    value_precise,\n    gas,\n    gas_used,\n    TYPE,\n    identifier,\n    sub_traces,\n    error_reason,\n    trace_status,\n    input,\n    output,\n    decoded_data :function_name :: STRING AS function_name,\n    decoded_data :decoded_input_data AS decoded_input_data,\n    decoded_data :decoded_output_data AS decoded_output_data,\n    md5(\n        cast(\n            coalesce(\n                cast(tx_hash as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) || '-' || coalesce(\n                cast(trace_index as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) as TEXT\n        )\n    ) AS fact_decoded_traces_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM decoded_traces\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_fact_traces(\n            block_height INTEGER,\n            to_latest BOOLEAN\n    )\n    COPY GRANTS\n    RETURNS TABLE(tx_hash STRING, block_number NUMBER, block_timestamp TIMESTAMP_NTZ(9), from_address STRING, to_address STRING, value FLOAT, value_precise_raw STRING, value_precise STRING, gas NUMBER, gas_used NUMBER, input STRING, output STRING, TYPE STRING, identifier STRING, DATA OBJECT, tx_status STRING, sub_traces NUMBER, trace_status STRING, error_reason STRING, trace_index NUMBER, fact_traces_id STRING, inserted_timestamp TIMESTAMP_NTZ(9), modified_timestamp TIMESTAMP_NTZ(9))\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the traces for a given block height. If to_latest is true, it will continue fetching traces until the latest block. Otherwise, it will fetch traces until the block height is reached.$$\n\n    AS\n    $$\n    \nWITH spine AS (\n    \n        WITH heights AS (\n            \n            SELECT\n                ethereum_mainnet.udf_rpc('eth_blockNumber', []) as result,\n                utils.udf_hex_to_int(result)::integer AS latest_block_height,\n                COALESCE(\n                    block_height,\n                    latest_block_height\n                ) AS min_height,\n                iff(\n                    COALESCE(to_latest, false),\n                    latest_block_height,\n                    min_height\n                ) AS max_height\n    ),\n        block_spine AS (\n            SELECT\n                ROW_NUMBER() OVER (\n                    ORDER BY\n                        NULL\n                ) - 1 + COALESCE(block_height, latest_block_height)::integer AS block_number,\n                min_height,\n                IFF(\n                    COALESCE(to_latest, false),\n                    block_height,\n                    min_height\n                ) AS max_height,\n                latest_block_height\n            FROM\n                TABLE(generator(ROWCOUNT => 1000)),\n                heights qualify block_number BETWEEN min_height\n                AND max_height\n        )\n\n        SELECT\n            CEIL(ROW_NUMBER() OVER (ORDER BY block_number) / 10) AS batch_id,\n            block_number,\n            latest_block_height\n        FROM block_spine\n),\nraw_receipts AS (\n    \n    WITH blocks_agg AS (\n        SELECT\n            batch_id,\n            latest_block_height,\n            ARRAY_AGG(\n                utils.udf_json_rpc_call(\n                    'eth_getBlockReceipts',\n                    [utils.udf_int_to_hex(block_number)]\n                )\n            ) AS params\n        FROM\n            spine\n        GROUP BY 1,2\n    ),\n\n    get_batch_result AS (\n        SELECT\n            latest_block_height,\n            \n        live.udf_api(\n            '{endpoint}'\n            ,params\n            ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n        )::VARIANT:data::ARRAY AS data\n\n        FROM blocks_agg\n    )\n\n    SELECT\n        latest_block_height,\n        utils.udf_hex_to_int(w.value:blockNumber::STRING)::INT AS block_number,\n        w.value AS DATA\n    FROM\n        (SELECT\n            latest_block_height,\n            v.value:result AS DATA\n        FROM get_batch_result,\n            LATERAL FLATTEN(data) v), LATERAL FLATTEN(data) w\n),\nraw_block_txs AS (\n    \n    WITH blocks_agg AS (\n        SELECT\n            batch_id,\n            ARRAY_AGG(\n                utils.udf_json_rpc_call(\n                    'eth_getBlockByNumber',\n                    [utils.udf_int_to_hex(block_number), true]\n                )\n            ) AS params\n        FROM\n            spine\n        GROUP BY batch_id\n    ), result as (\n        SELECT\n            \n        live.udf_api(\n            '{endpoint}'\n            ,params\n            ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n        )::VARIANT:data::ARRAY AS data\n\n        FROM blocks_agg\n    )\n    , flattened as (\n        SELECT\n            COALESCE(value:result, {'error':value:error}) AS result\n        FROM result, LATERAL FLATTEN(input => result.data) v\n    )\n\n    SELECT\n        utils.udf_hex_to_int(result:number::STRING)::INT AS block_number,\n        result as data\n    FROM flattened\n),\nraw_transactions AS (\n    \n    SELECT\n        block_number,\n        v.value as DATA\n    FROM\n        raw_block_txs AS r,\n        lateral flatten(r.data:transactions) v\n),\nblocks AS (\n    \n    SELECT\n        block_number,\n        utils.udf_hex_to_int(DATA:timestamp::STRING)::TIMESTAMP AS block_timestamp,\n        utils.udf_hex_to_int(DATA:baseFeePerGas::STRING)::INT AS base_fee_per_gas,\n        utils.udf_hex_to_int(DATA:difficulty::STRING)::INT AS difficulty,\n        DATA:extraData::STRING AS extra_data,\n        utils.udf_hex_to_int(DATA:gasLimit::STRING)::INT AS gas_limit,\n        utils.udf_hex_to_int(DATA:gasUsed::STRING)::INT AS gas_used,\n        DATA:hash::STRING AS HASH,\n        DATA:logsBloom::STRING AS logs_bloom,\n        DATA:miner::STRING AS miner,\n        utils.udf_hex_to_int(DATA:nonce::STRING)::INT AS nonce,\n        utils.udf_hex_to_int(DATA:number::STRING)::INT AS NUMBER,\n        DATA:parentHash::STRING AS parent_hash,\n        DATA:receiptsRoot::STRING AS receipts_root,\n        DATA:sha3Uncles::STRING AS sha3_uncles,\n        utils.udf_hex_to_int(DATA:size::STRING)::INT AS SIZE,\n        DATA:stateRoot::STRING AS state_root,\n        utils.udf_hex_to_int(DATA:totalDifficulty::STRING)::INT AS total_difficulty,\n        ARRAY_SIZE(DATA:transactions) AS tx_count,\n        DATA:transactionsRoot::STRING AS transactions_root,\n        DATA:uncles AS uncles,\n        DATA:withdrawals AS withdrawals,\n        DATA:withdrawalsRoot::STRING AS withdrawals_root,\n        md5(\n            CAST(\n                COALESCE(\n                    CAST(block_number AS TEXT),\n                    '_dbt_utils_surrogate_key_null_'\n                ) AS TEXT\n            )\n        ) AS blocks_id,\n        utils.udf_hex_to_int(DATA:blobGasUsed::STRING)::INT AS blob_gas_used,\n        utils.udf_hex_to_int(DATA:excessBlobGas::STRING)::INT AS excess_blob_gas\n    FROM\n        raw_block_txs\n),\nreceipts AS (\n    \n    SELECT\n        latest_block_height,\n        block_number,\n        DATA :blockHash::STRING AS block_hash,\n        utils.udf_hex_to_int(DATA :blockNumber::STRING)::INT AS blockNumber,\n        utils.udf_hex_to_int(DATA :cumulativeGasUsed::STRING)::INT AS cumulative_gas_used,\n        utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT / pow(10, 9) AS effective_gas_price,\n        DATA :from::STRING AS from_address,\n        utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS gas_used,\n        DATA :logs AS logs,\n        DATA :logsBloom::STRING AS logs_bloom,\n        utils.udf_hex_to_int(DATA :status::STRING)::INT AS status,\n        CASE\n            WHEN status = 1 THEN TRUE\n            ELSE FALSE\n        END AS tx_success,\n        CASE\n            WHEN status = 1 THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        DATA :to::STRING AS to_address1,\n        CASE\n            WHEN to_address1 = '' THEN NULL\n            ELSE to_address1\n        END AS to_address,\n        DATA :transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(DATA :transactionIndex::STRING)::INT AS POSITION,\n        utils.udf_hex_to_int(DATA :type::STRING)::INT AS TYPE,\n        utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT AS blob_gas_price,\n        utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS blob_gas_used\n    FROM\n        raw_receipts\n),\ntransactions AS (\n    \n    SELECT\n        A.block_number AS block_number,\n        A.data :blockHash::STRING AS block_hash,\n        utils.udf_hex_to_int(A.data :blockNumber::STRING)::INT AS blockNumber,\n        utils.udf_hex_to_int(A.data :chainId::STRING)::INT AS chain_id,\n        A.data :from::STRING AS from_address,\n        utils.udf_hex_to_int(A.data :gas::STRING)::INT AS gas,\n        utils.udf_hex_to_int(A.data :gasPrice::STRING)::INT / pow(10, 9) AS gas_price,\n        A.data :hash::STRING AS tx_hash,\n        A.data :input::STRING AS input_data,\n        SUBSTR(input_data, 1, 10) AS origin_function_signature,\n        utils.udf_hex_to_int(A.data :maxFeePerGas::STRING)::INT / pow(10, 9) AS max_fee_per_gas,\n        utils.udf_hex_to_int(\n            A.data :maxPriorityFeePerGas::STRING\n        )::INT / pow(10, 9) AS max_priority_fee_per_gas,\n        utils.udf_hex_to_int(A.data :nonce::STRING)::INT AS nonce,\n        A.data :r::STRING AS r,\n        A.data :s::STRING AS s,\n        A.data :to::STRING AS to_address1,\n        utils.udf_hex_to_int(A.data :transactionIndex::STRING)::INT AS POSITION,\n        A.data :type::STRING AS TYPE,\n        A.data :v::STRING AS v,\n        utils.udf_hex_to_int(A.data :value::STRING) AS value_precise_raw,\n        value_precise_raw * power(10, -18) AS value_precise,\n        value_precise::FLOAT AS VALUE,\n        A.data :accessList AS access_list,\n        A.data,\n        A.data: blobVersionedHashes::ARRAY AS blob_versioned_hashes,\n        utils.udf_hex_to_int(A.data: maxFeePerGas::STRING)::INT AS max_fee_per_blob_gas,\n        block_timestamp,\n        CASE\n            WHEN block_timestamp IS NULL\n            OR tx_status IS NULL THEN TRUE\n            ELSE FALSE\n        END AS is_pending,\n        r.gas_used,\n        tx_success,\n        tx_status,\n        cumulative_gas_used,\n        effective_gas_price,\n        utils.udf_hex_to_int(A.data :gasPrice) * power(10, -18) * r.gas_used AS tx_fee_precise,\n        COALESCE(tx_fee_precise::FLOAT, 0) AS tx_fee,\n        r.type as tx_type,\n        r.blob_gas_used,\n        r.blob_gas_price,\n    FROM\n        raw_transactions AS A\n        LEFT JOIN blocks AS b on b.block_number = A.block_number\n        LEFT JOIN receipts AS r on r.tx_hash = A.data :hash::STRING\n),\nraw_traces AS (\n    \n    WITH blocks_agg AS (\n        SELECT\n            batch_id,\n            ARRAY_AGG(\n                utils.udf_json_rpc_call(\n                    'debug_traceBlockByNumber',\n                    [utils.udf_int_to_hex(s.block_number), {'tracer': 'callTracer'}],\n                    s.block_number -- to put block_number in the id to retrieve the block numberlater\n                )\n            ) AS params\n        FROM\n            spine s\n        GROUP BY batch_id\n    ), result as (\n        SELECT\n            \n        live.udf_api(\n            '{endpoint}'\n            ,params\n            ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n        )::VARIANT:data::ARRAY AS data\n\n        FROM blocks_agg\n    ), flattened as (\n        SELECT\n            value:id::INT AS block_number,\n            COALESCE(value:result, {'error':value:error}) AS result\n        FROM result, LATERAL FLATTEN(input => result.data) v\n    )\n\n    SELECT\n        s.block_number,\n        v.index::INT AS tx_position, -- mimic's streamline's logic to add tx_position\n        v.value:result AS full_traces,\n        SYSDATE() AS _inserted_timestamp\n    FROM flattened s,\n    LATERAL FLATTEN(input => result) v\n),\n\n\n    flatten_traces AS (\n        SELECT\n            block_number,\n            tx_position,\n            IFF(\n                path IN (\n                    'result',\n                    'result.value',\n                    'result.type',\n                    'result.to',\n                    'result.input',\n                    'result.gasUsed',\n                    'result.gas',\n                    'result.from',\n                    'result.output',\n                    'result.error',\n                    'result.revertReason',\n                    'gasUsed',\n                    'gas',\n                    'type',\n                    'to',\n                    'from',\n                    'value',\n                    'input',\n                    'error',\n                    'output',\n                    'revertReason'\n                ),\n                'ORIGIN',\n                REGEXP_REPLACE(REGEXP_REPLACE(path, '[^0-9]+', '_'), '^_|_$', '')\n            ) AS trace_address,\n            _inserted_timestamp,\n            OBJECT_AGG(\n                key,\n                VALUE\n            ) AS trace_json,\n            CASE\n                WHEN trace_address = 'ORIGIN' THEN NULL\n                WHEN POSITION(\n                    '_' IN trace_address\n                ) = 0 THEN 'ORIGIN'\n                ELSE REGEXP_REPLACE(\n                    trace_address,\n                    '_[0-9]+$',\n                    '',\n                    1,\n                    1\n                )\n            END AS parent_trace_address,\n            SPLIT(\n                trace_address,\n                '_'\n            ) AS str_array\n        FROM\n            raw_traces,\n            TABLE(\n                FLATTEN(\n                    input => PARSE_JSON(full_traces),\n                    recursive => TRUE\n                )\n            ) f\n        WHERE\n            f.index IS NULL\n            AND f.key != 'calls'\n            AND f.path != 'result'\n        GROUP BY\n            block_number,\n            tx_position,\n            trace_address,\n            _inserted_timestamp\n    ),\n    sub_traces AS (\n        SELECT\n            block_number,\n            tx_position,\n            parent_trace_address,\n            COUNT(*) AS sub_traces\n        FROM\n            flatten_traces\n        GROUP BY\n            block_number,\n            tx_position,\n            parent_trace_address\n    ),\n    num_array AS (\n        SELECT\n            block_number,\n            tx_position,\n            trace_address,\n            ARRAY_AGG(flat_value) AS num_array\n        FROM\n            (\n                SELECT\n                    block_number,\n                    tx_position,\n                    trace_address,\n                    IFF(\n                        VALUE :: STRING = 'ORIGIN',\n                        -1,\n                        VALUE :: INT\n                    ) AS flat_value\n                FROM\n                    flatten_traces,\n                    LATERAL FLATTEN (\n                        input => str_array\n                    )\n            )\n        GROUP BY\n            block_number,\n            tx_position,\n            trace_address\n    ),\n    cleaned_traces AS (\n        SELECT\n            b.block_number,\n            b.tx_position,\n            b.trace_address,\n            IFNULL(\n                sub_traces,\n                0\n            ) AS sub_traces,\n            num_array,\n            ROW_NUMBER() over (\n                PARTITION BY b.block_number,\n                b.tx_position\n                ORDER BY\n                    num_array ASC\n            ) - 1 AS trace_index,\n            trace_json,\n            b._inserted_timestamp\n        FROM\n            flatten_traces b\n            LEFT JOIN sub_traces s\n            ON b.block_number = s.block_number\n            AND b.tx_position = s.tx_position\n            AND b.trace_address = s.parent_trace_address\n            JOIN num_array n\n            ON b.block_number = n.block_number\n            AND b.tx_position = n.tx_position\n            AND b.trace_address = n.trace_address\n    ),\n    final_traces AS (\n        SELECT\n            tx_position,\n            trace_index,\n            block_number,\n            trace_address,\n            trace_json :error :: STRING AS error_reason,\n            trace_json :from :: STRING AS from_address,\n            trace_json :to :: STRING AS to_address,\n            IFNULL(\n                utils.udf_hex_to_int(\n                    trace_json :value :: STRING\n                ),\n                '0'\n            ) AS eth_value_precise_raw,\n            ethereum.utils.udf_decimal_adjust(\n                eth_value_precise_raw,\n                18\n            ) AS eth_value_precise,\n            eth_value_precise :: FLOAT AS eth_value,\n            utils.udf_hex_to_int(\n                trace_json :gas :: STRING\n            ) :: INT AS gas,\n            utils.udf_hex_to_int(\n                trace_json :gasUsed :: STRING\n            ) :: INT AS gas_used,\n            trace_json :input :: STRING AS input,\n            trace_json :output :: STRING AS output,\n            trace_json :type :: STRING AS TYPE,\n            concat_ws(\n                '_',\n                TYPE,\n                trace_address\n            ) AS identifier,\n            concat_ws(\n                '-',\n                block_number,\n                tx_position,\n                identifier\n            ) AS _call_id,\n            _inserted_timestamp,\n            trace_json AS DATA,\n            sub_traces\n        FROM\n            cleaned_traces\n    ),\n    new_records AS (\n        SELECT\n            f.block_number,\n            t.tx_hash,\n            t.block_timestamp,\n            t.tx_status,\n            f.tx_position,\n            f.trace_index,\n            f.from_address,\n            f.to_address,\n            f.eth_value_precise_raw,\n            f.eth_value_precise,\n            f.eth_value,\n            f.gas,\n            f.gas_used,\n            f.input,\n            f.output,\n            f.type,\n            f.identifier,\n            f.sub_traces,\n            f.error_reason,\n            IFF(\n                f.error_reason IS NULL,\n                'SUCCESS',\n                'FAIL'\n            ) AS trace_status,\n            f.data,\n            IFF(\n                t.tx_hash IS NULL\n                OR t.block_timestamp IS NULL\n                OR t.tx_status IS NULL,\n                TRUE,\n                FALSE\n            ) AS is_pending,\n            f._call_id,\n            f._inserted_timestamp\n        FROM\n            final_traces f\n            LEFT OUTER JOIN transactions t\n            ON f.tx_position = t.position\n            AND f.block_number = t.block_number\n    ),\n    traces_final AS (\n        SELECT\n            block_number,\n            tx_hash,\n            block_timestamp,\n            tx_status,\n            tx_position,\n            trace_index,\n            from_address,\n            to_address,\n            eth_value_precise_raw,\n            eth_value_precise,\n            eth_value,\n            gas,\n            gas_used,\n            input,\n            output,\n            TYPE,\n            identifier,\n            sub_traces,\n            error_reason,\n            trace_status,\n            DATA,\n            is_pending,\n            _call_id,\n            _inserted_timestamp\n        FROM\n            new_records\n    )\nSELECT\n    tx_hash,\n    block_number,\n    block_timestamp,\n    from_address,\n    to_address,\n    eth_value AS VALUE,\n    eth_value_precise_raw AS value_precise_raw,\n    eth_value_precise AS value_precise,\n    gas,\n    gas_used,\n    input,\n    output,\n    TYPE,\n    identifier,\n    DATA,\n    tx_status,\n    sub_traces,\n    trace_status,\n    error_reason,\n    trace_index,\n    md5(\n        cast(\n            coalesce(\n                cast(tx_hash as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) || '-' || coalesce(\n                cast(trace_index as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) as TEXT\n        )\n    ) as fact_traces_id,\n    COALESCE(\n        _inserted_timestamp,\n        '2000-01-01'\n    ) AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM traces_final\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_fact_transactions(\n            block_height INTEGER,\n            to_latest BOOLEAN\n    )\n    COPY GRANTS\n    RETURNS TABLE(block_number NUMBER, block_timestamp TIMESTAMP_NTZ, block_hash STRING, tx_hash STRING, nonce NUMBER, POSITION NUMBER, origin_function_signature STRING, from_address STRING, to_address STRING, VALUE FLOAT, value_precise_raw STRING, value_precise STRING, tx_fee FLOAT, tx_fee_precise STRING, gas_price FLOAT, gas_limit NUMBER, gas_used NUMBER, cumulative_gas_used NUMBER, input_data STRING, status STRING, effective_gas_price FLOAT, max_fee_per_gas FLOAT, max_priority_fee_per_gas FLOAT, r STRING, s STRING, v STRING, tx_type NUMBER, chain_id NUMBER, blob_versioned_hashes ARRAY, max_fee_per_blob_gas NUMBER, blob_gas_used NUMBER, blob_gas_price NUMBER, fact_transactions_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the transactions for a given block height. If to_latest is true, it will continue fetching transactions until the latest block. Otherwise, it will fetch transactions until the block height is reached.$$\n\n    AS\n    $$\n    \n\nWITH spine AS (\n    \n        WITH heights AS (\n            \n            SELECT\n                ethereum_mainnet.udf_rpc('eth_blockNumber', []) as result,\n                utils.udf_hex_to_int(result)::integer AS latest_block_height,\n                COALESCE(\n                    block_height,\n                    latest_block_height\n                ) AS min_height,\n                iff(\n                    COALESCE(to_latest, false),\n                    latest_block_height,\n                    min_height\n                ) AS max_height\n    ),\n        block_spine AS (\n            SELECT\n                ROW_NUMBER() OVER (\n                    ORDER BY\n                        NULL\n                ) - 1 + COALESCE(block_height, latest_block_height)::integer AS block_number,\n                min_height,\n                IFF(\n                    COALESCE(to_latest, false),\n                    block_height,\n                    min_height\n                ) AS max_height,\n                latest_block_height\n            FROM\n                TABLE(generator(ROWCOUNT => 1000)),\n                heights qualify block_number BETWEEN min_height\n                AND max_height\n        )\n\n        SELECT\n            CEIL(ROW_NUMBER() OVER (ORDER BY block_number) / 5) AS batch_id,\n            block_number,\n            latest_block_height\n        FROM block_spine\n),\nraw_receipts AS (\n    \n    WITH blocks_agg AS (\n        SELECT\n            batch_id,\n            latest_block_height,\n            ARRAY_AGG(\n                utils.udf_json_rpc_call(\n                    'eth_getBlockReceipts',\n                    [utils.udf_int_to_hex(block_number)]\n                )\n            ) AS params\n        FROM\n            spine\n        GROUP BY 1,2\n    ),\n\n    get_batch_result AS (\n        SELECT\n            latest_block_height,\n            \n        live.udf_api(\n            '{endpoint}'\n            ,params\n            ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n        )::VARIANT:data::ARRAY AS data\n\n        FROM blocks_agg\n    )\n\n    SELECT\n        latest_block_height,\n        utils.udf_hex_to_int(w.value:blockNumber::STRING)::INT AS block_number,\n        w.value AS DATA\n    FROM\n        (SELECT\n            latest_block_height,\n            v.value:result AS DATA\n        FROM get_batch_result,\n            LATERAL FLATTEN(data) v), LATERAL FLATTEN(data) w\n),\nraw_block_txs AS (\n    \n    WITH blocks_agg AS (\n        SELECT\n            batch_id,\n            ARRAY_AGG(\n                utils.udf_json_rpc_call(\n                    'eth_getBlockByNumber',\n                    [utils.udf_int_to_hex(block_number), true]\n                )\n            ) AS params\n        FROM\n            spine\n        GROUP BY batch_id\n    ), result as (\n        SELECT\n            \n        live.udf_api(\n            '{endpoint}'\n            ,params\n            ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n        )::VARIANT:data::ARRAY AS data\n\n        FROM blocks_agg\n    )\n    , flattened as (\n        SELECT\n            COALESCE(value:result, {'error':value:error}) AS result\n        FROM result, LATERAL FLATTEN(input => result.data) v\n    )\n\n    SELECT\n        utils.udf_hex_to_int(result:number::STRING)::INT AS block_number,\n        result as data\n    FROM flattened\n),\nraw_transactions AS (\n    \n    SELECT\n        block_number,\n        v.value as DATA\n    FROM\n        raw_block_txs AS r,\n        lateral flatten(r.data:transactions) v\n),\nblocks AS (\n    \n    SELECT\n        block_number,\n        utils.udf_hex_to_int(DATA:timestamp::STRING)::TIMESTAMP AS block_timestamp,\n        utils.udf_hex_to_int(DATA:baseFeePerGas::STRING)::INT AS base_fee_per_gas,\n        utils.udf_hex_to_int(DATA:difficulty::STRING)::INT AS difficulty,\n        DATA:extraData::STRING AS extra_data,\n        utils.udf_hex_to_int(DATA:gasLimit::STRING)::INT AS gas_limit,\n        utils.udf_hex_to_int(DATA:gasUsed::STRING)::INT AS gas_used,\n        DATA:hash::STRING AS HASH,\n        DATA:logsBloom::STRING AS logs_bloom,\n        DATA:miner::STRING AS miner,\n        utils.udf_hex_to_int(DATA:nonce::STRING)::INT AS nonce,\n        utils.udf_hex_to_int(DATA:number::STRING)::INT AS NUMBER,\n        DATA:parentHash::STRING AS parent_hash,\n        DATA:receiptsRoot::STRING AS receipts_root,\n        DATA:sha3Uncles::STRING AS sha3_uncles,\n        utils.udf_hex_to_int(DATA:size::STRING)::INT AS SIZE,\n        DATA:stateRoot::STRING AS state_root,\n        utils.udf_hex_to_int(DATA:totalDifficulty::STRING)::INT AS total_difficulty,\n        ARRAY_SIZE(DATA:transactions) AS tx_count,\n        DATA:transactionsRoot::STRING AS transactions_root,\n        DATA:uncles AS uncles,\n        DATA:withdrawals AS withdrawals,\n        DATA:withdrawalsRoot::STRING AS withdrawals_root,\n        md5(\n            CAST(\n                COALESCE(\n                    CAST(block_number AS TEXT),\n                    '_dbt_utils_surrogate_key_null_'\n                ) AS TEXT\n            )\n        ) AS blocks_id,\n        utils.udf_hex_to_int(DATA:blobGasUsed::STRING)::INT AS blob_gas_used,\n        utils.udf_hex_to_int(DATA:excessBlobGas::STRING)::INT AS excess_blob_gas\n    FROM\n        raw_block_txs\n),\nreceipts AS (\n    \n    SELECT\n        latest_block_height,\n        block_number,\n        DATA :blockHash::STRING AS block_hash,\n        utils.udf_hex_to_int(DATA :blockNumber::STRING)::INT AS blockNumber,\n        utils.udf_hex_to_int(DATA :cumulativeGasUsed::STRING)::INT AS cumulative_gas_used,\n        utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT / pow(10, 9) AS effective_gas_price,\n        DATA :from::STRING AS from_address,\n        utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS gas_used,\n        DATA :logs AS logs,\n        DATA :logsBloom::STRING AS logs_bloom,\n        utils.udf_hex_to_int(DATA :status::STRING)::INT AS status,\n        CASE\n            WHEN status = 1 THEN TRUE\n            ELSE FALSE\n        END AS tx_success,\n        CASE\n            WHEN status = 1 THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        DATA :to::STRING AS to_address1,\n        CASE\n            WHEN to_address1 = '' THEN NULL\n            ELSE to_address1\n        END AS to_address,\n        DATA :transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(DATA :transactionIndex::STRING)::INT AS POSITION,\n        utils.udf_hex_to_int(DATA :type::STRING)::INT AS TYPE,\n        utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT AS blob_gas_price,\n        utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS blob_gas_used\n    FROM\n        raw_receipts\n),\ntransactions AS (\n    \n    SELECT\n        A.block_number AS block_number,\n        A.data :blockHash::STRING AS block_hash,\n        utils.udf_hex_to_int(A.data :blockNumber::STRING)::INT AS blockNumber,\n        utils.udf_hex_to_int(A.data :chainId::STRING)::INT AS chain_id,\n        A.data :from::STRING AS from_address,\n        utils.udf_hex_to_int(A.data :gas::STRING)::INT AS gas,\n        utils.udf_hex_to_int(A.data :gasPrice::STRING)::INT / pow(10, 9) AS gas_price,\n        A.data :hash::STRING AS tx_hash,\n        A.data :input::STRING AS input_data,\n        SUBSTR(input_data, 1, 10) AS origin_function_signature,\n        utils.udf_hex_to_int(A.data :maxFeePerGas::STRING)::INT / pow(10, 9) AS max_fee_per_gas,\n        utils.udf_hex_to_int(\n            A.data :maxPriorityFeePerGas::STRING\n        )::INT / pow(10, 9) AS max_priority_fee_per_gas,\n        utils.udf_hex_to_int(A.data :nonce::STRING)::INT AS nonce,\n        A.data :r::STRING AS r,\n        A.data :s::STRING AS s,\n        A.data :to::STRING AS to_address1,\n        utils.udf_hex_to_int(A.data :transactionIndex::STRING)::INT AS POSITION,\n        A.data :type::STRING AS TYPE,\n        A.data :v::STRING AS v,\n        utils.udf_hex_to_int(A.data :value::STRING) AS value_precise_raw,\n        value_precise_raw * power(10, -18) AS value_precise,\n        value_precise::FLOAT AS VALUE,\n        A.data :accessList AS access_list,\n        A.data,\n        A.data: blobVersionedHashes::ARRAY AS blob_versioned_hashes,\n        utils.udf_hex_to_int(A.data: maxFeePerGas::STRING)::INT AS max_fee_per_blob_gas,\n        block_timestamp,\n        CASE\n            WHEN block_timestamp IS NULL\n            OR tx_status IS NULL THEN TRUE\n            ELSE FALSE\n        END AS is_pending,\n        r.gas_used,\n        tx_success,\n        tx_status,\n        cumulative_gas_used,\n        effective_gas_price,\n        utils.udf_hex_to_int(A.data :gasPrice) * power(10, -18) * r.gas_used AS tx_fee_precise,\n        COALESCE(tx_fee_precise::FLOAT, 0) AS tx_fee,\n        r.type as tx_type,\n        r.blob_gas_used,\n        r.blob_gas_price,\n    FROM\n        raw_transactions AS A\n        LEFT JOIN blocks AS b on b.block_number = A.block_number\n        LEFT JOIN receipts AS r on r.tx_hash = A.data :hash::STRING\n)\nSELECT\n    block_number,\n    block_timestamp,\n    block_hash,\n    tx_hash,\n    nonce,\n    POSITION,\n    origin_function_signature,\n    from_address,\n    to_address1 as to_address,\n    VALUE,\n    value_precise_raw,\n    value_precise::STRING as value_precise,\n    tx_fee,\n    tx_fee_precise::STRING as tx_fee_precise,\n    gas_price,\n    gas AS gas_limit,\n    gas_used,\n    cumulative_gas_used,\n    input_data,\n    tx_status AS status,\n    effective_gas_price,\n    max_fee_per_gas,\n    max_priority_fee_per_gas,\n    r,\n    s,\n    v,\n    tx_type,\n    chain_id,\n    blob_versioned_hashes,\n    max_fee_per_blob_gas,\n    blob_gas_used,\n    blob_gas_price,\n    md5(\n        cast(\n            coalesce(\n                cast(tx_hash as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) as TEXT\n        )\n    ) AS fact_transactions_id,\n    SYSDATE() inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    transactions\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_fact_token_balances(\n            block_height INTEGER,\n            to_latest BOOLEAN\n    )\n    COPY GRANTS\n    RETURNS TABLE(block_number NUMBER, block_timestamp TIMESTAMP_NTZ, address STRING, contract_address STRING, balance NUMBER(38,0), fact_token_balances_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token balances for a given block height. If to_latest is true, it will continue fetching transactions until the latest block. Otherwise, it will fetch transactions until the block height is reached.$$\n\n    AS\n    $$\n    \nWITH silver_token_balances AS (\n    \n    WITH silver_logs AS (\n        SELECT\n            CONCAT('0x', SUBSTR(l.topics [1] :: STRING, 27, 42)) AS address1,\n            CONCAT('0x', SUBSTR(l.topics [2] :: STRING, 27, 42)) AS address2,\n            l.contract_address,\n            l.block_timestamp,\n            l.block_number\n        FROM\n        (\n            \n        WITH spine AS (\n            \n                WITH heights AS (\n                    \n                    SELECT\n                        ethereum_mainnet.udf_rpc('eth_blockNumber', []) as result,\n                        utils.udf_hex_to_int(result)::integer AS latest_block_height,\n                        COALESCE(\n                            block_height,\n                            latest_block_height\n                        ) AS min_height,\n                        iff(\n                            COALESCE(to_latest, false),\n                            latest_block_height,\n                            min_height\n                        ) AS max_height\n            ),\n                block_spine AS (\n                    SELECT\n                        ROW_NUMBER() OVER (\n                            ORDER BY\n                                NULL\n                        ) - 1 + COALESCE(block_height, latest_block_height)::integer AS block_number,\n                        min_height,\n                        IFF(\n                            COALESCE(to_latest, false),\n                            block_height,\n                            min_height\n                        ) AS max_height,\n                        latest_block_height\n                    FROM\n                        TABLE(generator(ROWCOUNT => 1000)),\n                        heights qualify block_number BETWEEN min_height\n                        AND max_height\n                )\n\n                SELECT\n                    CEIL(ROW_NUMBER() OVER (ORDER BY block_number) / 5) AS batch_id,\n                    block_number,\n                    latest_block_height\n                FROM block_spine\n        ),\n        raw_block_txs AS (\n            \n            WITH blocks_agg AS (\n                SELECT\n                    batch_id,\n                    ARRAY_AGG(\n                        utils.udf_json_rpc_call(\n                            'eth_getBlockByNumber',\n                            [utils.udf_int_to_hex(block_number), true]\n                        )\n                    ) AS params\n                FROM\n                    spine\n                GROUP BY batch_id\n            ), result as (\n                SELECT\n                    \n                live.udf_api(\n                    '{endpoint}'\n                    ,params\n                    ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n                )::VARIANT:data::ARRAY AS data\n\n                FROM blocks_agg\n            )\n            , flattened as (\n                SELECT\n                    COALESCE(value:result, {'error':value:error}) AS result\n                FROM result, LATERAL FLATTEN(input => result.data) v\n            )\n\n            SELECT\n                utils.udf_hex_to_int(result:number::STRING)::INT AS block_number,\n                result as data\n            FROM flattened\n        ),\n        raw_receipts AS (\n            \n            WITH blocks_agg AS (\n                SELECT\n                    batch_id,\n                    latest_block_height,\n                    ARRAY_AGG(\n                        utils.udf_json_rpc_call(\n                            'eth_getBlockReceipts',\n                            [utils.udf_int_to_hex(block_number)]\n                        )\n                    ) AS params\n                FROM\n                    spine\n                GROUP BY 1,2\n            ),\n\n            get_batch_result AS (\n                SELECT\n                    latest_block_height,\n                    \n                live.udf_api(\n                    '{endpoint}'\n                    ,params\n                    ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n                )::VARIANT:data::ARRAY AS data\n\n                FROM blocks_agg\n            )\n\n            SELECT\n                latest_block_height,\n                utils.udf_hex_to_int(w.value:blockNumber::STRING)::INT AS block_number,\n                w.value AS DATA\n            FROM\n                (SELECT\n                    latest_block_height,\n                    v.value:result AS DATA\n                FROM get_batch_result,\n                    LATERAL FLATTEN(data) v), LATERAL FLATTEN(data) w\n        ),\n        raw_logs AS (\n            \n            SELECT\n                r.block_number,\n                v.value\n            FROM\n                raw_receipts AS r,\n                lateral flatten(r.data:logs) v\n        ),\n        raw_transactions AS (\n            \n            SELECT\n                block_number,\n                v.value as DATA\n            FROM\n                raw_block_txs AS r,\n                lateral flatten(r.data:transactions) v\n        ),\n        blocks AS (\n            \n            SELECT\n                block_number,\n                utils.udf_hex_to_int(DATA:timestamp::STRING)::TIMESTAMP AS block_timestamp,\n                utils.udf_hex_to_int(DATA:baseFeePerGas::STRING)::INT AS base_fee_per_gas,\n                utils.udf_hex_to_int(DATA:difficulty::STRING)::INT AS difficulty,\n                DATA:extraData::STRING AS extra_data,\n                utils.udf_hex_to_int(DATA:gasLimit::STRING)::INT AS gas_limit,\n                utils.udf_hex_to_int(DATA:gasUsed::STRING)::INT AS gas_used,\n                DATA:hash::STRING AS HASH,\n                DATA:logsBloom::STRING AS logs_bloom,\n                DATA:miner::STRING AS miner,\n                utils.udf_hex_to_int(DATA:nonce::STRING)::INT AS nonce,\n                utils.udf_hex_to_int(DATA:number::STRING)::INT AS NUMBER,\n                DATA:parentHash::STRING AS parent_hash,\n                DATA:receiptsRoot::STRING AS receipts_root,\n                DATA:sha3Uncles::STRING AS sha3_uncles,\n                utils.udf_hex_to_int(DATA:size::STRING)::INT AS SIZE,\n                DATA:stateRoot::STRING AS state_root,\n                utils.udf_hex_to_int(DATA:totalDifficulty::STRING)::INT AS total_difficulty,\n                ARRAY_SIZE(DATA:transactions) AS tx_count,\n                DATA:transactionsRoot::STRING AS transactions_root,\n                DATA:uncles AS uncles,\n                DATA:withdrawals AS withdrawals,\n                DATA:withdrawalsRoot::STRING AS withdrawals_root,\n                md5(\n                    CAST(\n                        COALESCE(\n                            CAST(block_number AS TEXT),\n                            '_dbt_utils_surrogate_key_null_'\n                        ) AS TEXT\n                    )\n                ) AS blocks_id,\n                utils.udf_hex_to_int(DATA:blobGasUsed::STRING)::INT AS blob_gas_used,\n                utils.udf_hex_to_int(DATA:excessBlobGas::STRING)::INT AS excess_blob_gas\n            FROM\n                raw_block_txs\n        ),\n        receipts AS (\n            \n            SELECT\n                latest_block_height,\n                block_number,\n                DATA :blockHash::STRING AS block_hash,\n                utils.udf_hex_to_int(DATA :blockNumber::STRING)::INT AS blockNumber,\n                utils.udf_hex_to_int(DATA :cumulativeGasUsed::STRING)::INT AS cumulative_gas_used,\n                utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT / pow(10, 9) AS effective_gas_price,\n                DATA :from::STRING AS from_address,\n                utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS gas_used,\n                DATA :logs AS logs,\n                DATA :logsBloom::STRING AS logs_bloom,\n                utils.udf_hex_to_int(DATA :status::STRING)::INT AS status,\n                CASE\n                    WHEN status = 1 THEN TRUE\n                    ELSE FALSE\n                END AS tx_success,\n                CASE\n                    WHEN status = 1 THEN 'SUCCESS'\n                    ELSE 'FAIL'\n                END AS tx_status,\n                DATA :to::STRING AS to_address1,\n                CASE\n                    WHEN to_address1 = '' THEN NULL\n                    ELSE to_address1\n                END AS to_address,\n                DATA :transactionHash::STRING AS tx_hash,\n                utils.udf_hex_to_int(DATA :transactionIndex::STRING)::INT AS POSITION,\n                utils.udf_hex_to_int(DATA :type::STRING)::INT AS TYPE,\n                utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT AS blob_gas_price,\n                utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS blob_gas_used\n            FROM\n                raw_receipts\n        ),\n        transactions AS (\n            \n            SELECT\n                A.block_number AS block_number,\n                A.data :blockHash::STRING AS block_hash,\n                utils.udf_hex_to_int(A.data :blockNumber::STRING)::INT AS blockNumber,\n                utils.udf_hex_to_int(A.data :chainId::STRING)::INT AS chain_id,\n                A.data :from::STRING AS from_address,\n                utils.udf_hex_to_int(A.data :gas::STRING)::INT AS gas,\n                utils.udf_hex_to_int(A.data :gasPrice::STRING)::INT / pow(10, 9) AS gas_price,\n                A.data :hash::STRING AS tx_hash,\n                A.data :input::STRING AS input_data,\n                SUBSTR(input_data, 1, 10) AS origin_function_signature,\n                utils.udf_hex_to_int(A.data :maxFeePerGas::STRING)::INT / pow(10, 9) AS max_fee_per_gas,\n                utils.udf_hex_to_int(\n                    A.data :maxPriorityFeePerGas::STRING\n                )::INT / pow(10, 9) AS max_priority_fee_per_gas,\n                utils.udf_hex_to_int(A.data :nonce::STRING)::INT AS nonce,\n                A.data :r::STRING AS r,\n                A.data :s::STRING AS s,\n                A.data :to::STRING AS to_address1,\n                utils.udf_hex_to_int(A.data :transactionIndex::STRING)::INT AS POSITION,\n                A.data :type::STRING AS TYPE,\n                A.data :v::STRING AS v,\n                utils.udf_hex_to_int(A.data :value::STRING) AS value_precise_raw,\n                value_precise_raw * power(10, -18) AS value_precise,\n                value_precise::FLOAT AS VALUE,\n                A.data :accessList AS access_list,\n                A.data,\n                A.data: blobVersionedHashes::ARRAY AS blob_versioned_hashes,\n                utils.udf_hex_to_int(A.data: maxFeePerGas::STRING)::INT AS max_fee_per_blob_gas,\n                block_timestamp,\n                CASE\n                    WHEN block_timestamp IS NULL\n                    OR tx_status IS NULL THEN TRUE\n                    ELSE FALSE\n                END AS is_pending,\n                r.gas_used,\n                tx_success,\n                tx_status,\n                cumulative_gas_used,\n                effective_gas_price,\n                utils.udf_hex_to_int(A.data :gasPrice) * power(10, -18) * r.gas_used AS tx_fee_precise,\n                COALESCE(tx_fee_precise::FLOAT, 0) AS tx_fee,\n                r.type as tx_type,\n                r.blob_gas_used,\n                r.blob_gas_price,\n            FROM\n                raw_transactions AS A\n                LEFT JOIN blocks AS b on b.block_number = A.block_number\n                LEFT JOIN receipts AS r on r.tx_hash = A.data :hash::STRING\n        ),\n        logs AS (\n            \n            SELECT\n                r.block_number,\n                txs.block_timestamp,\n                r.tx_hash,\n                txs.origin_function_signature,\n                r.from_address AS origin_from_address,\n                r.to_address AS origin_to_address,\n                utils.udf_hex_to_int(v.VALUE :logIndex::STRING)::INT AS event_index,\n                v.VALUE :address::STRING AS contract_address,\n                v.VALUE :blockHash::STRING AS block_hash,\n                v.VALUE :data::STRING AS DATA,\n                v.VALUE :removed::BOOLEAN AS event_removed,\n                v.VALUE :topics AS topics,\n                r.tx_status,\n                CASE\n                    WHEN txs.block_timestamp IS NULL\n                    OR txs.origin_function_signature IS NULL THEN TRUE\n                    ELSE FALSE\n                END AS is_pending,\n            FROM\n                receipts AS r\n                LEFT JOIN transactions AS txs on txs.tx_hash = r.tx_hash,\n                lateral flatten(r.logs) v\n        )\n        SELECT\n            block_number,\n            block_timestamp,\n            tx_hash,\n            origin_function_signature,\n            origin_from_address,\n            origin_to_address,\n            event_index,\n            contract_address,\n            topics,\n            DATA,\n            event_removed,\n            tx_status,\n            CONCAT(\n                tx_hash :: STRING,\n                '-',\n                event_index :: STRING\n            ) AS _log_id,\n            md5(\n                cast(\n                    coalesce(\n                        cast(tx_hash as TEXT),\n                        '_dbt_utils_surrogate_key_null_'\n                    ) || '-' || coalesce(\n                        cast(event_index as TEXT),\n                        '_dbt_utils_surrogate_key_null_'\n                    ) as TEXT\n                )\n            ) AS fact_event_logs_id,\n            SYSDATE() AS inserted_timestamp,\n            SYSDATE() AS modified_timestamp\n        FROM logs\n    ) l\n        WHERE\n            (\n                l.topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n                OR (\n                    l.topics [0] :: STRING = '0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65'\n                    AND l.contract_address = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n                )\n                OR (\n                    l.topics [0] :: STRING = '0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c'\n                    AND l.contract_address = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n                )\n            )\n    ),\n\n    transfers AS (\n        SELECT\n            DISTINCT block_number,\n            block_timestamp,\n            contract_address,\n            address1 AS address\n        FROM\n            silver_logs\n        WHERE\n            address1 IS NOT NULL\n            AND address1 <> '0x0000000000000000000000000000000000000000'\n        UNION\n        SELECT\n            DISTINCT block_number,\n            block_timestamp,\n            contract_address,\n            address2 AS address\n        FROM\n            silver_logs\n        WHERE\n            address2 IS NOT NULL\n            AND address2 <> '0x0000000000000000000000000000000000000000'\n    ),\n\n    balances AS (\n        \n        WITH block_spine AS (\n            SELECT\n                CEIL(ROW_NUMBER() OVER (ORDER BY block_number, address, contract_address) / 10) AS batch_id,\n                block_number,\n                address,\n                contract_address\n            FROM\n                transfers\n        ),\n        blocks_agg AS (\n            SELECT\n                batch_id,\n                ARRAY_AGG(\n                    utils.udf_json_rpc_call(\n                        'eth_call',\n                        ARRAY_CONSTRUCT(\n                            OBJECT_CONSTRUCT(\n                                'to',\n                                contract_address,\n                                'data',\n                                CONCAT(\n                                    '0x70a08231000000000000000000000000',\n                                    SUBSTR(\n                                        address,\n                                        3\n                                    )\n                                )\n                            ),\n                            utils.udf_int_to_hex(block_number)\n                        ),\n                        CONCAT(\n                            block_number,\n                            '-',\n                            address,\n                            '-',\n                            contract_address\n                        )\n                    )\n                ) AS params\n            FROM\n                block_spine\n            GROUP BY batch_id\n        ), result as (\n            SELECT\n                \n            live.udf_api(\n                '{endpoint}'\n                ,params\n                ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n            )::VARIANT:data::ARRAY AS data\n\n            FROM blocks_agg\n        )\n\n        SELECT\n            SPLIT(value:id::STRING, '-')[0]::INT AS block_number,\n            SPLIT(value:id::STRING, '-')[1]::STRING AS address,\n            SPLIT(value:id::STRING, '-')[2]::STRING AS contract_address,\n            COALESCE(value:result, {'error':value:error}) AS DATA\n        FROM result, LATERAL FLATTEN(input => result.data) v\n    )\n\n    SELECT\n        b.block_number,\n        block_timestamp,\n        address,\n        contract_address,\n        IFF(DATA :: STRING = '{}', NULL, DATA :: STRING) AS casted_data,\n        CASE\n            WHEN\n                LENGTH(\n                    casted_data\n                ) <= 4300\n                AND casted_data IS NOT NULL THEN LEFT(casted_data, 66)\n            ELSE NULL\n            END\n        AS hex_balance,\n        TRY_TO_NUMBER(\n            CASE\n                WHEN LENGTH(\n                    hex_balance\n                ) <= 4300\n                AND hex_balance IS NOT NULL THEN utils.udf_hex_to_int(hex_balance)\n                ELSE NULL\n            END\n        ) AS balance,\n        SYSDATE() AS _inserted_timestamp,\n        cast(\n            coalesce(\n                cast(block_number as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) || '-' ||\n            coalesce(\n                cast(address as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) || '-' ||\n            coalesce(\n                cast(contract_address as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) as TEXT\n        ) AS id,\n        id AS token_balances_id,\n        SYSDATE() AS inserted_timestamp,\n        SYSDATE() AS modified_timestamp\n    FROM balances b\n    LEFT JOIN (\n        SELECT DISTINCT block_number, block_timestamp FROM transfers\n    ) USING (block_number)\n)\n\nSELECT\n    block_number,\n    block_timestamp,\n    address AS user_address,\n    contract_address,\n    balance,\n    token_balances_id AS fact_token_balances_id,\n    inserted_timestamp,\n    modified_timestamp\nFROM\n    silver_token_balances\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_fact_eth_balances(\n            block_height INTEGER,\n            to_latest BOOLEAN\n    )\n    COPY GRANTS\n    RETURNS TABLE(block_number NUMBER, block_timestamp TIMESTAMP_NTZ, address STRING, balance NUMBER(38,0), fact_eth_balances_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the eth balances for a given block height. If to_latest is true, it will continue fetching transactions until the latest block. Otherwise, it will fetch transactions until the block height is reached.$$\n\n    AS\n    $$\n    \nWITH silver_eth_balances AS (\n    \n    WITH silver_traces AS (\n        SELECT\n            block_timestamp,\n            block_number,\n            from_address,\n            to_address\n        FROM\n        (\n            \n        WITH spine AS (\n            \n                WITH heights AS (\n                    \n                    SELECT\n                        ethereum_mainnet.udf_rpc('eth_blockNumber', []) as result,\n                        utils.udf_hex_to_int(result)::integer AS latest_block_height,\n                        COALESCE(\n                            block_height,\n                            latest_block_height\n                        ) AS min_height,\n                        iff(\n                            COALESCE(to_latest, false),\n                            latest_block_height,\n                            min_height\n                        ) AS max_height\n            ),\n                block_spine AS (\n                    SELECT\n                        ROW_NUMBER() OVER (\n                            ORDER BY\n                                NULL\n                        ) - 1 + COALESCE(block_height, latest_block_height)::integer AS block_number,\n                        min_height,\n                        IFF(\n                            COALESCE(to_latest, false),\n                            block_height,\n                            min_height\n                        ) AS max_height,\n                        latest_block_height\n                    FROM\n                        TABLE(generator(ROWCOUNT => 1000)),\n                        heights qualify block_number BETWEEN min_height\n                        AND max_height\n                )\n\n                SELECT\n                    CEIL(ROW_NUMBER() OVER (ORDER BY block_number) / 10) AS batch_id,\n                    block_number,\n                    latest_block_height\n                FROM block_spine\n        ),\n        raw_receipts AS (\n            \n            WITH blocks_agg AS (\n                SELECT\n                    batch_id,\n                    latest_block_height,\n                    ARRAY_AGG(\n                        utils.udf_json_rpc_call(\n                            'eth_getBlockReceipts',\n                            [utils.udf_int_to_hex(block_number)]\n                        )\n                    ) AS params\n                FROM\n                    spine\n                GROUP BY 1,2\n            ),\n\n            get_batch_result AS (\n                SELECT\n                    latest_block_height,\n                    \n                live.udf_api(\n                    '{endpoint}'\n                    ,params\n                    ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n                )::VARIANT:data::ARRAY AS data\n\n                FROM blocks_agg\n            )\n\n            SELECT\n                latest_block_height,\n                utils.udf_hex_to_int(w.value:blockNumber::STRING)::INT AS block_number,\n                w.value AS DATA\n            FROM\n                (SELECT\n                    latest_block_height,\n                    v.value:result AS DATA\n                FROM get_batch_result,\n                    LATERAL FLATTEN(data) v), LATERAL FLATTEN(data) w\n        ),\n        raw_block_txs AS (\n            \n            WITH blocks_agg AS (\n                SELECT\n                    batch_id,\n                    ARRAY_AGG(\n                        utils.udf_json_rpc_call(\n                            'eth_getBlockByNumber',\n                            [utils.udf_int_to_hex(block_number), true]\n                        )\n                    ) AS params\n                FROM\n                    spine\n                GROUP BY batch_id\n            ), result as (\n                SELECT\n                    \n                live.udf_api(\n                    '{endpoint}'\n                    ,params\n                    ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n                )::VARIANT:data::ARRAY AS data\n\n                FROM blocks_agg\n            )\n            , flattened as (\n                SELECT\n                    COALESCE(value:result, {'error':value:error}) AS result\n                FROM result, LATERAL FLATTEN(input => result.data) v\n            )\n\n            SELECT\n                utils.udf_hex_to_int(result:number::STRING)::INT AS block_number,\n                result as data\n            FROM flattened\n        ),\n        raw_transactions AS (\n            \n            SELECT\n                block_number,\n                v.value as DATA\n            FROM\n                raw_block_txs AS r,\n                lateral flatten(r.data:transactions) v\n        ),\n        blocks AS (\n            \n            SELECT\n                block_number,\n                utils.udf_hex_to_int(DATA:timestamp::STRING)::TIMESTAMP AS block_timestamp,\n                utils.udf_hex_to_int(DATA:baseFeePerGas::STRING)::INT AS base_fee_per_gas,\n                utils.udf_hex_to_int(DATA:difficulty::STRING)::INT AS difficulty,\n                DATA:extraData::STRING AS extra_data,\n                utils.udf_hex_to_int(DATA:gasLimit::STRING)::INT AS gas_limit,\n                utils.udf_hex_to_int(DATA:gasUsed::STRING)::INT AS gas_used,\n                DATA:hash::STRING AS HASH,\n                DATA:logsBloom::STRING AS logs_bloom,\n                DATA:miner::STRING AS miner,\n                utils.udf_hex_to_int(DATA:nonce::STRING)::INT AS nonce,\n                utils.udf_hex_to_int(DATA:number::STRING)::INT AS NUMBER,\n                DATA:parentHash::STRING AS parent_hash,\n                DATA:receiptsRoot::STRING AS receipts_root,\n                DATA:sha3Uncles::STRING AS sha3_uncles,\n                utils.udf_hex_to_int(DATA:size::STRING)::INT AS SIZE,\n                DATA:stateRoot::STRING AS state_root,\n                utils.udf_hex_to_int(DATA:totalDifficulty::STRING)::INT AS total_difficulty,\n                ARRAY_SIZE(DATA:transactions) AS tx_count,\n                DATA:transactionsRoot::STRING AS transactions_root,\n                DATA:uncles AS uncles,\n                DATA:withdrawals AS withdrawals,\n                DATA:withdrawalsRoot::STRING AS withdrawals_root,\n                md5(\n                    CAST(\n                        COALESCE(\n                            CAST(block_number AS TEXT),\n                            '_dbt_utils_surrogate_key_null_'\n                        ) AS TEXT\n                    )\n                ) AS blocks_id,\n                utils.udf_hex_to_int(DATA:blobGasUsed::STRING)::INT AS blob_gas_used,\n                utils.udf_hex_to_int(DATA:excessBlobGas::STRING)::INT AS excess_blob_gas\n            FROM\n                raw_block_txs\n        ),\n        receipts AS (\n            \n            SELECT\n                latest_block_height,\n                block_number,\n                DATA :blockHash::STRING AS block_hash,\n                utils.udf_hex_to_int(DATA :blockNumber::STRING)::INT AS blockNumber,\n                utils.udf_hex_to_int(DATA :cumulativeGasUsed::STRING)::INT AS cumulative_gas_used,\n                utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT / pow(10, 9) AS effective_gas_price,\n                DATA :from::STRING AS from_address,\n                utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS gas_used,\n                DATA :logs AS logs,\n                DATA :logsBloom::STRING AS logs_bloom,\n                utils.udf_hex_to_int(DATA :status::STRING)::INT AS status,\n                CASE\n                    WHEN status = 1 THEN TRUE\n                    ELSE FALSE\n                END AS tx_success,\n                CASE\n                    WHEN status = 1 THEN 'SUCCESS'\n                    ELSE 'FAIL'\n                END AS tx_status,\n                DATA :to::STRING AS to_address1,\n                CASE\n                    WHEN to_address1 = '' THEN NULL\n                    ELSE to_address1\n                END AS to_address,\n                DATA :transactionHash::STRING AS tx_hash,\n                utils.udf_hex_to_int(DATA :transactionIndex::STRING)::INT AS POSITION,\n                utils.udf_hex_to_int(DATA :type::STRING)::INT AS TYPE,\n                utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT AS blob_gas_price,\n                utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS blob_gas_used\n            FROM\n                raw_receipts\n        ),\n        transactions AS (\n            \n            SELECT\n                A.block_number AS block_number,\n                A.data :blockHash::STRING AS block_hash,\n                utils.udf_hex_to_int(A.data :blockNumber::STRING)::INT AS blockNumber,\n                utils.udf_hex_to_int(A.data :chainId::STRING)::INT AS chain_id,\n                A.data :from::STRING AS from_address,\n                utils.udf_hex_to_int(A.data :gas::STRING)::INT AS gas,\n                utils.udf_hex_to_int(A.data :gasPrice::STRING)::INT / pow(10, 9) AS gas_price,\n                A.data :hash::STRING AS tx_hash,\n                A.data :input::STRING AS input_data,\n                SUBSTR(input_data, 1, 10) AS origin_function_signature,\n                utils.udf_hex_to_int(A.data :maxFeePerGas::STRING)::INT / pow(10, 9) AS max_fee_per_gas,\n                utils.udf_hex_to_int(\n                    A.data :maxPriorityFeePerGas::STRING\n                )::INT / pow(10, 9) AS max_priority_fee_per_gas,\n                utils.udf_hex_to_int(A.data :nonce::STRING)::INT AS nonce,\n                A.data :r::STRING AS r,\n                A.data :s::STRING AS s,\n                A.data :to::STRING AS to_address1,\n                utils.udf_hex_to_int(A.data :transactionIndex::STRING)::INT AS POSITION,\n                A.data :type::STRING AS TYPE,\n                A.data :v::STRING AS v,\n                utils.udf_hex_to_int(A.data :value::STRING) AS value_precise_raw,\n                value_precise_raw * power(10, -18) AS value_precise,\n                value_precise::FLOAT AS VALUE,\n                A.data :accessList AS access_list,\n                A.data,\n                A.data: blobVersionedHashes::ARRAY AS blob_versioned_hashes,\n                utils.udf_hex_to_int(A.data: maxFeePerGas::STRING)::INT AS max_fee_per_blob_gas,\n                block_timestamp,\n                CASE\n                    WHEN block_timestamp IS NULL\n                    OR tx_status IS NULL THEN TRUE\n                    ELSE FALSE\n                END AS is_pending,\n                r.gas_used,\n                tx_success,\n                tx_status,\n                cumulative_gas_used,\n                effective_gas_price,\n                utils.udf_hex_to_int(A.data :gasPrice) * power(10, -18) * r.gas_used AS tx_fee_precise,\n                COALESCE(tx_fee_precise::FLOAT, 0) AS tx_fee,\n                r.type as tx_type,\n                r.blob_gas_used,\n                r.blob_gas_price,\n            FROM\n                raw_transactions AS A\n                LEFT JOIN blocks AS b on b.block_number = A.block_number\n                LEFT JOIN receipts AS r on r.tx_hash = A.data :hash::STRING\n        ),\n        raw_traces AS (\n            \n            WITH blocks_agg AS (\n                SELECT\n                    batch_id,\n                    ARRAY_AGG(\n                        utils.udf_json_rpc_call(\n                            'debug_traceBlockByNumber',\n                            [utils.udf_int_to_hex(s.block_number), {'tracer': 'callTracer'}],\n                            s.block_number -- to put block_number in the id to retrieve the block numberlater\n                        )\n                    ) AS params\n                FROM\n                    spine s\n                GROUP BY batch_id\n            ), result as (\n                SELECT\n                    \n                live.udf_api(\n                    '{endpoint}'\n                    ,params\n                    ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n                )::VARIANT:data::ARRAY AS data\n\n                FROM blocks_agg\n            ), flattened as (\n                SELECT\n                    value:id::INT AS block_number,\n                    COALESCE(value:result, {'error':value:error}) AS result\n                FROM result, LATERAL FLATTEN(input => result.data) v\n            )\n\n            SELECT\n                s.block_number,\n                v.index::INT AS tx_position, -- mimic's streamline's logic to add tx_position\n                v.value:result AS full_traces,\n                SYSDATE() AS _inserted_timestamp\n            FROM flattened s,\n            LATERAL FLATTEN(input => result) v\n        ),\n\n\n            flatten_traces AS (\n                SELECT\n                    block_number,\n                    tx_position,\n                    IFF(\n                        path IN (\n                            'result',\n                            'result.value',\n                            'result.type',\n                            'result.to',\n                            'result.input',\n                            'result.gasUsed',\n                            'result.gas',\n                            'result.from',\n                            'result.output',\n                            'result.error',\n                            'result.revertReason',\n                            'gasUsed',\n                            'gas',\n                            'type',\n                            'to',\n                            'from',\n                            'value',\n                            'input',\n                            'error',\n                            'output',\n                            'revertReason'\n                        ),\n                        'ORIGIN',\n                        REGEXP_REPLACE(REGEXP_REPLACE(path, '[^0-9]+', '_'), '^_|_$', '')\n                    ) AS trace_address,\n                    _inserted_timestamp,\n                    OBJECT_AGG(\n                        key,\n                        VALUE\n                    ) AS trace_json,\n                    CASE\n                        WHEN trace_address = 'ORIGIN' THEN NULL\n                        WHEN POSITION(\n                            '_' IN trace_address\n                        ) = 0 THEN 'ORIGIN'\n                        ELSE REGEXP_REPLACE(\n                            trace_address,\n                            '_[0-9]+$',\n                            '',\n                            1,\n                            1\n                        )\n                    END AS parent_trace_address,\n                    SPLIT(\n                        trace_address,\n                        '_'\n                    ) AS str_array\n                FROM\n                    raw_traces,\n                    TABLE(\n                        FLATTEN(\n                            input => PARSE_JSON(full_traces),\n                            recursive => TRUE\n                        )\n                    ) f\n                WHERE\n                    f.index IS NULL\n                    AND f.key != 'calls'\n                    AND f.path != 'result'\n                GROUP BY\n                    block_number,\n                    tx_position,\n                    trace_address,\n                    _inserted_timestamp\n            ),\n            sub_traces AS (\n                SELECT\n                    block_number,\n                    tx_position,\n                    parent_trace_address,\n                    COUNT(*) AS sub_traces\n                FROM\n                    flatten_traces\n                GROUP BY\n                    block_number,\n                    tx_position,\n                    parent_trace_address\n            ),\n            num_array AS (\n                SELECT\n                    block_number,\n                    tx_position,\n                    trace_address,\n                    ARRAY_AGG(flat_value) AS num_array\n                FROM\n                    (\n                        SELECT\n                            block_number,\n                            tx_position,\n                            trace_address,\n                            IFF(\n                                VALUE :: STRING = 'ORIGIN',\n                                -1,\n                                VALUE :: INT\n                            ) AS flat_value\n                        FROM\n                            flatten_traces,\n                            LATERAL FLATTEN (\n                                input => str_array\n                            )\n                    )\n                GROUP BY\n                    block_number,\n                    tx_position,\n                    trace_address\n            ),\n            cleaned_traces AS (\n                SELECT\n                    b.block_number,\n                    b.tx_position,\n                    b.trace_address,\n                    IFNULL(\n                        sub_traces,\n                        0\n                    ) AS sub_traces,\n                    num_array,\n                    ROW_NUMBER() over (\n                        PARTITION BY b.block_number,\n                        b.tx_position\n                        ORDER BY\n                            num_array ASC\n                    ) - 1 AS trace_index,\n                    trace_json,\n                    b._inserted_timestamp\n                FROM\n                    flatten_traces b\n                    LEFT JOIN sub_traces s\n                    ON b.block_number = s.block_number\n                    AND b.tx_position = s.tx_position\n                    AND b.trace_address = s.parent_trace_address\n                    JOIN num_array n\n                    ON b.block_number = n.block_number\n                    AND b.tx_position = n.tx_position\n                    AND b.trace_address = n.trace_address\n            ),\n            final_traces AS (\n                SELECT\n                    tx_position,\n                    trace_index,\n                    block_number,\n                    trace_address,\n                    trace_json :error :: STRING AS error_reason,\n                    trace_json :from :: STRING AS from_address,\n                    trace_json :to :: STRING AS to_address,\n                    IFNULL(\n                        utils.udf_hex_to_int(\n                            trace_json :value :: STRING\n                        ),\n                        '0'\n                    ) AS eth_value_precise_raw,\n                    ethereum.utils.udf_decimal_adjust(\n                        eth_value_precise_raw,\n                        18\n                    ) AS eth_value_precise,\n                    eth_value_precise :: FLOAT AS eth_value,\n                    utils.udf_hex_to_int(\n                        trace_json :gas :: STRING\n                    ) :: INT AS gas,\n                    utils.udf_hex_to_int(\n                        trace_json :gasUsed :: STRING\n                    ) :: INT AS gas_used,\n                    trace_json :input :: STRING AS input,\n                    trace_json :output :: STRING AS output,\n                    trace_json :type :: STRING AS TYPE,\n                    concat_ws(\n                        '_',\n                        TYPE,\n                        trace_address\n                    ) AS identifier,\n                    concat_ws(\n                        '-',\n                        block_number,\n                        tx_position,\n                        identifier\n                    ) AS _call_id,\n                    _inserted_timestamp,\n                    trace_json AS DATA,\n                    sub_traces\n                FROM\n                    cleaned_traces\n            ),\n            new_records AS (\n                SELECT\n                    f.block_number,\n                    t.tx_hash,\n                    t.block_timestamp,\n                    t.tx_status,\n                    f.tx_position,\n                    f.trace_index,\n                    f.from_address,\n                    f.to_address,\n                    f.eth_value_precise_raw,\n                    f.eth_value_precise,\n                    f.eth_value,\n                    f.gas,\n                    f.gas_used,\n                    f.input,\n                    f.output,\n                    f.type,\n                    f.identifier,\n                    f.sub_traces,\n                    f.error_reason,\n                    IFF(\n                        f.error_reason IS NULL,\n                        'SUCCESS',\n                        'FAIL'\n                    ) AS trace_status,\n                    f.data,\n                    IFF(\n                        t.tx_hash IS NULL\n                        OR t.block_timestamp IS NULL\n                        OR t.tx_status IS NULL,\n                        TRUE,\n                        FALSE\n                    ) AS is_pending,\n                    f._call_id,\n                    f._inserted_timestamp\n                FROM\n                    final_traces f\n                    LEFT OUTER JOIN transactions t\n                    ON f.tx_position = t.position\n                    AND f.block_number = t.block_number\n            ),\n            traces_final AS (\n                SELECT\n                    block_number,\n                    tx_hash,\n                    block_timestamp,\n                    tx_status,\n                    tx_position,\n                    trace_index,\n                    from_address,\n                    to_address,\n                    eth_value_precise_raw,\n                    eth_value_precise,\n                    eth_value,\n                    gas,\n                    gas_used,\n                    input,\n                    output,\n                    TYPE,\n                    identifier,\n                    sub_traces,\n                    error_reason,\n                    trace_status,\n                    DATA,\n                    is_pending,\n                    _call_id,\n                    _inserted_timestamp\n                FROM\n                    new_records\n            )\n        SELECT\n            tx_hash,\n            block_number,\n            block_timestamp,\n            from_address,\n            to_address,\n            eth_value AS VALUE,\n            eth_value_precise_raw AS value_precise_raw,\n            eth_value_precise AS value_precise,\n            gas,\n            gas_used,\n            input,\n            output,\n            TYPE,\n            identifier,\n            DATA,\n            tx_status,\n            sub_traces,\n            trace_status,\n            error_reason,\n            trace_index,\n            md5(\n                cast(\n                    coalesce(\n                        cast(tx_hash as TEXT),\n                        '_dbt_utils_surrogate_key_null_'\n                    ) || '-' || coalesce(\n                        cast(trace_index as TEXT),\n                        '_dbt_utils_surrogate_key_null_'\n                    ) as TEXT\n                )\n            ) as fact_traces_id,\n            COALESCE(\n                _inserted_timestamp,\n                '2000-01-01'\n            ) AS inserted_timestamp,\n            SYSDATE() AS modified_timestamp\n        FROM traces_final\n    ) l\n        WHERE\n            VALUE > 0 -- VALUE is the amount of ETH transferred\n            AND trace_status = 'SUCCESS'\n            AND tx_status = 'SUCCESS'\n    ),\n\n    stacked AS (\n        SELECT\n            DISTINCT block_number,\n            block_timestamp,\n            from_address AS address\n        FROM\n            silver_traces\n        WHERE\n            from_address IS NOT NULL\n            AND from_address <> '0x0000000000000000000000000000000000000000'\n        UNION\n        SELECT\n            DISTINCT block_number,\n            block_timestamp,\n            to_address AS address\n        FROM\n            silver_traces\n        WHERE\n            to_address IS NOT NULL\n            AND to_address <> '0x0000000000000000000000000000000000000000'\n    ),\n\n    eth_balances AS (\n        \n        WITH block_spine AS (\n            SELECT\n                CEIL(ROW_NUMBER() OVER (ORDER BY block_number, address) / 10) AS batch_id,\n                block_number,\n                address\n            FROM\n                stacked\n        ),\n        blocks_agg AS (\n            SELECT\n                batch_id,\n                ARRAY_AGG(\n                    utils.udf_json_rpc_call(\n                        'eth_getBalance',\n                        ARRAY_CONSTRUCT(address, utils.udf_int_to_hex(block_number)),\n                        CONCAT(\n                            block_number,\n                            '-',\n                            address\n                        )\n                    )\n                ) AS params\n            FROM\n                block_spine\n            GROUP BY batch_id\n        ), result as (\n            SELECT\n                \n            live.udf_api(\n                '{endpoint}'\n                ,params\n                ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n            )::VARIANT:data::ARRAY AS data\n\n            FROM blocks_agg\n        )\n\n        SELECT\n            SPLIT(value:id::STRING, '-')[0]::INT AS block_number,\n            SPLIT(value:id::STRING, '-')[1]::STRING AS address,\n            COALESCE(value:result, {'error':value:error}) AS DATA\n        FROM result, LATERAL FLATTEN(input => result.data) v\n    )\n\n    SELECT\n        block_number,\n        block_timestamp,\n        address,\n        IFF(DATA :: STRING = '{}', NULL, DATA :: STRING) AS casted_data,\n        CASE\n            WHEN casted_data IS NOT NULL THEN casted_data\n            ELSE NULL\n            END\n        AS hex_balance,\n        TRY_TO_NUMBER(\n            CASE\n                WHEN hex_balance IS NOT NULL THEN utils.udf_hex_to_int(hex_balance)\n                ELSE NULL\n            END\n        ) AS balance,\n        SYSDATE() AS _inserted_timestamp,\n        cast(\n            coalesce(\n                cast(block_number as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) || '-' ||\n            coalesce(\n                cast(address as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) as TEXT\n        ) AS id,\n        id AS eth_balances_id,\n        SYSDATE() AS inserted_timestamp,\n        SYSDATE() AS modified_timestamp\n    FROM eth_balances\n    LEFT JOIN (\n        SELECT DISTINCT block_number, block_timestamp FROM stacked\n    ) USING (block_number)\n)\n\nSELECT\n    block_number,\n    block_timestamp,\n    address AS user_address,\n    balance,\n    eth_balances_id AS fact_eth_balances_id,\n    inserted_timestamp,\n    modified_timestamp\nFROM silver_eth_balances\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_ez_decoded_event_logs(\n            block_height INTEGER,\n            to_latest BOOLEAN\n    )\n    COPY GRANTS\n    RETURNS TABLE(block_number INTEGER, block_timestamp TIMESTAMP_NTZ, tx_hash STRING, event_index INTEGER, contract_address STRING, contract_name STRING, event_name STRING, decoded_log OBJECT, full_decoded_log VARIANT, origin_function_signature STRING, origin_from_address STRING, origin_to_address STRING, topics VARIANT, data STRING, event_removed BOOLEAN, tx_status STRING, ez_decoded_event_logs_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the ez decoded event logs data for a given block height. If to_latest is true, it will continue fetching blocks until the latest block. Otherwise, it will fetch blocks until the block height is reached.$$\n\n    AS\n    $$\n    \nWITH _fact_event_logs AS (\n    \n    WITH spine AS (\n        \n            WITH heights AS (\n                \n                SELECT\n                    ethereum_mainnet.udf_rpc('eth_blockNumber', []) as result,\n                    utils.udf_hex_to_int(result)::integer AS latest_block_height,\n                    COALESCE(\n                        block_height,\n                        latest_block_height\n                    ) AS min_height,\n                    iff(\n                        COALESCE(to_latest, false),\n                        latest_block_height,\n                        min_height\n                    ) AS max_height\n        ),\n            block_spine AS (\n                SELECT\n                    ROW_NUMBER() OVER (\n                        ORDER BY\n                            NULL\n                    ) - 1 + COALESCE(block_height, latest_block_height)::integer AS block_number,\n                    min_height,\n                    IFF(\n                        COALESCE(to_latest, false),\n                        block_height,\n                        min_height\n                    ) AS max_height,\n                    latest_block_height\n                FROM\n                    TABLE(generator(ROWCOUNT => 1000)),\n                    heights qualify block_number BETWEEN min_height\n                    AND max_height\n            )\n\n            SELECT\n                CEIL(ROW_NUMBER() OVER (ORDER BY block_number) / 5) AS batch_id,\n                block_number,\n                latest_block_height\n            FROM block_spine\n    ),\n    raw_block_txs AS (\n        \n        WITH blocks_agg AS (\n            SELECT\n                batch_id,\n                ARRAY_AGG(\n                    utils.udf_json_rpc_call(\n                        'eth_getBlockByNumber',\n                        [utils.udf_int_to_hex(block_number), true]\n                    )\n                ) AS params\n            FROM\n                spine\n            GROUP BY batch_id\n        ), result as (\n            SELECT\n                \n            live.udf_api(\n                '{endpoint}'\n                ,params\n                ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n            )::VARIANT:data::ARRAY AS data\n\n            FROM blocks_agg\n        )\n        , flattened as (\n            SELECT\n                COALESCE(value:result, {'error':value:error}) AS result\n            FROM result, LATERAL FLATTEN(input => result.data) v\n        )\n\n        SELECT\n            utils.udf_hex_to_int(result:number::STRING)::INT AS block_number,\n            result as data\n        FROM flattened\n    ),\n    raw_receipts AS (\n        \n        WITH blocks_agg AS (\n            SELECT\n                batch_id,\n                latest_block_height,\n                ARRAY_AGG(\n                    utils.udf_json_rpc_call(\n                        'eth_getBlockReceipts',\n                        [utils.udf_int_to_hex(block_number)]\n                    )\n                ) AS params\n            FROM\n                spine\n            GROUP BY 1,2\n        ),\n\n        get_batch_result AS (\n            SELECT\n                latest_block_height,\n                \n            live.udf_api(\n                '{endpoint}'\n                ,params\n                ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n            )::VARIANT:data::ARRAY AS data\n\n            FROM blocks_agg\n        )\n\n        SELECT\n            latest_block_height,\n            utils.udf_hex_to_int(w.value:blockNumber::STRING)::INT AS block_number,\n            w.value AS DATA\n        FROM\n            (SELECT\n                latest_block_height,\n                v.value:result AS DATA\n            FROM get_batch_result,\n                LATERAL FLATTEN(data) v), LATERAL FLATTEN(data) w\n    ),\n    raw_logs AS (\n        \n        SELECT\n            r.block_number,\n            v.value\n        FROM\n            raw_receipts AS r,\n            lateral flatten(r.data:logs) v\n    ),\n    raw_transactions AS (\n        \n        SELECT\n            block_number,\n            v.value as DATA\n        FROM\n            raw_block_txs AS r,\n            lateral flatten(r.data:transactions) v\n    ),\n    blocks AS (\n        \n        SELECT\n            block_number,\n            utils.udf_hex_to_int(DATA:timestamp::STRING)::TIMESTAMP AS block_timestamp,\n            utils.udf_hex_to_int(DATA:baseFeePerGas::STRING)::INT AS base_fee_per_gas,\n            utils.udf_hex_to_int(DATA:difficulty::STRING)::INT AS difficulty,\n            DATA:extraData::STRING AS extra_data,\n            utils.udf_hex_to_int(DATA:gasLimit::STRING)::INT AS gas_limit,\n            utils.udf_hex_to_int(DATA:gasUsed::STRING)::INT AS gas_used,\n            DATA:hash::STRING AS HASH,\n            DATA:logsBloom::STRING AS logs_bloom,\n            DATA:miner::STRING AS miner,\n            utils.udf_hex_to_int(DATA:nonce::STRING)::INT AS nonce,\n            utils.udf_hex_to_int(DATA:number::STRING)::INT AS NUMBER,\n            DATA:parentHash::STRING AS parent_hash,\n            DATA:receiptsRoot::STRING AS receipts_root,\n            DATA:sha3Uncles::STRING AS sha3_uncles,\n            utils.udf_hex_to_int(DATA:size::STRING)::INT AS SIZE,\n            DATA:stateRoot::STRING AS state_root,\n            utils.udf_hex_to_int(DATA:totalDifficulty::STRING)::INT AS total_difficulty,\n            ARRAY_SIZE(DATA:transactions) AS tx_count,\n            DATA:transactionsRoot::STRING AS transactions_root,\n            DATA:uncles AS uncles,\n            DATA:withdrawals AS withdrawals,\n            DATA:withdrawalsRoot::STRING AS withdrawals_root,\n            md5(\n                CAST(\n                    COALESCE(\n                        CAST(block_number AS TEXT),\n                        '_dbt_utils_surrogate_key_null_'\n                    ) AS TEXT\n                )\n            ) AS blocks_id,\n            utils.udf_hex_to_int(DATA:blobGasUsed::STRING)::INT AS blob_gas_used,\n            utils.udf_hex_to_int(DATA:excessBlobGas::STRING)::INT AS excess_blob_gas\n        FROM\n            raw_block_txs\n    ),\n    receipts AS (\n        \n        SELECT\n            latest_block_height,\n            block_number,\n            DATA :blockHash::STRING AS block_hash,\n            utils.udf_hex_to_int(DATA :blockNumber::STRING)::INT AS blockNumber,\n            utils.udf_hex_to_int(DATA :cumulativeGasUsed::STRING)::INT AS cumulative_gas_used,\n            utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT / pow(10, 9) AS effective_gas_price,\n            DATA :from::STRING AS from_address,\n            utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS gas_used,\n            DATA :logs AS logs,\n            DATA :logsBloom::STRING AS logs_bloom,\n            utils.udf_hex_to_int(DATA :status::STRING)::INT AS status,\n            CASE\n                WHEN status = 1 THEN TRUE\n                ELSE FALSE\n            END AS tx_success,\n            CASE\n                WHEN status = 1 THEN 'SUCCESS'\n                ELSE 'FAIL'\n            END AS tx_status,\n            DATA :to::STRING AS to_address1,\n            CASE\n                WHEN to_address1 = '' THEN NULL\n                ELSE to_address1\n            END AS to_address,\n            DATA :transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(DATA :transactionIndex::STRING)::INT AS POSITION,\n            utils.udf_hex_to_int(DATA :type::STRING)::INT AS TYPE,\n            utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT AS blob_gas_price,\n            utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS blob_gas_used\n        FROM\n            raw_receipts\n    ),\n    transactions AS (\n        \n        SELECT\n            A.block_number AS block_number,\n            A.data :blockHash::STRING AS block_hash,\n            utils.udf_hex_to_int(A.data :blockNumber::STRING)::INT AS blockNumber,\n            utils.udf_hex_to_int(A.data :chainId::STRING)::INT AS chain_id,\n            A.data :from::STRING AS from_address,\n            utils.udf_hex_to_int(A.data :gas::STRING)::INT AS gas,\n            utils.udf_hex_to_int(A.data :gasPrice::STRING)::INT / pow(10, 9) AS gas_price,\n            A.data :hash::STRING AS tx_hash,\n            A.data :input::STRING AS input_data,\n            SUBSTR(input_data, 1, 10) AS origin_function_signature,\n            utils.udf_hex_to_int(A.data :maxFeePerGas::STRING)::INT / pow(10, 9) AS max_fee_per_gas,\n            utils.udf_hex_to_int(\n                A.data :maxPriorityFeePerGas::STRING\n            )::INT / pow(10, 9) AS max_priority_fee_per_gas,\n            utils.udf_hex_to_int(A.data :nonce::STRING)::INT AS nonce,\n            A.data :r::STRING AS r,\n            A.data :s::STRING AS s,\n            A.data :to::STRING AS to_address1,\n            utils.udf_hex_to_int(A.data :transactionIndex::STRING)::INT AS POSITION,\n            A.data :type::STRING AS TYPE,\n            A.data :v::STRING AS v,\n            utils.udf_hex_to_int(A.data :value::STRING) AS value_precise_raw,\n            value_precise_raw * power(10, -18) AS value_precise,\n            value_precise::FLOAT AS VALUE,\n            A.data :accessList AS access_list,\n            A.data,\n            A.data: blobVersionedHashes::ARRAY AS blob_versioned_hashes,\n            utils.udf_hex_to_int(A.data: maxFeePerGas::STRING)::INT AS max_fee_per_blob_gas,\n            block_timestamp,\n            CASE\n                WHEN block_timestamp IS NULL\n                OR tx_status IS NULL THEN TRUE\n                ELSE FALSE\n            END AS is_pending,\n            r.gas_used,\n            tx_success,\n            tx_status,\n            cumulative_gas_used,\n            effective_gas_price,\n            utils.udf_hex_to_int(A.data :gasPrice) * power(10, -18) * r.gas_used AS tx_fee_precise,\n            COALESCE(tx_fee_precise::FLOAT, 0) AS tx_fee,\n            r.type as tx_type,\n            r.blob_gas_used,\n            r.blob_gas_price,\n        FROM\n            raw_transactions AS A\n            LEFT JOIN blocks AS b on b.block_number = A.block_number\n            LEFT JOIN receipts AS r on r.tx_hash = A.data :hash::STRING\n    ),\n    logs AS (\n        \n        SELECT\n            r.block_number,\n            txs.block_timestamp,\n            r.tx_hash,\n            txs.origin_function_signature,\n            r.from_address AS origin_from_address,\n            r.to_address AS origin_to_address,\n            utils.udf_hex_to_int(v.VALUE :logIndex::STRING)::INT AS event_index,\n            v.VALUE :address::STRING AS contract_address,\n            v.VALUE :blockHash::STRING AS block_hash,\n            v.VALUE :data::STRING AS DATA,\n            v.VALUE :removed::BOOLEAN AS event_removed,\n            v.VALUE :topics AS topics,\n            r.tx_status,\n            CASE\n                WHEN txs.block_timestamp IS NULL\n                OR txs.origin_function_signature IS NULL THEN TRUE\n                ELSE FALSE\n            END AS is_pending,\n        FROM\n            receipts AS r\n            LEFT JOIN transactions AS txs on txs.tx_hash = r.tx_hash,\n            lateral flatten(r.logs) v\n    )\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        event_index,\n        contract_address,\n        topics,\n        DATA,\n        event_removed,\n        tx_status,\n        CONCAT(\n            tx_hash :: STRING,\n            '-',\n            event_index :: STRING\n        ) AS _log_id,\n        md5(\n            cast(\n                coalesce(\n                    cast(tx_hash as TEXT),\n                    '_dbt_utils_surrogate_key_null_'\n                ) || '-' || coalesce(\n                    cast(event_index as TEXT),\n                    '_dbt_utils_surrogate_key_null_'\n                ) as TEXT\n            )\n        ) AS fact_event_logs_id,\n        SYSDATE() AS inserted_timestamp,\n        SYSDATE() AS modified_timestamp\n    FROM logs\n),\n\n_silver_decoded_logs AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        event_index,\n        topics,\n        DATA,\n        contract_address,\n        OBJECT_CONSTRUCT('topics', topics, 'data', data, 'address', contract_address) AS event_data,\n        abi,\n        utils.udf_evm_decode_log(abi, event_data)[0] AS decoded_data,\n        event_removed,\n        decoded_data:name::string AS event_name,\n        ethereum.utils.udf_transform_logs(decoded_data) AS transformed,\n        _log_id,\n        inserted_timestamp,\n        tx_status\n    FROM\n        _fact_event_logs\n    JOIN\n        ethereum.core.dim_contract_abis\n    USING\n        (contract_address)\n    WHERE\n        tx_status = 'SUCCESS'\n),\n\n_flatten_logs AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.decoded_data,\n        b.transformed,\n        b._log_id,\n        b.inserted_timestamp,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value :name = '' THEN CONCAT(\n                    'anonymous_',\n                    v.index\n                )\n                ELSE v.value :name\n            END,\n            v.value :value\n        ) AS decoded_flat\n    FROM\n        _silver_decoded_logs b,\n        LATERAL FLATTEN(\n            input => b.transformed :data\n        ) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.decoded_data,\n        b.transformed,\n        b._log_id,\n        b.inserted_timestamp\n)\n\nSELECT\n    block_number,\n    C.block_timestamp,\n    B.tx_hash,\n    B.event_index,\n    B.contract_address,\n    D.name AS contract_name,\n    B.event_name,\n    B.decoded_flat AS decoded_log,\n    B.decoded_data AS full_decoded_log,\n    C.origin_function_signature,\n    C.origin_from_address,\n    C.origin_to_address,\n    C.topics,\n    C.DATA,\n    C.event_removed,\n    C.tx_status,\n    md5(_log_id) AS fact_decoded_event_logs_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM _flatten_logs AS B\nLEFT JOIN _silver_decoded_logs AS C USING (block_number, _log_id)\nLEFT JOIN ethereum.core.dim_contracts AS D\n    ON B.contract_address = D.address\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_ez_native_transfers(\n            block_height INTEGER,\n            to_latest BOOLEAN\n    )\n    COPY GRANTS\n    RETURNS TABLE(tx_hash STRING, block_number NUMBER(38,0), block_timestamp TIMESTAMP_NTZ(9), tx_position NUMBER(38,0), trace_index NUMBER(19,0), identifier STRING, origin_from_address STRING, origin_to_address STRING, origin_function_signature STRING, from_address STRING, to_address STRING, amount FLOAT, amount_precise_raw STRING, amount_precise STRING, amount_usd FLOAT, ez_native_transfers_id STRING, inserted_timestamp TIMESTAMP_NTZ(9), modified_timestamp TIMESTAMP_NTZ(9))\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the native transfers for a given block height. If to_latest is true, it will continue fetching transfers until the latest block. Otherwise, it will fetch transfers until the block height is reached.$$\n\n    AS\n    $$\n    \nWITH spine AS (\n    \n        WITH heights AS (\n            \n            SELECT\n                ethereum_mainnet.udf_rpc('eth_blockNumber', []) as result,\n                utils.udf_hex_to_int(result)::integer AS latest_block_height,\n                COALESCE(\n                    block_height,\n                    latest_block_height\n                ) AS min_height,\n                iff(\n                    COALESCE(to_latest, false),\n                    latest_block_height,\n                    min_height\n                ) AS max_height\n    ),\n        block_spine AS (\n            SELECT\n                ROW_NUMBER() OVER (\n                    ORDER BY\n                        NULL\n                ) - 1 + COALESCE(block_height, latest_block_height)::integer AS block_number,\n                min_height,\n                IFF(\n                    COALESCE(to_latest, false),\n                    block_height,\n                    min_height\n                ) AS max_height,\n                latest_block_height\n            FROM\n                TABLE(generator(ROWCOUNT => 1000)),\n                heights qualify block_number BETWEEN min_height\n                AND max_height\n        )\n\n        SELECT\n            CEIL(ROW_NUMBER() OVER (ORDER BY block_number) / 10) AS batch_id,\n            block_number,\n            latest_block_height\n        FROM block_spine\n),\nraw_receipts AS (\n    \n    WITH blocks_agg AS (\n        SELECT\n            batch_id,\n            latest_block_height,\n            ARRAY_AGG(\n                utils.udf_json_rpc_call(\n                    'eth_getBlockReceipts',\n                    [utils.udf_int_to_hex(block_number)]\n                )\n            ) AS params\n        FROM\n            spine\n        GROUP BY 1,2\n    ),\n\n    get_batch_result AS (\n        SELECT\n            latest_block_height,\n            \n        live.udf_api(\n            '{endpoint}'\n            ,params\n            ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n        )::VARIANT:data::ARRAY AS data\n\n        FROM blocks_agg\n    )\n\n    SELECT\n        latest_block_height,\n        utils.udf_hex_to_int(w.value:blockNumber::STRING)::INT AS block_number,\n        w.value AS DATA\n    FROM\n        (SELECT\n            latest_block_height,\n            v.value:result AS DATA\n        FROM get_batch_result,\n            LATERAL FLATTEN(data) v), LATERAL FLATTEN(data) w\n),\nraw_block_txs AS (\n    \n    WITH blocks_agg AS (\n        SELECT\n            batch_id,\n            ARRAY_AGG(\n                utils.udf_json_rpc_call(\n                    'eth_getBlockByNumber',\n                    [utils.udf_int_to_hex(block_number), true]\n                )\n            ) AS params\n        FROM\n            spine\n        GROUP BY batch_id\n    ), result as (\n        SELECT\n            \n        live.udf_api(\n            '{endpoint}'\n            ,params\n            ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n        )::VARIANT:data::ARRAY AS data\n\n        FROM blocks_agg\n    )\n    , flattened as (\n        SELECT\n            COALESCE(value:result, {'error':value:error}) AS result\n        FROM result, LATERAL FLATTEN(input => result.data) v\n    )\n\n    SELECT\n        utils.udf_hex_to_int(result:number::STRING)::INT AS block_number,\n        result as data\n    FROM flattened\n),\nraw_transactions AS (\n    \n    SELECT\n        block_number,\n        v.value as DATA\n    FROM\n        raw_block_txs AS r,\n        lateral flatten(r.data:transactions) v\n),\nblocks AS (\n    \n    SELECT\n        block_number,\n        utils.udf_hex_to_int(DATA:timestamp::STRING)::TIMESTAMP AS block_timestamp,\n        utils.udf_hex_to_int(DATA:baseFeePerGas::STRING)::INT AS base_fee_per_gas,\n        utils.udf_hex_to_int(DATA:difficulty::STRING)::INT AS difficulty,\n        DATA:extraData::STRING AS extra_data,\n        utils.udf_hex_to_int(DATA:gasLimit::STRING)::INT AS gas_limit,\n        utils.udf_hex_to_int(DATA:gasUsed::STRING)::INT AS gas_used,\n        DATA:hash::STRING AS HASH,\n        DATA:logsBloom::STRING AS logs_bloom,\n        DATA:miner::STRING AS miner,\n        utils.udf_hex_to_int(DATA:nonce::STRING)::INT AS nonce,\n        utils.udf_hex_to_int(DATA:number::STRING)::INT AS NUMBER,\n        DATA:parentHash::STRING AS parent_hash,\n        DATA:receiptsRoot::STRING AS receipts_root,\n        DATA:sha3Uncles::STRING AS sha3_uncles,\n        utils.udf_hex_to_int(DATA:size::STRING)::INT AS SIZE,\n        DATA:stateRoot::STRING AS state_root,\n        utils.udf_hex_to_int(DATA:totalDifficulty::STRING)::INT AS total_difficulty,\n        ARRAY_SIZE(DATA:transactions) AS tx_count,\n        DATA:transactionsRoot::STRING AS transactions_root,\n        DATA:uncles AS uncles,\n        DATA:withdrawals AS withdrawals,\n        DATA:withdrawalsRoot::STRING AS withdrawals_root,\n        md5(\n            CAST(\n                COALESCE(\n                    CAST(block_number AS TEXT),\n                    '_dbt_utils_surrogate_key_null_'\n                ) AS TEXT\n            )\n        ) AS blocks_id,\n        utils.udf_hex_to_int(DATA:blobGasUsed::STRING)::INT AS blob_gas_used,\n        utils.udf_hex_to_int(DATA:excessBlobGas::STRING)::INT AS excess_blob_gas\n    FROM\n        raw_block_txs\n),\nreceipts AS (\n    \n    SELECT\n        latest_block_height,\n        block_number,\n        DATA :blockHash::STRING AS block_hash,\n        utils.udf_hex_to_int(DATA :blockNumber::STRING)::INT AS blockNumber,\n        utils.udf_hex_to_int(DATA :cumulativeGasUsed::STRING)::INT AS cumulative_gas_used,\n        utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT / pow(10, 9) AS effective_gas_price,\n        DATA :from::STRING AS from_address,\n        utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS gas_used,\n        DATA :logs AS logs,\n        DATA :logsBloom::STRING AS logs_bloom,\n        utils.udf_hex_to_int(DATA :status::STRING)::INT AS status,\n        CASE\n            WHEN status = 1 THEN TRUE\n            ELSE FALSE\n        END AS tx_success,\n        CASE\n            WHEN status = 1 THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        DATA :to::STRING AS to_address1,\n        CASE\n            WHEN to_address1 = '' THEN NULL\n            ELSE to_address1\n        END AS to_address,\n        DATA :transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(DATA :transactionIndex::STRING)::INT AS POSITION,\n        utils.udf_hex_to_int(DATA :type::STRING)::INT AS TYPE,\n        utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT AS blob_gas_price,\n        utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS blob_gas_used\n    FROM\n        raw_receipts\n),\ntransactions AS (\n    \n    SELECT\n        A.block_number AS block_number,\n        A.data :blockHash::STRING AS block_hash,\n        utils.udf_hex_to_int(A.data :blockNumber::STRING)::INT AS blockNumber,\n        utils.udf_hex_to_int(A.data :chainId::STRING)::INT AS chain_id,\n        A.data :from::STRING AS from_address,\n        utils.udf_hex_to_int(A.data :gas::STRING)::INT AS gas,\n        utils.udf_hex_to_int(A.data :gasPrice::STRING)::INT / pow(10, 9) AS gas_price,\n        A.data :hash::STRING AS tx_hash,\n        A.data :input::STRING AS input_data,\n        SUBSTR(input_data, 1, 10) AS origin_function_signature,\n        utils.udf_hex_to_int(A.data :maxFeePerGas::STRING)::INT / pow(10, 9) AS max_fee_per_gas,\n        utils.udf_hex_to_int(\n            A.data :maxPriorityFeePerGas::STRING\n        )::INT / pow(10, 9) AS max_priority_fee_per_gas,\n        utils.udf_hex_to_int(A.data :nonce::STRING)::INT AS nonce,\n        A.data :r::STRING AS r,\n        A.data :s::STRING AS s,\n        A.data :to::STRING AS to_address1,\n        utils.udf_hex_to_int(A.data :transactionIndex::STRING)::INT AS POSITION,\n        A.data :type::STRING AS TYPE,\n        A.data :v::STRING AS v,\n        utils.udf_hex_to_int(A.data :value::STRING) AS value_precise_raw,\n        value_precise_raw * power(10, -18) AS value_precise,\n        value_precise::FLOAT AS VALUE,\n        A.data :accessList AS access_list,\n        A.data,\n        A.data: blobVersionedHashes::ARRAY AS blob_versioned_hashes,\n        utils.udf_hex_to_int(A.data: maxFeePerGas::STRING)::INT AS max_fee_per_blob_gas,\n        block_timestamp,\n        CASE\n            WHEN block_timestamp IS NULL\n            OR tx_status IS NULL THEN TRUE\n            ELSE FALSE\n        END AS is_pending,\n        r.gas_used,\n        tx_success,\n        tx_status,\n        cumulative_gas_used,\n        effective_gas_price,\n        utils.udf_hex_to_int(A.data :gasPrice) * power(10, -18) * r.gas_used AS tx_fee_precise,\n        COALESCE(tx_fee_precise::FLOAT, 0) AS tx_fee,\n        r.type as tx_type,\n        r.blob_gas_used,\n        r.blob_gas_price,\n    FROM\n        raw_transactions AS A\n        LEFT JOIN blocks AS b on b.block_number = A.block_number\n        LEFT JOIN receipts AS r on r.tx_hash = A.data :hash::STRING\n),\nraw_traces AS (\n    \n    WITH blocks_agg AS (\n        SELECT\n            batch_id,\n            ARRAY_AGG(\n                utils.udf_json_rpc_call(\n                    'debug_traceBlockByNumber',\n                    [utils.udf_int_to_hex(s.block_number), {'tracer': 'callTracer'}],\n                    s.block_number -- to put block_number in the id to retrieve the block numberlater\n                )\n            ) AS params\n        FROM\n            spine s\n        GROUP BY batch_id\n    ), result as (\n        SELECT\n            \n        live.udf_api(\n            '{endpoint}'\n            ,params\n            ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n        )::VARIANT:data::ARRAY AS data\n\n        FROM blocks_agg\n    ), flattened as (\n        SELECT\n            value:id::INT AS block_number,\n            COALESCE(value:result, {'error':value:error}) AS result\n        FROM result, LATERAL FLATTEN(input => result.data) v\n    )\n\n    SELECT\n        s.block_number,\n        v.index::INT AS tx_position, -- mimic's streamline's logic to add tx_position\n        v.value:result AS full_traces,\n        SYSDATE() AS _inserted_timestamp\n    FROM flattened s,\n    LATERAL FLATTEN(input => result) v\n),\n\n    flatten_traces AS (\n        SELECT\n            block_number,\n            tx_position,\n            IFF(\n                path IN (\n                    'result',\n                    'result.value',\n                    'result.type',\n                    'result.to',\n                    'result.input',\n                    'result.gasUsed',\n                    'result.gas',\n                    'result.from',\n                    'result.output',\n                    'result.error',\n                    'result.revertReason',\n                    'gasUsed',\n                    'gas',\n                    'type',\n                    'to',\n                    'from',\n                    'value',\n                    'input',\n                    'error',\n                    'output',\n                    'revertReason'\n                ),\n                'ORIGIN',\n                REGEXP_REPLACE(REGEXP_REPLACE(path, '[^0-9]+', '_'), '^_|_$', '')\n            ) AS trace_address,\n            _inserted_timestamp,\n            OBJECT_AGG(\n                key,\n                VALUE\n            ) AS trace_json,\n            CASE\n                WHEN trace_address = 'ORIGIN' THEN NULL\n                WHEN POSITION(\n                    '_' IN trace_address\n                ) = 0 THEN 'ORIGIN'\n                ELSE REGEXP_REPLACE(\n                    trace_address,\n                    '_[0-9]+$',\n                    '',\n                    1,\n                    1\n                )\n            END AS parent_trace_address,\n            SPLIT(\n                trace_address,\n                '_'\n            ) AS str_array\n        FROM\n            raw_traces,\n            TABLE(\n                FLATTEN(\n                    input => PARSE_JSON(full_traces),\n                    recursive => TRUE\n                )\n            ) f\n        WHERE\n            f.index IS NULL\n            AND f.key != 'calls'\n            AND f.path != 'result'\n        GROUP BY\n            block_number,\n            tx_position,\n            trace_address,\n            _inserted_timestamp\n    ),\n    sub_traces AS (\n        SELECT\n            block_number,\n            tx_position,\n            parent_trace_address,\n            COUNT(*) AS sub_traces\n        FROM\n            flatten_traces\n        GROUP BY\n            block_number,\n            tx_position,\n            parent_trace_address\n    ),\n    num_array AS (\n        SELECT\n            block_number,\n            tx_position,\n            trace_address,\n            ARRAY_AGG(flat_value) AS num_array\n        FROM\n            (\n                SELECT\n                    block_number,\n                    tx_position,\n                    trace_address,\n                    IFF(\n                        VALUE :: STRING = 'ORIGIN',\n                        -1,\n                        VALUE :: INT\n                    ) AS flat_value\n                FROM\n                    flatten_traces,\n                    LATERAL FLATTEN (\n                        input => str_array\n                    )\n            )\n        GROUP BY\n            block_number,\n            tx_position,\n            trace_address\n    ),\n    cleaned_traces AS (\n        SELECT\n            b.block_number,\n            b.tx_position,\n            b.trace_address,\n            IFNULL(\n                sub_traces,\n                0\n            ) AS sub_traces,\n            num_array,\n            ROW_NUMBER() over (\n                PARTITION BY b.block_number,\n                b.tx_position\n                ORDER BY\n                    num_array ASC\n            ) - 1 AS trace_index,\n            trace_json,\n            b._inserted_timestamp\n        FROM\n            flatten_traces b\n            LEFT JOIN sub_traces s\n            ON b.block_number = s.block_number\n            AND b.tx_position = s.tx_position\n            AND b.trace_address = s.parent_trace_address\n            JOIN num_array n\n            ON b.block_number = n.block_number\n            AND b.tx_position = n.tx_position\n            AND b.trace_address = n.trace_address\n    ),\n    final_traces AS (\n        SELECT\n            tx_position,\n            trace_index,\n            block_number,\n            trace_address,\n            trace_json :error :: STRING AS error_reason,\n            trace_json :from :: STRING AS from_address,\n            trace_json :to :: STRING AS to_address,\n            IFNULL(\n                utils.udf_hex_to_int(\n                    trace_json :value :: STRING\n                ),\n                '0'\n            ) AS eth_value_precise_raw,\n            ethereum.utils.udf_decimal_adjust(\n                eth_value_precise_raw,\n                18\n            ) AS eth_value_precise,\n            eth_value_precise :: FLOAT AS eth_value,\n            utils.udf_hex_to_int(\n                trace_json :gas :: STRING\n            ) :: INT AS gas,\n            utils.udf_hex_to_int(\n                trace_json :gasUsed :: STRING\n            ) :: INT AS gas_used,\n            trace_json :input :: STRING AS input,\n            trace_json :output :: STRING AS output,\n            trace_json :type :: STRING AS TYPE,\n            concat_ws(\n                '_',\n                TYPE,\n                trace_address\n            ) AS identifier,\n            concat_ws(\n                '-',\n                block_number,\n                tx_position,\n                identifier\n            ) AS _call_id,\n            _inserted_timestamp,\n            trace_json AS DATA,\n            sub_traces\n        FROM\n            cleaned_traces\n    ),\n    new_records AS (\n        SELECT\n            f.block_number,\n            t.tx_hash,\n            t.block_timestamp,\n            t.tx_status,\n            f.tx_position,\n            f.trace_index,\n            f.from_address,\n            f.to_address,\n            f.eth_value_precise_raw,\n            f.eth_value_precise,\n            f.eth_value,\n            f.gas,\n            f.gas_used,\n            f.input,\n            f.output,\n            f.type,\n            f.identifier,\n            f.sub_traces,\n            f.error_reason,\n            IFF(\n                f.error_reason IS NULL,\n                'SUCCESS',\n                'FAIL'\n            ) AS trace_status,\n            f.data,\n            IFF(\n                t.tx_hash IS NULL\n                OR t.block_timestamp IS NULL\n                OR t.tx_status IS NULL,\n                TRUE,\n                FALSE\n            ) AS is_pending,\n            f._call_id,\n            f._inserted_timestamp\n        FROM\n            final_traces f\n            LEFT OUTER JOIN transactions t\n            ON f.tx_position = t.position\n            AND f.block_number = t.block_number\n    ),\n    traces_final AS (\n        SELECT\n            block_number,\n            tx_hash,\n            block_timestamp,\n            tx_status,\n            tx_position,\n            trace_index,\n            from_address,\n            to_address,\n            eth_value_precise_raw,\n            eth_value_precise,\n            eth_value,\n            gas,\n            gas_used,\n            input,\n            output,\n            TYPE,\n            identifier,\n            sub_traces,\n            error_reason,\n            trace_status,\n            DATA,\n            is_pending,\n            _call_id,\n            _inserted_timestamp\n        FROM\n            new_records\n    )\n,\neth_base AS (\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        identifier,\n        from_address,\n        to_address,\n        eth_value AS amount,\n        _call_id,\n        _inserted_timestamp,\n        eth_value_precise_raw AS amount_precise_raw,\n        eth_value_precise AS amount_precise,\n        tx_position,\n        trace_index\n    FROM\n        traces_final\n    WHERE\n        eth_value > 0\n        AND tx_status = 'SUCCESS'\n        AND trace_status = 'SUCCESS'\n        AND TYPE NOT IN (\n            'DELEGATECALL',\n            'STATICCALL'\n        )\n),\ntx_table AS (\n    SELECT\n        block_number,\n        tx_hash,\n        from_address AS origin_from_address,\n        to_address1 AS origin_to_address,\n        origin_function_signature\n    FROM\n        transactions\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                eth_base\n        )\n),\nnative_transfers AS (\n    SELECT\n        e.tx_hash,\n        e.block_number,\n        e.block_timestamp,\n        e.identifier,\n        t.origin_from_address,\n        t.origin_to_address,\n        t.origin_function_signature,\n        e.from_address,\n        e.to_address,\n        e.amount,\n        e.amount_precise_raw,\n        e.amount_precise,\n        ROUND(\n            e.amount * p.price,\n            2\n        ) AS amount_usd,\n        e._call_id,\n        e._inserted_timestamp,\n        e.tx_position,\n        e.trace_index,\n        md5(\n            cast(\n                coalesce(cast(e.tx_hash as TEXT), '_dbt_utils_surrogate_key_null_')\n                || '-' || coalesce(cast(e.trace_index as TEXT), '_dbt_utils_surrogate_key_null_')\n                as TEXT\n            )\n        ) as native_transfers_id,\n        SYSDATE() as inserted_timestamp,\n        SYSDATE() as modified_timestamp\n    FROM\n        eth_base e\n        JOIN tx_table t ON e.tx_hash = t.tx_hash AND e.block_number = t.block_number\n        LEFT JOIN ethereum.PRICE.EZ_PRICES_HOURLY p\n            ON DATE_TRUNC('hour', e.block_timestamp) = p.HOUR\n            AND p.token_address = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'  -- WETH address\n)\nSELECT\n    tx_hash,\n    block_number,\n    block_timestamp,\n    tx_position,\n    trace_index,\n    identifier AS trace_type,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    from_address AS trace_from_address,\n    to_address AS trace_to_address,\n    amount,\n    amount_precise_raw,\n    amount_precise,\n    amount_usd,\n    COALESCE(\n        native_transfers_id,\n        md5(\n            cast(\n                coalesce(cast(tx_hash as TEXT), '_dbt_utils_surrogate_key_null_')\n                || '-' || coalesce(cast(trace_index as TEXT), '_dbt_utils_surrogate_key_null_')\n                as TEXT\n            )\n        )\n    ) AS ez_native_transfers_id,\n    COALESCE(\n        inserted_timestamp,\n        '2000-01-01'\n    ) AS inserted_timestamp,\n    COALESCE(\n        modified_timestamp,\n        '2000-01-01'\n    ) AS modified_timestamp\nFROM\n    native_transfers\nQUALIFY (ROW_NUMBER() OVER (\n    PARTITION BY block_number, tx_position, trace_index\n    ORDER BY _inserted_timestamp DESC\n)) = 1\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_mainnet.tf_ez_token_transfers(\n            block_height INTEGER,\n            to_latest BOOLEAN\n    )\n    COPY GRANTS\n    RETURNS TABLE(block_number INTEGER, block_timestamp TIMESTAMP_NTZ, tx_hash STRING, event_index INTEGER, origin_function_signature STRING, origin_from_address STRING, origin_to_address STRING, contract_address STRING, from_address STRING, to_address STRING, raw_amount_precise STRING, raw_amount FLOAT, amount_precise FLOAT, amount FLOAT, amount_usd FLOAT, decimals INTEGER, symbol STRING, token_price FLOAT, has_decimal STRING, has_price STRING, _log_id STRING, ez_token_transfers_id STRING, _inserted_timestamp TIMESTAMP_NTZ, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the token transfers for a given block height. If to_latest is true, it will continue fetching transfers until the latest block. Otherwise, it will fetch transfers until the block height is reached.$$\n\n    AS\n    $$\n    \nWITH fact_logs AS (\n    \n    WITH spine AS (\n        \n            WITH heights AS (\n                \n                SELECT\n                    ethereum_mainnet.udf_rpc('eth_blockNumber', []) as result,\n                    utils.udf_hex_to_int(result)::integer AS latest_block_height,\n                    COALESCE(\n                        block_height,\n                        latest_block_height\n                    ) AS min_height,\n                    iff(\n                        COALESCE(to_latest, false),\n                        latest_block_height,\n                        min_height\n                    ) AS max_height\n        ),\n            block_spine AS (\n                SELECT\n                    ROW_NUMBER() OVER (\n                        ORDER BY\n                            NULL\n                    ) - 1 + COALESCE(block_height, latest_block_height)::integer AS block_number,\n                    min_height,\n                    IFF(\n                        COALESCE(to_latest, false),\n                        block_height,\n                        min_height\n                    ) AS max_height,\n                    latest_block_height\n                FROM\n                    TABLE(generator(ROWCOUNT => 1000)),\n                    heights qualify block_number BETWEEN min_height\n                    AND max_height\n            )\n\n            SELECT\n                CEIL(ROW_NUMBER() OVER (ORDER BY block_number) / 5) AS batch_id,\n                block_number,\n                latest_block_height\n            FROM block_spine\n    ),\n    raw_block_txs AS (\n        \n        WITH blocks_agg AS (\n            SELECT\n                batch_id,\n                ARRAY_AGG(\n                    utils.udf_json_rpc_call(\n                        'eth_getBlockByNumber',\n                        [utils.udf_int_to_hex(block_number), true]\n                    )\n                ) AS params\n            FROM\n                spine\n            GROUP BY batch_id\n        ), result as (\n            SELECT\n                \n            live.udf_api(\n                '{endpoint}'\n                ,params\n                ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n            )::VARIANT:data::ARRAY AS data\n\n            FROM blocks_agg\n        )\n        , flattened as (\n            SELECT\n                COALESCE(value:result, {'error':value:error}) AS result\n            FROM result, LATERAL FLATTEN(input => result.data) v\n        )\n\n        SELECT\n            utils.udf_hex_to_int(result:number::STRING)::INT AS block_number,\n            result as data\n        FROM flattened\n    ),\n    raw_receipts AS (\n        \n        WITH blocks_agg AS (\n            SELECT\n                batch_id,\n                latest_block_height,\n                ARRAY_AGG(\n                    utils.udf_json_rpc_call(\n                        'eth_getBlockReceipts',\n                        [utils.udf_int_to_hex(block_number)]\n                    )\n                ) AS params\n            FROM\n                spine\n            GROUP BY 1,2\n        ),\n\n        get_batch_result AS (\n            SELECT\n                latest_block_height,\n                \n            live.udf_api(\n                '{endpoint}'\n                ,params\n                ,concat_ws('/', 'integration', _utils.udf_provider(), 'ethereum', 'mainnet')\n            )::VARIANT:data::ARRAY AS data\n\n            FROM blocks_agg\n        )\n\n        SELECT\n            latest_block_height,\n            utils.udf_hex_to_int(w.value:blockNumber::STRING)::INT AS block_number,\n            w.value AS DATA\n        FROM\n            (SELECT\n                latest_block_height,\n                v.value:result AS DATA\n            FROM get_batch_result,\n                LATERAL FLATTEN(data) v), LATERAL FLATTEN(data) w\n    ),\n    raw_logs AS (\n        \n        SELECT\n            r.block_number,\n            v.value\n        FROM\n            raw_receipts AS r,\n            lateral flatten(r.data:logs) v\n    ),\n    raw_transactions AS (\n        \n        SELECT\n            block_number,\n            v.value as DATA\n        FROM\n            raw_block_txs AS r,\n            lateral flatten(r.data:transactions) v\n    ),\n    blocks AS (\n        \n        SELECT\n            block_number,\n            utils.udf_hex_to_int(DATA:timestamp::STRING)::TIMESTAMP AS block_timestamp,\n            utils.udf_hex_to_int(DATA:baseFeePerGas::STRING)::INT AS base_fee_per_gas,\n            utils.udf_hex_to_int(DATA:difficulty::STRING)::INT AS difficulty,\n            DATA:extraData::STRING AS extra_data,\n            utils.udf_hex_to_int(DATA:gasLimit::STRING)::INT AS gas_limit,\n            utils.udf_hex_to_int(DATA:gasUsed::STRING)::INT AS gas_used,\n            DATA:hash::STRING AS HASH,\n            DATA:logsBloom::STRING AS logs_bloom,\n            DATA:miner::STRING AS miner,\n            utils.udf_hex_to_int(DATA:nonce::STRING)::INT AS nonce,\n            utils.udf_hex_to_int(DATA:number::STRING)::INT AS NUMBER,\n            DATA:parentHash::STRING AS parent_hash,\n            DATA:receiptsRoot::STRING AS receipts_root,\n            DATA:sha3Uncles::STRING AS sha3_uncles,\n            utils.udf_hex_to_int(DATA:size::STRING)::INT AS SIZE,\n            DATA:stateRoot::STRING AS state_root,\n            utils.udf_hex_to_int(DATA:totalDifficulty::STRING)::INT AS total_difficulty,\n            ARRAY_SIZE(DATA:transactions) AS tx_count,\n            DATA:transactionsRoot::STRING AS transactions_root,\n            DATA:uncles AS uncles,\n            DATA:withdrawals AS withdrawals,\n            DATA:withdrawalsRoot::STRING AS withdrawals_root,\n            md5(\n                CAST(\n                    COALESCE(\n                        CAST(block_number AS TEXT),\n                        '_dbt_utils_surrogate_key_null_'\n                    ) AS TEXT\n                )\n            ) AS blocks_id,\n            utils.udf_hex_to_int(DATA:blobGasUsed::STRING)::INT AS blob_gas_used,\n            utils.udf_hex_to_int(DATA:excessBlobGas::STRING)::INT AS excess_blob_gas\n        FROM\n            raw_block_txs\n    ),\n    receipts AS (\n        \n        SELECT\n            latest_block_height,\n            block_number,\n            DATA :blockHash::STRING AS block_hash,\n            utils.udf_hex_to_int(DATA :blockNumber::STRING)::INT AS blockNumber,\n            utils.udf_hex_to_int(DATA :cumulativeGasUsed::STRING)::INT AS cumulative_gas_used,\n            utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT / pow(10, 9) AS effective_gas_price,\n            DATA :from::STRING AS from_address,\n            utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS gas_used,\n            DATA :logs AS logs,\n            DATA :logsBloom::STRING AS logs_bloom,\n            utils.udf_hex_to_int(DATA :status::STRING)::INT AS status,\n            CASE\n                WHEN status = 1 THEN TRUE\n                ELSE FALSE\n            END AS tx_success,\n            CASE\n                WHEN status = 1 THEN 'SUCCESS'\n                ELSE 'FAIL'\n            END AS tx_status,\n            DATA :to::STRING AS to_address1,\n            CASE\n                WHEN to_address1 = '' THEN NULL\n                ELSE to_address1\n            END AS to_address,\n            DATA :transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(DATA :transactionIndex::STRING)::INT AS POSITION,\n            utils.udf_hex_to_int(DATA :type::STRING)::INT AS TYPE,\n            utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT AS blob_gas_price,\n            utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS blob_gas_used\n        FROM\n            raw_receipts\n    ),\n    transactions AS (\n        \n        SELECT\n            A.block_number AS block_number,\n            A.data :blockHash::STRING AS block_hash,\n            utils.udf_hex_to_int(A.data :blockNumber::STRING)::INT AS blockNumber,\n            utils.udf_hex_to_int(A.data :chainId::STRING)::INT AS chain_id,\n            A.data :from::STRING AS from_address,\n            utils.udf_hex_to_int(A.data :gas::STRING)::INT AS gas,\n            utils.udf_hex_to_int(A.data :gasPrice::STRING)::INT / pow(10, 9) AS gas_price,\n            A.data :hash::STRING AS tx_hash,\n            A.data :input::STRING AS input_data,\n            SUBSTR(input_data, 1, 10) AS origin_function_signature,\n            utils.udf_hex_to_int(A.data :maxFeePerGas::STRING)::INT / pow(10, 9) AS max_fee_per_gas,\n            utils.udf_hex_to_int(\n                A.data :maxPriorityFeePerGas::STRING\n            )::INT / pow(10, 9) AS max_priority_fee_per_gas,\n            utils.udf_hex_to_int(A.data :nonce::STRING)::INT AS nonce,\n            A.data :r::STRING AS r,\n            A.data :s::STRING AS s,\n            A.data :to::STRING AS to_address1,\n            utils.udf_hex_to_int(A.data :transactionIndex::STRING)::INT AS POSITION,\n            A.data :type::STRING AS TYPE,\n            A.data :v::STRING AS v,\n            utils.udf_hex_to_int(A.data :value::STRING) AS value_precise_raw,\n            value_precise_raw * power(10, -18) AS value_precise,\n            value_precise::FLOAT AS VALUE,\n            A.data :accessList AS access_list,\n            A.data,\n            A.data: blobVersionedHashes::ARRAY AS blob_versioned_hashes,\n            utils.udf_hex_to_int(A.data: maxFeePerGas::STRING)::INT AS max_fee_per_blob_gas,\n            block_timestamp,\n            CASE\n                WHEN block_timestamp IS NULL\n                OR tx_status IS NULL THEN TRUE\n                ELSE FALSE\n            END AS is_pending,\n            r.gas_used,\n            tx_success,\n            tx_status,\n            cumulative_gas_used,\n            effective_gas_price,\n            utils.udf_hex_to_int(A.data :gasPrice) * power(10, -18) * r.gas_used AS tx_fee_precise,\n            COALESCE(tx_fee_precise::FLOAT, 0) AS tx_fee,\n            r.type as tx_type,\n            r.blob_gas_used,\n            r.blob_gas_price,\n        FROM\n            raw_transactions AS A\n            LEFT JOIN blocks AS b on b.block_number = A.block_number\n            LEFT JOIN receipts AS r on r.tx_hash = A.data :hash::STRING\n    ),\n    logs AS (\n        \n        SELECT\n            r.block_number,\n            txs.block_timestamp,\n            r.tx_hash,\n            txs.origin_function_signature,\n            r.from_address AS origin_from_address,\n            r.to_address AS origin_to_address,\n            utils.udf_hex_to_int(v.VALUE :logIndex::STRING)::INT AS event_index,\n            v.VALUE :address::STRING AS contract_address,\n            v.VALUE :blockHash::STRING AS block_hash,\n            v.VALUE :data::STRING AS DATA,\n            v.VALUE :removed::BOOLEAN AS event_removed,\n            v.VALUE :topics AS topics,\n            r.tx_status,\n            CASE\n                WHEN txs.block_timestamp IS NULL\n                OR txs.origin_function_signature IS NULL THEN TRUE\n                ELSE FALSE\n            END AS is_pending,\n        FROM\n            receipts AS r\n            LEFT JOIN transactions AS txs on txs.tx_hash = r.tx_hash,\n            lateral flatten(r.logs) v\n    )\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        event_index,\n        contract_address,\n        topics,\n        DATA,\n        event_removed,\n        tx_status,\n        CONCAT(\n            tx_hash :: STRING,\n            '-',\n            event_index :: STRING\n        ) AS _log_id,\n        md5(\n            cast(\n                coalesce(\n                    cast(tx_hash as TEXT),\n                    '_dbt_utils_surrogate_key_null_'\n                ) || '-' || coalesce(\n                    cast(event_index as TEXT),\n                    '_dbt_utils_surrogate_key_null_'\n                ) as TEXT\n            )\n        ) AS fact_event_logs_id,\n        SYSDATE() AS inserted_timestamp,\n        SYSDATE() AS modified_timestamp\n    FROM logs\n)\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_index,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address::STRING AS contract_address,\n    CONCAT('0x', SUBSTR(topics [1], 27, 40))::STRING AS from_address,\n    CONCAT('0x', SUBSTR(topics [2], 27, 40))::STRING AS to_address,\n    utils.udf_hex_to_int(SUBSTR(DATA, 3, 64)) AS raw_amount_precise,\n    raw_amount_precise::FLOAT AS raw_amount,\n    IFF(\n        C.decimals IS NOT NULL,\n        raw_amount_precise * power(10, C.decimals * -1),\n        NULL\n    ) AS amount_precise,\n    amount_precise::FLOAT AS amount,\n    IFF(\n        C.decimals IS NOT NULL\n        AND price IS NOT NULL,\n        amount * price,\n        NULL\n    ) AS amount_usd,\n    C.decimals AS decimals,\n    C.symbol AS symbol,\n    price AS token_price,\n    CASE\n        WHEN C.decimals IS NULL THEN 'false'\n        ELSE 'true'\n    END AS has_decimal,\n    CASE\n        WHEN price IS NULL THEN 'false'\n        ELSE 'true'\n    END AS has_price,\n    _log_id,\n    md5(\n        cast(\n            coalesce(\n                cast(tx_hash as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) || '-' || coalesce(\n                cast(event_index as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) as TEXT\n        )\n    ) as ez_token_transfers_id,\n    SYSDATE() AS _inserted_timestamp,\n    sysdate() as inserted_timestamp,\n    sysdate() as modified_timestamp\nFROM\n    fact_logs l\n    LEFT JOIN ethereum.price.EZ_PRICES_HOURLY p ON l.contract_address = p.token_address\n    AND DATE_TRUNC('hour', l.block_timestamp) = HOUR\n    LEFT JOIN ethereum.core.DIM_CONTRACTS C ON l.contract_address = C.address\nWHERE\n    topics [0]::STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n    AND tx_status = 'SUCCESS'\n    and raw_amount IS NOT NULL\n    AND to_address IS NOT NULL\nAND from_address IS NOT NULL\n\n    $$;\n\n\n  \n    CREATE SCHEMA IF NOT EXISTS ethereum;\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_ethereum.udf_rpc(\n            method STRING,\n            parameters VARIANT\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Executes an RPC call on the ethereum blockchain.$$\n\n    AS\n    $$\n    SELECT live.udf_rpc('ethereum', 'ethereum', method, parameters)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_ethereum.udf_rpc_eth_call(\n            transaction OBJECT,\n            block_or_tag STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Executes a new message call immediately without creating a transaction on the block chain.$$\n\n    AS\n    $$\n    SELECT ethereum_ethereum.udf_rpc('eth_call', [transaction, block_or_tag])\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_ethereum.udf_rpc_eth_get_logs(\n            filter OBJECT\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns an array of all logs matching filter with given address.$$\n\n    AS\n    $$\n    SELECT ethereum_ethereum.udf_rpc('eth_getLogs', [filter])\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_ethereum.udf_rpc_eth_get_balance(\n            address STRING,\n            block_or_tag STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the balance of the account of given address.$$\n\n    AS\n    $$\n    SELECT ethereum_ethereum.udf_rpc('eth_getBalance', [address, block_or_tag])\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_ethereum.udf_get_token_balance(\n            wallet_address STRING,\n            token_address STRING\n    )\n    COPY GRANTS\n    RETURNS STRING\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the balance of the wallet of given token address at the latest block.$$\n\n    AS\n    $$\n    SELECT utils.udf_hex_to_int(ethereum_ethereum.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', concat('0x70a08231',LPAD(REPLACE(wallet_address, '0x', ''), 64, 0))),'latest')::string)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION ethereum_ethereum.udf_get_token_balance(\n            wallet_address STRING,\n            token_address STRING,\n            block_number INTEGER\n    )\n    COPY GRANTS\n    RETURNS STRING\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns the balance of the wallet of given token address at the given block.$$\n\n    AS\n    $$\n    SELECT utils.udf_hex_to_int(ethereum_ethereum.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', concat('0x70a08231',LPAD(REPLACE(wallet_address, '0x', ''), 64, 0))), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING)\n    $$;\n\n\n  \n    CREATE SCHEMA IF NOT EXISTS ethereum;\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS ethereum_ethereum.udf_rpc(\n            STRING,\n            VARIANT);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS ethereum_ethereum.udf_rpc_eth_call(\n            OBJECT,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS ethereum_ethereum.udf_rpc_eth_get_logs(\n            OBJECT);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS ethereum_ethereum.udf_rpc_eth_get_balance(\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS ethereum_ethereum.udf_get_token_balance(\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS ethereum_ethereum.udf_get_token_balance(\n            STRING,\n            STRING,\n            INTEGER);\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.livequery_models.test_create_or_drop_function_from_config": {"database": "SUI", "schema": "test_create_or_drop_function_from_config", "name": "test_create_or_drop_function_from_config", "resource_type": "analysis", "package_name": "livequery_models", "path": "analysis/test_create_or_drop_function_from_config.sql", "original_file_path": "analysis/test_create_or_drop_function_from_config.sql", "unique_id": "analysis.livequery_models.test_create_or_drop_function_from_config", "fqn": ["livequery_models", "analysis", "test_create_or_drop_function_from_config"], "alias": "", "checksum": {"name": "sha256", "checksum": "6da8747a0512c8c0c522b3b56816f437171257a7544716d8795b1a4cc04c8664"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141890.1831357, "relation_name": null, "raw_code": "{%-  set udfs = fromyaml(config_core_live()) -%}\n{% do udfs.extend(fromyaml(config_core__live())) %}\n{% do udfs.extend(fromyaml(config_core__utils())) %}\n{% do udfs.extend(fromyaml(config_core_utils())) %}\n\n{%- for udf in udfs -%}\n{{- create_or_drop_function_from_config(udf, drop_=True) -}}\n{{- create_or_drop_function_from_config(udf, drop_=False) -}}\n{% endfor %}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.config_core_live", "macro.livequery_models.config_core__live", "macro.livequery_models.config_core__utils", "macro.livequery_models.config_core_utils", "macro.livequery_models.create_or_drop_function_from_config"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/analysis/test_create_or_drop_function_from_config.sql", "compiled": true, "compiled_code": "\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS live.udf_api_batched(\n            STRING,\n            STRING,\n            OBJECT,\n            VARIANT,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION live.udf_api_batched(\n            method STRING,\n            url STRING,\n            headers OBJECT,\n            data VARIANT,\n            secret_name STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    VOLATILE\n\n    AS\n    $$\n    SELECT\n  _live.UDF_API(\n      method,\n      url,\n      headers,\n      data,\n      _utils.UDF_WHOAMI(),\n      secret_name\n  )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS live.udf_api(\n            STRING,\n            STRING,\n            OBJECT,\n            VARIANT,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION live.udf_api(\n            method STRING,\n            url STRING,\n            headers OBJECT,\n            data VARIANT,\n            secret_name STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    VOLATILE\n\n    AS\n    $$\n    SELECT\n  _live.UDF_API(\n      method,\n      url,\n      headers,\n      data,\n      _utils.UDF_WHOAMI(),\n      secret_name\n  )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS live.udf_api(\n            STRING,\n            STRING,\n            OBJECT,\n            VARIANT);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION live.udf_api(\n            method STRING,\n            url STRING,\n            headers OBJECT,\n            data VARIANT\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    VOLATILE\n\n    AS\n    $$\n    SELECT\n  _live.UDF_API(\n      method,\n      url,\n      headers,\n      data,\n      _utils.UDF_WHOAMI(),\n      ''\n  )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS live.udf_api(\n            STRING,\n            VARIANT);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION live.udf_api(\n            url STRING,\n            data VARIANT\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    VOLATILE\n\n    AS\n    $$\n    SELECT\n  _live.UDF_API(\n      'POST',\n      url,\n      {'Content-Type': 'application/json'},\n      data,\n      _utils.UDF_WHOAMI(),\n      ''\n  )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS live.udf_api(\n            STRING,\n            VARIANT,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION live.udf_api(\n            url STRING,\n            data VARIANT,\n            secret_name STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    VOLATILE\n\n    AS\n    $$\n    SELECT\n  _live.UDF_API(\n      'POST',\n      url,\n      {'Content-Type': 'application/json'},\n      data,\n      _utils.UDF_WHOAMI(),\n      secret_name\n  )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS live.udf_api(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION live.udf_api(\n            url STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    VOLATILE\n\n    AS\n    $$\n    SELECT\n  _live.UDF_API(\n      'GET',\n      url,\n      {},\n      NULL,\n      _utils.UDF_WHOAMI(),\n      ''\n  )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS live.udf_api(\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION live.udf_api(\n            url STRING,\n            secret_name STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    VOLATILE\n\n    AS\n    $$\n    SELECT\n  _live.UDF_API(\n      'GET',\n      url,\n      {},\n      {},\n      _utils.UDF_WHOAMI(),\n      secret_name\n  )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS live.udf_rpc(\n            STRING,\n            STRING,\n            STRING,\n            VARIANT);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION live.udf_rpc(\n            blockchain STRING,\n            network STRING,\n            method STRING,\n            parameters VARIANT\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    VOLATILE\nCOMMENT = $$Executes an JSON RPC call on a blockchain.$$\n\n    AS\n    $$\n    \n\nWITH result as (\n    SELECT\n        live.udf_api(\n            '{endpoint}'\n            ,utils.udf_json_rpc_call(method, parameters)\n            ,concat_ws('/', 'integration', _utils.udf_provider(), 'blockchain', 'network')\n        )::VARIANT:data AS data\n)\nSELECT\n    COALESCE(data:result, {'error':data:error})\nFROM result\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS live.udf_allow_list();\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE EXTERNAL FUNCTION live.udf_allow_list(\n    )\n    COPY GRANTS\n    RETURNS ARRAY\n    RETURNS NULL ON NULL INPUT\nVOLATILE\nCOMMENT = $$Returns a list of allowed domains.$$\n\n    api_integration = AWS_SUI_API_PROD_V2\n    AS 'https://nqj8j7ln67.execute-api.us-east-1.amazonaws.com/prod/allowed';\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS _live.udf_api_batched(\n            STRING,\n            STRING,\n            OBJECT,\n            VARIANT,\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE EXTERNAL FUNCTION _live.udf_api_batched(\n            method STRING,\n            url STRING,\n            headers OBJECT,\n            DATA VARIANT,\n            user_id STRING,\n            SECRET STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    NOT NULL\n\n    api_integration = AWS_SUI_API_PROD_V2\n    AS 'https://nqj8j7ln67.execute-api.us-east-1.amazonaws.com/prod/udf_api';\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS _live.udf_api(\n            STRING,\n            STRING,\n            OBJECT,\n            VARIANT,\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE EXTERNAL FUNCTION _live.udf_api(\n            method STRING,\n            url STRING,\n            headers OBJECT,\n            DATA VARIANT,\n            user_id STRING,\n            SECRET STRING\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    NOT NULL\n\n    api_integration = AWS_SUI_API_PROD_V2\n    AS 'https://nqj8j7ln67.execute-api.us-east-1.amazonaws.com/prod/udf_api';\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS _utils.udf_introspect(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE SECURE EXTERNAL FUNCTION _utils.udf_introspect(\n            echo STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    api_integration = AWS_SUI_API_PROD_V2\n    AS 'https://nqj8j7ln67.execute-api.us-east-1.amazonaws.com/prod/introspect';\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS _utils.udf_user_tier();\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE SECURE FUNCTION _utils.udf_user_tier(\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\nMEMOIZABLE\n\n    AS\n    $$\n    SELECT\n  COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):userTier::STRING, 'community')\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS _utils.udf_provider();\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE SECURE FUNCTION _utils.udf_provider(\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\nMEMOIZABLE\n\n    AS\n    $$\n    SELECT\n  COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):provider::STRING, 'quicknode')\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS _utils.udf_whoami();\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE SECURE FUNCTION _utils.udf_whoami(\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\nMEMOIZABLE\n\n    AS\n    $$\n    SELECT\n  COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):userId::STRING, CURRENT_USER())\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS _utils.udf_register_secret(\n            STRING,\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE SECURE EXTERNAL FUNCTION _utils.udf_register_secret(\n            request_id STRING,\n            user_id STRING,\n            key STRING\n    )\n    COPY GRANTS\n    RETURNS OBJECT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\n\n    api_integration = AWS_SUI_API_PROD_V2\n    AS 'https://nqj8j7ln67.execute-api.us-east-1.amazonaws.com/prod/secret/register';\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_register_secret(\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE SECURE FUNCTION utils.udf_register_secret(\n            request_id STRING,\n            key STRING\n    )\n    COPY GRANTS\n    RETURNS OBJECT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    SELECT\n  _utils.UDF_REGISTER_SECRET(REQUEST_ID, _utils.UDF_WHOAMI(), KEY)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_hex_to_int(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_hex_to_int(\n            hex STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE PYTHON\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\nRUNTIME_VERSION = '3.10'\nHANDLER = 'hex_to_int'\n\n    AS\n    $$\n    \ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    try:\n        return str(int(hex, 16)) if hex and hex != \"0x\" else None\n    except:\n        return None\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_hex_to_int(\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_hex_to_int(\n            encoding STRING,\n            hex STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE PYTHON\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\nRUNTIME_VERSION = '3.10'\nHANDLER = 'hex_to_int'\n\n    AS\n    $$\n    \ndef hex_to_int(encoding, hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('hex', '200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', '0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', NULL);\n    >> NULL\n    hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\n    >> -440911153\n    \"\"\"\n    try:\n        if not hex:\n            return None\n        if encoding.lower() == 's2c':\n            if hex[0:2].lower() != '0x':\n                hex = f'0x{hex}'\n\n            bits = len(hex[2:]) * 4\n            value = int(hex, 0)\n            if value & (1 << (bits - 1)):\n                value -= 1 << bits\n            return str(value)\n        else:\n            return str(int(hex, 16))\n    except:\n        return None\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_evm_text_signature(\n            VARIANT);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_evm_text_signature(\n            abi VARIANT\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = '3.10'\nHANDLER = 'get_simplified_signature'\n\n    AS\n    $$\n    \n\ndef get_simplified_signature(abi):\n    def generate_signature(inputs):\n        signature_parts = []\n        for input_data in inputs:\n            if 'components' in input_data:\n                component_signature_parts = []\n                components = input_data['components']\n                component_signature_parts.extend(generate_signature(components))\n                component_signature_parts[-1] = component_signature_parts[-1].rstrip(\",\")\n                if input_data['type'].endswith('[]'):\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \")[],\")\n                else:\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \"),\")\n            else:\n                signature_parts.append(input_data['type'].replace('enum ', '').replace(' payable', '') + \",\")\n        return signature_parts\n\n    signature_parts = [abi['name'] + \"(\"]\n    signature_parts.extend(generate_signature(abi['inputs']))\n    signature_parts[-1] = signature_parts[-1].rstrip(\",\") + \")\"\n    return \"\".join(signature_parts)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_keccak256(\n            VARCHAR(255));\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_keccak256(\n            event_name VARCHAR(255)\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = '3.10'\nPACKAGES = ('pycryptodome==3.15.0')\nHANDLER = 'udf_encode'\n\n    AS\n    $$\n    \nfrom Crypto.Hash import keccak\n\ndef udf_encode(event_name):\n    keccak_hash = keccak.new(digest_bits=256)\n    keccak_hash.update(event_name.encode('utf-8'))\n    return '0x' + keccak_hash.hexdigest()\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_hex_to_string(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_hex_to_string(\n            hex STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    SELECT\n  LTRIM(regexp_replace(\n    try_hex_decode_string(hex),\n      '[\\x00-\\x1F\\x7F-\\x9F\\xAD]', '', 1))\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_int_to_hex(\n            INTEGER);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_int_to_hex(\n            int INTEGER\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    select CONCAT('0x', TRIM(TO_CHAR(int, 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')))\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_json_rpc_call(\n            STRING,\n            ARRAY);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_json_rpc_call(\n            method STRING,\n            params ARRAY\n    )\n    COPY GRANTS\n    RETURNS OBJECT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    \nSELECT IFF(method IS NULL or params IS NULL,\n          NULL,\n          {\n            'jsonrpc': '2.0',\n            'method': method,\n            'params': params\n            \n              , 'id': hash(method, params)::string\n            \n          }\n          )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_json_rpc_call(\n            STRING,\n            OBJECT);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_json_rpc_call(\n            method STRING,\n            params OBJECT\n    )\n    COPY GRANTS\n    RETURNS OBJECT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    \nSELECT IFF(method IS NULL or params IS NULL,\n          NULL,\n          {\n            'jsonrpc': '2.0',\n            'method': method,\n            'params': params\n            \n              , 'id': hash(method, params)::string\n            \n          }\n          )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_json_rpc_call(\n            STRING,\n            OBJECT,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_json_rpc_call(\n            method STRING,\n            params OBJECT,\n            id STRING\n    )\n    COPY GRANTS\n    RETURNS OBJECT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    \nSELECT IFF(method IS NULL or params IS NULL,\n          NULL,\n          {\n            'jsonrpc': '2.0',\n            'method': method,\n            'params': params\n            \n              , 'id': id\n            \n          }\n          )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_json_rpc_call(\n            STRING,\n            ARRAY,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_json_rpc_call(\n            method STRING,\n            params ARRAY,\n            id STRING\n    )\n    COPY GRANTS\n    RETURNS OBJECT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    \nSELECT IFF(method IS NULL or params IS NULL,\n          NULL,\n          {\n            'jsonrpc': '2.0',\n            'method': method,\n            'params': params\n            \n              , 'id': id\n            \n          }\n          )\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_urlencode(\n            OBJECT,\n            BOOLEAN);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_urlencode(\n            query OBJECT,\n            doseq BOOLEAN\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE PYTHON\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\nRUNTIME_VERSION = '3.10'\nCOMMENT=$$Pthon (function)[https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode] to convert an object to a URL query string.$$\nHANDLER = 'object_to_url_query_string'\n\n    AS\n    $$\n    \nfrom urllib.parse import urlencode\n\ndef object_to_url_query_string(query, doseq=False):\n    \n    if isinstance(query, dict):\n        return urlencode(query, doseq)\n    return urlencode([tuple(i) for i in query], doseq)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_urlencode(\n            ARRAY,\n            BOOLEAN);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_urlencode(\n            query ARRAY,\n            doseq BOOLEAN\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE PYTHON\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\nRUNTIME_VERSION = '3.10'\nCOMMENT=$$Pthon (function)[https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode] to convert an array to a URL query string.$$\nHANDLER = 'object_to_url_query_string'\n\n    AS\n    $$\n    \nfrom urllib.parse import urlencode\n\ndef object_to_url_query_string(query, doseq=False):\n    \n    if isinstance(query, dict):\n        return urlencode(query, doseq)\n    return urlencode([tuple(i) for i in query], doseq)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_urlencode(\n            ARRAY);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_urlencode(\n            query ARRAY\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    SELECT utils.udf_urlencode(query, FALSE)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_urlencode(\n            OBJECT);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_urlencode(\n            query OBJECT\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NULL\nLANGUAGE SQL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    SELECT utils.udf_urlencode(query, FALSE)\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_object_to_url_query_string(\n            OBJECT);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_object_to_url_query_string(\n            object OBJECT\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    NOT NULL\nRETURNS NULL ON NULL INPUT\nIMMUTABLE\n\n    AS\n    $$\n    SELECT utils.udf_urlencode(object, FALSE)\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_evm_transform_log(\n            VARIANT);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_evm_transform_log(\n            decoded VARIANT\n    )\n    COPY GRANTS\n    RETURNS VARIANT\n    NULL\nLANGUAGE PYTHON\nIMMUTABLE\nRUNTIME_VERSION = '3.10'\nHANDLER = 'transform'\n\n    AS\n    $$\n    \nfrom copy import deepcopy\n\ndef transform_event(event: dict):\n    new_event = deepcopy(event)\n    if new_event.get(\"components\"):\n        components = new_event.get(\"components\")\n        for iy, y in enumerate(new_event[\"value\"]):\n            for i, c in enumerate(components):\n                y[i] = {\"value\": y[i], **c}\n            new_event[\"value\"][iy] = {z[\"name\"]: z[\"value\"] for z in y}\n        return new_event\n    else:\n        return event\n\n\ndef transform(events: list):\n    try:\n        results = [\n            transform_event(event) if event[\"decoded\"] else event\n            for event in events[\"data\"]\n        ]\n        events[\"data\"] = results\n        return events\n    except:\n        return events\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_evm_decode_log(\n            ARRAY,\n            OBJECT);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE EXTERNAL FUNCTION utils.udf_evm_decode_log(\n            abi ARRAY,\n            data OBJECT\n    )\n    COPY GRANTS\n    RETURNS ARRAY\n    NOT NULL\nRETURNS NULL ON NULL INPUT\n\n    api_integration = AWS_SUI_API_PROD_V2\n    AS 'https://nqj8j7ln67.execute-api.us-east-1.amazonaws.com/prod/evm/decode/log';\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_evm_decode_log(\n            OBJECT,\n            OBJECT);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE EXTERNAL FUNCTION utils.udf_evm_decode_log(\n            abi OBJECT,\n            data OBJECT\n    )\n    COPY GRANTS\n    RETURNS ARRAY\n    NOT NULL\nRETURNS NULL ON NULL INPUT\n\n    api_integration = AWS_SUI_API_PROD_V2\n    AS 'https://nqj8j7ln67.execute-api.us-east-1.amazonaws.com/prod/evm/decode/log';\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_evm_decode_trace(\n            OBJECT,\n            OBJECT);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE EXTERNAL FUNCTION utils.udf_evm_decode_trace(\n            abi OBJECT,\n            data OBJECT\n    )\n    COPY GRANTS\n    RETURNS ARRAY\n    NOT NULL\nRETURNS NULL ON NULL INPUT\n\n    api_integration = AWS_SUI_API_PROD_V2\n    AS 'https://nqj8j7ln67.execute-api.us-east-1.amazonaws.com/prod/evm/decode/trace';\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_base58_to_hex(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_base58_to_hex(\n            base58 STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = '3.10'\nHANDLER = 'transform_base58_to_hex'\n\n    AS\n    $$\n    \n\ndef transform_base58_to_hex(base58):\n    if base58 is None:\n        return 'Invalid input'\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    base_count = len(ALPHABET)\n\n    num = 0\n    leading_zeros = 0\n\n    for char in base58:\n        if char == '1':\n            leading_zeros += 1\n        else:\n            break\n\n    for char in base58:\n        num *= base_count\n        if char in ALPHABET:\n            num += ALPHABET.index(char)\n        else:\n            return 'Invalid character in input'\n\n    hex_string = hex(num)[2:]\n\n    if len(hex_string) % 2 != 0:\n        hex_string = '0' + hex_string\n\n    hex_leading_zeros = '00' * leading_zeros\n\n    return '0x' + hex_leading_zeros + hex_string\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_hex_to_base58(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_hex_to_base58(\n            hex STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = '3.10'\nHANDLER = 'transform_hex_to_base58'\n\n    AS\n    $$\n    \n\ndef transform_hex_to_base58(hex):\n    if hex is None or not hex.startswith('0x'):\n        return 'Invalid input'\n\n    hex = hex[2:]\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(hex)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_hex_to_bech32(\n            STRING,\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_hex_to_bech32(\n            hex STRING,\n            hrp STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = '3.10'\nHANDLER = 'transform_hex_to_bech32'\n\n    AS\n    $$\n    \n\ndef transform_hex_to_bech32(hex, hrp=''):\n    CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n\n    def bech32_polymod(values):\n        generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n        checksum = 1\n        for value in values:\n            top = checksum >> 25\n            checksum = ((checksum & 0x1ffffff) << 5) ^ value\n            for i in range(5):\n                checksum ^= generator[i] if ((top >> i) & 1) else 0\n        return checksum\n\n    def bech32_hrp_expand(hrp):\n        return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n\n    def bech32_create_checksum(hrp, data):\n        values = bech32_hrp_expand(hrp) + data\n        polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n        return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n\n    def bech32_convertbits(data, from_bits, to_bits, pad=True):\n        acc = 0\n        bits = 0\n        ret = []\n        maxv = (1 << to_bits) - 1\n        max_acc = (1 << (from_bits + to_bits - 1)) - 1\n        for value in data:\n            acc = ((acc << from_bits) | value) & max_acc\n            bits += from_bits\n            while bits >= to_bits:\n                bits -= to_bits\n                ret.append((acc >> bits) & maxv)\n        if pad and bits:\n            ret.append((acc << (to_bits - bits)) & maxv)\n        return ret\n\n    if hex is None or not hex.startswith('0x'):\n        return 'Invalid input'\n\n    hex = hex[2:]\n\n    data = bytes.fromhex(hex)\n    data5bit = bech32_convertbits(list(data), 8, 5)\n\n    if data5bit is None:\n        return 'Data conversion failed'\n\n    checksum = bech32_create_checksum(hrp, data5bit)\n    \n    return hrp + '1' + ''.join([CHARSET[d] for d in data5bit + checksum])\n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_int_to_binary(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_int_to_binary(\n            num STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = '3.10'\nHANDLER = 'int_to_binary'\n\n    AS\n    $$\n    \n\ndef int_to_binary(num):\n    num = int(num)\n    is_negative = num < 0\n    if is_negative:\n        num = -num\n\n    binary_string = bin(num)[2:]\n\n    if is_negative:\n        inverted_string = \"\".join(\"1\" if bit == \"0\" else \"0\" for bit in binary_string)\n\n        carry = 1\n        result = \"\"\n        for i in range(len(inverted_string) - 1, -1, -1):\n            if inverted_string[i] == \"1\" and carry == 1:\n                result = \"0\" + result\n            elif inverted_string[i] == \"0\" and carry == 1:\n                result = \"1\" + result \n                carry = 0\n            else:\n                result = inverted_string[i] + result\n\n        binary_string = result \n\n    return binary_string \n\n    $$;\n\n    \n    \n    \n    \n    \n    \n    \n    \n    DROP FUNCTION IF EXISTS utils.udf_binary_to_int(\n            STRING);\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    CREATE OR REPLACE  FUNCTION utils.udf_binary_to_int(\n            binary STRING\n    )\n    COPY GRANTS\n    RETURNS TEXT\n    LANGUAGE PYTHON\nRUNTIME_VERSION = '3.10'\nHANDLER = 'binary_to_int'\n\n    AS\n    $$\n    \n\ndef binary_to_int(binary):\n\n  for char in binary:\n    if char not in \"01\":\n      raise ValueError(\"Input string must be a valid binary string.\")\n      \n  integer = 0\n\n  for i, digit in enumerate(binary[::-1]):\n    digit_int = int(digit)\n\n    integer += digit_int * 2**i\n\n  return str(integer)\n    \n\n    $$;\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.livequery_models.generate_test_udf_skeleton": {"database": "SUI", "schema": "generate_test_udf_skeleton", "name": "generate_test_udf_skeleton", "resource_type": "analysis", "package_name": "livequery_models", "path": "analysis/generate_test_udf_skeleton.sql", "original_file_path": "analysis/generate_test_udf_skeleton.sql", "unique_id": "analysis.livequery_models.generate_test_udf_skeleton", "fqn": ["livequery_models", "analysis", "generate_test_udf_skeleton"], "alias": "", "checksum": {"name": "sha256", "checksum": "2931dee110117aaa477703fa3ad1dd92e9691d5c8ca46ce0d22145d0e43294ba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141890.2454536, "relation_name": null, "raw_code": "{% set schema = \"strangelove\" %}\n{% set config = fromyaml(config_strangelove_udfs(schema_name = schema, utils_schema_name = \"quicknode_utils\"))  %}\n{% set raw_test_queries %}\nstrangelove.get:\n  - |\n    'https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash'\n  - |\n    {\n      'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n    }\n\n\nstrangelove.post:\n  - |\n    'https://endpoint'\n  - |\n    {\n      'foo': 'bar'\n    }\n\n{% endset %}\n{% set test_queries = fromyaml(raw_test_queries) %}\n{{ test_queries }}\n{{ schema }}\n_____\n    columns:\n{%- for item in config %}\n      - name: {{ item[\"name\"] | replace(schema~\".\", \"\") }}\n        tests:\n          - test_marketplace_udf:\n              name: test_{{ item[\"name\"].replace(\".\", \"__\") ~ \"_status_200\" }}\n              args: >\n                {{ test_queries[item[\"name\"]] | join(\", \") | indent(16) }}\n              validations:\n                - result:status_code = 200\n{%- endfor %}\n\n=====================\n\n{{ config | pprint}}\n{# {% for item in config %}\n{% if item[\"return_type\"][0] != \"VARIANT\"%}\n  {{ item[\"return_type\"][0] }}\n{% endif %}\n{% endfor %} #}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.config_strangelove_udfs"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/analysis/generate_test_udf_skeleton.sql", "compiled": true, "compiled_code": "\n\n\n\n{'strangelove.get': [\"'https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash'\\n\", \"{\\n  'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\\n}\\n\"], 'strangelove.post': [\"'https://endpoint'\\n\", \"{\\n  'foo': 'bar'\\n}\\n\"]}\nstrangelove\n_____\n    columns:\n      - name: get\n        tests:\n          - test_marketplace_udf:\n              name: test_strangelove__get_status_200\n              args: >\n                'https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash'\n                , {\n                  'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n                }\n\n              validations:\n                - result:status_code = 200\n      - name: post\n        tests:\n          - test_marketplace_udf:\n              name: test_strangelove__post_status_200\n              args: >\n                'https://endpoint'\n                , {\n                  'foo': 'bar'\n                }\n\n              validations:\n                - result:status_code = 200\n\n=====================\n\n[{'name': 'strangelove.get',\n  'options': 'COMMENT = $$Issue a GET request to a Strangelove Endpoint '\n             '[Strangelove docs '\n             'here](https://voyager.strange.love/docs/cosmoshub/mainnet#/).$$\\n',\n  'return_type': ['VARIANT'],\n  'signature': [['URL', 'STRING', 'The url to issue a get request to'],\n                ['QUERY_ARGS', 'OBJECT', 'The query arguments']],\n  'sql': 'SELECT\\n'\n         '  live.udf_api(\\n'\n         \"    'GET',\\n\"\n         '    concat(\\n'\n         \"      URL, '?',\\n\"\n         '      utils.udf_object_to_url_query_string(QUERY_ARGS)\\n'\n         '    ),\\n'\n         \"    {'x-apikey': '{API_KEY}'},\\n\"\n         '    {},\\n'\n         \"    '_FSC_SYS/STRANGELOVE'\\n\"\n         ') as response\\n'},\n {'name': 'strangelove.post',\n  'options': 'COMMENT = $$Issue a POST request to a Strangelove Endpoint '\n             '[Strangelove docs '\n             'here](https://voyager.strange.love/docs/cosmoshub/mainnet#/).$$\\n',\n  'return_type': ['VARIANT'],\n  'signature': [['URL', 'STRING', 'The url to issue a post request to'],\n                ['QUERY', 'OBJECT', 'The body of the request']],\n  'sql': 'SELECT\\n'\n         '  live.udf_api(\\n'\n         \"    'POST',\\n\"\n         '    URL,\\n'\n         \"    {'x-apikey': '{API_KEY}'},\\n\"\n         '    QUERY,\\n'\n         \"    '_FSC_SYS/STRANGELOVE'\\n\"\n         ') as response\\n'}]\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.livequery_models.test_functions_py": {"database": "SUI", "schema": "test_functions_py", "name": "test_functions_py", "resource_type": "analysis", "package_name": "livequery_models", "path": "analysis/test_functions_py.sql", "original_file_path": "analysis/test_functions_py.sql", "unique_id": "analysis.livequery_models.test_functions_py", "fqn": ["livequery_models", "analysis", "test_functions_py"], "alias": "", "checksum": {"name": "sha256", "checksum": "3e379c91a7abf83ca2438fdd68efa21b5f98a91a7c1beb62091f7b4d13d33745"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141890.2561684, "relation_name": null, "raw_code": "{{ python_hex_to_int() }}\n{{ python_udf_hex_to_int_with_encoding() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.python_hex_to_int", "macro.livequery_models.python_udf_hex_to_int_with_encoding"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/analysis/test_functions_py.sql", "compiled": true, "compiled_code": "\ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    try:\n        return str(int(hex, 16)) if hex and hex != \"0x\" else None\n    except:\n        return None\n\n\ndef hex_to_int(encoding, hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('hex', '200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', '0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', NULL);\n    >> NULL\n    hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\n    >> -440911153\n    \"\"\"\n    try:\n        if not hex:\n            return None\n        if encoding.lower() == 's2c':\n            if hex[0:2].lower() != '0x':\n                hex = f'0x{hex}'\n\n            bits = len(hex[2:]) * 4\n            value = int(hex, 0)\n            if value & (1 << (bits - 1)):\n                value -= 1 << bits\n            return str(value)\n        else:\n            return str(int(hex, 16))\n    except:\n        return None\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "analysis.livequery_models.test_functions": {"database": "SUI", "schema": "test_functions", "name": "test_functions", "resource_type": "analysis", "package_name": "livequery_models", "path": "analysis/test_functions.sql", "original_file_path": "analysis/test_functions.sql", "unique_id": "analysis.livequery_models.test_functions", "fqn": ["livequery_models", "analysis", "test_functions"], "alias": "", "checksum": {"name": "sha256", "checksum": "0ab84ce91d84a3416f20a65f80f6226b0dec39313dbd0f555f40cdf721121b9e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141890.261265, "relation_name": null, "raw_code": "{{ sql_udf_json_rpc_call(True) }}\n{# {{ sql_udf_json_rpc_call(False) }} #}\n{{ config_core__live() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.sql_udf_json_rpc_call", "macro.livequery_models.config_core__live"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/analysis/test_functions.sql", "compiled": true, "compiled_code": "\n    SELECT IFF(method IS NULL or params IS NULL,\n              NULL,\n              {\n                'jsonrpc': '2.0',\n                'method': method,\n                'params': params\n                \n                  , 'id': hash(method, params)::string\n                \n              }\n              )\n\n\n\n\n- name: _live.udf_api_batched\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [DATA, VARIANT]\n    - [user_id, STRING]\n    - [SECRET, STRING]\n  return_type: VARIANT\n  func_type: EXTERNAL\n  api_integration: 'AWS_SUI_API_PROD_V2'\n  max_batch_rows: ''\n  options: |\n    NOT NULL\n  sql: udf_api\n\n- name: _live.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [DATA, VARIANT]\n    - [user_id, STRING]\n    - [SECRET, STRING]\n  return_type: VARIANT\n  func_type: EXTERNAL\n  api_integration: 'AWS_SUI_API_PROD_V2'\n  options: |\n    NOT NULL\n  sql: udf_api\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}}, "seed.livequery_models.live__verified_api_endpoints": {"database": "SUI", "schema": "live", "name": "live__verified_api_endpoints", "resource_type": "seed", "package_name": "livequery_models", "path": "live__verified_api_endpoints.csv", "original_file_path": "data/live__verified_api_endpoints.csv", "unique_id": "seed.livequery_models.live__verified_api_endpoints", "fqn": ["livequery_models", "live__verified_api_endpoints"], "alias": "verified_api_endpoints", "checksum": {"name": "sha256", "checksum": "f801025b0fb9a370678db2b5b63ead57dc1371caffa0688266d9be12605a8afa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {}, "created_at": 1756141890.4208238, "relation_name": "SUI.live.verified_api_endpoints", "raw_code": "", "root_path": "/home/runner/work/sui-models/sui-models/dbt_packages/livequery_models", "depends_on": {"macros": []}}, "operation.livequery_models.livequery_models-on-run-start-0": {"database": "SUI", "schema": "livequery_models-on-run-start-0", "name": "livequery_models-on-run-start-0", "resource_type": "operation", "package_name": "livequery_models", "path": "hooks/livequery_models-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.livequery_models.livequery_models-on-run-start-0", "fqn": ["livequery_models", "hooks", "livequery_models-on-run-start-0"], "alias": "", "checksum": {"name": "sha256", "checksum": "8568a6cd6945c02cbe4594daa108145516b0f88b8f7274e0807d60b18a0d5e14"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": ["on-run-start"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141890.4378703, "relation_name": null, "raw_code": "{{ create_sps() }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.create_sps"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/./dbt_project.yml/hooks/livequery_models-on-run-start-0.sql", "compiled": true, "compiled_code": "\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "operation.livequery_models.livequery_models-on-run-end-0": {"database": "SUI", "schema": "livequery_models-on-run-end-0", "name": "livequery_models-on-run-end-0", "resource_type": "operation", "package_name": "livequery_models", "path": "hooks/livequery_models-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "unique_id": "operation.livequery_models.livequery_models-on-run-end-0", "fqn": ["livequery_models", "hooks", "livequery_models-on-run-end-0"], "alias": "", "checksum": {"name": "sha256", "checksum": "8568a6cd6945c02cbe4594daa108145516b0f88b8f7274e0807d60b18a0d5e14"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "copy_grants": true}, "tags": ["on-run-end"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns"}, "created_at": 1756141890.4441772, "relation_name": null, "raw_code": "{{ apply_meta_as_tags(results) }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.apply_meta_as_tags"], "nodes": []}, "compiled_path": "target/compiled/livequery_models/./dbt_project.yml/hooks/livequery_models-on-run-end-0.sql", "compiled": true, "compiled_code": "\n    \n        \n        \n        \n        \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "index": 0}, "test.sui_models.not_null_silver__complete_token_asset_metadata_PROVIDER.0d1d2c6852": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__complete_token_asset_metadata_PROVIDER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__complete_token_asset_metadata_PROVIDER.sql", "original_file_path": "models/silver/prices/silver__complete_token_asset_metadata.yml", "unique_id": "test.sui_models.not_null_silver__complete_token_asset_metadata_PROVIDER.0d1d2c6852", "fqn": ["sui_models", "silver", "prices", "not_null_silver__complete_token_asset_metadata_PROVIDER"], "alias": "complete_token_asset_metadata_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7263663, "relation_name": "SUI.not_null_silver.complete_token_asset_metadata_PROVIDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_asset_metadata"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_asset_metadata.yml/not_null_silver__complete_token_asset_metadata_PROVIDER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.complete_token_asset_metadata where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere PROVIDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROVIDER", "file_key_name": "models.silver__complete_token_asset_metadata", "attached_node": "model.sui_models.silver__complete_token_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROVIDER", "model": "{{ get_where_subquery(ref('silver__complete_token_asset_metadata')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS.06a52e0e67": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS.sql", "original_file_path": "models/silver/prices/silver__complete_token_asset_metadata.yml", "unique_id": "test.sui_models.not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS.06a52e0e67", "fqn": ["sui_models", "silver", "prices", "not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS"], "alias": "complete_token_asset_metadata_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7283032, "relation_name": "SUI.not_null_silver.complete_token_asset_metadata_TOKEN_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_asset_metadata"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_asset_metadata.yml/not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.complete_token_asset_metadata where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TOKEN_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_ADDRESS", "file_key_name": "models.silver__complete_token_asset_metadata", "attached_node": "model.sui_models.silver__complete_token_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_ADDRESS", "model": "{{ get_where_subquery(ref('silver__complete_token_asset_metadata')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN.3791975c91": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__complete_token_asset_metadata_BLOCKCHAIN", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__complete_token_asset_metadata_BLOCKCHAIN.sql", "original_file_path": "models/silver/prices/silver__complete_token_asset_metadata.yml", "unique_id": "test.sui_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN.3791975c91", "fqn": ["sui_models", "silver", "prices", "not_null_silver__complete_token_asset_metadata_BLOCKCHAIN"], "alias": "complete_token_asset_metadata_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7298536, "relation_name": "SUI.not_null_silver.complete_token_asset_metadata_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_asset_metadata"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_asset_metadata.yml/not_null_silver__complete_token_asset_metadata_BLOCKCHAIN.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.complete_token_asset_metadata where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__complete_token_asset_metadata", "attached_node": "model.sui_models.silver__complete_token_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__complete_token_asset_metadata')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID.fe8350a322": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID.sql", "original_file_path": "models/silver/prices/silver__complete_token_asset_metadata.yml", "unique_id": "test.sui_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID.fe8350a322", "fqn": ["sui_models", "silver", "prices", "not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID"], "alias": "complete_token_asset_metadata_BLOCKCHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7313833, "relation_name": "SUI.not_null_silver.complete_token_asset_metadata_BLOCKCHAIN_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_asset_metadata"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_asset_metadata.yml/not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.complete_token_asset_metadata where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCKCHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN_ID", "file_key_name": "models.silver__complete_token_asset_metadata", "attached_node": "model.sui_models.silver__complete_token_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN_ID", "model": "{{ get_where_subquery(ref('silver__complete_token_asset_metadata')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__complete_token_asset_metadata_MODIFIED_TIMESTAMP.58ef7db480": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__complete_token_asset_metadata_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__complete_toke_502d28fe7759d5565101adc7372ac059.sql", "original_file_path": "models/silver/prices/silver__complete_token_asset_metadata.yml", "unique_id": "test.sui_models.not_null_silver__complete_token_asset_metadata_MODIFIED_TIMESTAMP.58ef7db480", "fqn": ["sui_models", "silver", "prices", "not_null_silver__complete_token_asset_metadata_MODIFIED_TIMESTAMP"], "alias": "complete_token_asset_metadata_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_silver__complete_toke_502d28fe7759d5565101adc7372ac059", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "not_null_silver__complete_toke_502d28fe7759d5565101adc7372ac059"}, "created_at": 1756141890.732885, "relation_name": "SUI.not_null_silver.complete_token_asset_metadata_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__complete_toke_502d28fe7759d5565101adc7372ac059\") }}", "language": "sql", "refs": [{"name": "silver__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_asset_metadata"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_asset_metadata.yml/not_null_silver__complete_toke_502d28fe7759d5565101adc7372ac059.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.complete_token_asset_metadata where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere MODIFIED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.silver__complete_token_asset_metadata", "attached_node": "model.sui_models.silver__complete_token_asset_metadata", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__complete_token_asset_metadata')) }}"}, "namespace": null}}, "test.sui_models.unique_silver__complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID.99f9227588": {"database": "SUI", "schema": "unique_silver", "name": "unique_silver__complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID", "resource_type": "test", "package_name": "sui_models", "path": "unique_silver__complete_token__7b9913fd69873ddd6c6a5040164278f9.sql", "original_file_path": "models/silver/prices/silver__complete_token_asset_metadata.yml", "unique_id": "test.sui_models.unique_silver__complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID.99f9227588", "fqn": ["sui_models", "silver", "prices", "unique_silver__complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID"], "alias": "complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_silver__complete_token__7b9913fd69873ddd6c6a5040164278f9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "unique_silver__complete_token__7b9913fd69873ddd6c6a5040164278f9"}, "created_at": 1756141890.7344005, "relation_name": "SUI.unique_silver.complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_silver__complete_token__7b9913fd69873ddd6c6a5040164278f9\") }}", "language": "sql", "refs": [{"name": "silver__complete_token_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_asset_metadata"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_asset_metadata.yml/unique_silver__complete_token__7b9913fd69873ddd6c6a5040164278f9.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    COMPLETE_TOKEN_ASSET_METADATA_ID as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.silver.complete_token_asset_metadata where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere COMPLETE_TOKEN_ASSET_METADATA_ID is not null\ngroup by COMPLETE_TOKEN_ASSET_METADATA_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COMPLETE_TOKEN_ASSET_METADATA_ID", "file_key_name": "models.silver__complete_token_asset_metadata", "attached_node": "model.sui_models.silver__complete_token_asset_metadata", "test_metadata": {"name": "unique", "kwargs": {"column_name": "COMPLETE_TOKEN_ASSET_METADATA_ID", "model": "{{ get_where_subquery(ref('silver__complete_token_asset_metadata')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__complete_token_prices_HOUR.d5f4cd597b": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_HOUR", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__complete_token_prices_HOUR.sql", "original_file_path": "models/silver/prices/silver__complete_token_prices.yml", "unique_id": "test.sui_models.not_null_silver__complete_token_prices_HOUR.d5f4cd597b", "fqn": ["sui_models", "silver", "prices", "not_null_silver__complete_token_prices_HOUR"], "alias": "complete_token_prices_HOUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7389371, "relation_name": "SUI.not_null_silver.complete_token_prices_HOUR", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_prices"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_prices.yml/not_null_silver__complete_token_prices_HOUR.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.complete_token_prices where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere HOUR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "HOUR", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.sui_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HOUR", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__complete_token_prices_TOKEN_ADDRESS.7e03ade9df": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_TOKEN_ADDRESS", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__complete_token_prices_TOKEN_ADDRESS.sql", "original_file_path": "models/silver/prices/silver__complete_token_prices.yml", "unique_id": "test.sui_models.not_null_silver__complete_token_prices_TOKEN_ADDRESS.7e03ade9df", "fqn": ["sui_models", "silver", "prices", "not_null_silver__complete_token_prices_TOKEN_ADDRESS"], "alias": "complete_token_prices_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7405252, "relation_name": "SUI.not_null_silver.complete_token_prices_TOKEN_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_prices"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_prices.yml/not_null_silver__complete_token_prices_TOKEN_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.complete_token_prices where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TOKEN_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_ADDRESS", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.sui_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_ADDRESS", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__complete_token_prices_BLOCKCHAIN.ada1620192": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_BLOCKCHAIN", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__complete_token_prices_BLOCKCHAIN.sql", "original_file_path": "models/silver/prices/silver__complete_token_prices.yml", "unique_id": "test.sui_models.not_null_silver__complete_token_prices_BLOCKCHAIN.ada1620192", "fqn": ["sui_models", "silver", "prices", "not_null_silver__complete_token_prices_BLOCKCHAIN"], "alias": "complete_token_prices_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7420278, "relation_name": "SUI.not_null_silver.complete_token_prices_BLOCKCHAIN", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_prices"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_prices.yml/not_null_silver__complete_token_prices_BLOCKCHAIN.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.complete_token_prices where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.sui_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__complete_token_prices_BLOCKCHAIN_ID.6aac0fa10e": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_BLOCKCHAIN_ID", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__complete_token_prices_BLOCKCHAIN_ID.sql", "original_file_path": "models/silver/prices/silver__complete_token_prices.yml", "unique_id": "test.sui_models.not_null_silver__complete_token_prices_BLOCKCHAIN_ID.6aac0fa10e", "fqn": ["sui_models", "silver", "prices", "not_null_silver__complete_token_prices_BLOCKCHAIN_ID"], "alias": "complete_token_prices_BLOCKCHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7435024, "relation_name": "SUI.not_null_silver.complete_token_prices_BLOCKCHAIN_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_prices"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_prices.yml/not_null_silver__complete_token_prices_BLOCKCHAIN_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.complete_token_prices where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCKCHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCKCHAIN_ID", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.sui_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN_ID", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__complete_token_prices_PROVIDER.d7e55cb9a3": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_PROVIDER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__complete_token_prices_PROVIDER.sql", "original_file_path": "models/silver/prices/silver__complete_token_prices.yml", "unique_id": "test.sui_models.not_null_silver__complete_token_prices_PROVIDER.d7e55cb9a3", "fqn": ["sui_models", "silver", "prices", "not_null_silver__complete_token_prices_PROVIDER"], "alias": "complete_token_prices_PROVIDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.74508, "relation_name": "SUI.not_null_silver.complete_token_prices_PROVIDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_prices"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_prices.yml/not_null_silver__complete_token_prices_PROVIDER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.complete_token_prices where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere PROVIDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PROVIDER", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.sui_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROVIDER", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__complete_token_prices_PRICE.9b78fa1dae": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_PRICE", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__complete_token_prices_PRICE.sql", "original_file_path": "models/silver/prices/silver__complete_token_prices.yml", "unique_id": "test.sui_models.not_null_silver__complete_token_prices_PRICE.9b78fa1dae", "fqn": ["sui_models", "silver", "prices", "not_null_silver__complete_token_prices_PRICE"], "alias": "complete_token_prices_PRICE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7465718, "relation_name": "SUI.not_null_silver.complete_token_prices_PRICE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_prices"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_prices.yml/not_null_silver__complete_token_prices_PRICE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.complete_token_prices where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PRICE", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.sui_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__complete_token_prices_IS_IMPUTED.8a84f91c9e": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_IS_IMPUTED", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__complete_token_prices_IS_IMPUTED.sql", "original_file_path": "models/silver/prices/silver__complete_token_prices.yml", "unique_id": "test.sui_models.not_null_silver__complete_token_prices_IS_IMPUTED.8a84f91c9e", "fqn": ["sui_models", "silver", "prices", "not_null_silver__complete_token_prices_IS_IMPUTED"], "alias": "complete_token_prices_IS_IMPUTED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7480433, "relation_name": "SUI.not_null_silver.complete_token_prices_IS_IMPUTED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_prices"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_prices.yml/not_null_silver__complete_token_prices_IS_IMPUTED.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.complete_token_prices where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere IS_IMPUTED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "IS_IMPUTED", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.sui_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IS_IMPUTED", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__complete_token_prices__INSERTED_TIMESTAMP.90a2d67d90": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices__INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__complete_token_prices__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/prices/silver__complete_token_prices.yml", "unique_id": "test.sui_models.not_null_silver__complete_token_prices__INSERTED_TIMESTAMP.90a2d67d90", "fqn": ["sui_models", "silver", "prices", "not_null_silver__complete_token_prices__INSERTED_TIMESTAMP"], "alias": "complete_token_prices", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.749509, "relation_name": "SUI.not_null_silver.complete_token_prices", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_prices"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_prices.yml/not_null_silver__complete_token_prices__INSERTED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.complete_token_prices where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.sui_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP.74882978f6": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/silver/prices/silver__complete_token_prices.yml", "unique_id": "test.sui_models.not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP.74882978f6", "fqn": ["sui_models", "silver", "prices", "not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP"], "alias": "complete_token_prices_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7509496, "relation_name": "SUI.not_null_silver.complete_token_prices_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_prices"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_prices.yml/not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.complete_token_prices where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere MODIFIED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.sui_models.silver__complete_token_prices", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.sui_models.unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID.c4ea6e2a79": {"database": "SUI", "schema": "unique_silver", "name": "unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID", "resource_type": "test", "package_name": "sui_models", "path": "unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID.sql", "original_file_path": "models/silver/prices/silver__complete_token_prices.yml", "unique_id": "test.sui_models.unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID.c4ea6e2a79", "fqn": ["sui_models", "silver", "prices", "unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID"], "alias": "complete_token_prices_COMPLETE_TOKEN_PRICES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7524016, "relation_name": "SUI.unique_silver.complete_token_prices_COMPLETE_TOKEN_PRICES_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__complete_token_prices", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__complete_token_prices"]}, "compiled_path": "target/compiled/sui_models/models/silver/prices/silver__complete_token_prices.yml/unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    COMPLETE_TOKEN_PRICES_ID as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.silver.complete_token_prices where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere COMPLETE_TOKEN_PRICES_ID is not null\ngroup by COMPLETE_TOKEN_PRICES_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COMPLETE_TOKEN_PRICES_ID", "file_key_name": "models.silver__complete_token_prices", "attached_node": "model.sui_models.silver__complete_token_prices", "test_metadata": {"name": "unique", "kwargs": {"column_name": "COMPLETE_TOKEN_PRICES_ID", "model": "{{ get_where_subquery(ref('silver__complete_token_prices')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__transfers_CHECKPOINT_NUMBER.5a112e2666": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__transfers_CHECKPOINT_NUMBER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__transfers_CHECKPOINT_NUMBER.sql", "original_file_path": "models/silver/core/silver_core.yml", "unique_id": "test.sui_models.not_null_silver__transfers_CHECKPOINT_NUMBER.5a112e2666", "fqn": ["sui_models", "silver", "core", "not_null_silver__transfers_CHECKPOINT_NUMBER"], "alias": "transfers_CHECKPOINT_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.772489, "relation_name": "SUI.not_null_silver.transfers_CHECKPOINT_NUMBER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__transfers"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver_core.yml/not_null_silver__transfers_CHECKPOINT_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHECKPOINT_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHECKPOINT_NUMBER", "file_key_name": "models.silver__transfers", "attached_node": "model.sui_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHECKPOINT_NUMBER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__transfers_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/core/silver_core.yml", "unique_id": "test.sui_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "fqn": ["sui_models", "silver", "core", "not_null_silver__transfers_BLOCK_TIMESTAMP"], "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.773981, "relation_name": "SUI.not_null_silver.transfers_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__transfers"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver_core.yml/not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers", "attached_node": "model.sui_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__transfers_TX_DIGEST.491a708e14": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__transfers_TX_DIGEST", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__transfers_TX_DIGEST.sql", "original_file_path": "models/silver/core/silver_core.yml", "unique_id": "test.sui_models.not_null_silver__transfers_TX_DIGEST.491a708e14", "fqn": ["sui_models", "silver", "core", "not_null_silver__transfers_TX_DIGEST"], "alias": "transfers_TX_DIGEST", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7754607, "relation_name": "SUI.not_null_silver.transfers_TX_DIGEST", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__transfers"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver_core.yml/not_null_silver__transfers_TX_DIGEST.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_DIGEST is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_DIGEST", "file_key_name": "models.silver__transfers", "attached_node": "model.sui_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_DIGEST", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__transfers_TX_SUCCEEDED", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__transfers_TX_SUCCEEDED.sql", "original_file_path": "models/silver/core/silver_core.yml", "unique_id": "test.sui_models.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af", "fqn": ["sui_models", "silver", "core", "not_null_silver__transfers_TX_SUCCEEDED"], "alias": "transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7769089, "relation_name": "SUI.not_null_silver.transfers_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__transfers"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver_core.yml/not_null_silver__transfers_TX_SUCCEEDED.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__transfers", "attached_node": "model.sui_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__transfers_TX_SENDER.a55628723f": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__transfers_TX_SENDER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__transfers_TX_SENDER.sql", "original_file_path": "models/silver/core/silver_core.yml", "unique_id": "test.sui_models.not_null_silver__transfers_TX_SENDER.a55628723f", "fqn": ["sui_models", "silver", "core", "not_null_silver__transfers_TX_SENDER"], "alias": "transfers_TX_SENDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.778498, "relation_name": "SUI.not_null_silver.transfers_TX_SENDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__transfers"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver_core.yml/not_null_silver__transfers_TX_SENDER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SENDER", "file_key_name": "models.silver__transfers", "attached_node": "model.sui_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SENDER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__transfers_SENDER.0abbede6fe": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__transfers_SENDER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__transfers_SENDER.sql", "original_file_path": "models/silver/core/silver_core.yml", "unique_id": "test.sui_models.not_null_silver__transfers_SENDER.0abbede6fe", "fqn": ["sui_models", "silver", "core", "not_null_silver__transfers_SENDER"], "alias": "transfers_SENDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7799647, "relation_name": "SUI.not_null_silver.transfers_SENDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__transfers"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver_core.yml/not_null_silver__transfers_SENDER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SENDER", "file_key_name": "models.silver__transfers", "attached_node": "model.sui_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__transfers_RECEIVER.965c9f325d": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__transfers_RECEIVER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__transfers_RECEIVER.sql", "original_file_path": "models/silver/core/silver_core.yml", "unique_id": "test.sui_models.not_null_silver__transfers_RECEIVER.965c9f325d", "fqn": ["sui_models", "silver", "core", "not_null_silver__transfers_RECEIVER"], "alias": "transfers_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.781441, "relation_name": "SUI.not_null_silver.transfers_RECEIVER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__transfers"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver_core.yml/not_null_silver__transfers_RECEIVER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere RECEIVER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "RECEIVER", "file_key_name": "models.silver__transfers", "attached_node": "model.sui_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__transfers_BALANCE_CHANGE_INDEX.63ed610263": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__transfers_BALANCE_CHANGE_INDEX", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__transfers_BALANCE_CHANGE_INDEX.sql", "original_file_path": "models/silver/core/silver_core.yml", "unique_id": "test.sui_models.not_null_silver__transfers_BALANCE_CHANGE_INDEX.63ed610263", "fqn": ["sui_models", "silver", "core", "not_null_silver__transfers_BALANCE_CHANGE_INDEX"], "alias": "transfers_BALANCE_CHANGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7828884, "relation_name": "SUI.not_null_silver.transfers_BALANCE_CHANGE_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__transfers"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver_core.yml/not_null_silver__transfers_BALANCE_CHANGE_INDEX.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BALANCE_CHANGE_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BALANCE_CHANGE_INDEX", "file_key_name": "models.silver__transfers", "attached_node": "model.sui_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BALANCE_CHANGE_INDEX", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__transfers_COIN_TYPE.4382d98e92": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__transfers_COIN_TYPE", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__transfers_COIN_TYPE.sql", "original_file_path": "models/silver/core/silver_core.yml", "unique_id": "test.sui_models.not_null_silver__transfers_COIN_TYPE.4382d98e92", "fqn": ["sui_models", "silver", "core", "not_null_silver__transfers_COIN_TYPE"], "alias": "transfers_COIN_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7844138, "relation_name": "SUI.not_null_silver.transfers_COIN_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__transfers"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver_core.yml/not_null_silver__transfers_COIN_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere COIN_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COIN_TYPE", "file_key_name": "models.silver__transfers", "attached_node": "model.sui_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COIN_TYPE", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__transfers_AMOUNT_RAW.685359addc": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__transfers_AMOUNT_RAW", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__transfers_AMOUNT_RAW.sql", "original_file_path": "models/silver/core/silver_core.yml", "unique_id": "test.sui_models.not_null_silver__transfers_AMOUNT_RAW.685359addc", "fqn": ["sui_models", "silver", "core", "not_null_silver__transfers_AMOUNT_RAW"], "alias": "transfers_AMOUNT_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7858596, "relation_name": "SUI.not_null_silver.transfers_AMOUNT_RAW", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__transfers"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver_core.yml/not_null_silver__transfers_AMOUNT_RAW.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere AMOUNT_RAW is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_RAW", "file_key_name": "models.silver__transfers", "attached_node": "model.sui_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_RAW", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__transfers_TRANSFERS_ID.37c3782af7": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__transfers_TRANSFERS_ID", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__transfers_TRANSFERS_ID.sql", "original_file_path": "models/silver/core/silver_core.yml", "unique_id": "test.sui_models.not_null_silver__transfers_TRANSFERS_ID.37c3782af7", "fqn": ["sui_models", "silver", "core", "not_null_silver__transfers_TRANSFERS_ID"], "alias": "transfers_TRANSFERS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.7873213, "relation_name": "SUI.not_null_silver.transfers_TRANSFERS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__transfers"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver_core.yml/not_null_silver__transfers_TRANSFERS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TRANSFERS_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSFERS_ID", "file_key_name": "models.silver__transfers", "attached_node": "model.sui_models.silver__transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSFERS_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.sui_models.unique_silver__transfers_TRANSFERS_ID.48d51d4894": {"database": "SUI", "schema": "unique_silver", "name": "unique_silver__transfers_TRANSFERS_ID", "resource_type": "test", "package_name": "sui_models", "path": "unique_silver__transfers_TRANSFERS_ID.sql", "original_file_path": "models/silver/core/silver_core.yml", "unique_id": "test.sui_models.unique_silver__transfers_TRANSFERS_ID.48d51d4894", "fqn": ["sui_models", "silver", "core", "unique_silver__transfers_TRANSFERS_ID"], "alias": "transfers_TRANSFERS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.788935, "relation_name": "SUI.unique_silver.transfers_TRANSFERS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__transfers"]}, "compiled_path": "target/compiled/sui_models/models/silver/core/silver_core.yml/unique_silver__transfers_TRANSFERS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    TRANSFERS_ID as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.silver.transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TRANSFERS_ID is not null\ngroup by TRANSFERS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRANSFERS_ID", "file_key_name": "models.silver__transfers", "attached_node": "model.sui_models.silver__transfers", "test_metadata": {"name": "unique", "kwargs": {"column_name": "TRANSFERS_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__aftermath_dex_swaps_CHECKPOINT_NUMBER.381507dc3d": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__aftermath_dex_swaps_CHECKPOINT_NUMBER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__aftermath_dex_swaps_CHECKPOINT_NUMBER.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__aftermath_dex_swaps_CHECKPOINT_NUMBER.381507dc3d", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__aftermath_dex_swaps_CHECKPOINT_NUMBER"], "alias": "aftermath_dex_swaps_CHECKPOINT_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8038845, "relation_name": "SUI.not_null_silver.aftermath_dex_swaps_CHECKPOINT_NUMBER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__aftermath_dex_swaps_CHECKPOINT_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHECKPOINT_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHECKPOINT_NUMBER", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHECKPOINT_NUMBER", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__aftermath_dex_swaps_BLOCK_TIMESTAMP.3a5db7ac30": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__aftermath_dex_swaps_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__aftermath_dex_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__aftermath_dex_swaps_BLOCK_TIMESTAMP.3a5db7ac30", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__aftermath_dex_swaps_BLOCK_TIMESTAMP"], "alias": "aftermath_dex_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8053882, "relation_name": "SUI.not_null_silver.aftermath_dex_swaps_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__aftermath_dex_swaps_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__aftermath_dex_swaps_TX_DIGEST.c6d9832293": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__aftermath_dex_swaps_TX_DIGEST", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__aftermath_dex_swaps_TX_DIGEST.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__aftermath_dex_swaps_TX_DIGEST.c6d9832293", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__aftermath_dex_swaps_TX_DIGEST"], "alias": "aftermath_dex_swaps_TX_DIGEST", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8068583, "relation_name": "SUI.not_null_silver.aftermath_dex_swaps_TX_DIGEST", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__aftermath_dex_swaps_TX_DIGEST.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_DIGEST is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_DIGEST", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_DIGEST", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__aftermath_dex_swaps_EVENT_INDEX.cc0014d808": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__aftermath_dex_swaps_EVENT_INDEX", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__aftermath_dex_swaps_EVENT_INDEX.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__aftermath_dex_swaps_EVENT_INDEX.cc0014d808", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__aftermath_dex_swaps_EVENT_INDEX"], "alias": "aftermath_dex_swaps_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8083315, "relation_name": "SUI.not_null_silver.aftermath_dex_swaps_EVENT_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__aftermath_dex_swaps_EVENT_INDEX.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere EVENT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EVENT_INDEX", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__aftermath_dex_swaps_EVENT_MODULE.d13926628d": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__aftermath_dex_swaps_EVENT_MODULE", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__aftermath_dex_swaps_EVENT_MODULE.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__aftermath_dex_swaps_EVENT_MODULE.d13926628d", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__aftermath_dex_swaps_EVENT_MODULE"], "alias": "aftermath_dex_swaps_EVENT_MODULE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.809786, "relation_name": "SUI.not_null_silver.aftermath_dex_swaps_EVENT_MODULE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__aftermath_dex_swaps_EVENT_MODULE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere EVENT_MODULE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EVENT_MODULE", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_MODULE", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__aftermath_dex_swaps_PLATFORM_ADDRESS.5eb9fe88b0": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__aftermath_dex_swaps_PLATFORM_ADDRESS", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__aftermath_dex_swaps_PLATFORM_ADDRESS.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__aftermath_dex_swaps_PLATFORM_ADDRESS.5eb9fe88b0", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__aftermath_dex_swaps_PLATFORM_ADDRESS"], "alias": "aftermath_dex_swaps_PLATFORM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.811334, "relation_name": "SUI.not_null_silver.aftermath_dex_swaps_PLATFORM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__aftermath_dex_swaps_PLATFORM_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere PLATFORM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PLATFORM_ADDRESS", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__aftermath_dex_swaps_AMOUNT_IN_RAW.bcec4ae47b": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__aftermath_dex_swaps_AMOUNT_IN_RAW", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__aftermath_dex_swaps_AMOUNT_IN_RAW.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__aftermath_dex_swaps_AMOUNT_IN_RAW.bcec4ae47b", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__aftermath_dex_swaps_AMOUNT_IN_RAW"], "alias": "aftermath_dex_swaps_AMOUNT_IN_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8127792, "relation_name": "SUI.not_null_silver.aftermath_dex_swaps_AMOUNT_IN_RAW", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__aftermath_dex_swaps_AMOUNT_IN_RAW.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere AMOUNT_IN_RAW is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_IN_RAW", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_IN_RAW", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_expression_is_true_silver__aftermath_dex_swaps_AMOUNT_IN_RAW___0.93e91a724e": {"database": "SUI", "schema": "dbt_utils_expression_is_true_silver", "name": "dbt_utils_expression_is_true_silver__aftermath_dex_swaps_AMOUNT_IN_RAW___0", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_expression_is_true_s_4b11da0791a4cc06b749acd180eacfef.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.dbt_utils_expression_is_true_silver__aftermath_dex_swaps_AMOUNT_IN_RAW___0.93e91a724e", "fqn": ["sui_models", "silver", "defi", "dex", "dbt_utils_expression_is_true_silver__aftermath_dex_swaps_AMOUNT_IN_RAW___0"], "alias": "aftermath_dex_swaps_AMOUNT_IN_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_4b11da0791a4cc06b749acd180eacfef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_utils_expression_is_true_s_4b11da0791a4cc06b749acd180eacfef"}, "created_at": 1756141890.814218, "relation_name": "SUI.dbt_utils_expression_is_true_silver.aftermath_dex_swaps_AMOUNT_IN_RAW", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_4b11da0791a4cc06b749acd180eacfef\") }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/dbt_utils_expression_is_true_s_4b11da0791a4cc06b749acd180eacfef.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\nwhere not(AMOUNT_IN_RAW >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_IN_RAW", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "AMOUNT_IN_RAW", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW.f97cf40b44": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW.f97cf40b44", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW"], "alias": "aftermath_dex_swaps_AMOUNT_OUT_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8292701, "relation_name": "SUI.not_null_silver.aftermath_dex_swaps_AMOUNT_OUT_RAW", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere AMOUNT_OUT_RAW is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_OUT_RAW", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_OUT_RAW", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_expression_is_true_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW___0.bd46b88800": {"database": "SUI", "schema": "dbt_utils_expression_is_true_silver", "name": "dbt_utils_expression_is_true_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW___0", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_expression_is_true_s_cad8a5ffd4df88b467ed341397b3b291.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.dbt_utils_expression_is_true_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW___0.bd46b88800", "fqn": ["sui_models", "silver", "defi", "dex", "dbt_utils_expression_is_true_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW___0"], "alias": "aftermath_dex_swaps_AMOUNT_OUT_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_cad8a5ffd4df88b467ed341397b3b291", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_utils_expression_is_true_s_cad8a5ffd4df88b467ed341397b3b291"}, "created_at": 1756141890.8307786, "relation_name": "SUI.dbt_utils_expression_is_true_silver.aftermath_dex_swaps_AMOUNT_OUT_RAW", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_cad8a5ffd4df88b467ed341397b3b291\") }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/dbt_utils_expression_is_true_s_cad8a5ffd4df88b467ed341397b3b291.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\nwhere not(AMOUNT_OUT_RAW >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_OUT_RAW", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "AMOUNT_OUT_RAW", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_silver__aftermath_dex_swaps_STEPS.0a16ef3205": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__aftermath_dex_swaps_STEPS", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__aftermath_dex_swaps_STEPS.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__aftermath_dex_swaps_STEPS.0a16ef3205", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__aftermath_dex_swaps_STEPS"], "alias": "aftermath_dex_swaps_STEPS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8345513, "relation_name": "SUI.not_null_silver.aftermath_dex_swaps_STEPS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__aftermath_dex_swaps_STEPS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere STEPS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STEPS", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STEPS", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_expression_is_true_silver__aftermath_dex_swaps_STEPS___0.6de3517530": {"database": "SUI", "schema": "dbt_utils_expression_is_true_silver", "name": "dbt_utils_expression_is_true_silver__aftermath_dex_swaps_STEPS___0", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_expression_is_true_s_a3641e97b93dca5c71eb0f75ac637bfd.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.dbt_utils_expression_is_true_silver__aftermath_dex_swaps_STEPS___0.6de3517530", "fqn": ["sui_models", "silver", "defi", "dex", "dbt_utils_expression_is_true_silver__aftermath_dex_swaps_STEPS___0"], "alias": "aftermath_dex_swaps_STEPS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_a3641e97b93dca5c71eb0f75ac637bfd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_utils_expression_is_true_s_a3641e97b93dca5c71eb0f75ac637bfd"}, "created_at": 1756141890.8360693, "relation_name": "SUI.dbt_utils_expression_is_true_silver.aftermath_dex_swaps_STEPS", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_a3641e97b93dca5c71eb0f75ac637bfd\") }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/dbt_utils_expression_is_true_s_a3641e97b93dca5c71eb0f75ac637bfd.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\nwhere not(STEPS > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STEPS", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "STEPS", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_silver__aftermath_dex_swaps_TOKEN_IN_TYPE.b5c05db57f": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__aftermath_dex_swaps_TOKEN_IN_TYPE", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__aftermath_dex_swaps_TOKEN_IN_TYPE.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__aftermath_dex_swaps_TOKEN_IN_TYPE.b5c05db57f", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__aftermath_dex_swaps_TOKEN_IN_TYPE"], "alias": "aftermath_dex_swaps_TOKEN_IN_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8402793, "relation_name": "SUI.not_null_silver.aftermath_dex_swaps_TOKEN_IN_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__aftermath_dex_swaps_TOKEN_IN_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TOKEN_IN_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_IN_TYPE", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_IN_TYPE", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__aftermath_dex_swaps_TOKEN_OUT_TYPE.5882817f41": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__aftermath_dex_swaps_TOKEN_OUT_TYPE", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__aftermath_dex_swaps_TOKEN_OUT_TYPE.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__aftermath_dex_swaps_TOKEN_OUT_TYPE.5882817f41", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__aftermath_dex_swaps_TOKEN_OUT_TYPE"], "alias": "aftermath_dex_swaps_TOKEN_OUT_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8417435, "relation_name": "SUI.not_null_silver.aftermath_dex_swaps_TOKEN_OUT_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__aftermath_dex_swaps_TOKEN_OUT_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TOKEN_OUT_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_OUT_TYPE", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_OUT_TYPE", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__aftermath_dex_swaps_TRADER_ADDRESS.3da26daed1": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__aftermath_dex_swaps_TRADER_ADDRESS", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__aftermath_dex_swaps_TRADER_ADDRESS.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__aftermath_dex_swaps_TRADER_ADDRESS.3da26daed1", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__aftermath_dex_swaps_TRADER_ADDRESS"], "alias": "aftermath_dex_swaps_TRADER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.843192, "relation_name": "SUI.not_null_silver.aftermath_dex_swaps_TRADER_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__aftermath_dex_swaps_TRADER_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TRADER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRADER_ADDRESS", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRADER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__aftermath_dex_swaps_DEX_SWAPS_ID.7e7816d6cf": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__aftermath_dex_swaps_DEX_SWAPS_ID", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__aftermath_dex_swaps_DEX_SWAPS_ID.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__aftermath_dex_swaps_DEX_SWAPS_ID.7e7816d6cf", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__aftermath_dex_swaps_DEX_SWAPS_ID"], "alias": "aftermath_dex_swaps_DEX_SWAPS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.844638, "relation_name": "SUI.not_null_silver.aftermath_dex_swaps_DEX_SWAPS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__aftermath_dex_swaps_DEX_SWAPS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere DEX_SWAPS_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DEX_SWAPS_ID", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DEX_SWAPS_ID", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.unique_silver__aftermath_dex_swaps_DEX_SWAPS_ID.0d72db4b89": {"database": "SUI", "schema": "unique_silver", "name": "unique_silver__aftermath_dex_swaps_DEX_SWAPS_ID", "resource_type": "test", "package_name": "sui_models", "path": "unique_silver__aftermath_dex_swaps_DEX_SWAPS_ID.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.unique_silver__aftermath_dex_swaps_DEX_SWAPS_ID.0d72db4b89", "fqn": ["sui_models", "silver", "defi", "dex", "unique_silver__aftermath_dex_swaps_DEX_SWAPS_ID"], "alias": "aftermath_dex_swaps_DEX_SWAPS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8462515, "relation_name": "SUI.unique_silver.aftermath_dex_swaps_DEX_SWAPS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/unique_silver__aftermath_dex_swaps_DEX_SWAPS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    DEX_SWAPS_ID as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere DEX_SWAPS_ID is not null\ngroup by DEX_SWAPS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DEX_SWAPS_ID", "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "unique", "kwargs": {"column_name": "DEX_SWAPS_ID", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_recency_silver__aftermath_dex_swaps_hour__block_timestamp__6.39240b6829": {"database": "SUI", "schema": "dbt_utils_recency_silver", "name": "dbt_utils_recency_silver__aftermath_dex_swaps_hour__block_timestamp__6", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_silver__afte_d7957d4d8055c1000c3a76932be126c5.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.dbt_utils_recency_silver__aftermath_dex_swaps_hour__block_timestamp__6.39240b6829", "fqn": ["sui_models", "silver", "defi", "dex", "dbt_utils_recency_silver__aftermath_dex_swaps_hour__block_timestamp__6"], "alias": "aftermath_dex_swaps_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_silver__afte_d7957d4d8055c1000c3a76932be126c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_utils_recency_silver__afte_d7957d4d8055c1000c3a76932be126c5"}, "created_at": 1756141890.8477392, "relation_name": "SUI.dbt_utils_recency_silver.aftermath_dex_swaps_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_recency_silver__afte_d7957d4d8055c1000c3a76932be126c5\") }}", "language": "sql", "refs": [{"name": "silver__aftermath_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__aftermath_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/dbt_utils_recency_silver__afte_d7957d4d8055c1000c3a76932be126c5.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(block_timestamp) as most_recent\n\n    from (select * from SUI.silver.aftermath_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -6,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -6,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__aftermath_dex_swaps", "attached_node": "model.sui_models.silver__aftermath_dex_swaps", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "interval": 6, "field": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__aftermath_dex_swaps')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_silver__dex_swaps_CHECKPOINT_NUMBER.bc0bffc4f6": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__dex_swaps_CHECKPOINT_NUMBER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__dex_swaps_CHECKPOINT_NUMBER.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__dex_swaps_CHECKPOINT_NUMBER.bc0bffc4f6", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__dex_swaps_CHECKPOINT_NUMBER"], "alias": "dex_swaps_CHECKPOINT_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8643634, "relation_name": "SUI.not_null_silver.dex_swaps_CHECKPOINT_NUMBER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__dex_swaps_CHECKPOINT_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHECKPOINT_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHECKPOINT_NUMBER", "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHECKPOINT_NUMBER", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__dex_swaps_BLOCK_TIMESTAMP.e312100604": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__dex_swaps_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__dex_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__dex_swaps_BLOCK_TIMESTAMP.e312100604", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__dex_swaps_BLOCK_TIMESTAMP"], "alias": "dex_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8658655, "relation_name": "SUI.not_null_silver.dex_swaps_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__dex_swaps_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__dex_swaps_TX_DIGEST.78684ea04b": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__dex_swaps_TX_DIGEST", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__dex_swaps_TX_DIGEST.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__dex_swaps_TX_DIGEST.78684ea04b", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__dex_swaps_TX_DIGEST"], "alias": "dex_swaps_TX_DIGEST", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8673527, "relation_name": "SUI.not_null_silver.dex_swaps_TX_DIGEST", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__dex_swaps_TX_DIGEST.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_DIGEST is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_DIGEST", "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_DIGEST", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__dex_swaps_EVENT_INDEX.ec92461915": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__dex_swaps_EVENT_INDEX", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__dex_swaps_EVENT_INDEX.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__dex_swaps_EVENT_INDEX.ec92461915", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__dex_swaps_EVENT_INDEX"], "alias": "dex_swaps_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8687947, "relation_name": "SUI.not_null_silver.dex_swaps_EVENT_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__dex_swaps_EVENT_INDEX.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere EVENT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EVENT_INDEX", "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__dex_swaps_EVENT_MODULE.ccc5351e29": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__dex_swaps_EVENT_MODULE", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__dex_swaps_EVENT_MODULE.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__dex_swaps_EVENT_MODULE.ccc5351e29", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__dex_swaps_EVENT_MODULE"], "alias": "dex_swaps_EVENT_MODULE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.87035, "relation_name": "SUI.not_null_silver.dex_swaps_EVENT_MODULE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__dex_swaps_EVENT_MODULE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere EVENT_MODULE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EVENT_MODULE", "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_MODULE", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__dex_swaps_PLATFORM_ADDRESS.4a9999c52e": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__dex_swaps_PLATFORM_ADDRESS", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__dex_swaps_PLATFORM_ADDRESS.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__dex_swaps_PLATFORM_ADDRESS.4a9999c52e", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__dex_swaps_PLATFORM_ADDRESS"], "alias": "dex_swaps_PLATFORM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8718028, "relation_name": "SUI.not_null_silver.dex_swaps_PLATFORM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__dex_swaps_PLATFORM_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere PLATFORM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PLATFORM_ADDRESS", "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__dex_swaps_AMOUNT_IN_RAW.beece37b29": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__dex_swaps_AMOUNT_IN_RAW", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__dex_swaps_AMOUNT_IN_RAW.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__dex_swaps_AMOUNT_IN_RAW.beece37b29", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__dex_swaps_AMOUNT_IN_RAW"], "alias": "dex_swaps_AMOUNT_IN_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8732634, "relation_name": "SUI.not_null_silver.dex_swaps_AMOUNT_IN_RAW", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__dex_swaps_AMOUNT_IN_RAW.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere AMOUNT_IN_RAW is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_IN_RAW", "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_IN_RAW", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_expression_is_true_silver__dex_swaps_AMOUNT_IN_RAW___0.318bc45989": {"database": "SUI", "schema": "dbt_utils_expression_is_true_silver", "name": "dbt_utils_expression_is_true_silver__dex_swaps_AMOUNT_IN_RAW___0", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_expression_is_true_s_223444bfa5e389055782801f24264f7b.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.dbt_utils_expression_is_true_silver__dex_swaps_AMOUNT_IN_RAW___0.318bc45989", "fqn": ["sui_models", "silver", "defi", "dex", "dbt_utils_expression_is_true_silver__dex_swaps_AMOUNT_IN_RAW___0"], "alias": "dex_swaps_AMOUNT_IN_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_223444bfa5e389055782801f24264f7b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_utils_expression_is_true_s_223444bfa5e389055782801f24264f7b"}, "created_at": 1756141890.8747153, "relation_name": "SUI.dbt_utils_expression_is_true_silver.dex_swaps_AMOUNT_IN_RAW", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_223444bfa5e389055782801f24264f7b\") }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/dbt_utils_expression_is_true_s_223444bfa5e389055782801f24264f7b.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\nwhere not(AMOUNT_IN_RAW >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_IN_RAW", "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "AMOUNT_IN_RAW", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_silver__dex_swaps_AMOUNT_OUT_RAW.e61bcbe5cd": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__dex_swaps_AMOUNT_OUT_RAW", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__dex_swaps_AMOUNT_OUT_RAW.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__dex_swaps_AMOUNT_OUT_RAW.e61bcbe5cd", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__dex_swaps_AMOUNT_OUT_RAW"], "alias": "dex_swaps_AMOUNT_OUT_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8786514, "relation_name": "SUI.not_null_silver.dex_swaps_AMOUNT_OUT_RAW", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__dex_swaps_AMOUNT_OUT_RAW.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere AMOUNT_OUT_RAW is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_OUT_RAW", "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_OUT_RAW", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_expression_is_true_silver__dex_swaps_AMOUNT_OUT_RAW___0.5cb864bc54": {"database": "SUI", "schema": "dbt_utils_expression_is_true_silver", "name": "dbt_utils_expression_is_true_silver__dex_swaps_AMOUNT_OUT_RAW___0", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_expression_is_true_s_0564e1391414a7e9503731ecf21df663.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.dbt_utils_expression_is_true_silver__dex_swaps_AMOUNT_OUT_RAW___0.5cb864bc54", "fqn": ["sui_models", "silver", "defi", "dex", "dbt_utils_expression_is_true_silver__dex_swaps_AMOUNT_OUT_RAW___0"], "alias": "dex_swaps_AMOUNT_OUT_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_expression_is_true_s_0564e1391414a7e9503731ecf21df663", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_utils_expression_is_true_s_0564e1391414a7e9503731ecf21df663"}, "created_at": 1756141890.8801537, "relation_name": "SUI.dbt_utils_expression_is_true_silver.dex_swaps_AMOUNT_OUT_RAW", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_expression_is_true_s_0564e1391414a7e9503731ecf21df663\") }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/dbt_utils_expression_is_true_s_0564e1391414a7e9503731ecf21df663.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\nwhere not(AMOUNT_OUT_RAW >= 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_OUT_RAW", "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": ">= 0", "column_name": "AMOUNT_OUT_RAW", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_silver__dex_swaps_STEPS.e7d4e72d3e": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__dex_swaps_STEPS", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__dex_swaps_STEPS.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__dex_swaps_STEPS.e7d4e72d3e", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__dex_swaps_STEPS"], "alias": "dex_swaps_STEPS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8838243, "relation_name": "SUI.not_null_silver.dex_swaps_STEPS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__dex_swaps_STEPS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere STEPS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STEPS", "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STEPS", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_expression_is_true_silver__dex_swaps_STEPS___0.664d0e62a1": {"database": "SUI", "schema": "dbt_utils_expression_is_true_silver", "name": "dbt_utils_expression_is_true_silver__dex_swaps_STEPS___0", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_expression_is_true_silver__dex_swaps_STEPS___0.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.dbt_utils_expression_is_true_silver__dex_swaps_STEPS___0.664d0e62a1", "fqn": ["sui_models", "silver", "defi", "dex", "dbt_utils_expression_is_true_silver__dex_swaps_STEPS___0"], "alias": "dex_swaps_STEPS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.885317, "relation_name": "SUI.dbt_utils_expression_is_true_silver.dex_swaps_STEPS", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expression_is_true", "macro.dbt.get_where_subquery", "macro.dbt_utils.test_expression_is_true"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/dbt_utils_expression_is_true_silver__dex_swaps_STEPS___0.sql", "compiled": true, "compiled_code": "\n\n\n\nselect\n    *\nfrom (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\nwhere not(STEPS > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "STEPS", "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "STEPS", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_silver__dex_swaps_TRADER_ADDRESS.48f1ad639e": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__dex_swaps_TRADER_ADDRESS", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__dex_swaps_TRADER_ADDRESS.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__dex_swaps_TRADER_ADDRESS.48f1ad639e", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__dex_swaps_TRADER_ADDRESS"], "alias": "dex_swaps_TRADER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8889446, "relation_name": "SUI.not_null_silver.dex_swaps_TRADER_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__dex_swaps_TRADER_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TRADER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRADER_ADDRESS", "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRADER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_silver__dex_swaps_DEX_SWAPS_ID.3890988d32": {"database": "SUI", "schema": "not_null_silver", "name": "not_null_silver__dex_swaps_DEX_SWAPS_ID", "resource_type": "test", "package_name": "sui_models", "path": "not_null_silver__dex_swaps_DEX_SWAPS_ID.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.not_null_silver__dex_swaps_DEX_SWAPS_ID.3890988d32", "fqn": ["sui_models", "silver", "defi", "dex", "not_null_silver__dex_swaps_DEX_SWAPS_ID"], "alias": "dex_swaps_DEX_SWAPS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8904264, "relation_name": "SUI.not_null_silver.dex_swaps_DEX_SWAPS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/not_null_silver__dex_swaps_DEX_SWAPS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere DEX_SWAPS_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DEX_SWAPS_ID", "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DEX_SWAPS_ID", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.unique_silver__dex_swaps_DEX_SWAPS_ID.28700a94ba": {"database": "SUI", "schema": "unique_silver", "name": "unique_silver__dex_swaps_DEX_SWAPS_ID", "resource_type": "test", "package_name": "sui_models", "path": "unique_silver__dex_swaps_DEX_SWAPS_ID.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.unique_silver__dex_swaps_DEX_SWAPS_ID.28700a94ba", "fqn": ["sui_models", "silver", "defi", "dex", "unique_silver__dex_swaps_DEX_SWAPS_ID"], "alias": "dex_swaps_DEX_SWAPS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.891872, "relation_name": "SUI.unique_silver.dex_swaps_DEX_SWAPS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/unique_silver__dex_swaps_DEX_SWAPS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    DEX_SWAPS_ID as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere DEX_SWAPS_ID is not null\ngroup by DEX_SWAPS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DEX_SWAPS_ID", "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "unique", "kwargs": {"column_name": "DEX_SWAPS_ID", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_recency_silver__dex_swaps_hour__block_timestamp__6.5adfcb03e0": {"database": "SUI", "schema": "dbt_utils_recency_silver", "name": "dbt_utils_recency_silver__dex_swaps_hour__block_timestamp__6", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_silver__dex_swaps_hour__block_timestamp__6.sql", "original_file_path": "models/silver/defi/dex/silver_defi.yml", "unique_id": "test.sui_models.dbt_utils_recency_silver__dex_swaps_hour__block_timestamp__6.5adfcb03e0", "fqn": ["sui_models", "silver", "defi", "dex", "dbt_utils_recency_silver__dex_swaps_hour__block_timestamp__6"], "alias": "dex_swaps_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141890.8933704, "relation_name": "SUI.dbt_utils_recency_silver.dex_swaps_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "silver__dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver__dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/dex/silver_defi.yml/dbt_utils_recency_silver__dex_swaps_hour__block_timestamp__6.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(block_timestamp) as most_recent\n\n    from (select * from SUI.silver.dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -6,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -6,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver__dex_swaps", "attached_node": "model.sui_models.silver__dex_swaps", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "interval": 6, "field": "block_timestamp", "model": "{{ get_where_subquery(ref('silver__dex_swaps')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.dbt_utils_recency_silver_bridge__sui_bridge_inbound_hour__block_timestamp__12.9f915d40f9": {"database": "SUI", "schema": "dbt_utils_recency_silver_bridge", "name": "dbt_utils_recency_silver_bridge__sui_bridge_inbound_hour__block_timestamp__12", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_silver_bridg_209fb1aec4055f622244d24a499a6e74.sql", "original_file_path": "models/silver/defi/bridge/silver_defi.yml", "unique_id": "test.sui_models.dbt_utils_recency_silver_bridge__sui_bridge_inbound_hour__block_timestamp__12.9f915d40f9", "fqn": ["sui_models", "silver", "defi", "bridge", "dbt_utils_recency_silver_bridge__sui_bridge_inbound_hour__block_timestamp__12"], "alias": "sui_bridge_inbound_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_silver_bridg_209fb1aec4055f622244d24a499a6e74", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_silver_bridg_209fb1aec4055f622244d24a499a6e74"}, "created_at": 1756141890.9112945, "relation_name": "SUI.dbt_utils_recency_silver_bridge.sui_bridge_inbound_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_silver_bridg_209fb1aec4055f622244d24a499a6e74\") }}", "language": "sql", "refs": [{"name": "silver_bridge__sui_bridge_inbound", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver_bridge__sui_bridge_inbound"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/bridge/silver_defi.yml/dbt_utils_recency_silver_bridg_209fb1aec4055f622244d24a499a6e74.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(block_timestamp) as most_recent\n\n    from (select * from SUI.silver_bridge.sui_bridge_inbound where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver_bridge__sui_bridge_inbound", "attached_node": "model.sui_models.silver_bridge__sui_bridge_inbound", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 12, "model": "{{ get_where_subquery(ref('silver_bridge__sui_bridge_inbound')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.dbt_utils_recency_silver_bridge__sui_bridge_outbound_hour__block_timestamp__12.9e00d40b33": {"database": "SUI", "schema": "dbt_utils_recency_silver_bridge", "name": "dbt_utils_recency_silver_bridge__sui_bridge_outbound_hour__block_timestamp__12", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_silver_bridg_26c1add6ae16b8d034017b4de6ef0d07.sql", "original_file_path": "models/silver/defi/bridge/silver_defi.yml", "unique_id": "test.sui_models.dbt_utils_recency_silver_bridge__sui_bridge_outbound_hour__block_timestamp__12.9e00d40b33", "fqn": ["sui_models", "silver", "defi", "bridge", "dbt_utils_recency_silver_bridge__sui_bridge_outbound_hour__block_timestamp__12"], "alias": "sui_bridge_outbound_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_silver_bridg_26c1add6ae16b8d034017b4de6ef0d07", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_silver_bridg_26c1add6ae16b8d034017b4de6ef0d07"}, "created_at": 1756141890.9162784, "relation_name": "SUI.dbt_utils_recency_silver_bridge.sui_bridge_outbound_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_silver_bridg_26c1add6ae16b8d034017b4de6ef0d07\") }}", "language": "sql", "refs": [{"name": "silver_bridge__sui_bridge_outbound", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver_bridge__sui_bridge_outbound"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/bridge/silver_defi.yml/dbt_utils_recency_silver_bridg_26c1add6ae16b8d034017b4de6ef0d07.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(block_timestamp) as most_recent\n\n    from (select * from SUI.silver_bridge.sui_bridge_outbound where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver_bridge__sui_bridge_outbound", "attached_node": "model.sui_models.silver_bridge__sui_bridge_outbound", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 12, "model": "{{ get_where_subquery(ref('silver_bridge__sui_bridge_outbound')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.dbt_utils_recency_silver_bridge__wormhole_inbound_hour__block_timestamp__12.09ce6fbad5": {"database": "SUI", "schema": "dbt_utils_recency_silver_bridge", "name": "dbt_utils_recency_silver_bridge__wormhole_inbound_hour__block_timestamp__12", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_silver_bridg_889a40c4c6953c9117451d42cad14372.sql", "original_file_path": "models/silver/defi/bridge/silver_defi.yml", "unique_id": "test.sui_models.dbt_utils_recency_silver_bridge__wormhole_inbound_hour__block_timestamp__12.09ce6fbad5", "fqn": ["sui_models", "silver", "defi", "bridge", "dbt_utils_recency_silver_bridge__wormhole_inbound_hour__block_timestamp__12"], "alias": "wormhole_inbound_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_silver_bridg_889a40c4c6953c9117451d42cad14372", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_silver_bridg_889a40c4c6953c9117451d42cad14372"}, "created_at": 1756141890.9211855, "relation_name": "SUI.dbt_utils_recency_silver_bridge.wormhole_inbound_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_silver_bridg_889a40c4c6953c9117451d42cad14372\") }}", "language": "sql", "refs": [{"name": "silver_bridge__wormhole_inbound", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver_bridge__wormhole_inbound"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/bridge/silver_defi.yml/dbt_utils_recency_silver_bridg_889a40c4c6953c9117451d42cad14372.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(block_timestamp) as most_recent\n\n    from (select * from SUI.silver_bridge.wormhole_inbound where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver_bridge__wormhole_inbound", "attached_node": "model.sui_models.silver_bridge__wormhole_inbound", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 12, "model": "{{ get_where_subquery(ref('silver_bridge__wormhole_inbound')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.dbt_utils_recency_silver_bridge__wormhole_outbound_hour__block_timestamp__12.1aa3be7b24": {"database": "SUI", "schema": "dbt_utils_recency_silver_bridge", "name": "dbt_utils_recency_silver_bridge__wormhole_outbound_hour__block_timestamp__12", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_silver_bridg_233ffe55d3533791c8f7f3485eec2964.sql", "original_file_path": "models/silver/defi/bridge/silver_defi.yml", "unique_id": "test.sui_models.dbt_utils_recency_silver_bridge__wormhole_outbound_hour__block_timestamp__12.1aa3be7b24", "fqn": ["sui_models", "silver", "defi", "bridge", "dbt_utils_recency_silver_bridge__wormhole_outbound_hour__block_timestamp__12"], "alias": "wormhole_outbound_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_silver_bridg_233ffe55d3533791c8f7f3485eec2964", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_silver_bridg_233ffe55d3533791c8f7f3485eec2964"}, "created_at": 1756141890.9261687, "relation_name": "SUI.dbt_utils_recency_silver_bridge.wormhole_outbound_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_silver_bridg_233ffe55d3533791c8f7f3485eec2964\") }}", "language": "sql", "refs": [{"name": "silver_bridge__wormhole_outbound", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.silver_bridge__wormhole_outbound"]}, "compiled_path": "target/compiled/sui_models/models/silver/defi/bridge/silver_defi.yml/dbt_utils_recency_silver_bridg_233ffe55d3533791c8f7f3485eec2964.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(block_timestamp) as most_recent\n\n    from (select * from SUI.silver_bridge.wormhole_outbound where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.silver_bridge__wormhole_outbound", "attached_node": "model.sui_models.silver_bridge__wormhole_outbound", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 12, "model": "{{ get_where_subquery(ref('silver_bridge__wormhole_outbound')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.dbt_expectations_expect_row_values_to_have_recent_data_price__ez_prices_hourly_HOUR__day__2.0fe248380f": {"database": "SUI", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_price", "name": "dbt_expectations_expect_row_values_to_have_recent_data_price__ez_prices_hourly_HOUR__day__2", "resource_type": "test", "package_name": "sui_models", "path": "dbt_expectations_expect_row_va_04cdbfd39a4df12d429e1872634ff795.sql", "original_file_path": "models/gold/prices/price__ez_prices_hourly.yml", "unique_id": "test.sui_models.dbt_expectations_expect_row_values_to_have_recent_data_price__ez_prices_hourly_HOUR__day__2.0fe248380f", "fqn": ["sui_models", "gold", "prices", "dbt_expectations_expect_row_values_to_have_recent_data_price__ez_prices_hourly_HOUR__day__2"], "alias": "ez_prices_hourly_HOUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_04cdbfd39a4df12d429e1872634ff795", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_expectations_expect_row_va_04cdbfd39a4df12d429e1872634ff795"}, "created_at": 1756141890.9345691, "relation_name": "SUI.dbt_expectations_expect_row_values_to_have_recent_data_price.ez_prices_hourly_HOUR", "raw_code": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_04cdbfd39a4df12d429e1872634ff795\") }}", "language": "sql", "refs": [{"name": "price__ez_prices_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.price__ez_prices_hourly"]}, "compiled_path": "target/compiled/sui_models/models/gold/prices/price__ez_prices_hourly.yml/dbt_expectations_expect_row_va_04cdbfd39a4df12d429e1872634ff795.sql", "compiled": true, "compiled_code": "\n\n with max_recency as (\n\n    select max(cast(HOUR as timestamp_ntz)) as max_timestamp\n    from\n        (select * from SUI.price.ez_prices_hourly where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n    where\n        -- to exclude erroneous future dates\n        cast(HOUR as timestamp_ntz) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as timestamp)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as timestamp_ntz))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as timestamp)\n)\n        )\n\n as timestamp_ntz)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "HOUR", "file_key_name": "models.price__ez_prices_hourly", "attached_node": "model.sui_models.price__ez_prices_hourly", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "HOUR", "model": "{{ get_where_subquery(ref('price__ez_prices_hourly')) }}"}, "namespace": "dbt_expectations"}}, "test.sui_models.dbt_utils_unique_combination_of_columns_price__ez_prices_hourly_HOUR__TOKEN_ADDRESS.2ecd0db69a": {"database": "SUI", "schema": "dbt_utils_unique_combination_of_columns_price", "name": "dbt_utils_unique_combination_of_columns_price__ez_prices_hourly_HOUR__TOKEN_ADDRESS", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_unique_combination_o_e299653291d64b8844db88bba8a0472e.sql", "original_file_path": "models/gold/prices/price__ez_prices_hourly.yml", "unique_id": "test.sui_models.dbt_utils_unique_combination_of_columns_price__ez_prices_hourly_HOUR__TOKEN_ADDRESS.2ecd0db69a", "fqn": ["sui_models", "gold", "prices", "dbt_utils_unique_combination_of_columns_price__ez_prices_hourly_HOUR__TOKEN_ADDRESS"], "alias": "ez_prices_hourly_HOUR", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e299653291d64b8844db88bba8a0472e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_utils_unique_combination_o_e299653291d64b8844db88bba8a0472e"}, "created_at": 1756141891.044809, "relation_name": "SUI.dbt_utils_unique_combination_of_columns_price.ez_prices_hourly_HOUR", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e299653291d64b8844db88bba8a0472e\") }}", "language": "sql", "refs": [{"name": "price__ez_prices_hourly", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.price__ez_prices_hourly"]}, "compiled_path": "target/compiled/sui_models/models/gold/prices/price__ez_prices_hourly.yml/dbt_utils_unique_combination_o_e299653291d64b8844db88bba8a0472e.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        HOUR, TOKEN_ADDRESS\n    from (select * from SUI.price.ez_prices_hourly where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n    group by HOUR, TOKEN_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.price__ez_prices_hourly", "attached_node": "model.sui_models.price__ez_prices_hourly", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["HOUR", "TOKEN_ADDRESS"], "model": "{{ get_where_subquery(ref('price__ez_prices_hourly')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.dbt_utils_unique_combination_of_columns_price__ez_asset_metadata_TOKEN_ADDRESS.e63e9f6197": {"database": "SUI", "schema": "dbt_utils_unique_combination_of_columns_price", "name": "dbt_utils_unique_combination_of_columns_price__ez_asset_metadata_TOKEN_ADDRESS", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_unique_combination_o_7d0b68d66758581faf1520f435bff84d.sql", "original_file_path": "models/gold/prices/price__ez_asset_metadata.yml", "unique_id": "test.sui_models.dbt_utils_unique_combination_of_columns_price__ez_asset_metadata_TOKEN_ADDRESS.e63e9f6197", "fqn": ["sui_models", "gold", "prices", "dbt_utils_unique_combination_of_columns_price__ez_asset_metadata_TOKEN_ADDRESS"], "alias": "ez_asset_metadata_TOKEN_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7d0b68d66758581faf1520f435bff84d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_utils_unique_combination_o_7d0b68d66758581faf1520f435bff84d"}, "created_at": 1756141891.0554166, "relation_name": "SUI.dbt_utils_unique_combination_of_columns_price.ez_asset_metadata_TOKEN_ADDRESS", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7d0b68d66758581faf1520f435bff84d\") }}", "language": "sql", "refs": [{"name": "price__ez_asset_metadata", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.price__ez_asset_metadata"]}, "compiled_path": "target/compiled/sui_models/models/gold/prices/price__ez_asset_metadata.yml/dbt_utils_unique_combination_o_7d0b68d66758581faf1520f435bff84d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TOKEN_ADDRESS\n    from (select * from SUI.price.ez_asset_metadata where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n    group by TOKEN_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.price__ez_asset_metadata", "attached_node": "model.sui_models.price__ez_asset_metadata", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TOKEN_ADDRESS"], "model": "{{ get_where_subquery(ref('price__ez_asset_metadata')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_core__dim_tokens_COIN_TYPE.f6255a9590": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__dim_tokens_COIN_TYPE", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__dim_tokens_COIN_TYPE.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__dim_tokens_COIN_TYPE.f6255a9590", "fqn": ["sui_models", "gold", "core", "not_null_core__dim_tokens_COIN_TYPE"], "alias": "dim_tokens_COIN_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.105815, "relation_name": "SUI.not_null_core.dim_tokens_COIN_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_tokens", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__dim_tokens"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__dim_tokens_COIN_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.dim_tokens where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere COIN_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COIN_TYPE", "file_key_name": "models.core__dim_tokens", "attached_node": "model.sui_models.core__dim_tokens", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COIN_TYPE", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": null}}, "test.sui_models.unique_core__dim_tokens_COIN_TYPE.dfe865c448": {"database": "SUI", "schema": "unique_core", "name": "unique_core__dim_tokens_COIN_TYPE", "resource_type": "test", "package_name": "sui_models", "path": "unique_core__dim_tokens_COIN_TYPE.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.unique_core__dim_tokens_COIN_TYPE.dfe865c448", "fqn": ["sui_models", "gold", "core", "unique_core__dim_tokens_COIN_TYPE"], "alias": "dim_tokens_COIN_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1073687, "relation_name": "SUI.unique_core.dim_tokens_COIN_TYPE", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_tokens", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__dim_tokens"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/unique_core__dim_tokens_COIN_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    COIN_TYPE as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.core.dim_tokens where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere COIN_TYPE is not null\ngroup by COIN_TYPE\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COIN_TYPE", "file_key_name": "models.core__dim_tokens", "attached_node": "model.sui_models.core__dim_tokens", "test_metadata": {"name": "unique", "kwargs": {"column_name": "COIN_TYPE", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__dim_tokens_DECIMALS.e4b6ed6a13": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__dim_tokens_DECIMALS", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__dim_tokens_DECIMALS.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__dim_tokens_DECIMALS.e4b6ed6a13", "fqn": ["sui_models", "gold", "core", "not_null_core__dim_tokens_DECIMALS"], "alias": "dim_tokens_DECIMALS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1088324, "relation_name": "SUI.not_null_core.dim_tokens_DECIMALS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_tokens", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__dim_tokens"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__dim_tokens_DECIMALS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.dim_tokens where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere DECIMALS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DECIMALS", "file_key_name": "models.core__dim_tokens", "attached_node": "model.sui_models.core__dim_tokens", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DECIMALS", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__dim_tokens_DIM_TOKENS_ID.4f26cddda6": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__dim_tokens_DIM_TOKENS_ID", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__dim_tokens_DIM_TOKENS_ID.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__dim_tokens_DIM_TOKENS_ID.4f26cddda6", "fqn": ["sui_models", "gold", "core", "not_null_core__dim_tokens_DIM_TOKENS_ID"], "alias": "dim_tokens_DIM_TOKENS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1113691, "relation_name": "SUI.not_null_core.dim_tokens_DIM_TOKENS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_tokens", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__dim_tokens"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__dim_tokens_DIM_TOKENS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.dim_tokens where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere DIM_TOKENS_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_TOKENS_ID", "file_key_name": "models.core__dim_tokens", "attached_node": "model.sui_models.core__dim_tokens", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIM_TOKENS_ID", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": null}}, "test.sui_models.unique_core__dim_tokens_DIM_TOKENS_ID.47c54ac27c": {"database": "SUI", "schema": "unique_core", "name": "unique_core__dim_tokens_DIM_TOKENS_ID", "resource_type": "test", "package_name": "sui_models", "path": "unique_core__dim_tokens_DIM_TOKENS_ID.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.unique_core__dim_tokens_DIM_TOKENS_ID.47c54ac27c", "fqn": ["sui_models", "gold", "core", "unique_core__dim_tokens_DIM_TOKENS_ID"], "alias": "dim_tokens_DIM_TOKENS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1128368, "relation_name": "SUI.unique_core.dim_tokens_DIM_TOKENS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_tokens", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__dim_tokens"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/unique_core__dim_tokens_DIM_TOKENS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    DIM_TOKENS_ID as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.core.dim_tokens where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere DIM_TOKENS_ID is not null\ngroup by DIM_TOKENS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "DIM_TOKENS_ID", "file_key_name": "models.core__dim_tokens", "attached_node": "model.sui_models.core__dim_tokens", "test_metadata": {"name": "unique", "kwargs": {"column_name": "DIM_TOKENS_ID", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__dim_tokens_INSERTED_TIMESTAMP.cbe58319ac": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__dim_tokens_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__dim_tokens_INSERTED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__dim_tokens_INSERTED_TIMESTAMP.cbe58319ac", "fqn": ["sui_models", "gold", "core", "not_null_core__dim_tokens_INSERTED_TIMESTAMP"], "alias": "dim_tokens_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.114295, "relation_name": "SUI.not_null_core.dim_tokens_INSERTED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_tokens", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__dim_tokens"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__dim_tokens_INSERTED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.dim_tokens where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.core__dim_tokens", "attached_node": "model.sui_models.core__dim_tokens", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__dim_tokens_MODIFIED_TIMESTAMP.ecc00492b1": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__dim_tokens_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__dim_tokens_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__dim_tokens_MODIFIED_TIMESTAMP.ecc00492b1", "fqn": ["sui_models", "gold", "core", "not_null_core__dim_tokens_MODIFIED_TIMESTAMP"], "alias": "dim_tokens_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1157312, "relation_name": "SUI.not_null_core.dim_tokens_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__dim_tokens", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__dim_tokens"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__dim_tokens_MODIFIED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.dim_tokens where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere MODIFIED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.core__dim_tokens", "attached_node": "model.sui_models.core__dim_tokens", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_recency_core__dim_tokens_hour__modified_timestamp__48.a736aabbb1": {"database": "SUI", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__dim_tokens_hour__modified_timestamp__48", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_core__dim_tokens_hour__modified_timestamp__48.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.dbt_utils_recency_core__dim_tokens_hour__modified_timestamp__48.a736aabbb1", "fqn": ["sui_models", "gold", "core", "dbt_utils_recency_core__dim_tokens_hour__modified_timestamp__48"], "alias": "dim_tokens_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "warn", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "warn", "tags": ["test_recency", "test_recency"]}, "created_at": 1756141891.1176028, "relation_name": "SUI.dbt_utils_recency_core.dim_tokens_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"warn\",tags=['test_recency']) }}", "language": "sql", "refs": [{"name": "core__dim_tokens", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__dim_tokens"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/dbt_utils_recency_core__dim_tokens_hour__modified_timestamp__48.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(modified_timestamp) as most_recent\n\n    from (select * from SUI.core.dim_tokens where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -48,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -48,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__dim_tokens", "attached_node": "model.sui_models.core__dim_tokens", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "modified_timestamp", "interval": 48, "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_core__fact_balance_changes_CHECKPOINT_NUMBER.712e9516de": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_balance_changes_CHECKPOINT_NUMBER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_balance_changes_CHECKPOINT_NUMBER.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_balance_changes_CHECKPOINT_NUMBER.712e9516de", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_balance_changes_CHECKPOINT_NUMBER"], "alias": "fact_balance_changes_CHECKPOINT_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1227386, "relation_name": "SUI.not_null_core.fact_balance_changes_CHECKPOINT_NUMBER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_balance_changes_CHECKPOINT_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_balance_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHECKPOINT_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHECKPOINT_NUMBER", "file_key_name": "models.core__fact_balance_changes", "attached_node": "model.sui_models.core__fact_balance_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHECKPOINT_NUMBER", "model": "{{ get_where_subquery(ref('core__fact_balance_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_balance_changes_BLOCK_TIMESTAMP.209115a1df": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_balance_changes_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_balance_changes_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_balance_changes_BLOCK_TIMESTAMP.209115a1df", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_balance_changes_BLOCK_TIMESTAMP"], "alias": "fact_balance_changes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1243253, "relation_name": "SUI.not_null_core.fact_balance_changes_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_balance_changes_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_balance_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_balance_changes", "attached_node": "model.sui_models.core__fact_balance_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_balance_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_balance_changes_TX_DIGEST.9ab34b7398": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_balance_changes_TX_DIGEST", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_balance_changes_TX_DIGEST.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_balance_changes_TX_DIGEST.9ab34b7398", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_balance_changes_TX_DIGEST"], "alias": "fact_balance_changes_TX_DIGEST", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1257915, "relation_name": "SUI.not_null_core.fact_balance_changes_TX_DIGEST", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_balance_changes_TX_DIGEST.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_balance_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_DIGEST is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_DIGEST", "file_key_name": "models.core__fact_balance_changes", "attached_node": "model.sui_models.core__fact_balance_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_DIGEST", "model": "{{ get_where_subquery(ref('core__fact_balance_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_balance_changes_TX_SUCCEEDED.5a8ae68598": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_balance_changes_TX_SUCCEEDED", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_balance_changes_TX_SUCCEEDED.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_balance_changes_TX_SUCCEEDED.5a8ae68598", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_balance_changes_TX_SUCCEEDED"], "alias": "fact_balance_changes_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1272657, "relation_name": "SUI.not_null_core.fact_balance_changes_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_balance_changes_TX_SUCCEEDED.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_balance_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_balance_changes", "attached_node": "model.sui_models.core__fact_balance_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_balance_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_balance_changes_BALANCE_CHANGE_INDEX.10baa58370": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_balance_changes_BALANCE_CHANGE_INDEX", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_balance_changes_BALANCE_CHANGE_INDEX.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_balance_changes_BALANCE_CHANGE_INDEX.10baa58370", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_balance_changes_BALANCE_CHANGE_INDEX"], "alias": "fact_balance_changes_BALANCE_CHANGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1287403, "relation_name": "SUI.not_null_core.fact_balance_changes_BALANCE_CHANGE_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_balance_changes_BALANCE_CHANGE_INDEX.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_balance_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BALANCE_CHANGE_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BALANCE_CHANGE_INDEX", "file_key_name": "models.core__fact_balance_changes", "attached_node": "model.sui_models.core__fact_balance_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BALANCE_CHANGE_INDEX", "model": "{{ get_where_subquery(ref('core__fact_balance_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_balance_changes_COIN_TYPE.255ad8a0b7": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_balance_changes_COIN_TYPE", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_balance_changes_COIN_TYPE.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_balance_changes_COIN_TYPE.255ad8a0b7", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_balance_changes_COIN_TYPE"], "alias": "fact_balance_changes_COIN_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1301827, "relation_name": "SUI.not_null_core.fact_balance_changes_COIN_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_balance_changes_COIN_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_balance_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere COIN_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COIN_TYPE", "file_key_name": "models.core__fact_balance_changes", "attached_node": "model.sui_models.core__fact_balance_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COIN_TYPE", "model": "{{ get_where_subquery(ref('core__fact_balance_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_balance_changes_AMOUNT.954584e181": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_balance_changes_AMOUNT", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_balance_changes_AMOUNT.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_balance_changes_AMOUNT.954584e181", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_balance_changes_AMOUNT"], "alias": "fact_balance_changes_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1317596, "relation_name": "SUI.not_null_core.fact_balance_changes_AMOUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_balance_changes_AMOUNT.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_balance_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT", "file_key_name": "models.core__fact_balance_changes", "attached_node": "model.sui_models.core__fact_balance_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_balance_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID.97c8da1cb0": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_balance_ch_8384777ee817a354cf9477e5625ab3c2.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID.97c8da1cb0", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID"], "alias": "fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_core__fact_balance_ch_8384777ee817a354cf9477e5625ab3c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "not_null_core__fact_balance_ch_8384777ee817a354cf9477e5625ab3c2"}, "created_at": 1756141891.133204, "relation_name": "SUI.not_null_core.fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_core__fact_balance_ch_8384777ee817a354cf9477e5625ab3c2\") }}", "language": "sql", "refs": [{"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_balance_ch_8384777ee817a354cf9477e5625ab3c2.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_balance_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere FACT_TRANSACTION_BALANCE_CHANGES_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TRANSACTION_BALANCE_CHANGES_ID", "file_key_name": "models.core__fact_balance_changes", "attached_node": "model.sui_models.core__fact_balance_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_TRANSACTION_BALANCE_CHANGES_ID", "model": "{{ get_where_subquery(ref('core__fact_balance_changes')) }}"}, "namespace": null}}, "test.sui_models.unique_core__fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID.b89d77afcd": {"database": "SUI", "schema": "unique_core", "name": "unique_core__fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID", "resource_type": "test", "package_name": "sui_models", "path": "unique_core__fact_balance_chan_ce14621816f98ebfb474a8be067a1420.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.unique_core__fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID.b89d77afcd", "fqn": ["sui_models", "gold", "core", "unique_core__fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID"], "alias": "fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_core__fact_balance_chan_ce14621816f98ebfb474a8be067a1420", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "unique_core__fact_balance_chan_ce14621816f98ebfb474a8be067a1420"}, "created_at": 1756141891.1346712, "relation_name": "SUI.unique_core.fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_balance_chan_ce14621816f98ebfb474a8be067a1420\") }}", "language": "sql", "refs": [{"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/unique_core__fact_balance_chan_ce14621816f98ebfb474a8be067a1420.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    FACT_TRANSACTION_BALANCE_CHANGES_ID as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.core.fact_balance_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere FACT_TRANSACTION_BALANCE_CHANGES_ID is not null\ngroup by FACT_TRANSACTION_BALANCE_CHANGES_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TRANSACTION_BALANCE_CHANGES_ID", "file_key_name": "models.core__fact_balance_changes", "attached_node": "model.sui_models.core__fact_balance_changes", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_TRANSACTION_BALANCE_CHANGES_ID", "model": "{{ get_where_subquery(ref('core__fact_balance_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_balance_changes_INSERTED_TIMESTAMP.a692bc5daa": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_balance_changes_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_balance_changes_INSERTED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_balance_changes_INSERTED_TIMESTAMP.a692bc5daa", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_balance_changes_INSERTED_TIMESTAMP"], "alias": "fact_balance_changes_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.136108, "relation_name": "SUI.not_null_core.fact_balance_changes_INSERTED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_balance_changes_INSERTED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_balance_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.core__fact_balance_changes", "attached_node": "model.sui_models.core__fact_balance_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_balance_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_balance_changes_MODIFIED_TIMESTAMP.5cba81239d": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_balance_changes_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_balance_changes_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_balance_changes_MODIFIED_TIMESTAMP.5cba81239d", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_balance_changes_MODIFIED_TIMESTAMP"], "alias": "fact_balance_changes_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1375551, "relation_name": "SUI.not_null_core.fact_balance_changes_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_balance_changes_MODIFIED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_balance_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere MODIFIED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.core__fact_balance_changes", "attached_node": "model.sui_models.core__fact_balance_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_balance_changes')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_recency_core__fact_balance_changes_hour__block_timestamp__12.32ab5141fb": {"database": "SUI", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__fact_balance_changes_hour__block_timestamp__12", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_core__fact_b_80e345854452cd7bd0aca9f394c1cfd0.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.dbt_utils_recency_core__fact_balance_changes_hour__block_timestamp__12.32ab5141fb", "fqn": ["sui_models", "gold", "core", "dbt_utils_recency_core__fact_balance_changes_hour__block_timestamp__12"], "alias": "fact_balance_changes_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_core__fact_b_80e345854452cd7bd0aca9f394c1cfd0", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_core__fact_b_80e345854452cd7bd0aca9f394c1cfd0"}, "created_at": 1756141891.139053, "relation_name": "SUI.dbt_utils_recency_core.fact_balance_changes_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_core__fact_b_80e345854452cd7bd0aca9f394c1cfd0\") }}", "language": "sql", "refs": [{"name": "core__fact_balance_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_balance_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/dbt_utils_recency_core__fact_b_80e345854452cd7bd0aca9f394c1cfd0.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(block_timestamp) as most_recent\n\n    from (select * from SUI.core.fact_balance_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_balance_changes", "attached_node": "model.sui_models.core__fact_balance_changes", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 12, "model": "{{ get_where_subquery(ref('core__fact_balance_changes')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_core__fact_changes_CHECKPOINT_NUMBER.6ba94e8a67": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_changes_CHECKPOINT_NUMBER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_changes_CHECKPOINT_NUMBER.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_changes_CHECKPOINT_NUMBER.6ba94e8a67", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_changes_CHECKPOINT_NUMBER"], "alias": "fact_changes_CHECKPOINT_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.144154, "relation_name": "SUI.not_null_core.fact_changes_CHECKPOINT_NUMBER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_changes_CHECKPOINT_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHECKPOINT_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHECKPOINT_NUMBER", "file_key_name": "models.core__fact_changes", "attached_node": "model.sui_models.core__fact_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHECKPOINT_NUMBER", "model": "{{ get_where_subquery(ref('core__fact_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_changes_BLOCK_TIMESTAMP.65a5d8d067": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_changes_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_changes_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_changes_BLOCK_TIMESTAMP.65a5d8d067", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_changes_BLOCK_TIMESTAMP"], "alias": "fact_changes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.145666, "relation_name": "SUI.not_null_core.fact_changes_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_changes_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_changes", "attached_node": "model.sui_models.core__fact_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_changes_TX_DIGEST.30f8466020": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_changes_TX_DIGEST", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_changes_TX_DIGEST.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_changes_TX_DIGEST.30f8466020", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_changes_TX_DIGEST"], "alias": "fact_changes_TX_DIGEST", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1471405, "relation_name": "SUI.not_null_core.fact_changes_TX_DIGEST", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_changes_TX_DIGEST.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_DIGEST is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_DIGEST", "file_key_name": "models.core__fact_changes", "attached_node": "model.sui_models.core__fact_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_DIGEST", "model": "{{ get_where_subquery(ref('core__fact_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_changes_TX_SUCCEEDED.9a09390f0a": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_changes_TX_SUCCEEDED", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_changes_TX_SUCCEEDED.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_changes_TX_SUCCEEDED.9a09390f0a", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_changes_TX_SUCCEEDED"], "alias": "fact_changes_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.148612, "relation_name": "SUI.not_null_core.fact_changes_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_changes_TX_SUCCEEDED.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_changes", "attached_node": "model.sui_models.core__fact_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_changes_CHANGE_INDEX.215cfe518f": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_changes_CHANGE_INDEX", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_changes_CHANGE_INDEX.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_changes_CHANGE_INDEX.215cfe518f", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_changes_CHANGE_INDEX"], "alias": "fact_changes_CHANGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.150063, "relation_name": "SUI.not_null_core.fact_changes_CHANGE_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_changes_CHANGE_INDEX.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHANGE_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHANGE_INDEX", "file_key_name": "models.core__fact_changes", "attached_node": "model.sui_models.core__fact_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHANGE_INDEX", "model": "{{ get_where_subquery(ref('core__fact_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_changes_TYPE.1652843536": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_changes_TYPE", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_changes_TYPE.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_changes_TYPE.1652843536", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_changes_TYPE"], "alias": "fact_changes_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.15169, "relation_name": "SUI.not_null_core.fact_changes_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_changes_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TYPE", "file_key_name": "models.core__fact_changes", "attached_node": "model.sui_models.core__fact_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TYPE", "model": "{{ get_where_subquery(ref('core__fact_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_changes_FACT_CHANGES_ID.a878e88a0f": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_changes_FACT_CHANGES_ID", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_changes_FACT_CHANGES_ID.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_changes_FACT_CHANGES_ID.a878e88a0f", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_changes_FACT_CHANGES_ID"], "alias": "fact_changes_FACT_CHANGES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1531494, "relation_name": "SUI.not_null_core.fact_changes_FACT_CHANGES_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_changes_FACT_CHANGES_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere FACT_CHANGES_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_CHANGES_ID", "file_key_name": "models.core__fact_changes", "attached_node": "model.sui_models.core__fact_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_CHANGES_ID", "model": "{{ get_where_subquery(ref('core__fact_changes')) }}"}, "namespace": null}}, "test.sui_models.unique_core__fact_changes_FACT_CHANGES_ID.0bf099f198": {"database": "SUI", "schema": "unique_core", "name": "unique_core__fact_changes_FACT_CHANGES_ID", "resource_type": "test", "package_name": "sui_models", "path": "unique_core__fact_changes_FACT_CHANGES_ID.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.unique_core__fact_changes_FACT_CHANGES_ID.0bf099f198", "fqn": ["sui_models", "gold", "core", "unique_core__fact_changes_FACT_CHANGES_ID"], "alias": "fact_changes_FACT_CHANGES_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.154614, "relation_name": "SUI.unique_core.fact_changes_FACT_CHANGES_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/unique_core__fact_changes_FACT_CHANGES_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    FACT_CHANGES_ID as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.core.fact_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere FACT_CHANGES_ID is not null\ngroup by FACT_CHANGES_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_CHANGES_ID", "file_key_name": "models.core__fact_changes", "attached_node": "model.sui_models.core__fact_changes", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_CHANGES_ID", "model": "{{ get_where_subquery(ref('core__fact_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_changes_INSERTED_TIMESTAMP.c5d820190f": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_changes_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_changes_INSERTED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_changes_INSERTED_TIMESTAMP.c5d820190f", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_changes_INSERTED_TIMESTAMP"], "alias": "fact_changes_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1561012, "relation_name": "SUI.not_null_core.fact_changes_INSERTED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_changes_INSERTED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.core__fact_changes", "attached_node": "model.sui_models.core__fact_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_changes')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_changes_MODIFIED_TIMESTAMP.6c8d37c0a7": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_changes_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_changes_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_changes_MODIFIED_TIMESTAMP.6c8d37c0a7", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_changes_MODIFIED_TIMESTAMP"], "alias": "fact_changes_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1576161, "relation_name": "SUI.not_null_core.fact_changes_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_changes_MODIFIED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere MODIFIED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.core__fact_changes", "attached_node": "model.sui_models.core__fact_changes", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_changes')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_recency_core__fact_changes_hour__block_timestamp__12.f9a4e6a047": {"database": "SUI", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__fact_changes_hour__block_timestamp__12", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_core__fact_changes_hour__block_timestamp__12.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.dbt_utils_recency_core__fact_changes_hour__block_timestamp__12.f9a4e6a047", "fqn": ["sui_models", "gold", "core", "dbt_utils_recency_core__fact_changes_hour__block_timestamp__12"], "alias": "fact_changes_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"]}, "created_at": 1756141891.1591008, "relation_name": "SUI.dbt_utils_recency_core.fact_changes_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency']) }}", "language": "sql", "refs": [{"name": "core__fact_changes", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_changes"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/dbt_utils_recency_core__fact_changes_hour__block_timestamp__12.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(block_timestamp) as most_recent\n\n    from (select * from SUI.core.fact_changes where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_changes", "attached_node": "model.sui_models.core__fact_changes", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 12, "model": "{{ get_where_subquery(ref('core__fact_changes')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_core__fact_checkpoints_CHECKPOINT_NUMBER.23f044cfc4": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_checkpoints_CHECKPOINT_NUMBER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_checkpoints_CHECKPOINT_NUMBER.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_checkpoints_CHECKPOINT_NUMBER.23f044cfc4", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_checkpoints_CHECKPOINT_NUMBER"], "alias": "fact_checkpoints_CHECKPOINT_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.164113, "relation_name": "SUI.not_null_core.fact_checkpoints_CHECKPOINT_NUMBER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_checkpoints", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_checkpoints_CHECKPOINT_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_checkpoints where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHECKPOINT_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHECKPOINT_NUMBER", "file_key_name": "models.core__fact_checkpoints", "attached_node": "model.sui_models.core__fact_checkpoints", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHECKPOINT_NUMBER", "model": "{{ get_where_subquery(ref('core__fact_checkpoints')) }}"}, "namespace": null}}, "test.sui_models.unique_core__fact_checkpoints_CHECKPOINT_NUMBER.d6238f25d7": {"database": "SUI", "schema": "unique_core", "name": "unique_core__fact_checkpoints_CHECKPOINT_NUMBER", "resource_type": "test", "package_name": "sui_models", "path": "unique_core__fact_checkpoints_CHECKPOINT_NUMBER.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.unique_core__fact_checkpoints_CHECKPOINT_NUMBER.d6238f25d7", "fqn": ["sui_models", "gold", "core", "unique_core__fact_checkpoints_CHECKPOINT_NUMBER"], "alias": "fact_checkpoints_CHECKPOINT_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1655836, "relation_name": "SUI.unique_core.fact_checkpoints_CHECKPOINT_NUMBER", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_checkpoints", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/unique_core__fact_checkpoints_CHECKPOINT_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    CHECKPOINT_NUMBER as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.core.fact_checkpoints where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHECKPOINT_NUMBER is not null\ngroup by CHECKPOINT_NUMBER\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHECKPOINT_NUMBER", "file_key_name": "models.core__fact_checkpoints", "attached_node": "model.sui_models.core__fact_checkpoints", "test_metadata": {"name": "unique", "kwargs": {"column_name": "CHECKPOINT_NUMBER", "model": "{{ get_where_subquery(ref('core__fact_checkpoints')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_checkpoints_BLOCK_TIMESTAMP.878a6c6b3b": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_checkpoints_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_checkpoints_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_checkpoints_BLOCK_TIMESTAMP.878a6c6b3b", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_checkpoints_BLOCK_TIMESTAMP"], "alias": "fact_checkpoints_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1670737, "relation_name": "SUI.not_null_core.fact_checkpoints_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_checkpoints", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_checkpoints_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_checkpoints where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_checkpoints", "attached_node": "model.sui_models.core__fact_checkpoints", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_checkpoints')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_checkpoints_EPOCH.9e68df58eb": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_checkpoints_EPOCH", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_checkpoints_EPOCH.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_checkpoints_EPOCH.9e68df58eb", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_checkpoints_EPOCH"], "alias": "fact_checkpoints_EPOCH", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.168535, "relation_name": "SUI.not_null_core.fact_checkpoints_EPOCH", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_checkpoints", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_checkpoints_EPOCH.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_checkpoints where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere EPOCH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EPOCH", "file_key_name": "models.core__fact_checkpoints", "attached_node": "model.sui_models.core__fact_checkpoints", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EPOCH", "model": "{{ get_where_subquery(ref('core__fact_checkpoints')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_checkpoints_CHECKPOINT_DIGEST.26643b93a5": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_checkpoints_CHECKPOINT_DIGEST", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_checkpoints_CHECKPOINT_DIGEST.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_checkpoints_CHECKPOINT_DIGEST.26643b93a5", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_checkpoints_CHECKPOINT_DIGEST"], "alias": "fact_checkpoints_CHECKPOINT_DIGEST", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1699739, "relation_name": "SUI.not_null_core.fact_checkpoints_CHECKPOINT_DIGEST", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_checkpoints", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_checkpoints_CHECKPOINT_DIGEST.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_checkpoints where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHECKPOINT_DIGEST is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHECKPOINT_DIGEST", "file_key_name": "models.core__fact_checkpoints", "attached_node": "model.sui_models.core__fact_checkpoints", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHECKPOINT_DIGEST", "model": "{{ get_where_subquery(ref('core__fact_checkpoints')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_checkpoints_NETWORK_TOTAL_TRANSACTIONS.044ce0039b": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_checkpoints_NETWORK_TOTAL_TRANSACTIONS", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_checkpoints_NETWORK_TOTAL_TRANSACTIONS.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_checkpoints_NETWORK_TOTAL_TRANSACTIONS.044ce0039b", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_checkpoints_NETWORK_TOTAL_TRANSACTIONS"], "alias": "fact_checkpoints_NETWORK_TOTAL_TRANSACTIONS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1716666, "relation_name": "SUI.not_null_core.fact_checkpoints_NETWORK_TOTAL_TRANSACTIONS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_checkpoints", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_checkpoints_NETWORK_TOTAL_TRANSACTIONS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_checkpoints where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere NETWORK_TOTAL_TRANSACTIONS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "NETWORK_TOTAL_TRANSACTIONS", "file_key_name": "models.core__fact_checkpoints", "attached_node": "model.sui_models.core__fact_checkpoints", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NETWORK_TOTAL_TRANSACTIONS", "model": "{{ get_where_subquery(ref('core__fact_checkpoints')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_checkpoints_TX_COUNT.6e621d73e1": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_checkpoints_TX_COUNT", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_checkpoints_TX_COUNT.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_checkpoints_TX_COUNT.6e621d73e1", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_checkpoints_TX_COUNT"], "alias": "fact_checkpoints_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1731296, "relation_name": "SUI.not_null_core.fact_checkpoints_TX_COUNT", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_checkpoints", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_checkpoints_TX_COUNT.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_checkpoints where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_COUNT", "file_key_name": "models.core__fact_checkpoints", "attached_node": "model.sui_models.core__fact_checkpoints", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('core__fact_checkpoints')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_checkpoints_FACT_CHECKPOINTS_ID.40f4e7fdc8": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_checkpoints_FACT_CHECKPOINTS_ID", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_checkpoints_FACT_CHECKPOINTS_ID.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_checkpoints_FACT_CHECKPOINTS_ID.40f4e7fdc8", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_checkpoints_FACT_CHECKPOINTS_ID"], "alias": "fact_checkpoints_FACT_CHECKPOINTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1745944, "relation_name": "SUI.not_null_core.fact_checkpoints_FACT_CHECKPOINTS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_checkpoints", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_checkpoints_FACT_CHECKPOINTS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_checkpoints where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere FACT_CHECKPOINTS_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_CHECKPOINTS_ID", "file_key_name": "models.core__fact_checkpoints", "attached_node": "model.sui_models.core__fact_checkpoints", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_CHECKPOINTS_ID", "model": "{{ get_where_subquery(ref('core__fact_checkpoints')) }}"}, "namespace": null}}, "test.sui_models.unique_core__fact_checkpoints_FACT_CHECKPOINTS_ID.a6be984d3f": {"database": "SUI", "schema": "unique_core", "name": "unique_core__fact_checkpoints_FACT_CHECKPOINTS_ID", "resource_type": "test", "package_name": "sui_models", "path": "unique_core__fact_checkpoints_FACT_CHECKPOINTS_ID.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.unique_core__fact_checkpoints_FACT_CHECKPOINTS_ID.a6be984d3f", "fqn": ["sui_models", "gold", "core", "unique_core__fact_checkpoints_FACT_CHECKPOINTS_ID"], "alias": "fact_checkpoints_FACT_CHECKPOINTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1760561, "relation_name": "SUI.unique_core.fact_checkpoints_FACT_CHECKPOINTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_checkpoints", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/unique_core__fact_checkpoints_FACT_CHECKPOINTS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    FACT_CHECKPOINTS_ID as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.core.fact_checkpoints where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere FACT_CHECKPOINTS_ID is not null\ngroup by FACT_CHECKPOINTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_CHECKPOINTS_ID", "file_key_name": "models.core__fact_checkpoints", "attached_node": "model.sui_models.core__fact_checkpoints", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_CHECKPOINTS_ID", "model": "{{ get_where_subquery(ref('core__fact_checkpoints')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_checkpoints_INSERTED_TIMESTAMP.21826dee37": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_checkpoints_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_checkpoints_INSERTED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_checkpoints_INSERTED_TIMESTAMP.21826dee37", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_checkpoints_INSERTED_TIMESTAMP"], "alias": "fact_checkpoints_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1775265, "relation_name": "SUI.not_null_core.fact_checkpoints_INSERTED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_checkpoints", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_checkpoints_INSERTED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_checkpoints where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.core__fact_checkpoints", "attached_node": "model.sui_models.core__fact_checkpoints", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_checkpoints')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_checkpoints_MODIFIED_TIMESTAMP.6c60cec49e": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_checkpoints_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_checkpoints_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_checkpoints_MODIFIED_TIMESTAMP.6c60cec49e", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_checkpoints_MODIFIED_TIMESTAMP"], "alias": "fact_checkpoints_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.178958, "relation_name": "SUI.not_null_core.fact_checkpoints_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_checkpoints", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_checkpoints_MODIFIED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_checkpoints where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere MODIFIED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.core__fact_checkpoints", "attached_node": "model.sui_models.core__fact_checkpoints", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_checkpoints')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_recency_core__fact_checkpoints_hour__block_timestamp__12.d94caf0aaa": {"database": "SUI", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__fact_checkpoints_hour__block_timestamp__12", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_core__fact_c_9ea491f43616546ca7c2d862a5211d0d.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.dbt_utils_recency_core__fact_checkpoints_hour__block_timestamp__12.d94caf0aaa", "fqn": ["sui_models", "gold", "core", "dbt_utils_recency_core__fact_checkpoints_hour__block_timestamp__12"], "alias": "fact_checkpoints_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_core__fact_c_9ea491f43616546ca7c2d862a5211d0d", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_core__fact_c_9ea491f43616546ca7c2d862a5211d0d"}, "created_at": 1756141891.1804757, "relation_name": "SUI.dbt_utils_recency_core.fact_checkpoints_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_core__fact_c_9ea491f43616546ca7c2d862a5211d0d\") }}", "language": "sql", "refs": [{"name": "core__fact_checkpoints", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/dbt_utils_recency_core__fact_c_9ea491f43616546ca7c2d862a5211d0d.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(block_timestamp) as most_recent\n\n    from (select * from SUI.core.fact_checkpoints where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_checkpoints", "attached_node": "model.sui_models.core__fact_checkpoints", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 12, "model": "{{ get_where_subquery(ref('core__fact_checkpoints')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.dbt_utils_sequential_values_core__fact_checkpoints_checkpoint_number__1.7d1cc12bd5": {"database": "SUI", "schema": "dbt_utils_sequential_values_core", "name": "dbt_utils_sequential_values_core__fact_checkpoints_checkpoint_number__1", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_sequential_values_co_4461f7e2328951873bf9b69940461b31.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.dbt_utils_sequential_values_core__fact_checkpoints_checkpoint_number__1.7d1cc12bd5", "fqn": ["sui_models", "gold", "core", "dbt_utils_sequential_values_core__fact_checkpoints_checkpoint_number__1"], "alias": "fact_checkpoints_checkpoint_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_sequential_values_co_4461f7e2328951873bf9b69940461b31", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": ">1"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "error_if": ">1", "alias": "dbt_utils_sequential_values_co_4461f7e2328951873bf9b69940461b31"}, "created_at": 1756141891.185798, "relation_name": "SUI.dbt_utils_sequential_values_core.fact_checkpoints_checkpoint_number", "raw_code": "{{ dbt_utils.test_sequential_values(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],error_if=\">1\",alias=\"dbt_utils_sequential_values_co_4461f7e2328951873bf9b69940461b31\") }}", "language": "sql", "refs": [{"name": "core__fact_checkpoints", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_sequential_values", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_checkpoints"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/dbt_utils_sequential_values_co_4461f7e2328951873bf9b69940461b31.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith windowed as (\n\n    select\n        \n        checkpoint_number,\n        lag(checkpoint_number) over (\n            \n            order by checkpoint_number\n        ) as previous_checkpoint_number\n    from (select * from SUI.core.fact_checkpoints where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    \n    where not(checkpoint_number = previous_checkpoint_number + 1)\n    \n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_checkpoints", "attached_node": "model.sui_models.core__fact_checkpoints", "test_metadata": {"name": "sequential_values", "kwargs": {"column_name": "checkpoint_number", "interval": 1, "model": "{{ get_where_subquery(ref('core__fact_checkpoints')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_core__fact_events_CHECKPOINT_NUMBER.5356f1bf08": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_events_CHECKPOINT_NUMBER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_events_CHECKPOINT_NUMBER.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_events_CHECKPOINT_NUMBER.5356f1bf08", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_events_CHECKPOINT_NUMBER"], "alias": "fact_events_CHECKPOINT_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.1987748, "relation_name": "SUI.not_null_core.fact_events_CHECKPOINT_NUMBER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_events"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_events_CHECKPOINT_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_events where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHECKPOINT_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHECKPOINT_NUMBER", "file_key_name": "models.core__fact_events", "attached_node": "model.sui_models.core__fact_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHECKPOINT_NUMBER", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_events_BLOCK_TIMESTAMP.d71341f7ec": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_events_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_events_BLOCK_TIMESTAMP.d71341f7ec", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_events_BLOCK_TIMESTAMP"], "alias": "fact_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2003202, "relation_name": "SUI.not_null_core.fact_events_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_events"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_events_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_events where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_events", "attached_node": "model.sui_models.core__fact_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_events_TX_DIGEST.91cd501657": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_events_TX_DIGEST", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_events_TX_DIGEST.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_events_TX_DIGEST.91cd501657", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_events_TX_DIGEST"], "alias": "fact_events_TX_DIGEST", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2017827, "relation_name": "SUI.not_null_core.fact_events_TX_DIGEST", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_events"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_events_TX_DIGEST.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_events where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_DIGEST is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_DIGEST", "file_key_name": "models.core__fact_events", "attached_node": "model.sui_models.core__fact_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_DIGEST", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_events_TX_SUCCEEDED.0e0a46f5a7": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_events_TX_SUCCEEDED", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_events_TX_SUCCEEDED.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_events_TX_SUCCEEDED.0e0a46f5a7", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_events_TX_SUCCEEDED"], "alias": "fact_events_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2032573, "relation_name": "SUI.not_null_core.fact_events_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_events"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_events_TX_SUCCEEDED.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_events where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_events", "attached_node": "model.sui_models.core__fact_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_events_EVENT_INDEX.a8f913a5e4": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_events_EVENT_INDEX", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_events_EVENT_INDEX.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_events_EVENT_INDEX.a8f913a5e4", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_events_EVENT_INDEX"], "alias": "fact_events_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2049634, "relation_name": "SUI.not_null_core.fact_events_EVENT_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_events"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_events_EVENT_INDEX.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_events where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere EVENT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EVENT_INDEX", "file_key_name": "models.core__fact_events", "attached_node": "model.sui_models.core__fact_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_events_TYPE.525810bb88": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_events_TYPE", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_events_TYPE.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_events_TYPE.525810bb88", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_events_TYPE"], "alias": "fact_events_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2064452, "relation_name": "SUI.not_null_core.fact_events_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_events"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_events_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_events where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TYPE", "file_key_name": "models.core__fact_events", "attached_node": "model.sui_models.core__fact_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TYPE", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_events_FACT_EVENTS_ID.b32ffdbbd0": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_events_FACT_EVENTS_ID", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_events_FACT_EVENTS_ID.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_events_FACT_EVENTS_ID.b32ffdbbd0", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_events_FACT_EVENTS_ID"], "alias": "fact_events_FACT_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.207901, "relation_name": "SUI.not_null_core.fact_events_FACT_EVENTS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_events"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_events_FACT_EVENTS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_events where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere FACT_EVENTS_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_EVENTS_ID", "file_key_name": "models.core__fact_events", "attached_node": "model.sui_models.core__fact_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}}, "test.sui_models.unique_core__fact_events_FACT_EVENTS_ID.8c501ad6d4": {"database": "SUI", "schema": "unique_core", "name": "unique_core__fact_events_FACT_EVENTS_ID", "resource_type": "test", "package_name": "sui_models", "path": "unique_core__fact_events_FACT_EVENTS_ID.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.unique_core__fact_events_FACT_EVENTS_ID.8c501ad6d4", "fqn": ["sui_models", "gold", "core", "unique_core__fact_events_FACT_EVENTS_ID"], "alias": "fact_events_FACT_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2093596, "relation_name": "SUI.unique_core.fact_events_FACT_EVENTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_events"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/unique_core__fact_events_FACT_EVENTS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    FACT_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.core.fact_events where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere FACT_EVENTS_ID is not null\ngroup by FACT_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_EVENTS_ID", "file_key_name": "models.core__fact_events", "attached_node": "model.sui_models.core__fact_events", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_events_INSERTED_TIMESTAMP.5d33d86914": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_events_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_events_INSERTED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_events_INSERTED_TIMESTAMP.5d33d86914", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_events_INSERTED_TIMESTAMP"], "alias": "fact_events_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2108722, "relation_name": "SUI.not_null_core.fact_events_INSERTED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_events"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_events_INSERTED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_events where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.core__fact_events", "attached_node": "model.sui_models.core__fact_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_events_MODIFIED_TIMESTAMP.db0915010c": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_events_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_events_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_events_MODIFIED_TIMESTAMP.db0915010c", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_events_MODIFIED_TIMESTAMP"], "alias": "fact_events_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.212334, "relation_name": "SUI.not_null_core.fact_events_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_events"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_events_MODIFIED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_events where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere MODIFIED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.core__fact_events", "attached_node": "model.sui_models.core__fact_events", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_recency_core__fact_events_hour__block_timestamp__12.aaafbddc50": {"database": "SUI", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__fact_events_hour__block_timestamp__12", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_core__fact_events_hour__block_timestamp__12.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.dbt_utils_recency_core__fact_events_hour__block_timestamp__12.aaafbddc50", "fqn": ["sui_models", "gold", "core", "dbt_utils_recency_core__fact_events_hour__block_timestamp__12"], "alias": "fact_events_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"]}, "created_at": 1756141891.2138226, "relation_name": "SUI.dbt_utils_recency_core.fact_events_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency']) }}", "language": "sql", "refs": [{"name": "core__fact_events", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_events"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/dbt_utils_recency_core__fact_events_hour__block_timestamp__12.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(block_timestamp) as most_recent\n\n    from (select * from SUI.core.fact_events where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_events", "attached_node": "model.sui_models.core__fact_events", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 12, "model": "{{ get_where_subquery(ref('core__fact_events')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_core__fact_transaction_blocks_CHECKPOINT_NUMBER.c5c1745cc1": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_blocks_CHECKPOINT_NUMBER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transaction_blocks_CHECKPOINT_NUMBER.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_blocks_CHECKPOINT_NUMBER.c5c1745cc1", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_blocks_CHECKPOINT_NUMBER"], "alias": "fact_transaction_blocks_CHECKPOINT_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2189157, "relation_name": "SUI.not_null_core.fact_transaction_blocks_CHECKPOINT_NUMBER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_blocks"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transaction_blocks_CHECKPOINT_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_blocks where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHECKPOINT_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHECKPOINT_NUMBER", "file_key_name": "models.core__fact_transaction_blocks", "attached_node": "model.sui_models.core__fact_transaction_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHECKPOINT_NUMBER", "model": "{{ get_where_subquery(ref('core__fact_transaction_blocks')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transaction_blocks_BLOCK_TIMESTAMP.6dfb10fe43": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_blocks_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transaction_blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_blocks_BLOCK_TIMESTAMP.6dfb10fe43", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_blocks_BLOCK_TIMESTAMP"], "alias": "fact_transaction_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2204185, "relation_name": "SUI.not_null_core.fact_transaction_blocks_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_blocks"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transaction_blocks_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_blocks where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transaction_blocks", "attached_node": "model.sui_models.core__fact_transaction_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transaction_blocks')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transaction_blocks_TX_DIGEST.62786b1fdd": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_blocks_TX_DIGEST", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transaction_blocks_TX_DIGEST.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_blocks_TX_DIGEST.62786b1fdd", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_blocks_TX_DIGEST"], "alias": "fact_transaction_blocks_TX_DIGEST", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2218857, "relation_name": "SUI.not_null_core.fact_transaction_blocks_TX_DIGEST", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_blocks"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transaction_blocks_TX_DIGEST.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_blocks where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_DIGEST is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_DIGEST", "file_key_name": "models.core__fact_transaction_blocks", "attached_node": "model.sui_models.core__fact_transaction_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_DIGEST", "model": "{{ get_where_subquery(ref('core__fact_transaction_blocks')) }}"}, "namespace": null}}, "test.sui_models.unique_core__fact_transaction_blocks_TX_DIGEST.09d1c840c1": {"database": "SUI", "schema": "unique_core", "name": "unique_core__fact_transaction_blocks_TX_DIGEST", "resource_type": "test", "package_name": "sui_models", "path": "unique_core__fact_transaction_blocks_TX_DIGEST.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.unique_core__fact_transaction_blocks_TX_DIGEST.09d1c840c1", "fqn": ["sui_models", "gold", "core", "unique_core__fact_transaction_blocks_TX_DIGEST"], "alias": "fact_transaction_blocks_TX_DIGEST", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2235231, "relation_name": "SUI.unique_core.fact_transaction_blocks_TX_DIGEST", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_blocks"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/unique_core__fact_transaction_blocks_TX_DIGEST.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    TX_DIGEST as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.core.fact_transaction_blocks where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_DIGEST is not null\ngroup by TX_DIGEST\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_DIGEST", "file_key_name": "models.core__fact_transaction_blocks", "attached_node": "model.sui_models.core__fact_transaction_blocks", "test_metadata": {"name": "unique", "kwargs": {"column_name": "TX_DIGEST", "model": "{{ get_where_subquery(ref('core__fact_transaction_blocks')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transaction_blocks_TX_SUCCEEDED.281c601d54": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_blocks_TX_SUCCEEDED", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transaction_blocks_TX_SUCCEEDED.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_blocks_TX_SUCCEEDED.281c601d54", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_blocks_TX_SUCCEEDED"], "alias": "fact_transaction_blocks_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.224991, "relation_name": "SUI.not_null_core.fact_transaction_blocks_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_blocks"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transaction_blocks_TX_SUCCEEDED.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_blocks where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_transaction_blocks", "attached_node": "model.sui_models.core__fact_transaction_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_transaction_blocks')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID.3f22e3ab59": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transactio_aed3fc94069bc6cf98b8715f45e4121d.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID.3f22e3ab59", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID"], "alias": "fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_core__fact_transactio_aed3fc94069bc6cf98b8715f45e4121d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "not_null_core__fact_transactio_aed3fc94069bc6cf98b8715f45e4121d"}, "created_at": 1756141891.2264721, "relation_name": "SUI.not_null_core.fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_core__fact_transactio_aed3fc94069bc6cf98b8715f45e4121d\") }}", "language": "sql", "refs": [{"name": "core__fact_transaction_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_blocks"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transactio_aed3fc94069bc6cf98b8715f45e4121d.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_blocks where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere FACT_TRANSACTION_BLOCKS_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TRANSACTION_BLOCKS_ID", "file_key_name": "models.core__fact_transaction_blocks", "attached_node": "model.sui_models.core__fact_transaction_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_TRANSACTION_BLOCKS_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_blocks')) }}"}, "namespace": null}}, "test.sui_models.unique_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID.5d32a6ba08": {"database": "SUI", "schema": "unique_core", "name": "unique_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID", "resource_type": "test", "package_name": "sui_models", "path": "unique_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.unique_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID.5d32a6ba08", "fqn": ["sui_models", "gold", "core", "unique_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID"], "alias": "fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2279005, "relation_name": "SUI.unique_core.fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_blocks"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/unique_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    FACT_TRANSACTION_BLOCKS_ID as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.core.fact_transaction_blocks where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere FACT_TRANSACTION_BLOCKS_ID is not null\ngroup by FACT_TRANSACTION_BLOCKS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TRANSACTION_BLOCKS_ID", "file_key_name": "models.core__fact_transaction_blocks", "attached_node": "model.sui_models.core__fact_transaction_blocks", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_TRANSACTION_BLOCKS_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_blocks')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transaction_blocks_INSERTED_TIMESTAMP.131d5e4dd8": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_blocks_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transaction_blocks_INSERTED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_blocks_INSERTED_TIMESTAMP.131d5e4dd8", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_blocks_INSERTED_TIMESTAMP"], "alias": "fact_transaction_blocks_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2293582, "relation_name": "SUI.not_null_core.fact_transaction_blocks_INSERTED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_blocks"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transaction_blocks_INSERTED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_blocks where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.core__fact_transaction_blocks", "attached_node": "model.sui_models.core__fact_transaction_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transaction_blocks')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transaction_blocks_MODIFIED_TIMESTAMP.0e9e2d11f9": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_blocks_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transaction_blocks_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_blocks_MODIFIED_TIMESTAMP.0e9e2d11f9", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_blocks_MODIFIED_TIMESTAMP"], "alias": "fact_transaction_blocks_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2307851, "relation_name": "SUI.not_null_core.fact_transaction_blocks_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_blocks"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transaction_blocks_MODIFIED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_blocks where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere MODIFIED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.core__fact_transaction_blocks", "attached_node": "model.sui_models.core__fact_transaction_blocks", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transaction_blocks')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_recency_core__fact_transaction_blocks_hour__block_timestamp__12.87cc230450": {"database": "SUI", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__fact_transaction_blocks_hour__block_timestamp__12", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_core__fact_t_6340fa734e5c4b36a659cb0f2fc04855.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.dbt_utils_recency_core__fact_transaction_blocks_hour__block_timestamp__12.87cc230450", "fqn": ["sui_models", "gold", "core", "dbt_utils_recency_core__fact_transaction_blocks_hour__block_timestamp__12"], "alias": "fact_transaction_blocks_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_core__fact_t_6340fa734e5c4b36a659cb0f2fc04855", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_core__fact_t_6340fa734e5c4b36a659cb0f2fc04855"}, "created_at": 1756141891.2322772, "relation_name": "SUI.dbt_utils_recency_core.fact_transaction_blocks_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_core__fact_t_6340fa734e5c4b36a659cb0f2fc04855\") }}", "language": "sql", "refs": [{"name": "core__fact_transaction_blocks", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_blocks"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/dbt_utils_recency_core__fact_t_6340fa734e5c4b36a659cb0f2fc04855.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(block_timestamp) as most_recent\n\n    from (select * from SUI.core.fact_transaction_blocks where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_transaction_blocks", "attached_node": "model.sui_models.core__fact_transaction_blocks", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 12, "model": "{{ get_where_subquery(ref('core__fact_transaction_blocks')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_core__fact_transaction_inputs_CHECKPOINT_NUMBER.df61d4cc2d": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_inputs_CHECKPOINT_NUMBER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transaction_inputs_CHECKPOINT_NUMBER.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_inputs_CHECKPOINT_NUMBER.df61d4cc2d", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_inputs_CHECKPOINT_NUMBER"], "alias": "fact_transaction_inputs_CHECKPOINT_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2380254, "relation_name": "SUI.not_null_core.fact_transaction_inputs_CHECKPOINT_NUMBER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_inputs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_inputs"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transaction_inputs_CHECKPOINT_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_inputs where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHECKPOINT_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHECKPOINT_NUMBER", "file_key_name": "models.core__fact_transaction_inputs", "attached_node": "model.sui_models.core__fact_transaction_inputs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHECKPOINT_NUMBER", "model": "{{ get_where_subquery(ref('core__fact_transaction_inputs')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transaction_inputs_BLOCK_TIMESTAMP.08e6b6701e": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_inputs_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transaction_inputs_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_inputs_BLOCK_TIMESTAMP.08e6b6701e", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_inputs_BLOCK_TIMESTAMP"], "alias": "fact_transaction_inputs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2395267, "relation_name": "SUI.not_null_core.fact_transaction_inputs_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_inputs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_inputs"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transaction_inputs_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_inputs where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transaction_inputs", "attached_node": "model.sui_models.core__fact_transaction_inputs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transaction_inputs')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transaction_inputs_TX_DIGEST.b65bf46c81": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_inputs_TX_DIGEST", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transaction_inputs_TX_DIGEST.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_inputs_TX_DIGEST.b65bf46c81", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_inputs_TX_DIGEST"], "alias": "fact_transaction_inputs_TX_DIGEST", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2409832, "relation_name": "SUI.not_null_core.fact_transaction_inputs_TX_DIGEST", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_inputs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_inputs"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transaction_inputs_TX_DIGEST.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_inputs where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_DIGEST is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_DIGEST", "file_key_name": "models.core__fact_transaction_inputs", "attached_node": "model.sui_models.core__fact_transaction_inputs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_DIGEST", "model": "{{ get_where_subquery(ref('core__fact_transaction_inputs')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transaction_inputs_TX_SUCCEEDED.c9a2a69ceb": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_inputs_TX_SUCCEEDED", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transaction_inputs_TX_SUCCEEDED.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_inputs_TX_SUCCEEDED.c9a2a69ceb", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_inputs_TX_SUCCEEDED"], "alias": "fact_transaction_inputs_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2424495, "relation_name": "SUI.not_null_core.fact_transaction_inputs_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_inputs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_inputs"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transaction_inputs_TX_SUCCEEDED.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_inputs where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_transaction_inputs", "attached_node": "model.sui_models.core__fact_transaction_inputs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_transaction_inputs')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transaction_inputs_INPUT_INDEX.4714be8bb9": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_inputs_INPUT_INDEX", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transaction_inputs_INPUT_INDEX.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_inputs_INPUT_INDEX.4714be8bb9", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_inputs_INPUT_INDEX"], "alias": "fact_transaction_inputs_INPUT_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.243879, "relation_name": "SUI.not_null_core.fact_transaction_inputs_INPUT_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_inputs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_inputs"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transaction_inputs_INPUT_INDEX.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_inputs where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere INPUT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INPUT_INDEX", "file_key_name": "models.core__fact_transaction_inputs", "attached_node": "model.sui_models.core__fact_transaction_inputs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INPUT_INDEX", "model": "{{ get_where_subquery(ref('core__fact_transaction_inputs')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transaction_inputs_TYPE.7a59977a2b": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_inputs_TYPE", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transaction_inputs_TYPE.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_inputs_TYPE.7a59977a2b", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_inputs_TYPE"], "alias": "fact_transaction_inputs_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2454963, "relation_name": "SUI.not_null_core.fact_transaction_inputs_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_inputs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_inputs"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transaction_inputs_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_inputs where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TYPE", "file_key_name": "models.core__fact_transaction_inputs", "attached_node": "model.sui_models.core__fact_transaction_inputs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TYPE", "model": "{{ get_where_subquery(ref('core__fact_transaction_inputs')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID.60cf1bc519": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transactio_26501480b86a2dc681d18c7c0c33dd9b.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID.60cf1bc519", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID"], "alias": "fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_core__fact_transactio_26501480b86a2dc681d18c7c0c33dd9b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "not_null_core__fact_transactio_26501480b86a2dc681d18c7c0c33dd9b"}, "created_at": 1756141891.2469487, "relation_name": "SUI.not_null_core.fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_core__fact_transactio_26501480b86a2dc681d18c7c0c33dd9b\") }}", "language": "sql", "refs": [{"name": "core__fact_transaction_inputs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_inputs"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transactio_26501480b86a2dc681d18c7c0c33dd9b.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_inputs where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere FACT_TRANSACTION_INPUTS_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TRANSACTION_INPUTS_ID", "file_key_name": "models.core__fact_transaction_inputs", "attached_node": "model.sui_models.core__fact_transaction_inputs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_TRANSACTION_INPUTS_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_inputs')) }}"}, "namespace": null}}, "test.sui_models.unique_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID.d1ccb6d62d": {"database": "SUI", "schema": "unique_core", "name": "unique_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID", "resource_type": "test", "package_name": "sui_models", "path": "unique_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.unique_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID.d1ccb6d62d", "fqn": ["sui_models", "gold", "core", "unique_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID"], "alias": "fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2483945, "relation_name": "SUI.unique_core.fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_inputs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_inputs"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/unique_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    FACT_TRANSACTION_INPUTS_ID as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.core.fact_transaction_inputs where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere FACT_TRANSACTION_INPUTS_ID is not null\ngroup by FACT_TRANSACTION_INPUTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TRANSACTION_INPUTS_ID", "file_key_name": "models.core__fact_transaction_inputs", "attached_node": "model.sui_models.core__fact_transaction_inputs", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_TRANSACTION_INPUTS_ID", "model": "{{ get_where_subquery(ref('core__fact_transaction_inputs')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transaction_inputs_INSERTED_TIMESTAMP.d23cbe874e": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_inputs_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transaction_inputs_INSERTED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_inputs_INSERTED_TIMESTAMP.d23cbe874e", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_inputs_INSERTED_TIMESTAMP"], "alias": "fact_transaction_inputs_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2498424, "relation_name": "SUI.not_null_core.fact_transaction_inputs_INSERTED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_inputs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_inputs"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transaction_inputs_INSERTED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_inputs where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.core__fact_transaction_inputs", "attached_node": "model.sui_models.core__fact_transaction_inputs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transaction_inputs')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transaction_inputs_MODIFIED_TIMESTAMP.38ee9adfce": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transaction_inputs_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transaction_inputs_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transaction_inputs_MODIFIED_TIMESTAMP.38ee9adfce", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transaction_inputs_MODIFIED_TIMESTAMP"], "alias": "fact_transaction_inputs_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2512987, "relation_name": "SUI.not_null_core.fact_transaction_inputs_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transaction_inputs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_inputs"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transaction_inputs_MODIFIED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transaction_inputs where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere MODIFIED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.core__fact_transaction_inputs", "attached_node": "model.sui_models.core__fact_transaction_inputs", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transaction_inputs')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_recency_core__fact_transaction_inputs_hour__block_timestamp__12.7bcb5b383d": {"database": "SUI", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__fact_transaction_inputs_hour__block_timestamp__12", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_core__fact_t_c9343741dd95a24bc643e7a4caff66f3.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.dbt_utils_recency_core__fact_transaction_inputs_hour__block_timestamp__12.7bcb5b383d", "fqn": ["sui_models", "gold", "core", "dbt_utils_recency_core__fact_transaction_inputs_hour__block_timestamp__12"], "alias": "fact_transaction_inputs_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_core__fact_t_c9343741dd95a24bc643e7a4caff66f3", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_core__fact_t_c9343741dd95a24bc643e7a4caff66f3"}, "created_at": 1756141891.2527835, "relation_name": "SUI.dbt_utils_recency_core.fact_transaction_inputs_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_core__fact_t_c9343741dd95a24bc643e7a4caff66f3\") }}", "language": "sql", "refs": [{"name": "core__fact_transaction_inputs", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transaction_inputs"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/dbt_utils_recency_core__fact_t_c9343741dd95a24bc643e7a4caff66f3.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(block_timestamp) as most_recent\n\n    from (select * from SUI.core.fact_transaction_inputs where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_transaction_inputs", "attached_node": "model.sui_models.core__fact_transaction_inputs", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 12, "model": "{{ get_where_subquery(ref('core__fact_transaction_inputs')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_core__fact_transactions_CHECKPOINT_NUMBER.56e496e05b": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transactions_CHECKPOINT_NUMBER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transactions_CHECKPOINT_NUMBER.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transactions_CHECKPOINT_NUMBER.56e496e05b", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transactions_CHECKPOINT_NUMBER"], "alias": "fact_transactions_CHECKPOINT_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2579842, "relation_name": "SUI.not_null_core.fact_transactions_CHECKPOINT_NUMBER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transactions_CHECKPOINT_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transactions where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHECKPOINT_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHECKPOINT_NUMBER", "file_key_name": "models.core__fact_transactions", "attached_node": "model.sui_models.core__fact_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHECKPOINT_NUMBER", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transactions_BLOCK_TIMESTAMP.74f4267099": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transactions_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transactions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transactions_BLOCK_TIMESTAMP.74f4267099", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transactions_BLOCK_TIMESTAMP"], "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.259478, "relation_name": "SUI.not_null_core.fact_transactions_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transactions_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transactions where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transactions", "attached_node": "model.sui_models.core__fact_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transactions_TX_DIGEST.b3fd102a93": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transactions_TX_DIGEST", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transactions_TX_DIGEST.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transactions_TX_DIGEST.b3fd102a93", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transactions_TX_DIGEST"], "alias": "fact_transactions_TX_DIGEST", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.260903, "relation_name": "SUI.not_null_core.fact_transactions_TX_DIGEST", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transactions_TX_DIGEST.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transactions where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_DIGEST is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_DIGEST", "file_key_name": "models.core__fact_transactions", "attached_node": "model.sui_models.core__fact_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_DIGEST", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transactions_TX_SUCCEEDED.b734f84bae": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transactions_TX_SUCCEEDED", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transactions_TX_SUCCEEDED.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transactions_TX_SUCCEEDED.b734f84bae", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transactions_TX_SUCCEEDED"], "alias": "fact_transactions_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2623756, "relation_name": "SUI.not_null_core.fact_transactions_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transactions_TX_SUCCEEDED.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transactions where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_transactions", "attached_node": "model.sui_models.core__fact_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transactions_PAYLOAD_INDEX.4132a9cff1": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transactions_PAYLOAD_INDEX", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transactions_PAYLOAD_INDEX.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transactions_PAYLOAD_INDEX.4132a9cff1", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transactions_PAYLOAD_INDEX"], "alias": "fact_transactions_PAYLOAD_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.263809, "relation_name": "SUI.not_null_core.fact_transactions_PAYLOAD_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transactions_PAYLOAD_INDEX.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transactions where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere PAYLOAD_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PAYLOAD_INDEX", "file_key_name": "models.core__fact_transactions", "attached_node": "model.sui_models.core__fact_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PAYLOAD_INDEX", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transactions_PAYLOAD_TYPE.2c53f707c4": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transactions_PAYLOAD_TYPE", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transactions_PAYLOAD_TYPE.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transactions_PAYLOAD_TYPE.2c53f707c4", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transactions_PAYLOAD_TYPE"], "alias": "fact_transactions_PAYLOAD_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2654219, "relation_name": "SUI.not_null_core.fact_transactions_PAYLOAD_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transactions_PAYLOAD_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transactions where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere PAYLOAD_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PAYLOAD_TYPE", "file_key_name": "models.core__fact_transactions", "attached_node": "model.sui_models.core__fact_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PAYLOAD_TYPE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transactions_FACT_TRANSACTIONS_ID.c784aa0849": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transactions_FACT_TRANSACTIONS_ID", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transactions_FACT_TRANSACTIONS_ID.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transactions_FACT_TRANSACTIONS_ID.c784aa0849", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transactions_FACT_TRANSACTIONS_ID"], "alias": "fact_transactions_FACT_TRANSACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2668557, "relation_name": "SUI.not_null_core.fact_transactions_FACT_TRANSACTIONS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transactions_FACT_TRANSACTIONS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transactions where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere FACT_TRANSACTIONS_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TRANSACTIONS_ID", "file_key_name": "models.core__fact_transactions", "attached_node": "model.sui_models.core__fact_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FACT_TRANSACTIONS_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}}, "test.sui_models.unique_core__fact_transactions_FACT_TRANSACTIONS_ID.464d549945": {"database": "SUI", "schema": "unique_core", "name": "unique_core__fact_transactions_FACT_TRANSACTIONS_ID", "resource_type": "test", "package_name": "sui_models", "path": "unique_core__fact_transactions_FACT_TRANSACTIONS_ID.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.unique_core__fact_transactions_FACT_TRANSACTIONS_ID.464d549945", "fqn": ["sui_models", "gold", "core", "unique_core__fact_transactions_FACT_TRANSACTIONS_ID"], "alias": "fact_transactions_FACT_TRANSACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.268326, "relation_name": "SUI.unique_core.fact_transactions_FACT_TRANSACTIONS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/unique_core__fact_transactions_FACT_TRANSACTIONS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    FACT_TRANSACTIONS_ID as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.core.fact_transactions where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere FACT_TRANSACTIONS_ID is not null\ngroup by FACT_TRANSACTIONS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "FACT_TRANSACTIONS_ID", "file_key_name": "models.core__fact_transactions", "attached_node": "model.sui_models.core__fact_transactions", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_TRANSACTIONS_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transactions_INSERTED_TIMESTAMP.8978e0f6b1": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transactions_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transactions_INSERTED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transactions_INSERTED_TIMESTAMP.8978e0f6b1", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transactions_INSERTED_TIMESTAMP"], "alias": "fact_transactions_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2697523, "relation_name": "SUI.not_null_core.fact_transactions_INSERTED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transactions_INSERTED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transactions where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.core__fact_transactions", "attached_node": "model.sui_models.core__fact_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__fact_transactions_MODIFIED_TIMESTAMP.0c743560bb": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__fact_transactions_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__fact_transactions_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__fact_transactions_MODIFIED_TIMESTAMP.0c743560bb", "fqn": ["sui_models", "gold", "core", "not_null_core__fact_transactions_MODIFIED_TIMESTAMP"], "alias": "fact_transactions_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2711873, "relation_name": "SUI.not_null_core.fact_transactions_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__fact_transactions_MODIFIED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.fact_transactions where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere MODIFIED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.core__fact_transactions", "attached_node": "model.sui_models.core__fact_transactions", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_recency_core__fact_transactions_hour__block_timestamp__12.4c30ef6e6f": {"database": "SUI", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__fact_transactions_hour__block_timestamp__12", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_core__fact_t_cdfb1774ec8cf41c90496a9e000a8cd9.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.dbt_utils_recency_core__fact_transactions_hour__block_timestamp__12.4c30ef6e6f", "fqn": ["sui_models", "gold", "core", "dbt_utils_recency_core__fact_transactions_hour__block_timestamp__12"], "alias": "fact_transactions_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_recency_core__fact_t_cdfb1774ec8cf41c90496a9e000a8cd9", "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"], "alias": "dbt_utils_recency_core__fact_t_cdfb1774ec8cf41c90496a9e000a8cd9"}, "created_at": 1756141891.272691, "relation_name": "SUI.dbt_utils_recency_core.fact_transactions_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency'],alias=\"dbt_utils_recency_core__fact_t_cdfb1774ec8cf41c90496a9e000a8cd9\") }}", "language": "sql", "refs": [{"name": "core__fact_transactions", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__fact_transactions"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/dbt_utils_recency_core__fact_t_cdfb1774ec8cf41c90496a9e000a8cd9.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(block_timestamp) as most_recent\n\n    from (select * from SUI.core.fact_transactions where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__fact_transactions", "attached_node": "model.sui_models.core__fact_transactions", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 12, "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.dbt_utils_unique_combination_of_columns_core__dim_labels_ADDRESS.0626bcf09a": {"database": "SUI", "schema": "dbt_utils_unique_combination_of_columns_core", "name": "dbt_utils_unique_combination_of_columns_core__dim_labels_ADDRESS", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_unique_combination_o_97beb56267fa38e37e82cc71db61c9cb.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.dbt_utils_unique_combination_of_columns_core__dim_labels_ADDRESS.0626bcf09a", "fqn": ["sui_models", "gold", "core", "dbt_utils_unique_combination_of_columns_core__dim_labels_ADDRESS"], "alias": "dim_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_97beb56267fa38e37e82cc71db61c9cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "alias": "dbt_utils_unique_combination_o_97beb56267fa38e37e82cc71db61c9cb"}, "created_at": 1756141891.2777858, "relation_name": "SUI.dbt_utils_unique_combination_of_columns_core.dim_labels_ADDRESS", "raw_code": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_97beb56267fa38e37e82cc71db61c9cb\") }}", "language": "sql", "refs": [{"name": "core__dim_labels", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__dim_labels"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/dbt_utils_unique_combination_o_97beb56267fa38e37e82cc71db61c9cb.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ADDRESS\n    from (select * from SUI.core.dim_labels where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n    group by ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__dim_labels", "attached_node": "model.sui_models.core__dim_labels", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ADDRESS"], "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_core__ez_transfers_CHECKPOINT_NUMBER.f4715a41ec": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__ez_transfers_CHECKPOINT_NUMBER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__ez_transfers_CHECKPOINT_NUMBER.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__ez_transfers_CHECKPOINT_NUMBER.f4715a41ec", "fqn": ["sui_models", "gold", "core", "not_null_core__ez_transfers_CHECKPOINT_NUMBER"], "alias": "ez_transfers_CHECKPOINT_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.281683, "relation_name": "SUI.not_null_core.ez_transfers_CHECKPOINT_NUMBER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__ez_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__ez_transfers"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__ez_transfers_CHECKPOINT_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.ez_transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHECKPOINT_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHECKPOINT_NUMBER", "file_key_name": "models.core__ez_transfers", "attached_node": "model.sui_models.core__ez_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHECKPOINT_NUMBER", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__ez_transfers_BLOCK_TIMESTAMP.bc207eb78e": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__ez_transfers_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__ez_transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__ez_transfers_BLOCK_TIMESTAMP.bc207eb78e", "fqn": ["sui_models", "gold", "core", "not_null_core__ez_transfers_BLOCK_TIMESTAMP"], "alias": "ez_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2833934, "relation_name": "SUI.not_null_core.ez_transfers_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__ez_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__ez_transfers"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__ez_transfers_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.ez_transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_transfers", "attached_node": "model.sui_models.core__ez_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__ez_transfers_TX_DIGEST.5b0fadc094": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__ez_transfers_TX_DIGEST", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__ez_transfers_TX_DIGEST.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__ez_transfers_TX_DIGEST.5b0fadc094", "fqn": ["sui_models", "gold", "core", "not_null_core__ez_transfers_TX_DIGEST"], "alias": "ez_transfers_TX_DIGEST", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2848418, "relation_name": "SUI.not_null_core.ez_transfers_TX_DIGEST", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__ez_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__ez_transfers"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__ez_transfers_TX_DIGEST.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.ez_transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_DIGEST is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_DIGEST", "file_key_name": "models.core__ez_transfers", "attached_node": "model.sui_models.core__ez_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_DIGEST", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__ez_transfers_BALANCE_CHANGE_INDEX.e882b43eab": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__ez_transfers_BALANCE_CHANGE_INDEX", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__ez_transfers_BALANCE_CHANGE_INDEX.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__ez_transfers_BALANCE_CHANGE_INDEX.e882b43eab", "fqn": ["sui_models", "gold", "core", "not_null_core__ez_transfers_BALANCE_CHANGE_INDEX"], "alias": "ez_transfers_BALANCE_CHANGE_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.286311, "relation_name": "SUI.not_null_core.ez_transfers_BALANCE_CHANGE_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__ez_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__ez_transfers"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__ez_transfers_BALANCE_CHANGE_INDEX.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.ez_transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BALANCE_CHANGE_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BALANCE_CHANGE_INDEX", "file_key_name": "models.core__ez_transfers", "attached_node": "model.sui_models.core__ez_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BALANCE_CHANGE_INDEX", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__ez_transfers_TX_SUCCEEDED.eb6879ca96": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__ez_transfers_TX_SUCCEEDED", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__ez_transfers_TX_SUCCEEDED.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__ez_transfers_TX_SUCCEEDED.eb6879ca96", "fqn": ["sui_models", "gold", "core", "not_null_core__ez_transfers_TX_SUCCEEDED"], "alias": "ez_transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2877665, "relation_name": "SUI.not_null_core.ez_transfers_TX_SUCCEEDED", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__ez_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__ez_transfers"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__ez_transfers_TX_SUCCEEDED.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.ez_transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__ez_transfers", "attached_node": "model.sui_models.core__ez_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__ez_transfers_TX_SENDER.d3504600b8": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__ez_transfers_TX_SENDER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__ez_transfers_TX_SENDER.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__ez_transfers_TX_SENDER.d3504600b8", "fqn": ["sui_models", "gold", "core", "not_null_core__ez_transfers_TX_SENDER"], "alias": "ez_transfers_TX_SENDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2891989, "relation_name": "SUI.not_null_core.ez_transfers_TX_SENDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__ez_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__ez_transfers"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__ez_transfers_TX_SENDER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.ez_transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_SENDER", "file_key_name": "models.core__ez_transfers", "attached_node": "model.sui_models.core__ez_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SENDER", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__ez_transfers_SENDER.0853fc5cd5": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__ez_transfers_SENDER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__ez_transfers_SENDER.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__ez_transfers_SENDER.0853fc5cd5", "fqn": ["sui_models", "gold", "core", "not_null_core__ez_transfers_SENDER"], "alias": "ez_transfers_SENDER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.290651, "relation_name": "SUI.not_null_core.ez_transfers_SENDER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__ez_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__ez_transfers"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__ez_transfers_SENDER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.ez_transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "SENDER", "file_key_name": "models.core__ez_transfers", "attached_node": "model.sui_models.core__ez_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__ez_transfers_RECEIVER.d4d739d824": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__ez_transfers_RECEIVER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__ez_transfers_RECEIVER.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__ez_transfers_RECEIVER.d4d739d824", "fqn": ["sui_models", "gold", "core", "not_null_core__ez_transfers_RECEIVER"], "alias": "ez_transfers_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.292092, "relation_name": "SUI.not_null_core.ez_transfers_RECEIVER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__ez_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__ez_transfers"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__ez_transfers_RECEIVER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.ez_transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere RECEIVER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "RECEIVER", "file_key_name": "models.core__ez_transfers", "attached_node": "model.sui_models.core__ez_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__ez_transfers_COIN_TYPE.ff9b8da7e4": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__ez_transfers_COIN_TYPE", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__ez_transfers_COIN_TYPE.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__ez_transfers_COIN_TYPE.ff9b8da7e4", "fqn": ["sui_models", "gold", "core", "not_null_core__ez_transfers_COIN_TYPE"], "alias": "ez_transfers_COIN_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2936685, "relation_name": "SUI.not_null_core.ez_transfers_COIN_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__ez_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__ez_transfers"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__ez_transfers_COIN_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.ez_transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere COIN_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "COIN_TYPE", "file_key_name": "models.core__ez_transfers", "attached_node": "model.sui_models.core__ez_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "COIN_TYPE", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__ez_transfers_AMOUNT_RAW.3c41c9bfec": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__ez_transfers_AMOUNT_RAW", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__ez_transfers_AMOUNT_RAW.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__ez_transfers_AMOUNT_RAW.3c41c9bfec", "fqn": ["sui_models", "gold", "core", "not_null_core__ez_transfers_AMOUNT_RAW"], "alias": "ez_transfers_AMOUNT_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.295119, "relation_name": "SUI.not_null_core.ez_transfers_AMOUNT_RAW", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__ez_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__ez_transfers"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__ez_transfers_AMOUNT_RAW.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.ez_transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere AMOUNT_RAW is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_RAW", "file_key_name": "models.core__ez_transfers", "attached_node": "model.sui_models.core__ez_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_RAW", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__ez_transfers_EZ_TRANSFERS_ID.5fbbeba2b3": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__ez_transfers_EZ_TRANSFERS_ID", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__ez_transfers_EZ_TRANSFERS_ID.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__ez_transfers_EZ_TRANSFERS_ID.5fbbeba2b3", "fqn": ["sui_models", "gold", "core", "not_null_core__ez_transfers_EZ_TRANSFERS_ID"], "alias": "ez_transfers_EZ_TRANSFERS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2965775, "relation_name": "SUI.not_null_core.ez_transfers_EZ_TRANSFERS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__ez_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__ez_transfers"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__ez_transfers_EZ_TRANSFERS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.ez_transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere EZ_TRANSFERS_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EZ_TRANSFERS_ID", "file_key_name": "models.core__ez_transfers", "attached_node": "model.sui_models.core__ez_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EZ_TRANSFERS_ID", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}}, "test.sui_models.unique_core__ez_transfers_EZ_TRANSFERS_ID.869ef61698": {"database": "SUI", "schema": "unique_core", "name": "unique_core__ez_transfers_EZ_TRANSFERS_ID", "resource_type": "test", "package_name": "sui_models", "path": "unique_core__ez_transfers_EZ_TRANSFERS_ID.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.unique_core__ez_transfers_EZ_TRANSFERS_ID.869ef61698", "fqn": ["sui_models", "gold", "core", "unique_core__ez_transfers_EZ_TRANSFERS_ID"], "alias": "ez_transfers_EZ_TRANSFERS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.298014, "relation_name": "SUI.unique_core.ez_transfers_EZ_TRANSFERS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__ez_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__ez_transfers"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/unique_core__ez_transfers_EZ_TRANSFERS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    EZ_TRANSFERS_ID as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.core.ez_transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere EZ_TRANSFERS_ID is not null\ngroup by EZ_TRANSFERS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EZ_TRANSFERS_ID", "file_key_name": "models.core__ez_transfers", "attached_node": "model.sui_models.core__ez_transfers", "test_metadata": {"name": "unique", "kwargs": {"column_name": "EZ_TRANSFERS_ID", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__ez_transfers_INSERTED_TIMESTAMP.c96eb74a2a": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__ez_transfers_INSERTED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__ez_transfers_INSERTED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__ez_transfers_INSERTED_TIMESTAMP.c96eb74a2a", "fqn": ["sui_models", "gold", "core", "not_null_core__ez_transfers_INSERTED_TIMESTAMP"], "alias": "ez_transfers_INSERTED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.2994542, "relation_name": "SUI.not_null_core.ez_transfers_INSERTED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__ez_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__ez_transfers"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__ez_transfers_INSERTED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.ez_transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "INSERTED_TIMESTAMP", "file_key_name": "models.core__ez_transfers", "attached_node": "model.sui_models.core__ez_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}}, "test.sui_models.not_null_core__ez_transfers_MODIFIED_TIMESTAMP.a437846ff7": {"database": "SUI", "schema": "not_null_core", "name": "not_null_core__ez_transfers_MODIFIED_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_core__ez_transfers_MODIFIED_TIMESTAMP.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.not_null_core__ez_transfers_MODIFIED_TIMESTAMP.a437846ff7", "fqn": ["sui_models", "gold", "core", "not_null_core__ez_transfers_MODIFIED_TIMESTAMP"], "alias": "ez_transfers_MODIFIED_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3008683, "relation_name": "SUI.not_null_core.ez_transfers_MODIFIED_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "core__ez_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__ez_transfers"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/not_null_core__ez_transfers_MODIFIED_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.core.ez_transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere MODIFIED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "MODIFIED_TIMESTAMP", "file_key_name": "models.core__ez_transfers", "attached_node": "model.sui_models.core__ez_transfers", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MODIFIED_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_recency_core__ez_transfers_hour__block_timestamp__12.34360dd404": {"database": "SUI", "schema": "dbt_utils_recency_core", "name": "dbt_utils_recency_core__ez_transfers_hour__block_timestamp__12", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_core__ez_transfers_hour__block_timestamp__12.sql", "original_file_path": "models/gold/core/gold_core.yml", "unique_id": "test.sui_models.dbt_utils_recency_core__ez_transfers_hour__block_timestamp__12.34360dd404", "fqn": ["sui_models", "gold", "core", "dbt_utils_recency_core__ez_transfers_hour__block_timestamp__12"], "alias": "ez_transfers_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": ["test_recency", "test_recency"], "meta": {}, "group": null, "materialized": "test", "severity": "error", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": ["test_recency"], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())", "severity": "error", "tags": ["test_recency", "test_recency"]}, "created_at": 1756141891.3023672, "relation_name": "SUI.dbt_utils_recency_core.ez_transfers_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",tags=['test_recency']) }}", "language": "sql", "refs": [{"name": "core__ez_transfers", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.core__ez_transfers"]}, "compiled_path": "target/compiled/sui_models/models/gold/core/gold_core.yml/dbt_utils_recency_core__ez_transfers_hour__block_timestamp__12.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(block_timestamp) as most_recent\n\n    from (select * from SUI.core.ez_transfers where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -12,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.core__ez_transfers", "attached_node": "model.sui_models.core__ez_transfers", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 12, "model": "{{ get_where_subquery(ref('core__ez_transfers')) }}"}, "namespace": "dbt_utils"}}, "test.sui_models.not_null_defi__ez_bridge_activity_CHECKPOINT_NUMBER.1046fc00e8": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_bridge_activity_CHECKPOINT_NUMBER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_bridge_activity_CHECKPOINT_NUMBER.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_bridge_activity_CHECKPOINT_NUMBER.1046fc00e8", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_bridge_activity_CHECKPOINT_NUMBER"], "alias": "ez_bridge_activity_CHECKPOINT_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3216355, "relation_name": "SUI.not_null_defi.ez_bridge_activity_CHECKPOINT_NUMBER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_bridge_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_bridge_activity"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_bridge_activity_CHECKPOINT_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_bridge_activity where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHECKPOINT_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHECKPOINT_NUMBER", "file_key_name": "models.defi__ez_bridge_activity", "attached_node": "model.sui_models.defi__ez_bridge_activity", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHECKPOINT_NUMBER", "model": "{{ get_where_subquery(ref('defi__ez_bridge_activity')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_bridge_activity_BLOCK_TIMESTAMP.eb16926026": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_bridge_activity_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_bridge_activity_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_bridge_activity_BLOCK_TIMESTAMP.eb16926026", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_bridge_activity_BLOCK_TIMESTAMP"], "alias": "ez_bridge_activity_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3231447, "relation_name": "SUI.not_null_defi.ez_bridge_activity_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_bridge_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_bridge_activity"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_bridge_activity_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_bridge_activity where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__ez_bridge_activity", "attached_node": "model.sui_models.defi__ez_bridge_activity", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__ez_bridge_activity')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_bridge_activity_TX_DIGEST.53854c8459": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_bridge_activity_TX_DIGEST", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_bridge_activity_TX_DIGEST.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_bridge_activity_TX_DIGEST.53854c8459", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_bridge_activity_TX_DIGEST"], "alias": "ez_bridge_activity_TX_DIGEST", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.324634, "relation_name": "SUI.not_null_defi.ez_bridge_activity_TX_DIGEST", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_bridge_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_bridge_activity"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_bridge_activity_TX_DIGEST.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_bridge_activity where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_DIGEST is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_DIGEST", "file_key_name": "models.defi__ez_bridge_activity", "attached_node": "model.sui_models.defi__ez_bridge_activity", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_DIGEST", "model": "{{ get_where_subquery(ref('defi__ez_bridge_activity')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_bridge_activity_EVENT_INDEX.83a405a4b0": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_bridge_activity_EVENT_INDEX", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_bridge_activity_EVENT_INDEX.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_bridge_activity_EVENT_INDEX.83a405a4b0", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_bridge_activity_EVENT_INDEX"], "alias": "ez_bridge_activity_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.326175, "relation_name": "SUI.not_null_defi.ez_bridge_activity_EVENT_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_bridge_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_bridge_activity"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_bridge_activity_EVENT_INDEX.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_bridge_activity where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere EVENT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EVENT_INDEX", "file_key_name": "models.defi__ez_bridge_activity", "attached_node": "model.sui_models.defi__ez_bridge_activity", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('defi__ez_bridge_activity')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_bridge_activity_bridge_address.9436097f13": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_bridge_activity_bridge_address", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_bridge_activity_bridge_address.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_bridge_activity_bridge_address.9436097f13", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_bridge_activity_bridge_address"], "alias": "ez_bridge_activity_bridge_address", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3276682, "relation_name": "SUI.not_null_defi.ez_bridge_activity_bridge_address", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_bridge_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_bridge_activity"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_bridge_activity_bridge_address.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_bridge_activity where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere bridge_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "bridge_address", "file_key_name": "models.defi__ez_bridge_activity", "attached_node": "model.sui_models.defi__ez_bridge_activity", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "bridge_address", "model": "{{ get_where_subquery(ref('defi__ez_bridge_activity')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_bridge_activity_platform.ca9ee8cd85": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_bridge_activity_platform", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_bridge_activity_platform.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_bridge_activity_platform.ca9ee8cd85", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_bridge_activity_platform"], "alias": "ez_bridge_activity_platform", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3291094, "relation_name": "SUI.not_null_defi.ez_bridge_activity_platform", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_bridge_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_bridge_activity"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_bridge_activity_platform.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_bridge_activity where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere platform is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "platform", "file_key_name": "models.defi__ez_bridge_activity", "attached_node": "model.sui_models.defi__ez_bridge_activity", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "platform", "model": "{{ get_where_subquery(ref('defi__ez_bridge_activity')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_bridge_activity_protocol.fda817c891": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_bridge_activity_protocol", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_bridge_activity_protocol.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_bridge_activity_protocol.fda817c891", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_bridge_activity_protocol"], "alias": "ez_bridge_activity_protocol", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3305767, "relation_name": "SUI.not_null_defi.ez_bridge_activity_protocol", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_bridge_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_bridge_activity"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_bridge_activity_protocol.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_bridge_activity where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere protocol is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "protocol", "file_key_name": "models.defi__ez_bridge_activity", "attached_node": "model.sui_models.defi__ez_bridge_activity", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "protocol", "model": "{{ get_where_subquery(ref('defi__ez_bridge_activity')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_bridge_activity_direction.c74531b1e0": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_bridge_activity_direction", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_bridge_activity_direction.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_bridge_activity_direction.c74531b1e0", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_bridge_activity_direction"], "alias": "ez_bridge_activity_direction", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3319957, "relation_name": "SUI.not_null_defi.ez_bridge_activity_direction", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_bridge_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_bridge_activity"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_bridge_activity_direction.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_bridge_activity where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere direction is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "direction", "file_key_name": "models.defi__ez_bridge_activity", "attached_node": "model.sui_models.defi__ez_bridge_activity", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "direction", "model": "{{ get_where_subquery(ref('defi__ez_bridge_activity')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_bridge_activity_ez_bridge_activity_id.eb9dea0184": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_bridge_activity_ez_bridge_activity_id", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_bridge_activity_ez_bridge_activity_id.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_bridge_activity_ez_bridge_activity_id.eb9dea0184", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_bridge_activity_ez_bridge_activity_id"], "alias": "ez_bridge_activity_ez_bridge_activity_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3334749, "relation_name": "SUI.not_null_defi.ez_bridge_activity_ez_bridge_activity_id", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_bridge_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_bridge_activity"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_bridge_activity_ez_bridge_activity_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_bridge_activity where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere ez_bridge_activity_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ez_bridge_activity_id", "file_key_name": "models.defi__ez_bridge_activity", "attached_node": "model.sui_models.defi__ez_bridge_activity", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ez_bridge_activity_id", "model": "{{ get_where_subquery(ref('defi__ez_bridge_activity')) }}"}, "namespace": null}}, "test.sui_models.unique_defi__ez_bridge_activity_ez_bridge_activity_id.d14e92e9ee": {"database": "SUI", "schema": "unique_defi", "name": "unique_defi__ez_bridge_activity_ez_bridge_activity_id", "resource_type": "test", "package_name": "sui_models", "path": "unique_defi__ez_bridge_activity_ez_bridge_activity_id.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.unique_defi__ez_bridge_activity_ez_bridge_activity_id.d14e92e9ee", "fqn": ["sui_models", "gold", "defi", "unique_defi__ez_bridge_activity_ez_bridge_activity_id"], "alias": "ez_bridge_activity_ez_bridge_activity_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3349032, "relation_name": "SUI.unique_defi.ez_bridge_activity_ez_bridge_activity_id", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_bridge_activity", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_bridge_activity"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/unique_defi__ez_bridge_activity_ez_bridge_activity_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ez_bridge_activity_id as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.defi.ez_bridge_activity where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere ez_bridge_activity_id is not null\ngroup by ez_bridge_activity_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ez_bridge_activity_id", "file_key_name": "models.defi__ez_bridge_activity", "attached_node": "model.sui_models.defi__ez_bridge_activity", "test_metadata": {"name": "unique", "kwargs": {"column_name": "ez_bridge_activity_id", "model": "{{ get_where_subquery(ref('defi__ez_bridge_activity')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_dex_swaps_CHECKPOINT_NUMBER.74203a52c4": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_dex_swaps_CHECKPOINT_NUMBER", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_dex_swaps_CHECKPOINT_NUMBER.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_dex_swaps_CHECKPOINT_NUMBER.74203a52c4", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_dex_swaps_CHECKPOINT_NUMBER"], "alias": "ez_dex_swaps_CHECKPOINT_NUMBER", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3364868, "relation_name": "SUI.not_null_defi.ez_dex_swaps_CHECKPOINT_NUMBER", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_dex_swaps_CHECKPOINT_NUMBER.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere CHECKPOINT_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "CHECKPOINT_NUMBER", "file_key_name": "models.defi__ez_dex_swaps", "attached_node": "model.sui_models.defi__ez_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHECKPOINT_NUMBER", "model": "{{ get_where_subquery(ref('defi__ez_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_dex_swaps_BLOCK_TIMESTAMP.b21ec41642": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_dex_swaps_BLOCK_TIMESTAMP", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_dex_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_dex_swaps_BLOCK_TIMESTAMP.b21ec41642", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_dex_swaps_BLOCK_TIMESTAMP"], "alias": "ez_dex_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.337955, "relation_name": "SUI.not_null_defi.ez_dex_swaps_BLOCK_TIMESTAMP", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_dex_swaps_BLOCK_TIMESTAMP.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.defi__ez_dex_swaps", "attached_node": "model.sui_models.defi__ez_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('defi__ez_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_dex_swaps_TX_DIGEST.26721507d6": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_dex_swaps_TX_DIGEST", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_dex_swaps_TX_DIGEST.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_dex_swaps_TX_DIGEST.26721507d6", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_dex_swaps_TX_DIGEST"], "alias": "ez_dex_swaps_TX_DIGEST", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3394153, "relation_name": "SUI.not_null_defi.ez_dex_swaps_TX_DIGEST", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_dex_swaps_TX_DIGEST.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TX_DIGEST is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TX_DIGEST", "file_key_name": "models.defi__ez_dex_swaps", "attached_node": "model.sui_models.defi__ez_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_DIGEST", "model": "{{ get_where_subquery(ref('defi__ez_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_dex_swaps_EVENT_INDEX.275df8c906": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_dex_swaps_EVENT_INDEX", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_dex_swaps_EVENT_INDEX.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_dex_swaps_EVENT_INDEX.275df8c906", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_dex_swaps_EVENT_INDEX"], "alias": "ez_dex_swaps_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3408585, "relation_name": "SUI.not_null_defi.ez_dex_swaps_EVENT_INDEX", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_dex_swaps_EVENT_INDEX.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere EVENT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EVENT_INDEX", "file_key_name": "models.defi__ez_dex_swaps", "attached_node": "model.sui_models.defi__ez_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('defi__ez_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_dex_swaps_PLATFORM_ADDRESS.8405745a8b": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_dex_swaps_PLATFORM_ADDRESS", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_dex_swaps_PLATFORM_ADDRESS.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_dex_swaps_PLATFORM_ADDRESS.8405745a8b", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_dex_swaps_PLATFORM_ADDRESS"], "alias": "ez_dex_swaps_PLATFORM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3422985, "relation_name": "SUI.not_null_defi.ez_dex_swaps_PLATFORM_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_dex_swaps_PLATFORM_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere PLATFORM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PLATFORM_ADDRESS", "file_key_name": "models.defi__ez_dex_swaps", "attached_node": "model.sui_models.defi__ez_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_dex_swaps_PLATFORM_NAME.2e202dfe75": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_dex_swaps_PLATFORM_NAME", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_dex_swaps_PLATFORM_NAME.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_dex_swaps_PLATFORM_NAME.2e202dfe75", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_dex_swaps_PLATFORM_NAME"], "alias": "ez_dex_swaps_PLATFORM_NAME", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3437183, "relation_name": "SUI.not_null_defi.ez_dex_swaps_PLATFORM_NAME", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_dex_swaps_PLATFORM_NAME.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere PLATFORM_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "PLATFORM_NAME", "file_key_name": "models.defi__ez_dex_swaps", "attached_node": "model.sui_models.defi__ez_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_NAME", "model": "{{ get_where_subquery(ref('defi__ez_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_dex_swaps_AMOUNT_IN_RAW.47f972a8fb": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_dex_swaps_AMOUNT_IN_RAW", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_dex_swaps_AMOUNT_IN_RAW.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_dex_swaps_AMOUNT_IN_RAW.47f972a8fb", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_dex_swaps_AMOUNT_IN_RAW"], "alias": "ez_dex_swaps_AMOUNT_IN_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3451428, "relation_name": "SUI.not_null_defi.ez_dex_swaps_AMOUNT_IN_RAW", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_dex_swaps_AMOUNT_IN_RAW.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere AMOUNT_IN_RAW is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_IN_RAW", "file_key_name": "models.defi__ez_dex_swaps", "attached_node": "model.sui_models.defi__ez_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_IN_RAW", "model": "{{ get_where_subquery(ref('defi__ez_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_dex_swaps_AMOUNT_OUT_RAW.a93bb57e13": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_dex_swaps_AMOUNT_OUT_RAW", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_dex_swaps_AMOUNT_OUT_RAW.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_dex_swaps_AMOUNT_OUT_RAW.a93bb57e13", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_dex_swaps_AMOUNT_OUT_RAW"], "alias": "ez_dex_swaps_AMOUNT_OUT_RAW", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3472571, "relation_name": "SUI.not_null_defi.ez_dex_swaps_AMOUNT_OUT_RAW", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_dex_swaps_AMOUNT_OUT_RAW.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere AMOUNT_OUT_RAW is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "AMOUNT_OUT_RAW", "file_key_name": "models.defi__ez_dex_swaps", "attached_node": "model.sui_models.defi__ez_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_OUT_RAW", "model": "{{ get_where_subquery(ref('defi__ez_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_dex_swaps_TOKEN_IN_TYPE.44b0ac5c5a": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_dex_swaps_TOKEN_IN_TYPE", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_dex_swaps_TOKEN_IN_TYPE.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_dex_swaps_TOKEN_IN_TYPE.44b0ac5c5a", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_dex_swaps_TOKEN_IN_TYPE"], "alias": "ez_dex_swaps_TOKEN_IN_TYPE", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3487017, "relation_name": "SUI.not_null_defi.ez_dex_swaps_TOKEN_IN_TYPE", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_dex_swaps_TOKEN_IN_TYPE.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TOKEN_IN_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_IN_TYPE", "file_key_name": "models.defi__ez_dex_swaps", "attached_node": "model.sui_models.defi__ez_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_IN_TYPE", "model": "{{ get_where_subquery(ref('defi__ez_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_dex_swaps_TOKEN_OUT_ADDRESS.3adc7d010f": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_dex_swaps_TOKEN_OUT_ADDRESS", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_dex_swaps_TOKEN_OUT_ADDRESS.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_dex_swaps_TOKEN_OUT_ADDRESS.3adc7d010f", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_dex_swaps_TOKEN_OUT_ADDRESS"], "alias": "ez_dex_swaps_TOKEN_OUT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3501449, "relation_name": "SUI.not_null_defi.ez_dex_swaps_TOKEN_OUT_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_dex_swaps_TOKEN_OUT_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TOKEN_OUT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TOKEN_OUT_ADDRESS", "file_key_name": "models.defi__ez_dex_swaps", "attached_node": "model.sui_models.defi__ez_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_OUT_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_dex_swaps_TRADER_ADDRESS.24dceb0705": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_dex_swaps_TRADER_ADDRESS", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_dex_swaps_TRADER_ADDRESS.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_dex_swaps_TRADER_ADDRESS.24dceb0705", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_dex_swaps_TRADER_ADDRESS"], "alias": "ez_dex_swaps_TRADER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3515878, "relation_name": "SUI.not_null_defi.ez_dex_swaps_TRADER_ADDRESS", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_dex_swaps_TRADER_ADDRESS.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere TRADER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "TRADER_ADDRESS", "file_key_name": "models.defi__ez_dex_swaps", "attached_node": "model.sui_models.defi__ez_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRADER_ADDRESS", "model": "{{ get_where_subquery(ref('defi__ez_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.not_null_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID.e64665588d": {"database": "SUI", "schema": "not_null_defi", "name": "not_null_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID", "resource_type": "test", "package_name": "sui_models", "path": "not_null_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.not_null_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID.e64665588d", "fqn": ["sui_models", "gold", "defi", "not_null_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID"], "alias": "ez_dex_swaps_EZ_DEX_SWAPS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3530061, "relation_name": "SUI.not_null_defi.ez_dex_swaps_EZ_DEX_SWAPS_ID", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/not_null_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect *\nfrom (select * from SUI.defi.ez_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere EZ_DEX_SWAPS_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EZ_DEX_SWAPS_ID", "file_key_name": "models.defi__ez_dex_swaps", "attached_node": "model.sui_models.defi__ez_dex_swaps", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EZ_DEX_SWAPS_ID", "model": "{{ get_where_subquery(ref('defi__ez_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.unique_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID.07eaa2e5cb": {"database": "SUI", "schema": "unique_defi", "name": "unique_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID", "resource_type": "test", "package_name": "sui_models", "path": "unique_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.unique_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID.07eaa2e5cb", "fqn": ["sui_models", "gold", "defi", "unique_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID"], "alias": "ez_dex_swaps_EZ_DEX_SWAPS_ID", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.3544662, "relation_name": "SUI.unique_defi.ez_dex_swaps_EZ_DEX_SWAPS_ID", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/unique_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    EZ_DEX_SWAPS_ID as unique_field,\n    count(*) as n_records\n\nfrom (select * from SUI.defi.ez_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\nwhere EZ_DEX_SWAPS_ID is not null\ngroup by EZ_DEX_SWAPS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "EZ_DEX_SWAPS_ID", "file_key_name": "models.defi__ez_dex_swaps", "attached_node": "model.sui_models.defi__ez_dex_swaps", "test_metadata": {"name": "unique", "kwargs": {"column_name": "EZ_DEX_SWAPS_ID", "model": "{{ get_where_subquery(ref('defi__ez_dex_swaps')) }}"}, "namespace": null}}, "test.sui_models.dbt_utils_recency_defi__ez_dex_swaps_hour__block_timestamp__6.0e11e4f514": {"database": "SUI", "schema": "dbt_utils_recency_defi", "name": "dbt_utils_recency_defi__ez_dex_swaps_hour__block_timestamp__6", "resource_type": "test", "package_name": "sui_models", "path": "dbt_utils_recency_defi__ez_dex_swaps_hour__block_timestamp__6.sql", "original_file_path": "models/gold/defi/gold_defi.yml", "unique_id": "test.sui_models.dbt_utils_recency_defi__ez_dex_swaps_hour__block_timestamp__6.0e11e4f514", "fqn": ["sui_models", "gold", "defi", "dbt_utils_recency_defi__ez_dex_swaps_hour__block_timestamp__6"], "alias": "ez_dex_swaps_hour", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": "modified_timestamp::DATE > dateadd(hour, -36, sysdate())", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "where": "modified_timestamp::DATE > dateadd(hour, -{{ var('TEST_HOURS_THRESHOLD', 36) }}, sysdate())"}, "created_at": 1756141891.355934, "relation_name": "SUI.dbt_utils_recency_defi.ez_dex_swaps_hour", "raw_code": "{{ dbt_utils.test_recency(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defi__ez_dex_swaps", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.test_recency", "macro.dbt.get_where_subquery"], "nodes": ["model.sui_models.defi__ez_dex_swaps"]}, "compiled_path": "target/compiled/sui_models/models/gold/defi/gold_defi.yml/dbt_utils_recency_defi__ez_dex_swaps_hour__block_timestamp__6.sql", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(block_timestamp) as most_recent\n\n    from (select * from SUI.defi.ez_dex_swaps where modified_timestamp::DATE > dateadd(hour, -36, sysdate())) dbt_subquery\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        hour,\n        -6,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        hour,\n        -6,\n        convert_timezone('UTC', current_timestamp())\n        )\n\n as timestamp)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": null, "file_key_name": "models.defi__ez_dex_swaps", "attached_node": "model.sui_models.defi__ez_dex_swaps", "test_metadata": {"name": "recency", "kwargs": {"datepart": "hour", "field": "block_timestamp", "interval": 6, "model": "{{ get_where_subquery(ref('defi__ez_dex_swaps')) }}"}, "namespace": "dbt_utils"}}, "test.livequery_models.test__live_udf_api_batched_post_data_object.0524c38098": {"database": "SUI", "schema": "test", "name": "test__live_udf_api_batched_post_data_object", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_batched_post_data_object.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_batched_post_data_object.0524c38098", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_batched_post_data_object"], "alias": "live_udf_api_batched_post_data_object", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.394034, "relation_name": "SUI.test.live_udf_api_batched_post_data_object", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.yml/test__live_udf_api_batched_post_data_object.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'live.udf_api_batched' AS test_name\n        ,['GET', \n'https://httpbin.org/get', \n{'Content-Type': 'application/json'}, \n{'param1': 'value1', 'param2': 'value2'}, \n''] as parameters\n        ,SUI.live.udf_api_batched('GET', \n'https://httpbin.org/get', \n{'Content-Type': 'application/json'}, \n{'param1': 'value1', 'param2': 'value2'}, \n'') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api_batched('GET', \n'https://httpbin.org/get', \n{'Content-Type': 'application/json'}, \n{'param1': 'value1', 'param2': 'value2'}, \n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.args is not null$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api_batched('GET', \n'https://httpbin.org/get', \n{'Content-Type': 'application/json'}, \n{'param1': 'value1', 'param2': 'value2'}, \n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.args is not null\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.args:param1 = 'value1'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api_batched('GET', \n'https://httpbin.org/get', \n{'Content-Type': 'application/json'}, \n{'param1': 'value1', 'param2': 'value2'}, \n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.args:param1 = 'value1'\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.args:param2 = 'value2'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api_batched('GET', \n'https://httpbin.org/get', \n{'Content-Type': 'application/json'}, \n{'param1': 'value1', 'param2': 'value2'}, \n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.args:param2 = 'value2'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api_batched", "file_key_name": "models.live", "attached_node": "model.livequery_models.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'GET', \n'https://httpbin.org/get', \n{'Content-Type': 'application/json'}, \n{'param1': 'value1', 'param2': 'value2'}, \n''\n", "assertions": ["result:status_code = 200", "result:data.args is not null", "result:data.args:param1 = 'value1'", "result:data.args:param2 = 'value2'"], "column_name": "udf_api_batched", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_models.test__live_udf_api_batched_post_jsonrpc_ethereum_batch.0af69e0283": {"database": "SUI", "schema": "test", "name": "test__live_udf_api_batched_post_jsonrpc_ethereum_batch", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_batched_post_jsonrpc_ethereum_batch.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_batched_post_jsonrpc_ethereum_batch.0af69e0283", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_batched_post_jsonrpc_ethereum_batch"], "alias": "live_udf_api_batched_post_jsonrpc_ethereum_batch", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.4227893, "relation_name": "SUI.test.live_udf_api_batched_post_jsonrpc_ethereum_batch", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.yml/test__live_udf_api_batched_post_jsonrpc_ethereum_batch.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'live.udf_api_batched' AS test_name\n        ,['POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n''] as parameters\n        ,SUI.live.udf_api_batched('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api_batched('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[0]:jsonrpc = '2.0'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api_batched('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[0]:jsonrpc = '2.0'\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[0]:id = 1$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api_batched('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[0]:id = 1\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[0]:result is not null$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api_batched('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[0]:result is not null\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[1]:jsonrpc = '2.0'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api_batched('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[1]:jsonrpc = '2.0'\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[1]:id = 2$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api_batched('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[1]:id = 2\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[1]:result = '0x1'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api_batched('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[1]:result = '0x1'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api_batched", "file_key_name": "models.live", "attached_node": "model.livequery_models.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n''\n", "assertions": ["result:status_code = 200", "result:data[0]:jsonrpc = '2.0'", "result:data[0]:id = 1", "result:data[0]:result is not null", "result:data[1]:jsonrpc = '2.0'", "result:data[1]:id = 2", "result:data[1]:result = '0x1'"], "column_name": "udf_api_batched", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_models.test__live_udf_api_batched_post_jsonrpc_solana.8b95c0ed0b": {"database": "SUI", "schema": "test", "name": "test__live_udf_api_batched_post_jsonrpc_solana", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_batched_post_jsonrpc_solana.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_batched_post_jsonrpc_solana.8b95c0ed0b", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_batched_post_jsonrpc_solana"], "alias": "live_udf_api_batched_post_jsonrpc_solana", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.4338691, "relation_name": "SUI.test.live_udf_api_batched_post_jsonrpc_solana", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.yml/test__live_udf_api_batched_post_jsonrpc_solana.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'live.udf_api_batched' AS test_name\n        ,['POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n{\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'getVersion'\n},\n''] as parameters\n        ,SUI.live.udf_api_batched('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n{\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'getVersion'\n},\n'') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api_batched('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n{\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'getVersion'\n},\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.jsonrpc = '2.0'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api_batched('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n{\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'getVersion'\n},\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.jsonrpc = '2.0'\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.id = 1$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api_batched('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n{\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'getVersion'\n},\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.id = 1\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.result is not null$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api_batched('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n{\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'getVersion'\n},\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.result is not null\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api_batched", "file_key_name": "models.live", "attached_node": "model.livequery_models.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n{\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'getVersion'\n},\n''\n", "assertions": ["result:status_code = 200", "result:data.jsonrpc = '2.0'", "result:data.id = 1", "result:data.result is not null"], "column_name": "udf_api_batched", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_models.test__live_udf_api_post_data_object.208f9d5456": {"database": "SUI", "schema": "test", "name": "test__live_udf_api_post_data_object", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_post_data_object.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_post_data_object.208f9d5456", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_post_data_object"], "alias": "live_udf_api_post_data_object", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.4417539, "relation_name": "SUI.test.live_udf_api_post_data_object", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.yml/test__live_udf_api_post_data_object.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'live.udf_api' AS test_name\n        ,['https://httpbin.org/post', {'foo': 'bar'}] as parameters\n        ,SUI.live.udf_api('https://httpbin.org/post', {'foo': 'bar'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json is not null$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('https://httpbin.org/post', {'foo': 'bar'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json is not null\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json = OBJECT_CONSTRUCT('foo', 'bar')$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('https://httpbin.org/post', {'foo': 'bar'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json = OBJECT_CONSTRUCT('foo', 'bar')\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_models.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', {'foo': 'bar'}\n", "assertions": ["result:data.json is not null", "result:data.json = OBJECT_CONSTRUCT('foo', 'bar')"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_models.test__live_udf_api_post_data_array.f30e6de8c8": {"database": "SUI", "schema": "test", "name": "test__live_udf_api_post_data_array", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_post_data_array.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_post_data_array.f30e6de8c8", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_post_data_array"], "alias": "live_udf_api_post_data_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.447833, "relation_name": "SUI.test.live_udf_api_post_data_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.yml/test__live_udf_api_post_data_array.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'live.udf_api' AS test_name\n        ,['https://httpbin.org/post', ['foo', 'bar']] as parameters\n        ,SUI.live.udf_api('https://httpbin.org/post', ['foo', 'bar']) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json is not null$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('https://httpbin.org/post', ['foo', 'bar'])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json is not null\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json = ARRAY_CONSTRUCT('foo', 'bar')$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('https://httpbin.org/post', ['foo', 'bar'])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json = ARRAY_CONSTRUCT('foo', 'bar')\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_models.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', ['foo', 'bar']\n", "assertions": ["result:data.json is not null", "result:data.json = ARRAY_CONSTRUCT('foo', 'bar')"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_models.test__live_udf_api_post_data_string.e2159319bb": {"database": "SUI", "schema": "test", "name": "test__live_udf_api_post_data_string", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_post_data_string.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_post_data_string.e2159319bb", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_post_data_string"], "alias": "live_udf_api_post_data_string", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.4536018, "relation_name": "SUI.test.live_udf_api_post_data_string", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.yml/test__live_udf_api_post_data_string.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'live.udf_api' AS test_name\n        ,['https://httpbin.org/post', 'foo'::VARIANT] as parameters\n        ,SUI.live.udf_api('https://httpbin.org/post', 'foo'::VARIANT) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json is not null$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('https://httpbin.org/post', 'foo'::VARIANT)\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json is not null\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json = 'foo'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('https://httpbin.org/post', 'foo'::VARIANT)\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json = 'foo'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_models.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', 'foo'::VARIANT\n", "assertions": ["result:data.json is not null", "result:data.json = 'foo'"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_models.test__live_udf_api_get_method.a1fbeefdc8": {"database": "SUI", "schema": "test", "name": "test__live_udf_api_get_method", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_get_method.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_get_method.a1fbeefdc8", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_get_method"], "alias": "live_udf_api_get_method", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.4594903, "relation_name": "SUI.test.live_udf_api_get_method", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.yml/test__live_udf_api_get_method.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'live.udf_api' AS test_name\n        ,['https://httpbin.org/get'] as parameters\n        ,SUI.live.udf_api('https://httpbin.org/get') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('https://httpbin.org/get')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.url = 'https://httpbin.org/get'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('https://httpbin.org/get')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.url = 'https://httpbin.org/get'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_models.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/get'\n", "assertions": ["result:status_code = 200", "result:data.url = 'https://httpbin.org/get'"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_models.test__live_udf_api_get_with_params.549ea05b06": {"database": "SUI", "schema": "test", "name": "test__live_udf_api_get_with_params", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_get_with_params.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_get_with_params.549ea05b06", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_get_with_params"], "alias": "live_udf_api_get_with_params", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.465023, "relation_name": "SUI.test.live_udf_api_get_with_params", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.yml/test__live_udf_api_get_with_params.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'live.udf_api' AS test_name\n        ,['GET', 'https://httpbin.org/get', {'Content-Type': 'application/json'}, {'param1': 'value1', 'param2': 'value2'}] as parameters\n        ,SUI.live.udf_api('GET', 'https://httpbin.org/get', {'Content-Type': 'application/json'}, {'param1': 'value1', 'param2': 'value2'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('GET', 'https://httpbin.org/get', {'Content-Type': 'application/json'}, {'param1': 'value1', 'param2': 'value2'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.args is not null$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('GET', 'https://httpbin.org/get', {'Content-Type': 'application/json'}, {'param1': 'value1', 'param2': 'value2'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.args is not null\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.args:param1 = 'value1'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('GET', 'https://httpbin.org/get', {'Content-Type': 'application/json'}, {'param1': 'value1', 'param2': 'value2'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.args:param1 = 'value1'\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.args:param2 = 'value2'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('GET', 'https://httpbin.org/get', {'Content-Type': 'application/json'}, {'param1': 'value1', 'param2': 'value2'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.args:param2 = 'value2'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_models.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'GET', 'https://httpbin.org/get', {'Content-Type': 'application/json'}, {'param1': 'value1', 'param2': 'value2'}\n", "assertions": ["result:status_code = 200", "result:data.args is not null", "result:data.args:param1 = 'value1'", "result:data.args:param2 = 'value2'"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_models.test__live_udf_api_post_batch_jsonrpc.b4de1e1fc5": {"database": "SUI", "schema": "test", "name": "test__live_udf_api_post_batch_jsonrpc", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_post_batch_jsonrpc.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_post_batch_jsonrpc.b4de1e1fc5", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_post_batch_jsonrpc"], "alias": "live_udf_api_post_batch_jsonrpc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.4715836, "relation_name": "SUI.test.live_udf_api_post_batch_jsonrpc", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.yml/test__live_udf_api_post_batch_jsonrpc.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'live.udf_api' AS test_name\n        ,['https://httpbin.org/post', {\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'batch',\n  'params': [\n    {'id': 1, 'method': 'method1', 'params': {'param1': 'value1'}},\n    {'id': 2, 'method': 'method2', 'params': {'param2': 'value2'}}\n  ]\n}] as parameters\n        ,SUI.live.udf_api('https://httpbin.org/post', {\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'batch',\n  'params': [\n    {'id': 1, 'method': 'method1', 'params': {'param1': 'value1'}},\n    {'id': 2, 'method': 'method2', 'params': {'param2': 'value2'}}\n  ]\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('https://httpbin.org/post', {\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'batch',\n  'params': [\n    {'id': 1, 'method': 'method1', 'params': {'param1': 'value1'}},\n    {'id': 2, 'method': 'method2', 'params': {'param2': 'value2'}}\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json:jsonrpc = '2.0'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('https://httpbin.org/post', {\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'batch',\n  'params': [\n    {'id': 1, 'method': 'method1', 'params': {'param1': 'value1'}},\n    {'id': 2, 'method': 'method2', 'params': {'param2': 'value2'}}\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json:jsonrpc = '2.0'\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json:id = 1$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('https://httpbin.org/post', {\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'batch',\n  'params': [\n    {'id': 1, 'method': 'method1', 'params': {'param1': 'value1'}},\n    {'id': 2, 'method': 'method2', 'params': {'param2': 'value2'}}\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json:id = 1\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json:method = 'batch'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('https://httpbin.org/post', {\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'batch',\n  'params': [\n    {'id': 1, 'method': 'method1', 'params': {'param1': 'value1'}},\n    {'id': 2, 'method': 'method2', 'params': {'param2': 'value2'}}\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json:method = 'batch'\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json:params is not null$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('https://httpbin.org/post', {\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'batch',\n  'params': [\n    {'id': 1, 'method': 'method1', 'params': {'param1': 'value1'}},\n    {'id': 2, 'method': 'method2', 'params': {'param2': 'value2'}}\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json:params is not null\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json:params[0]:id = 1$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('https://httpbin.org/post', {\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'batch',\n  'params': [\n    {'id': 1, 'method': 'method1', 'params': {'param1': 'value1'}},\n    {'id': 2, 'method': 'method2', 'params': {'param2': 'value2'}}\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json:params[0]:id = 1\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.json:params[1]:id = 2$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('https://httpbin.org/post', {\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'batch',\n  'params': [\n    {'id': 1, 'method': 'method1', 'params': {'param1': 'value1'}},\n    {'id': 2, 'method': 'method2', 'params': {'param2': 'value2'}}\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.json:params[1]:id = 2\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_models.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://httpbin.org/post', {\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'batch',\n  'params': [\n    {'id': 1, 'method': 'method1', 'params': {'param1': 'value1'}},\n    {'id': 2, 'method': 'method2', 'params': {'param2': 'value2'}}\n  ]\n}\n", "assertions": ["result:status_code = 200", "result:data.json:jsonrpc = '2.0'", "result:data.json:id = 1", "result:data.json:method = 'batch'", "result:data.json:params is not null", "result:data.json:params[0]:id = 1", "result:data.json:params[1]:id = 2"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_models.test__live_udf_api_post_jsonrpc_solana.01c400739e": {"database": "SUI", "schema": "test", "name": "test__live_udf_api_post_jsonrpc_solana", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_post_jsonrpc_solana.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_post_jsonrpc_solana.01c400739e", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_post_jsonrpc_solana"], "alias": "live_udf_api_post_jsonrpc_solana", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.4823124, "relation_name": "SUI.test.live_udf_api_post_jsonrpc_solana", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.yml/test__live_udf_api_post_jsonrpc_solana.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'live.udf_api' AS test_name\n        ,['POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n{\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'getVersion'\n},\n''] as parameters\n        ,SUI.live.udf_api('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n{\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'getVersion'\n},\n'') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n{\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'getVersion'\n},\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.jsonrpc = '2.0'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n{\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'getVersion'\n},\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.jsonrpc = '2.0'\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.id = 1$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n{\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'getVersion'\n},\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.id = 1\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data.result is not null$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n{\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'getVersion'\n},\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data.result is not null\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_models.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n{\n  'jsonrpc': '2.0',\n  'id': 1,\n  'method': 'getVersion'\n},\n''\n", "assertions": ["result:status_code = 200", "result:data.jsonrpc = '2.0'", "result:data.id = 1", "result:data.result is not null"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_models.test__live_udf_api_post_jsonrpc_solana_batch.70d22f9667": {"database": "SUI", "schema": "test", "name": "test__live_udf_api_post_jsonrpc_solana_batch", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_post_jsonrpc_solana_batch.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_post_jsonrpc_solana_batch.70d22f9667", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_post_jsonrpc_solana_batch"], "alias": "live_udf_api_post_jsonrpc_solana_batch", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.488707, "relation_name": "SUI.test.live_udf_api_post_jsonrpc_solana_batch", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.yml/test__live_udf_api_post_jsonrpc_solana_batch.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'live.udf_api' AS test_name\n        ,['POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'getVersion'},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'getVersion'}\n],\n''] as parameters\n        ,SUI.live.udf_api('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'getVersion'},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'getVersion'}\n],\n'') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'getVersion'},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'getVersion'}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[0]:jsonrpc = '2.0'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'getVersion'},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'getVersion'}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[0]:jsonrpc = '2.0'\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[0]:id = 1$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'getVersion'},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'getVersion'}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[0]:id = 1\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[0]:result is not null$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'getVersion'},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'getVersion'}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[0]:result is not null\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[1]:jsonrpc = '2.0'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'getVersion'},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'getVersion'}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[1]:jsonrpc = '2.0'\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[1]:id = 2$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'getVersion'},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'getVersion'}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[1]:id = 2\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[1]:result is not null$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'getVersion'},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'getVersion'}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[1]:result is not null\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_models.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'POST',\n'https://api.mainnet-beta.solana.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'getVersion'},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'getVersion'}\n],\n''\n", "assertions": ["result:status_code = 200", "result:data[0]:jsonrpc = '2.0'", "result:data[0]:id = 1", "result:data[0]:result is not null", "result:data[1]:jsonrpc = '2.0'", "result:data[1]:id = 2", "result:data[1]:result is not null"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_models.test__live_udf_api_post_jsonrpc_ethereum_batch.4a9ed4a8d7": {"database": "SUI", "schema": "test", "name": "test__live_udf_api_post_jsonrpc_ethereum_batch", "resource_type": "test", "package_name": "livequery_models", "path": "test__live_udf_api_post_jsonrpc_ethereum_batch.sql", "original_file_path": "models/deploy/core/live.yml", "unique_id": "test.livequery_models.test__live_udf_api_post_jsonrpc_ethereum_batch.4a9ed4a8d7", "fqn": ["livequery_models", "deploy", "core", "test__live_udf_api_post_jsonrpc_ethereum_batch"], "alias": "live_udf_api_post_jsonrpc_ethereum_batch", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.4978812, "relation_name": "SUI.test.live_udf_api_post_jsonrpc_ethereum_batch", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "live", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.live"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/live.yml/test__live_udf_api_post_jsonrpc_ethereum_batch.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'live.udf_api' AS test_name\n        ,['POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n''] as parameters\n        ,SUI.live.udf_api('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[0]:jsonrpc = '2.0'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[0]:jsonrpc = '2.0'\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[0]:id = 1$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[0]:id = 1\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[0]:result is not null$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[0]:result is not null\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[1]:jsonrpc = '2.0'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[1]:jsonrpc = '2.0'\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[1]:id = 2$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[1]:id = 2\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:data[1]:result = '0x1'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.live.udf_api('POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n'')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:data[1]:result = '0x1'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_api", "file_key_name": "models.live", "attached_node": "model.livequery_models.live", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'POST',\n'https://ethereum-rpc.publicnode.com',\n{'Content-Type': 'application/json'},\n[\n  {'jsonrpc': '2.0', 'id': 1, 'method': 'eth_blockNumber', 'params': []},\n  {'jsonrpc': '2.0', 'id': 2, 'method': 'eth_chainId', 'params': []}\n],\n''\n", "assertions": ["result:status_code = 200", "result:data[0]:jsonrpc = '2.0'", "result:data[0]:id = 1", "result:data[0]:result is not null", "result:data[1]:jsonrpc = '2.0'", "result:data[1]:id = 2", "result:data[1]:result = '0x1'"], "column_name": "udf_api", "model": "{{ get_where_subquery(ref('live')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_json_rpc_call.0b87c6050e": {"database": "SUI", "schema": "test", "name": "test__utils_udf_json_rpc_call", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_json_rpc_call.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_json_rpc_call.0b87c6050e", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_json_rpc_call"], "alias": "utils_udf_json_rpc_call", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.5101357, "relation_name": "SUI.test.utils_udf_json_rpc_call", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_json_rpc_call.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_json_rpc_call' AS test_name\n        ,['foo', [], 1] as parameters\n        ,SUI.utils.udf_json_rpc_call('foo', [], 1) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = {\n  'jsonrpc': '2.0',\n  'method': 'foo',\n  'params': [],\n  'id': '1'\n}$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_json_rpc_call('foo', [], 1)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = {\n  'jsonrpc': '2.0',\n  'method': 'foo',\n  'params': [],\n  'id': '1'\n}\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_json_rpc_call", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'foo', [], 1", "assertions": ["result = {\n  'jsonrpc': '2.0',\n  'method': 'foo',\n  'params': [],\n  'id': '1'\n}\n"], "column_name": "udf_json_rpc_call", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_dict_true_1.3bf42c4e1b": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_dict_true_1", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_dict_true_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_dict_true_1.3bf42c4e1b", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_dict_true_1"], "alias": "utils_udf_urlencode_dict_true_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.5162818, "relation_name": "SUI.test.utils_udf_urlencode_dict_true_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_dict_true_1.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'a':'b'}, TRUE] as parameters\n        ,SUI.utils.udf_urlencode({'a':'b'}, TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode({'a':'b'}, TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b'}, TRUE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_dict_true_2.764afd6db8": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_dict_true_2", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_dict_true_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_dict_true_2.764afd6db8", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_dict_true_2"], "alias": "utils_udf_urlencode_dict_true_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.521193, "relation_name": "SUI.test.utils_udf_urlencode_dict_true_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_dict_true_2.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'a':'a', 'b':'b'}, TRUE] as parameters\n        ,SUI.utils.udf_urlencode({'a':'a', 'b':'b'}, TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=a&b=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode({'a':'a', 'b':'b'}, TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=a&b=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'a', 'b':'b'}, TRUE\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_dict_true_space.11f0932fc3": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_dict_true_space", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_dict_true_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_dict_true_space.11f0932fc3", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_dict_true_space"], "alias": "utils_udf_urlencode_dict_true_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.5263743, "relation_name": "SUI.test.utils_udf_urlencode_dict_true_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_dict_true_space.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'space': 'abc 123'}, TRUE] as parameters\n        ,SUI.utils.udf_urlencode({'space': 'abc 123'}, TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'space=abc+123'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode({'space': 'abc 123'}, TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'space=abc+123'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'space': 'abc 123'}, TRUE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_dict_true_special.4eef6cb355": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_dict_true_special", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_dict_true_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_dict_true_special.4eef6cb355", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_dict_true_special"], "alias": "utils_udf_urlencode_dict_true_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.531458, "relation_name": "SUI.test.utils_udf_urlencode_dict_true_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_dict_true_special.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'special!': ' !@#$,+\"'}, TRUE] as parameters\n        ,SUI.utils.udf_urlencode({'special!': ' !@#$,+\"'}, TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'special%21=+%21%40%23%24%2C%2B%22'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode({'special!': ' !@#$,+\"'}, TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'special%21=+%21%40%23%24%2C%2B%22'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'special!': ' !@#$,+\"'}, TRUE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_dict_true_array.614d53ca8a": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_dict_true_array", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_dict_true_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_dict_true_array.614d53ca8a", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_dict_true_array"], "alias": "utils_udf_urlencode_dict_true_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.5364027, "relation_name": "SUI.test.utils_udf_urlencode_dict_true_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_dict_true_array.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'array': [0, 1, 2]}, TRUE] as parameters\n        ,SUI.utils.udf_urlencode({'array': [0, 1, 2]}, TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'array=0&array=1&array=2'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode({'array': [0, 1, 2]}, TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'array=0&array=1&array=2'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'array': [0, 1, 2]}, TRUE\n", "assertions": ["result = 'array=0&array=1&array=2'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_dict_false_1.e2e07ad77a": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_dict_false_1", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_dict_false_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_dict_false_1.e2e07ad77a", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_dict_false_1"], "alias": "utils_udf_urlencode_dict_false_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.5415812, "relation_name": "SUI.test.utils_udf_urlencode_dict_false_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_dict_false_1.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'a':'b'}, FALSE] as parameters\n        ,SUI.utils.udf_urlencode({'a':'b'}, FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode({'a':'b'}, FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b'}, FALSE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_dict_false_2.58739709ab": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_dict_false_2", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_dict_false_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_dict_false_2.58739709ab", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_dict_false_2"], "alias": "utils_udf_urlencode_dict_false_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.5464308, "relation_name": "SUI.test.utils_udf_urlencode_dict_false_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_dict_false_2.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'a':'b', 'b':'b'}, FALSE] as parameters\n        ,SUI.utils.udf_urlencode({'a':'b', 'b':'b'}, FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b&b=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode({'a':'b', 'b':'b'}, FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b&b=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b', 'b':'b'}, FALSE\n", "assertions": ["result = 'a=b&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_dict_false_space.1167d3f089": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_dict_false_space", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_dict_false_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_dict_false_space.1167d3f089", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_dict_false_space"], "alias": "utils_udf_urlencode_dict_false_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.5514462, "relation_name": "SUI.test.utils_udf_urlencode_dict_false_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_dict_false_space.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'space': 'abc 123'}, FALSE] as parameters\n        ,SUI.utils.udf_urlencode({'space': 'abc 123'}, FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'space=abc+123'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode({'space': 'abc 123'}, FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'space=abc+123'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'space': 'abc 123'}, FALSE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_dict_false_special.0cd3cb5826": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_dict_false_special", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_dict_false_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_dict_false_special.0cd3cb5826", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_dict_false_special"], "alias": "utils_udf_urlencode_dict_false_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.5563672, "relation_name": "SUI.test.utils_udf_urlencode_dict_false_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_dict_false_special.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'special!': ' !@#$,+\"'}, FALSE] as parameters\n        ,SUI.utils.udf_urlencode({'special!': ' !@#$,+\"'}, FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'special%21=+%21%40%23%24%2C%2B%22'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode({'special!': ' !@#$,+\"'}, FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'special%21=+%21%40%23%24%2C%2B%22'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'special!': ' !@#$,+\"'}, FALSE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_dict_false_array.9524cea2e8": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_dict_false_array", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_dict_false_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_dict_false_array.9524cea2e8", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_dict_false_array"], "alias": "utils_udf_urlencode_dict_false_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.5615728, "relation_name": "SUI.test.utils_udf_urlencode_dict_false_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_dict_false_array.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'array': [0, 1, 2]}, FALSE] as parameters\n        ,SUI.utils.udf_urlencode({'array': [0, 1, 2]}, FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'array=%5B0%2C+1%2C+2%5D'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode({'array': [0, 1, 2]}, FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'array=%5B0%2C+1%2C+2%5D'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'array': [0, 1, 2]}, FALSE\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_dict_1.1d75f92e0e": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_dict_1", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_dict_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_dict_1.1d75f92e0e", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_dict_1"], "alias": "utils_udf_urlencode_dict_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.5666986, "relation_name": "SUI.test.utils_udf_urlencode_dict_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_dict_1.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'a':'b'}] as parameters\n        ,SUI.utils.udf_urlencode({'a':'b'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode({'a':'b'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b'}\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_dict_2.60da312d8c": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_dict_2", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_dict_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_dict_2.60da312d8c", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_dict_2"], "alias": "utils_udf_urlencode_dict_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.5715983, "relation_name": "SUI.test.utils_udf_urlencode_dict_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_dict_2.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'a':'b', 'b':'b'}] as parameters\n        ,SUI.utils.udf_urlencode({'a':'b', 'b':'b'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b&b=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode({'a':'b', 'b':'b'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b&b=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'a':'b', 'b':'b'}\n", "assertions": ["result = 'a=b&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_dict_space.d5e1917fd6": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_dict_space", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_dict_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_dict_space.d5e1917fd6", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_dict_space"], "alias": "utils_udf_urlencode_dict_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.5764682, "relation_name": "SUI.test.utils_udf_urlencode_dict_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_dict_space.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'space': 'abc 123'}] as parameters\n        ,SUI.utils.udf_urlencode({'space': 'abc 123'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'space=abc+123'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode({'space': 'abc 123'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'space=abc+123'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'space': 'abc 123'}\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_dict_special.6f25d30fd9": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_dict_special", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_dict_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_dict_special.6f25d30fd9", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_dict_special"], "alias": "utils_udf_urlencode_dict_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.581113, "relation_name": "SUI.test.utils_udf_urlencode_dict_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_dict_special.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'special!': ' !@#$,+\"'}] as parameters\n        ,SUI.utils.udf_urlencode({'special!': ' !@#$,+\"'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'special%21=+%21%40%23%24%2C%2B%22'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode({'special!': ' !@#$,+\"'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'special%21=+%21%40%23%24%2C%2B%22'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'special!': ' !@#$,+\"'}\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_dict_array.25f6af5cf8": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_dict_array", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_dict_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_dict_array.25f6af5cf8", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_dict_array"], "alias": "utils_udf_urlencode_dict_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.5859785, "relation_name": "SUI.test.utils_udf_urlencode_dict_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_dict_array.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[{'array': [0, 1, 2]}] as parameters\n        ,SUI.utils.udf_urlencode({'array': [0, 1, 2]}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'array=%5B0%2C+1%2C+2%5D'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode({'array': [0, 1, 2]})\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'array=%5B0%2C+1%2C+2%5D'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{'array': [0, 1, 2]}\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_array_true_1.f1dc90fd5d": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_array_true_1", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_array_true_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_array_true_1.f1dc90fd5d", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_array_true_1"], "alias": "utils_udf_urlencode_array_true_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.5906007, "relation_name": "SUI.test.utils_udf_urlencode_array_true_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_array_true_1.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['a', 'b']], TRUE] as parameters\n        ,SUI.utils.udf_urlencode([['a', 'b']], TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode([['a', 'b']], TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'b']], TRUE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_array_true_2.4c09ca3de2": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_array_true_2", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_array_true_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_array_true_2.4c09ca3de2", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_array_true_2"], "alias": "utils_udf_urlencode_array_true_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.5954416, "relation_name": "SUI.test.utils_udf_urlencode_array_true_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_array_true_2.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['a', 'a'], ['b', 'b']], TRUE] as parameters\n        ,SUI.utils.udf_urlencode([['a', 'a'], ['b', 'b']], TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=a&b=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode([['a', 'a'], ['b', 'b']], TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=a&b=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'a'], ['b', 'b']], TRUE\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_array_true_space.c150fa3544": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_array_true_space", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_array_true_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_array_true_space.c150fa3544", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_array_true_space"], "alias": "utils_udf_urlencode_array_true_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6005936, "relation_name": "SUI.test.utils_udf_urlencode_array_true_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_array_true_space.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['space', 'abc 123']], TRUE] as parameters\n        ,SUI.utils.udf_urlencode([['space', 'abc 123']], TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'space=abc+123'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode([['space', 'abc 123']], TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'space=abc+123'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['space', 'abc 123']], TRUE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_array_true_special.14abbd82f3": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_array_true_special", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_array_true_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_array_true_special.14abbd82f3", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_array_true_special"], "alias": "utils_udf_urlencode_array_true_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6053448, "relation_name": "SUI.test.utils_udf_urlencode_array_true_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_array_true_special.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['special!', ' !@#$,+\"']], TRUE] as parameters\n        ,SUI.utils.udf_urlencode([['special!', ' !@#$,+\"']], TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'special%21=+%21%40%23%24%2C%2B%22'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode([['special!', ' !@#$,+\"']], TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'special%21=+%21%40%23%24%2C%2B%22'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['special!', ' !@#$,+\"']], TRUE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_array_true_array.559475a80a": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_array_true_array", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_array_true_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_array_true_array.559475a80a", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_array_true_array"], "alias": "utils_udf_urlencode_array_true_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.610983, "relation_name": "SUI.test.utils_udf_urlencode_array_true_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_array_true_array.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['array', [0, 1, 2]]], TRUE] as parameters\n        ,SUI.utils.udf_urlencode([['array', [0, 1, 2]]], TRUE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'array=0&array=1&array=2'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode([['array', [0, 1, 2]]], TRUE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'array=0&array=1&array=2'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['array', [0, 1, 2]]], TRUE\n", "assertions": ["result = 'array=0&array=1&array=2'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_array_false_1.ffe0d93235": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_array_false_1", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_array_false_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_array_false_1.ffe0d93235", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_array_false_1"], "alias": "utils_udf_urlencode_array_false_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6155868, "relation_name": "SUI.test.utils_udf_urlencode_array_false_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_array_false_1.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['a', 'b']], FALSE] as parameters\n        ,SUI.utils.udf_urlencode([['a', 'b']], FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode([['a', 'b']], FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'b']], FALSE\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_array_false_2.f6e4d9a06a": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_array_false_2", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_array_false_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_array_false_2.f6e4d9a06a", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_array_false_2"], "alias": "utils_udf_urlencode_array_false_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6203668, "relation_name": "SUI.test.utils_udf_urlencode_array_false_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_array_false_2.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['a', 'a'], ['b', 'b']], FALSE] as parameters\n        ,SUI.utils.udf_urlencode([['a', 'a'], ['b', 'b']], FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=a&b=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode([['a', 'a'], ['b', 'b']], FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=a&b=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'a'], ['b', 'b']], FALSE\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_array_false_space.c46a422a10": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_array_false_space", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_array_false_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_array_false_space.c46a422a10", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_array_false_space"], "alias": "utils_udf_urlencode_array_false_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.62514, "relation_name": "SUI.test.utils_udf_urlencode_array_false_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_array_false_space.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['space', 'abc 123']], FALSE] as parameters\n        ,SUI.utils.udf_urlencode([['space', 'abc 123']], FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'space=abc+123'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode([['space', 'abc 123']], FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'space=abc+123'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['space', 'abc 123']], FALSE\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_array_false_special.ad3b4ce496": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_array_false_special", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_array_false_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_array_false_special.ad3b4ce496", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_array_false_special"], "alias": "utils_udf_urlencode_array_false_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6297834, "relation_name": "SUI.test.utils_udf_urlencode_array_false_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_array_false_special.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['special!', ' !@#$,+\"']], FALSE] as parameters\n        ,SUI.utils.udf_urlencode([['special!', ' !@#$,+\"']], FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'special%21=+%21%40%23%24%2C%2B%22'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode([['special!', ' !@#$,+\"']], FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'special%21=+%21%40%23%24%2C%2B%22'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['special!', ' !@#$,+\"']], FALSE\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_array_false_array.979bfafd11": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_array_false_array", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_array_false_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_array_false_array.979bfafd11", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_array_false_array"], "alias": "utils_udf_urlencode_array_false_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6346068, "relation_name": "SUI.test.utils_udf_urlencode_array_false_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_array_false_array.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['array', [0, 1, 2]]], FALSE] as parameters\n        ,SUI.utils.udf_urlencode([['array', [0, 1, 2]]], FALSE) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'array=%5B0%2C+1%2C+2%5D'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode([['array', [0, 1, 2]]], FALSE)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'array=%5B0%2C+1%2C+2%5D'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['array', [0, 1, 2]]], FALSE\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_array_1.bae96ece17": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_array_1", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_array_1.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_array_1.bae96ece17", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_array_1"], "alias": "utils_udf_urlencode_array_1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6392033, "relation_name": "SUI.test.utils_udf_urlencode_array_1", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_array_1.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['a', 'b']]] as parameters\n        ,SUI.utils.udf_urlencode([['a', 'b']]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode([['a', 'b']])\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'b']]\n", "assertions": ["result = 'a=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_array_2.ff2898d4a2": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_array_2", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_array_2.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_array_2.ff2898d4a2", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_array_2"], "alias": "utils_udf_urlencode_array_2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6440167, "relation_name": "SUI.test.utils_udf_urlencode_array_2", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_array_2.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['a', 'a'], ['b', 'b']]] as parameters\n        ,SUI.utils.udf_urlencode([['a', 'a'], ['b', 'b']]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'a=a&b=b'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode([['a', 'a'], ['b', 'b']])\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'a=a&b=b'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['a', 'a'], ['b', 'b']]\n", "assertions": ["result = 'a=a&b=b'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_array_space.67b6f51498": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_array_space", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_array_space.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_array_space.67b6f51498", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_array_space"], "alias": "utils_udf_urlencode_array_space", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6488435, "relation_name": "SUI.test.utils_udf_urlencode_array_space", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_array_space.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['space', 'abc 123']]] as parameters\n        ,SUI.utils.udf_urlencode([['space', 'abc 123']]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'space=abc+123'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode([['space', 'abc 123']])\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'space=abc+123'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['space', 'abc 123']]\n", "assertions": ["result = 'space=abc+123'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_array_special.746423269a": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_array_special", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_array_special.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_array_special.746423269a", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_array_special"], "alias": "utils_udf_urlencode_array_special", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.653417, "relation_name": "SUI.test.utils_udf_urlencode_array_special", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_array_special.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['special!', ' !@#$,+\"']]] as parameters\n        ,SUI.utils.udf_urlencode([['special!', ' !@#$,+\"']]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'special%21=+%21%40%23%24%2C%2B%22'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode([['special!', ' !@#$,+\"']])\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'special%21=+%21%40%23%24%2C%2B%22'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['special!', ' !@#$,+\"']]\n", "assertions": ["result = 'special%21=+%21%40%23%24%2C%2B%22'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_urlencode_array_array.3d05dcb6a9": {"database": "SUI", "schema": "test", "name": "test__utils_udf_urlencode_array_array", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_urlencode_array_array.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_urlencode_array_array.3d05dcb6a9", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_urlencode_array_array"], "alias": "utils_udf_urlencode_array_array", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6581988, "relation_name": "SUI.test.utils_udf_urlencode_array_array", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_urlencode_array_array.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_urlencode' AS test_name\n        ,[[['array', [0, 1, 2]]]] as parameters\n        ,SUI.utils.udf_urlencode([['array', [0, 1, 2]]]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'array=%5B0%2C+1%2C+2%5D'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_urlencode([['array', [0, 1, 2]]])\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'array=%5B0%2C+1%2C+2%5D'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_urlencode", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[['array', [0, 1, 2]]]\n", "assertions": ["result = 'array=%5B0%2C+1%2C+2%5D'"], "column_name": "udf_urlencode", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_int_to_binary.46856460db": {"database": "SUI", "schema": "test", "name": "test__utils_udf_int_to_binary", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_int_to_binary.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_int_to_binary.46856460db", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_int_to_binary"], "alias": "utils_udf_int_to_binary", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6628299, "relation_name": "SUI.test.utils_udf_int_to_binary", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_int_to_binary.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_int_to_binary' AS test_name\n        ,[123456789] as parameters\n        ,SUI.utils.udf_int_to_binary(123456789) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = '111010110111100110100010101'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_int_to_binary(123456789)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = '111010110111100110100010101'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_int_to_binary", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": 123456789, "assertions": ["result = '111010110111100110100010101'"], "column_name": "udf_int_to_binary", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_int_to_binary_large_number.feba996e3b": {"database": "SUI", "schema": "test", "name": "test__utils_udf_int_to_binary_large_number", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_int_to_binary_large_number.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_int_to_binary_large_number.feba996e3b", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_int_to_binary_large_number"], "alias": "utils_udf_int_to_binary_large_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6675758, "relation_name": "SUI.test.utils_udf_int_to_binary_large_number", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_int_to_binary_large_number.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_int_to_binary' AS test_name\n        ,['123456789123456789123456789123456789123456789'] as parameters\n        ,SUI.utils.udf_int_to_binary('123456789123456789123456789123456789123456789') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = '101100010010011011011100101001111010001001110011010111111101111101010111011001001101000001111110001010100001011011010000100000001000101111100010101'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_int_to_binary('123456789123456789123456789123456789123456789')\n;$$ AS sql\n    FROM test\n    WHERE NOT result = '101100010010011011011100101001111010001001110011010111111101111101010111011001001101000001111110001010100001011011010000100000001000101111100010101'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_int_to_binary", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'123456789123456789123456789123456789123456789'", "assertions": ["result = '101100010010011011011100101001111010001001110011010111111101111101010111011001001101000001111110001010100001011011010000100000001000101111100010101'"], "column_name": "udf_int_to_binary", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_binary_to_int.907b20f381": {"database": "SUI", "schema": "test", "name": "test__utils_udf_binary_to_int", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_binary_to_int.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_binary_to_int.907b20f381", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_binary_to_int"], "alias": "utils_udf_binary_to_int", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6726418, "relation_name": "SUI.test.utils_udf_binary_to_int", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_binary_to_int.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_binary_to_int' AS test_name\n        ,[111010110111100110100010101] as parameters\n        ,SUI.utils.udf_binary_to_int(111010110111100110100010101) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = '123456789'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_binary_to_int(111010110111100110100010101)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = '123456789'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_binary_to_int", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "111010110111100110100010101", "assertions": ["result = '123456789'"], "column_name": "udf_binary_to_int", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_binary_to_int_large_number.926bff44e9": {"database": "SUI", "schema": "test", "name": "test__utils_udf_binary_to_int_large_number", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_binary_to_int_large_number.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_binary_to_int_large_number.926bff44e9", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_binary_to_int_large_number"], "alias": "utils_udf_binary_to_int_large_number", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6775217, "relation_name": "SUI.test.utils_udf_binary_to_int_large_number", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_binary_to_int_large_number.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_binary_to_int' AS test_name\n        ,['110110110100110110100101110101100110100000101111100010101'] as parameters\n        ,SUI.utils.udf_binary_to_int('110110110100110110100101110101100110100000101111100010101') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = '123456789123456789'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_binary_to_int('110110110100110110100101110101100110100000101111100010101')\n;$$ AS sql\n    FROM test\n    WHERE NOT result = '123456789123456789'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_binary_to_int", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'110110110100110110100101110101100110100000101111100010101'", "assertions": ["result = '123456789123456789'"], "column_name": "udf_binary_to_int", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test__utils_udf_evm_decode_log.b6fedb07e9": {"database": "SUI", "schema": "test", "name": "test__utils_udf_evm_decode_log", "resource_type": "test", "package_name": "livequery_models", "path": "test__utils_udf_evm_decode_log.sql", "original_file_path": "models/deploy/core/utils.yml", "unique_id": "test.livequery_models.test__utils_udf_evm_decode_log.b6fedb07e9", "fqn": ["livequery_models", "deploy", "core", "test__utils_udf_evm_decode_log"], "alias": "utils_udf_evm_decode_log", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6825492, "relation_name": "SUI.test.utils_udf_evm_decode_log", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/utils.yml/test__utils_udf_evm_decode_log.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'utils.udf_evm_decode_log' AS test_name\n        ,[{\n  'anonymous': false,\n  'inputs': [\n    {\n      'indexed': false,\n      'name': 'nonce',\n      'type': 'uint256'\n    }\n  ],\n  'name': 'NonceChanged',\n  'type': 'event'\n}::variant, {\n  'address': '0x55032650b14df07b85bf18a3a3ec8e0af2e028d5',\n  'data': '0x000000000000000000000000000000000000000000000000000000000000279c',\n  'topics': [\n    '0x7220970e1f1f12864ecccd8942690a837c7a8dd45d158cb891eb45a8a69134aa'\n  ]\n}::variant] as parameters\n        ,SUI.utils.udf_evm_decode_log({\n  'anonymous': false,\n  'inputs': [\n    {\n      'indexed': false,\n      'name': 'nonce',\n      'type': 'uint256'\n    }\n  ],\n  'name': 'NonceChanged',\n  'type': 'event'\n}::variant, {\n  'address': '0x55032650b14df07b85bf18a3a3ec8e0af2e028d5',\n  'data': '0x000000000000000000000000000000000000000000000000000000000000279c',\n  'topics': [\n    '0x7220970e1f1f12864ecccd8942690a837c7a8dd45d158cb891eb45a8a69134aa'\n  ]\n}::variant) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = [\n  {\n    'address': '0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5',\n    'data': [\n      {\n        'decoded': true,\n        'name': 'nonce',\n        'type': 'uint256',\n        'value': 10140\n      }\n    ],\n    'decoded': true,\n    'name': 'NonceChanged'\n  }\n]$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.utils.udf_evm_decode_log({\n  'anonymous': false,\n  'inputs': [\n    {\n      'indexed': false,\n      'name': 'nonce',\n      'type': 'uint256'\n    }\n  ],\n  'name': 'NonceChanged',\n  'type': 'event'\n}::variant, {\n  'address': '0x55032650b14df07b85bf18a3a3ec8e0af2e028d5',\n  'data': '0x000000000000000000000000000000000000000000000000000000000000279c',\n  'topics': [\n    '0x7220970e1f1f12864ecccd8942690a837c7a8dd45d158cb891eb45a8a69134aa'\n  ]\n}::variant)\n;$$ AS sql\n    FROM test\n    WHERE NOT result = [\n  {\n    'address': '0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5',\n    'data': [\n      {\n        'decoded': true,\n        'name': 'nonce',\n        'type': 'uint256',\n        'value': 10140\n      }\n    ],\n    'decoded': true,\n    'name': 'NonceChanged'\n  }\n]\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_evm_decode_log", "file_key_name": "models.utils", "attached_node": "model.livequery_models.utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'anonymous': false,\n  'inputs': [\n    {\n      'indexed': false,\n      'name': 'nonce',\n      'type': 'uint256'\n    }\n  ],\n  'name': 'NonceChanged',\n  'type': 'event'\n}::variant, {\n  'address': '0x55032650b14df07b85bf18a3a3ec8e0af2e028d5',\n  'data': '0x000000000000000000000000000000000000000000000000000000000000279c',\n  'topics': [\n    '0x7220970e1f1f12864ecccd8942690a837c7a8dd45d158cb891eb45a8a69134aa'\n  ]\n}::variant\n", "assertions": ["result = [\n  {\n    'address': '0x55032650b14df07b85bF18A3a3eC8E0Af2e028d5',\n    'data': [\n      {\n        'decoded': true,\n        'name': 'nonce',\n        'type': 'uint256',\n        'value': 10140\n      }\n    ],\n    'decoded': true,\n    'name': 'NonceChanged'\n  }\n]"], "column_name": "udf_evm_decode_log", "model": "{{ get_where_subquery(ref('utils')) }}"}, "namespace": null}}, "test.livequery_models.test___utils_udf_introspect.79bd27a18b": {"database": "SUI", "schema": "test", "name": "test___utils_udf_introspect", "resource_type": "test", "package_name": "livequery_models", "path": "test___utils_udf_introspect.sql", "original_file_path": "models/deploy/core/_utils.yml", "unique_id": "test.livequery_models.test___utils_udf_introspect.79bd27a18b", "fqn": ["livequery_models", "deploy", "core", "test___utils_udf_introspect"], "alias": "_utils_udf_introspect", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6888006, "relation_name": "SUI.test._utils_udf_introspect", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models._utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/core/_utils.yml/test___utils_udf_introspect.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        '_utils.udf_introspect' AS test_name\n        ,['hello'] as parameters\n        ,SUI._utils.udf_introspect('hello') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result = 'hello'$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI._utils.udf_introspect('hello')\n;$$ AS sql\n    FROM test\n    WHERE NOT result = 'hello'\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "udf_introspect", "file_key_name": "models._utils", "attached_node": "model.livequery_models._utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'hello'", "assertions": ["result = 'hello'"], "column_name": "udf_introspect", "model": "{{ get_where_subquery(ref('_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_playgrounds__query_subgraph_status_200_liquidity_pools.dfcb23f707": {"database": "SUI", "schema": "test_playgrounds", "name": "test_playgrounds__query_subgraph_status_200_liquidity_pools", "resource_type": "test", "package_name": "livequery_models", "path": "test_playgrounds__query_subgraph_status_200_liquidity_pools.sql", "original_file_path": "models/deploy/marketplace/playgrounds/playgrounds__.yml", "unique_id": "test.livequery_models.test_playgrounds__query_subgraph_status_200_liquidity_pools.dfcb23f707", "fqn": ["livequery_models", "deploy", "marketplace", "playgrounds", "test_playgrounds__query_subgraph_status_200_liquidity_pools"], "alias": "query_subgraph_status_200_liquidity_pools", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.6949553, "relation_name": "SUI.test_playgrounds.query_subgraph_status_200_liquidity_pools", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "playgrounds__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.playgrounds__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/playgrounds/playgrounds__.yml/test_playgrounds__query_subgraph_status_200_liquidity_pools.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'playgrounds' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'query.query_subgraph' AS test_name\n        ,['ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n      liquidityPools(first: 200, orderBy: totalValueLockedUSD, orderDirection: desc) {\n        id\n        totalLiquidity\n        name\n        inputTokens {\n           id\n           symbol\n        }\n      }\n  }',\n  'variables': {}\n}] as parameters\n        ,SUI.query.query_subgraph('ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n      liquidityPools(first: 200, orderBy: totalValueLockedUSD, orderDirection: desc) {\n        id\n        totalLiquidity\n        name\n        inputTokens {\n           id\n           symbol\n        }\n      }\n  }',\n  'variables': {}\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.query.query_subgraph('ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n      liquidityPools(first: 200, orderBy: totalValueLockedUSD, orderDirection: desc) {\n        id\n        totalLiquidity\n        name\n        inputTokens {\n           id\n           symbol\n        }\n      }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.query.query_subgraph('ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n      liquidityPools(first: 200, orderBy: totalValueLockedUSD, orderDirection: desc) {\n        id\n        totalLiquidity\n        name\n        inputTokens {\n           id\n           symbol\n        }\n      }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.playgrounds__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'playgrounds' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "query_subgraph", "file_key_name": "models.playgrounds__", "attached_node": "model.livequery_models.playgrounds__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n      liquidityPools(first: 200, orderBy: totalValueLockedUSD, orderDirection: desc) {\n        id\n        totalLiquidity\n        name\n        inputTokens {\n           id\n           symbol\n        }\n      }\n  }',\n  'variables': {}\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "query_subgraph", "model": "{{ get_where_subquery(ref('playgrounds__')) }}"}, "namespace": null}}, "test.livequery_models.test_playgrounds__query_subgraph_status_200_total_pool_count.86c8b9c6ee": {"database": "SUI", "schema": "test_playgrounds", "name": "test_playgrounds__query_subgraph_status_200_total_pool_count", "resource_type": "test", "package_name": "livequery_models", "path": "test_playgrounds__query_subgraph_status_200_total_pool_count.sql", "original_file_path": "models/deploy/marketplace/playgrounds/playgrounds__.yml", "unique_id": "test.livequery_models.test_playgrounds__query_subgraph_status_200_total_pool_count.86c8b9c6ee", "fqn": ["livequery_models", "deploy", "marketplace", "playgrounds", "test_playgrounds__query_subgraph_status_200_total_pool_count"], "alias": "query_subgraph_status_200_total_pool_count", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.7007709, "relation_name": "SUI.test_playgrounds.query_subgraph_status_200_total_pool_count", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "playgrounds__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.playgrounds__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/playgrounds/playgrounds__.yml/test_playgrounds__query_subgraph_status_200_total_pool_count.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'playgrounds' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'query.query_subgraph' AS test_name\n        ,['ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n    protocols {\n      name\n      totalPoolCount\n    }\n  }',\n  'variables': {}\n}] as parameters\n        ,SUI.query.query_subgraph('ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n    protocols {\n      name\n      totalPoolCount\n    }\n  }',\n  'variables': {}\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.query.query_subgraph('ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n    protocols {\n      name\n      totalPoolCount\n    }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.query.query_subgraph('ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n    protocols {\n      name\n      totalPoolCount\n    }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.playgrounds__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'playgrounds' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "query_subgraph", "file_key_name": "models.playgrounds__", "attached_node": "model.livequery_models.playgrounds__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'ELUcwgpm14LKPLrBRuVvPvNKHQ9HvwmtKgKSH6123cr7' , {\n  'query': '{\n    protocols {\n      name\n      totalPoolCount\n    }\n  }',\n  'variables': {}\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "query_subgraph", "model": "{{ get_where_subquery(ref('playgrounds__')) }}"}, "namespace": null}}, "test.livequery_models.test_chainbase_utils__get_status_200.07b6733652": {"database": "SUI", "schema": "test_chainbase_utils", "name": "test_chainbase_utils__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_chainbase_utils__get_status_200.sql", "original_file_path": "models/deploy/marketplace/chainbase/chainbase_utils__.yml", "unique_id": "test.livequery_models.test_chainbase_utils__get_status_200.07b6733652", "fqn": ["livequery_models", "deploy", "marketplace", "chainbase", "test_chainbase_utils__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.7079089, "relation_name": "SUI.test_chainbase_utils.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "chainbase_utils__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.chainbase_utils__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/chainbase/chainbase_utils__.yml/test_chainbase_utils__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'chainbase_utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['/v1/nft/metadata' , {\n  'chain_id': 1,\n  'contract_address': '0xed5af388653567af2f388e6224dc7c4b3241c544',\n  'token_id': 1\n}] as parameters\n        ,SUI.get.get('/v1/nft/metadata' , {\n  'chain_id': 1,\n  'contract_address': '0xed5af388653567af2f388e6224dc7c4b3241c544',\n  'token_id': 1\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/v1/nft/metadata' , {\n  'chain_id': 1,\n  'contract_address': '0xed5af388653567af2f388e6224dc7c4b3241c544',\n  'token_id': 1\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/v1/nft/metadata' , {\n  'chain_id': 1,\n  'contract_address': '0xed5af388653567af2f388e6224dc7c4b3241c544',\n  'token_id': 1\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.chainbase_utils__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'chainbase_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.chainbase_utils__", "attached_node": "model.livequery_models.chainbase_utils__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/nft/metadata' , {\n  'chain_id': 1,\n  'contract_address': '0xed5af388653567af2f388e6224dc7c4b3241c544',\n  'token_id': 1\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('chainbase_utils__')) }}"}, "namespace": null}}, "test.livequery_models.test_fred__get_series_status_200.51822e30ca": {"database": "SUI", "schema": "test_fred", "name": "test_fred__get_series_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_fred__get_series_status_200.sql", "original_file_path": "models/deploy/marketplace/fred/fred__.yml", "unique_id": "test.livequery_models.test_fred__get_series_status_200.51822e30ca", "fqn": ["livequery_models", "deploy", "marketplace", "fred", "test_fred__get_series_status_200"], "alias": "get_series_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.7142644, "relation_name": "SUI.test_fred.get_series_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "fred__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.fred__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/fred/fred__.yml/test_fred__get_series_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'fred' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get_series' AS test_name\n        ,[{\n  'series_id': 'CORESTICKM679SFRBATL',\n  'file_type': 'json'\n}] as parameters\n        ,SUI.get.get_series({\n  'series_id': 'CORESTICKM679SFRBATL',\n  'file_type': 'json'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_series({\n  'series_id': 'CORESTICKM679SFRBATL',\n  'file_type': 'json'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_series({\n  'series_id': 'CORESTICKM679SFRBATL',\n  'file_type': 'json'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.fred__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'fred' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_series", "file_key_name": "models.fred__", "attached_node": "model.livequery_models.fred__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'series_id': 'CORESTICKM679SFRBATL',\n  'file_type': 'json'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_series", "model": "{{ get_where_subquery(ref('fred__')) }}"}, "namespace": null}}, "test.livequery_models.test_stakingrewards__query_status_200.144a35304b": {"database": "SUI", "schema": "test_stakingrewards", "name": "test_stakingrewards__query_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_stakingrewards__query_status_200.sql", "original_file_path": "models/deploy/marketplace/stakingrewards/stakingrewards__ .yml", "unique_id": "test.livequery_models.test_stakingrewards__query_status_200.144a35304b", "fqn": ["livequery_models", "deploy", "marketplace", "stakingrewards", "test_stakingrewards__query_status_200"], "alias": "query_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.720434, "relation_name": "SUI.test_stakingrewards.query_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "stakingrewards__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.stakingrewards__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/stakingrewards/stakingrewards__ .yml/test_stakingrewards__query_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'stakingrewards' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'query.query' AS test_name\n        ,[{\n  'query': '{\n      assets(where: {symbols: [\"ETH\"]}, limit: 1) {\n        name\n        slug\n        description\n        symbol\n    }\n  }',\n  'variables': {}\n}] as parameters\n        ,SUI.query.query({\n  'query': '{\n      assets(where: {symbols: [\"ETH\"]}, limit: 1) {\n        name\n        slug\n        description\n        symbol\n    }\n  }',\n  'variables': {}\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.query.query({\n  'query': '{\n      assets(where: {symbols: [\"ETH\"]}, limit: 1) {\n        name\n        slug\n        description\n        symbol\n    }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.query.query({\n  'query': '{\n      assets(where: {symbols: [\"ETH\"]}, limit: 1) {\n        name\n        slug\n        description\n        symbol\n    }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.stakingrewards__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'stakingrewards' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "query", "file_key_name": "models.stakingrewards__", "attached_node": "model.livequery_models.stakingrewards__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'query': '{\n      assets(where: {symbols: [\"ETH\"]}, limit: 1) {\n        name\n        slug\n        description\n        symbol\n    }\n  }',\n  'variables': {}\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "query", "model": "{{ get_where_subquery(ref('stakingrewards__')) }}"}, "namespace": null}}, "test.livequery_models.test_credmark_utils__get_status_200.d1548e1f6e": {"database": "SUI", "schema": "test_credmark_utils", "name": "test_credmark_utils__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_credmark_utils__get_status_200.sql", "original_file_path": "models/deploy/marketplace/credmark/credmark_utils__.yml", "unique_id": "test.livequery_models.test_credmark_utils__get_status_200.d1548e1f6e", "fqn": ["livequery_models", "deploy", "marketplace", "credmark", "test_credmark_utils__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.7265422, "relation_name": "SUI.test_credmark_utils.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "credmark_utils__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.credmark_utils__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/credmark/credmark_utils__.yml/test_credmark_utils__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'credmark_utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['/v1/tokens/1/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' , { 'blockNumber': 17767007 }] as parameters\n        ,SUI.get.get('/v1/tokens/1/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' , { 'blockNumber': 17767007 }) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/v1/tokens/1/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' , { 'blockNumber': 17767007 })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/v1/tokens/1/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' , { 'blockNumber': 17767007 })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.credmark_utils__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'credmark_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.credmark_utils__", "attached_node": "model.livequery_models.credmark_utils__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/tokens/1/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48' , { 'blockNumber': 17767007 }\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('credmark_utils__')) }}"}, "namespace": null}}, "test.livequery_models.test_claude__post_messages_only_one_message.ff8a12fc1b": {"database": "SUI", "schema": "test_claude", "name": "test_claude__post_messages_only_one_message", "resource_type": "test", "package_name": "livequery_models", "path": "test_claude__post_messages_only_one_message.sql", "original_file_path": "models/deploy/marketplace/claude/claude__.yml", "unique_id": "test.livequery_models.test_claude__post_messages_only_one_message.ff8a12fc1b", "fqn": ["livequery_models", "deploy", "marketplace", "claude", "test_claude__post_messages_only_one_message"], "alias": "post_messages_only_one_message", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.7360713, "relation_name": "SUI.test_claude.post_messages_only_one_message", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "claude__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.claude__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/claude/claude__.yml/test_claude__post_messages_only_one_message.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'post.post_messages' AS test_name\n        ,[[{'role': 'user', 'content': 'Hello, how are you?'}]] as parameters\n        ,SUI.post.post_messages([{'role': 'user', 'content': 'Hello, how are you?'}]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.post.post_messages([{'role': 'user', 'content': 'Hello, how are you?'}])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.post.post_messages([{'role': 'user', 'content': 'Hello, how are you?'}])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.claude__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "post_messages", "file_key_name": "models.claude__", "attached_node": "model.livequery_models.claude__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "[{'role': 'user', 'content': 'Hello, how are you?'}]\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "post_messages", "model": "{{ get_where_subquery(ref('claude__')) }}"}, "namespace": null}}, "test.livequery_models.test_claude__post_messages_with_model.7b5774fbf2": {"database": "SUI", "schema": "test_claude", "name": "test_claude__post_messages_with_model", "resource_type": "test", "package_name": "livequery_models", "path": "test_claude__post_messages_with_model.sql", "original_file_path": "models/deploy/marketplace/claude/claude__.yml", "unique_id": "test.livequery_models.test_claude__post_messages_with_model.7b5774fbf2", "fqn": ["livequery_models", "deploy", "marketplace", "claude", "test_claude__post_messages_with_model"], "alias": "post_messages_with_model", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.7414665, "relation_name": "SUI.test_claude.post_messages_with_model", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "claude__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.claude__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/claude/claude__.yml/test_claude__post_messages_with_model.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'post.post_messages' AS test_name\n        ,['claude-3-5-sonnet-20241022', [{'role': 'user', 'content': 'Hello, how are you?'}], 1024] as parameters\n        ,SUI.post.post_messages('claude-3-5-sonnet-20241022', [{'role': 'user', 'content': 'Hello, how are you?'}], 1024) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.post.post_messages('claude-3-5-sonnet-20241022', [{'role': 'user', 'content': 'Hello, how are you?'}], 1024)\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.claude__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "post_messages", "file_key_name": "models.claude__", "attached_node": "model.livequery_models.claude__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'claude-3-5-sonnet-20241022', [{'role': 'user', 'content': 'Hello, how are you?'}], 1024\n", "assertions": ["result:status_code = 200"], "column_name": "post_messages", "model": "{{ get_where_subquery(ref('claude__')) }}"}, "namespace": null}}, "test.livequery_models.test_claude__post_messages_with_all_params.0917a032d2": {"database": "SUI", "schema": "test_claude", "name": "test_claude__post_messages_with_all_params", "resource_type": "test", "package_name": "livequery_models", "path": "test_claude__post_messages_with_all_params.sql", "original_file_path": "models/deploy/marketplace/claude/claude__.yml", "unique_id": "test.livequery_models.test_claude__post_messages_with_all_params.0917a032d2", "fqn": ["livequery_models", "deploy", "marketplace", "claude", "test_claude__post_messages_with_all_params"], "alias": "post_messages_with_all_params", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.7463078, "relation_name": "SUI.test_claude.post_messages_with_all_params", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "claude__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.claude__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/claude/claude__.yml/test_claude__post_messages_with_all_params.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'post.post_messages' AS test_name\n        ,['claude-3-5-sonnet-20241022', [{'role': 'user', 'content': 'Hello, how are you?'}], 1024, 0.5, 10, 0.95, 'You are a helpful assistant.'] as parameters\n        ,SUI.post.post_messages('claude-3-5-sonnet-20241022', [{'role': 'user', 'content': 'Hello, how are you?'}], 1024, 0.5, 10, 0.95, 'You are a helpful assistant.') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.post.post_messages('claude-3-5-sonnet-20241022', [{'role': 'user', 'content': 'Hello, how are you?'}], 1024, 0.5, 10, 0.95, 'You are a helpful assistant.')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.post.post_messages('claude-3-5-sonnet-20241022', [{'role': 'user', 'content': 'Hello, how are you?'}], 1024, 0.5, 10, 0.95, 'You are a helpful assistant.')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.claude__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "post_messages", "file_key_name": "models.claude__", "attached_node": "model.livequery_models.claude__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'claude-3-5-sonnet-20241022', [{'role': 'user', 'content': 'Hello, how are you?'}], 1024, 0.5, 10, 0.95, 'You are a helpful assistant.'\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "post_messages", "model": "{{ get_where_subquery(ref('claude__')) }}"}, "namespace": null}}, "test.livequery_models.test_claude__count_message_tokens.f5bafb2bce": {"database": "SUI", "schema": "test_claude", "name": "test_claude__count_message_tokens", "resource_type": "test", "package_name": "livequery_models", "path": "test_claude__count_message_tokens.sql", "original_file_path": "models/deploy/marketplace/claude/claude__.yml", "unique_id": "test.livequery_models.test_claude__count_message_tokens.f5bafb2bce", "fqn": ["livequery_models", "deploy", "marketplace", "claude", "test_claude__count_message_tokens"], "alias": "count_message_tokens", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.751589, "relation_name": "SUI.test_claude.count_message_tokens", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "claude__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.claude__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/claude/claude__.yml/test_claude__count_message_tokens.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'count.count_message_tokens' AS test_name\n        ,['claude-3-5-sonnet-20241022', [{'role': 'user', 'content': 'Hello, how are you?'}]] as parameters\n        ,SUI.count.count_message_tokens('claude-3-5-sonnet-20241022', [{'role': 'user', 'content': 'Hello, how are you?'}]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.count.count_message_tokens('claude-3-5-sonnet-20241022', [{'role': 'user', 'content': 'Hello, how are you?'}])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.count.count_message_tokens('claude-3-5-sonnet-20241022', [{'role': 'user', 'content': 'Hello, how are you?'}])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.claude__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "count_message_tokens", "file_key_name": "models.claude__", "attached_node": "model.livequery_models.claude__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'claude-3-5-sonnet-20241022', [{'role': 'user', 'content': 'Hello, how are you?'}]\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "count_message_tokens", "model": "{{ get_where_subquery(ref('claude__')) }}"}, "namespace": null}}, "test.livequery_models.test_claude__list_models.8516d777c7": {"database": "SUI", "schema": "test_claude", "name": "test_claude__list_models", "resource_type": "test", "package_name": "livequery_models", "path": "test_claude__list_models.sql", "original_file_path": "models/deploy/marketplace/claude/claude__.yml", "unique_id": "test.livequery_models.test_claude__list_models.8516d777c7", "fqn": ["livequery_models", "deploy", "marketplace", "claude", "test_claude__list_models"], "alias": "list_models", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.7570748, "relation_name": "SUI.test_claude.list_models", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "claude__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.claude__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/claude/claude__.yml/test_claude__list_models.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'list.list_models' AS test_name\n        ,[] as parameters\n        ,SUI.list.list_models() AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.list.list_models()\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.list.list_models()\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.claude__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "list_models", "file_key_name": "models.claude__", "attached_node": "model.livequery_models.claude__", "test_metadata": {"name": "test_udf", "kwargs": {"assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "list_models", "model": "{{ get_where_subquery(ref('claude__')) }}"}, "namespace": null}}, "test.livequery_models.test_claude__get_model.1f65c29a92": {"database": "SUI", "schema": "test_claude", "name": "test_claude__get_model", "resource_type": "test", "package_name": "livequery_models", "path": "test_claude__get_model.sql", "original_file_path": "models/deploy/marketplace/claude/claude__.yml", "unique_id": "test.livequery_models.test_claude__get_model.1f65c29a92", "fqn": ["livequery_models", "deploy", "marketplace", "claude", "test_claude__get_model"], "alias": "get_model", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.7619915, "relation_name": "SUI.test_claude.get_model", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "claude__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.claude__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/claude/claude__.yml/test_claude__get_model.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get_model' AS test_name\n        ,['claude-3-5-sonnet-20241022'] as parameters\n        ,SUI.get.get_model('claude-3-5-sonnet-20241022') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_model('claude-3-5-sonnet-20241022')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_model('claude-3-5-sonnet-20241022')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.claude__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_model", "file_key_name": "models.claude__", "attached_node": "model.livequery_models.claude__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'claude-3-5-sonnet-20241022'\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_model", "model": "{{ get_where_subquery(ref('claude__')) }}"}, "namespace": null}}, "test.livequery_models.test_claude__post_messages_batch.e4ee537ae3": {"database": "SUI", "schema": "test_claude", "name": "test_claude__post_messages_batch", "resource_type": "test", "package_name": "livequery_models", "path": "test_claude__post_messages_batch.sql", "original_file_path": "models/deploy/marketplace/claude/claude__.yml", "unique_id": "test.livequery_models.test_claude__post_messages_batch.e4ee537ae3", "fqn": ["livequery_models", "deploy", "marketplace", "claude", "test_claude__post_messages_batch"], "alias": "post_messages_batch", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.7674778, "relation_name": "SUI.test_claude.post_messages_batch", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "claude__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.claude__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/claude/claude__.yml/test_claude__post_messages_batch.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'post.post_messages_batch' AS test_name\n        ,[{\n  'requests': [\n    {\n      'custom_id': '1',\n      'params': {\n        'model': 'claude-3-5-sonnet-20241022',\n        'max_tokens': 1024,\n        'messages': [{'role': 'user', 'content': 'Hello, how are you?'}]\n      }\n    },\n    {\n      'custom_id': '2',\n      'params': {\n        'model': 'claude-3-5-sonnet-20241022',\n        'max_tokens': 1024,\n        'messages': [{'role': 'user', 'content': 'What time is it?'}]\n      }\n    }\n  ]\n}] as parameters\n        ,SUI.post.post_messages_batch({\n  'requests': [\n    {\n      'custom_id': '1',\n      'params': {\n        'model': 'claude-3-5-sonnet-20241022',\n        'max_tokens': 1024,\n        'messages': [{'role': 'user', 'content': 'Hello, how are you?'}]\n      }\n    },\n    {\n      'custom_id': '2',\n      'params': {\n        'model': 'claude-3-5-sonnet-20241022',\n        'max_tokens': 1024,\n        'messages': [{'role': 'user', 'content': 'What time is it?'}]\n      }\n    }\n  ]\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.post.post_messages_batch({\n  'requests': [\n    {\n      'custom_id': '1',\n      'params': {\n        'model': 'claude-3-5-sonnet-20241022',\n        'max_tokens': 1024,\n        'messages': [{'role': 'user', 'content': 'Hello, how are you?'}]\n      }\n    },\n    {\n      'custom_id': '2',\n      'params': {\n        'model': 'claude-3-5-sonnet-20241022',\n        'max_tokens': 1024,\n        'messages': [{'role': 'user', 'content': 'What time is it?'}]\n      }\n    }\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.post.post_messages_batch({\n  'requests': [\n    {\n      'custom_id': '1',\n      'params': {\n        'model': 'claude-3-5-sonnet-20241022',\n        'max_tokens': 1024,\n        'messages': [{'role': 'user', 'content': 'Hello, how are you?'}]\n      }\n    },\n    {\n      'custom_id': '2',\n      'params': {\n        'model': 'claude-3-5-sonnet-20241022',\n        'max_tokens': 1024,\n        'messages': [{'role': 'user', 'content': 'What time is it?'}]\n      }\n    }\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.claude__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "post_messages_batch", "file_key_name": "models.claude__", "attached_node": "model.livequery_models.claude__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'requests': [\n    {\n      'custom_id': '1',\n      'params': {\n        'model': 'claude-3-5-sonnet-20241022',\n        'max_tokens': 1024,\n        'messages': [{'role': 'user', 'content': 'Hello, how are you?'}]\n      }\n    },\n    {\n      'custom_id': '2',\n      'params': {\n        'model': 'claude-3-5-sonnet-20241022',\n        'max_tokens': 1024,\n        'messages': [{'role': 'user', 'content': 'What time is it?'}]\n      }\n    }\n  ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "post_messages_batch", "model": "{{ get_where_subquery(ref('claude__')) }}"}, "namespace": null}}, "test.livequery_models.test_claude__list_message_batches.f5d6c40b59": {"database": "SUI", "schema": "test_claude", "name": "test_claude__list_message_batches", "resource_type": "test", "package_name": "livequery_models", "path": "test_claude__list_message_batches.sql", "original_file_path": "models/deploy/marketplace/claude/claude__.yml", "unique_id": "test.livequery_models.test_claude__list_message_batches.f5d6c40b59", "fqn": ["livequery_models", "deploy", "marketplace", "claude", "test_claude__list_message_batches"], "alias": "list_message_batches", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.77298, "relation_name": "SUI.test_claude.list_message_batches", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "claude__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.claude__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/claude/claude__.yml/test_claude__list_message_batches.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'list.list_message_batches' AS test_name\n        ,[] as parameters\n        ,SUI.list.list_message_batches() AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.list.list_message_batches()\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.list.list_message_batches()\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.claude__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "list_message_batches", "file_key_name": "models.claude__", "attached_node": "model.livequery_models.claude__", "test_metadata": {"name": "test_udf", "kwargs": {"assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "list_message_batches", "model": "{{ get_where_subquery(ref('claude__')) }}"}, "namespace": null}}, "test.livequery_models.test_claude__list_message_batches_with_before.aae86d2911": {"database": "SUI", "schema": "test_claude", "name": "test_claude__list_message_batches_with_before", "resource_type": "test", "package_name": "livequery_models", "path": "test_claude__list_message_batches_with_before.sql", "original_file_path": "models/deploy/marketplace/claude/claude__.yml", "unique_id": "test.livequery_models.test_claude__list_message_batches_with_before.aae86d2911", "fqn": ["livequery_models", "deploy", "marketplace", "claude", "test_claude__list_message_batches_with_before"], "alias": "list_message_batches_with_before", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.7778192, "relation_name": "SUI.test_claude.list_message_batches_with_before", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "claude__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.claude__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/claude/claude__.yml/test_claude__list_message_batches_with_before.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'list.list_message_batches_with_before' AS test_name\n        ,['msgbatch_01R8HDAhnozagFWe466yECsz', 1] as parameters\n        ,SUI.list.list_message_batches_with_before('msgbatch_01R8HDAhnozagFWe466yECsz', 1) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.list.list_message_batches_with_before('msgbatch_01R8HDAhnozagFWe466yECsz', 1)\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.list.list_message_batches_with_before('msgbatch_01R8HDAhnozagFWe466yECsz', 1)\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.claude__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "list_message_batches_with_before", "file_key_name": "models.claude__", "attached_node": "model.livequery_models.claude__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'msgbatch_01R8HDAhnozagFWe466yECsz', 1\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "list_message_batches_with_before", "model": "{{ get_where_subquery(ref('claude__')) }}"}, "namespace": null}}, "test.livequery_models.test_claude__list_message_batches_with_after.0e42b728e7": {"database": "SUI", "schema": "test_claude", "name": "test_claude__list_message_batches_with_after", "resource_type": "test", "package_name": "livequery_models", "path": "test_claude__list_message_batches_with_after.sql", "original_file_path": "models/deploy/marketplace/claude/claude__.yml", "unique_id": "test.livequery_models.test_claude__list_message_batches_with_after.0e42b728e7", "fqn": ["livequery_models", "deploy", "marketplace", "claude", "test_claude__list_message_batches_with_after"], "alias": "list_message_batches_with_after", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.783217, "relation_name": "SUI.test_claude.list_message_batches_with_after", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "claude__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.claude__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/claude/claude__.yml/test_claude__list_message_batches_with_after.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'list.list_message_batches_with_after' AS test_name\n        ,['msgbatch_019gz7y3oXnLxgemRP4D7qnQ', 1] as parameters\n        ,SUI.list.list_message_batches_with_after('msgbatch_019gz7y3oXnLxgemRP4D7qnQ', 1) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.list.list_message_batches_with_after('msgbatch_019gz7y3oXnLxgemRP4D7qnQ', 1)\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.list.list_message_batches_with_after('msgbatch_019gz7y3oXnLxgemRP4D7qnQ', 1)\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.claude__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "list_message_batches_with_after", "file_key_name": "models.claude__", "attached_node": "model.livequery_models.claude__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'msgbatch_019gz7y3oXnLxgemRP4D7qnQ', 1\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "list_message_batches_with_after", "model": "{{ get_where_subquery(ref('claude__')) }}"}, "namespace": null}}, "test.livequery_models.test_claude__get_message_batch.b52b8b8d04": {"database": "SUI", "schema": "test_claude", "name": "test_claude__get_message_batch", "resource_type": "test", "package_name": "livequery_models", "path": "test_claude__get_message_batch.sql", "original_file_path": "models/deploy/marketplace/claude/claude__.yml", "unique_id": "test.livequery_models.test_claude__get_message_batch.b52b8b8d04", "fqn": ["livequery_models", "deploy", "marketplace", "claude", "test_claude__get_message_batch"], "alias": "get_message_batch", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.7884126, "relation_name": "SUI.test_claude.get_message_batch", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "claude__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.claude__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/claude/claude__.yml/test_claude__get_message_batch.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get_message_batch' AS test_name\n        ,['msgbatch_019gz7y3oXnLxgemRP4D7qnQ'] as parameters\n        ,SUI.get.get_message_batch('msgbatch_019gz7y3oXnLxgemRP4D7qnQ') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_message_batch('msgbatch_019gz7y3oXnLxgemRP4D7qnQ')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_message_batch('msgbatch_019gz7y3oXnLxgemRP4D7qnQ')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.claude__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_message_batch", "file_key_name": "models.claude__", "attached_node": "model.livequery_models.claude__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'msgbatch_019gz7y3oXnLxgemRP4D7qnQ'\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_message_batch", "model": "{{ get_where_subquery(ref('claude__')) }}"}, "namespace": null}}, "test.livequery_models.test_claude__get_message_batch_results.ecc8ad465c": {"database": "SUI", "schema": "test_claude", "name": "test_claude__get_message_batch_results", "resource_type": "test", "package_name": "livequery_models", "path": "test_claude__get_message_batch_results.sql", "original_file_path": "models/deploy/marketplace/claude/claude__.yml", "unique_id": "test.livequery_models.test_claude__get_message_batch_results.ecc8ad465c", "fqn": ["livequery_models", "deploy", "marketplace", "claude", "test_claude__get_message_batch_results"], "alias": "get_message_batch_results", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.7938948, "relation_name": "SUI.test_claude.get_message_batch_results", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "claude__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.claude__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/claude/claude__.yml/test_claude__get_message_batch_results.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get_message_batch_results' AS test_name\n        ,['msgbatch_019gz7y3oXnLxgemRP4D7qnQ'] as parameters\n        ,SUI.get.get_message_batch_results('msgbatch_019gz7y3oXnLxgemRP4D7qnQ') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_message_batch_results('msgbatch_019gz7y3oXnLxgemRP4D7qnQ')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_message_batch_results('msgbatch_019gz7y3oXnLxgemRP4D7qnQ')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.claude__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'claude' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_message_batch_results", "file_key_name": "models.claude__", "attached_node": "model.livequery_models.claude__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'msgbatch_019gz7y3oXnLxgemRP4D7qnQ'\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_message_batch_results", "model": "{{ get_where_subquery(ref('claude__')) }}"}, "namespace": null}}, "test.livequery_models.test_claude_utils__post_status_200.a32a62cfdf": {"database": "SUI", "schema": "test_claude_utils", "name": "test_claude_utils__post_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_claude_utils__post_status_200.sql", "original_file_path": "models/deploy/marketplace/claude/claude_utils__claude_utils.yml", "unique_id": "test.livequery_models.test_claude_utils__post_status_200.a32a62cfdf", "fqn": ["livequery_models", "deploy", "marketplace", "claude", "test_claude_utils__post_status_200"], "alias": "post_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.7999287, "relation_name": "SUI.test_claude_utils.post_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "claude_utils__claude_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.claude_utils__claude_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/claude/claude_utils__claude_utils.yml/test_claude_utils__post_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__claude_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'claude_utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'post.post' AS test_name\n        ,['/v1/messages' , {\n    'model': 'claude-3-5-sonnet-20241022',\n    'max_tokens': 1024,\n    'messages': [{'role': 'user', 'content': 'Hello, how are you?'}]\n  }] as parameters\n        ,SUI.post.post('/v1/messages' , {\n    'model': 'claude-3-5-sonnet-20241022',\n    'max_tokens': 1024,\n    'messages': [{'role': 'user', 'content': 'Hello, how are you?'}]\n  }) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.post.post('/v1/messages' , {\n    'model': 'claude-3-5-sonnet-20241022',\n    'max_tokens': 1024,\n    'messages': [{'role': 'user', 'content': 'Hello, how are you?'}]\n  })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.post.post('/v1/messages' , {\n    'model': 'claude-3-5-sonnet-20241022',\n    'max_tokens': 1024,\n    'messages': [{'role': 'user', 'content': 'Hello, how are you?'}]\n  })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.claude_utils__claude_utils", "sql": " __dbt__cte__claude_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'claude_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "post", "file_key_name": "models.claude_utils__claude_utils", "attached_node": "model.livequery_models.claude_utils__claude_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/messages' , {\n    'model': 'claude-3-5-sonnet-20241022',\n    'max_tokens': 1024,\n    'messages': [{'role': 'user', 'content': 'Hello, how are you?'}]\n  }\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "post", "model": "{{ get_where_subquery(ref('claude_utils__claude_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_tokens__get_token_allowance_status_200.65ce803e24": {"database": "SUI", "schema": "test_alchemy_tokens", "name": "test_alchemy_tokens__get_token_allowance_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_tokens__get_token_allowance_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_tokens__get_token_allowance_status_200.65ce803e24", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_tokens__get_token_allowance_status_200"], "alias": "get_token_allowance_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.807796, "relation_name": "SUI.test_alchemy_tokens.get_token_allowance_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_tokens__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_tokens__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml/test_alchemy_tokens__get_token_allowance_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_tokens' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_token_allowance' AS test_name\n        ,['eth-mainnet', [{'contract': '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', 'owner': '0xf1a726210550c306a9964b251cbcd3fa5ecb275d', 'spender': '0xdef1c0ded9bec7f1a1670819833240f027b25eff'}]] as parameters\n        ,SUI.get.get_token_allowance('eth-mainnet', [{'contract': '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', 'owner': '0xf1a726210550c306a9964b251cbcd3fa5ecb275d', 'spender': '0xdef1c0ded9bec7f1a1670819833240f027b25eff'}]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_token_allowance('eth-mainnet', [{'contract': '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', 'owner': '0xf1a726210550c306a9964b251cbcd3fa5ecb275d', 'spender': '0xdef1c0ded9bec7f1a1670819833240f027b25eff'}])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_token_allowance('eth-mainnet', [{'contract': '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', 'owner': '0xf1a726210550c306a9964b251cbcd3fa5ecb275d', 'spender': '0xdef1c0ded9bec7f1a1670819833240f027b25eff'}])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_tokens__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_tokens' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_token_allowance", "file_key_name": "models.alchemy_tokens__alchemy_utils", "attached_node": "model.livequery_models.alchemy_tokens__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', [{'contract': '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270', 'owner': '0xf1a726210550c306a9964b251cbcd3fa5ecb275d', 'spender': '0xdef1c0ded9bec7f1a1670819833240f027b25eff'}]\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_allowance", "model": "{{ get_where_subquery(ref('alchemy_tokens__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_tokens__get_token_balances_status_200.bdaa3fdabb": {"database": "SUI", "schema": "test_alchemy_tokens", "name": "test_alchemy_tokens__get_token_balances_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_tokens__get_token_balances_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_tokens__get_token_balances_status_200.bdaa3fdabb", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_tokens__get_token_balances_status_200"], "alias": "get_token_balances_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.8129225, "relation_name": "SUI.test_alchemy_tokens.get_token_balances_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_tokens__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_tokens__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml/test_alchemy_tokens__get_token_balances_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_tokens' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_token_balances' AS test_name\n        ,['eth-mainnet', ['0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5', 'erc20']] as parameters\n        ,SUI.get.get_token_balances('eth-mainnet', ['0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5', 'erc20']) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_token_balances('eth-mainnet', ['0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5', 'erc20'])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_token_balances('eth-mainnet', ['0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5', 'erc20'])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_tokens__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_tokens' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_token_balances", "file_key_name": "models.alchemy_tokens__alchemy_utils", "attached_node": "model.livequery_models.alchemy_tokens__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', ['0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5', 'erc20']\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_balances", "model": "{{ get_where_subquery(ref('alchemy_tokens__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_tokens__get_token_metadata_status_200.ff08820c76": {"database": "SUI", "schema": "test_alchemy_tokens", "name": "test_alchemy_tokens__get_token_metadata_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_tokens__get_token_metadata_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_tokens__get_token_metadata_status_200.ff08820c76", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_tokens__get_token_metadata_status_200"], "alias": "get_token_metadata_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.8183064, "relation_name": "SUI.test_alchemy_tokens.get_token_metadata_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_tokens__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_tokens__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_tokens__alchemy_utils.yml/test_alchemy_tokens__get_token_metadata_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_tokens' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_token_metadata' AS test_name\n        ,['eth-mainnet', ['0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48']] as parameters\n        ,SUI.get.get_token_metadata('eth-mainnet', ['0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48']) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_token_metadata('eth-mainnet', ['0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_token_metadata('eth-mainnet', ['0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_tokens__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_tokens' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_token_metadata", "file_key_name": "models.alchemy_tokens__alchemy_utils", "attached_node": "model.livequery_models.alchemy_tokens__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', ['0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48']\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_metadata", "model": "{{ get_where_subquery(ref('alchemy_tokens__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_nfts_status_200.34e3001576": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_nfts_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_nfts_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_nfts_status_200.34e3001576", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_nfts_status_200"], "alias": "get_nfts_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.8315666, "relation_name": "SUI.test_alchemy_nfts.get_nfts_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_nfts_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_nfts' AS test_name\n        ,['eth-mainnet', {'owner': '0x4a9318F375937B56045E5a548e7E66AEA61Dd610'}] as parameters\n        ,SUI.get.get_nfts('eth-mainnet', {'owner': '0x4a9318F375937B56045E5a548e7E66AEA61Dd610'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_nfts('eth-mainnet', {'owner': '0x4a9318F375937B56045E5a548e7E66AEA61Dd610'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_nfts('eth-mainnet', {'owner': '0x4a9318F375937B56045E5a548e7E66AEA61Dd610'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_nfts", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'owner': '0x4a9318F375937B56045E5a548e7E66AEA61Dd610'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_nfts", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_owners_for_token_status_200.c534c2579d": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_owners_for_token_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_owners_for_token_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_owners_for_token_status_200.c534c2579d", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_owners_for_token_status_200"], "alias": "get_owners_for_token_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.836911, "relation_name": "SUI.test_alchemy_nfts.get_owners_for_token_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_owners_for_token_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_owners_for_token' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}] as parameters\n        ,SUI.get.get_owners_for_token('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_owners_for_token('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_owners_for_token('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_owners_for_token", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_owners_for_token", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_owners_for_collection_status_200.3cdb9f0962": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_owners_for_collection_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_owners_for_collection_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_owners_for_collection_status_200.3cdb9f0962", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_owners_for_collection_status_200"], "alias": "get_owners_for_collection_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.8423443, "relation_name": "SUI.test_alchemy_nfts.get_owners_for_collection_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_owners_for_collection_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_owners_for_collection' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withTokenBalances': True}] as parameters\n        ,SUI.get.get_owners_for_collection('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withTokenBalances': True}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_owners_for_collection('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withTokenBalances': True})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_owners_for_collection('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withTokenBalances': True})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_owners_for_collection", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withTokenBalances': True}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_owners_for_collection", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__is_holder_of_collection_status_200.d94f7ae355": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__is_holder_of_collection_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__is_holder_of_collection_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__is_holder_of_collection_status_200.d94f7ae355", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__is_holder_of_collection_status_200"], "alias": "is_holder_of_collection_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.847869, "relation_name": "SUI.test_alchemy_nfts.is_holder_of_collection_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__is_holder_of_collection_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'is.is_holder_of_collection' AS test_name\n        ,['eth-mainnet', {'wallet': '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}] as parameters\n        ,SUI.is.is_holder_of_collection('eth-mainnet', {'wallet': '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.is.is_holder_of_collection('eth-mainnet', {'wallet': '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.is.is_holder_of_collection('eth-mainnet', {'wallet': '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_holder_of_collection", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'wallet': '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "is_holder_of_collection", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_contracts_for_owner_status_200.29e9e60296": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_contracts_for_owner_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_contracts_for_owner_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_contracts_for_owner_status_200.29e9e60296", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_contracts_for_owner_status_200"], "alias": "get_contracts_for_owner_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.8530955, "relation_name": "SUI.test_alchemy_nfts.get_contracts_for_owner_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_contracts_for_owner_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_contracts_for_owner' AS test_name\n        ,['eth-mainnet', {'owner': 'vitalik.eth', 'pageSize': 100, 'page': 1}] as parameters\n        ,SUI.get.get_contracts_for_owner('eth-mainnet', {'owner': 'vitalik.eth', 'pageSize': 100, 'page': 1}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_contracts_for_owner('eth-mainnet', {'owner': 'vitalik.eth', 'pageSize': 100, 'page': 1})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_contracts_for_owner('eth-mainnet', {'owner': 'vitalik.eth', 'pageSize': 100, 'page': 1})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_contracts_for_owner", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'owner': 'vitalik.eth', 'pageSize': 100, 'page': 1}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_contracts_for_owner", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_nft_metadata_status_200.aad531a83a": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_nft_metadata_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_nft_metadata_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_nft_metadata_status_200.aad531a83a", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_nft_metadata_status_200"], "alias": "get_nft_metadata_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.8585865, "relation_name": "SUI.test_alchemy_nfts.get_nft_metadata_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_nft_metadata_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_nft_metadata' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}] as parameters\n        ,SUI.get.get_nft_metadata('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_nft_metadata('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_nft_metadata('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_nft_metadata", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_nft_metadata", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_nft_metadata_batch_status_200.44d0ef0140": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_nft_metadata_batch_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_nft_metadata_batch_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_nft_metadata_batch_status_200.44d0ef0140", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_nft_metadata_batch_status_200"], "alias": "get_nft_metadata_batch_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.864855, "relation_name": "SUI.test_alchemy_nfts.get_nft_metadata_batch_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_nft_metadata_batch_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_nft_metadata_batch' AS test_name\n        ,['eth-mainnet', {'tokens': [{'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}, {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 43}]}] as parameters\n        ,SUI.get.get_nft_metadata_batch('eth-mainnet', {'tokens': [{'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}, {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 43}]}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_nft_metadata_batch('eth-mainnet', {'tokens': [{'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}, {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 43}]})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_nft_metadata_batch('eth-mainnet', {'tokens': [{'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}, {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 43}]})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_nft_metadata_batch", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'tokens': [{'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}, {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 43}]}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_nft_metadata_batch", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_contract_metadata_status_200.0a9337a17a": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_contract_metadata_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_contract_metadata_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_contract_metadata_status_200.0a9337a17a", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_contract_metadata_status_200"], "alias": "get_contract_metadata_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.8739655, "relation_name": "SUI.test_alchemy_nfts.get_contract_metadata_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_contract_metadata_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_contract_metadata' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}] as parameters\n        ,SUI.get.get_contract_metadata('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_contract_metadata('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_contract_metadata('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_contract_metadata", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_contract_metadata", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_contract_metadata_batch_status_200.78a02ffe28": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_contract_metadata_batch_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_contract_metadata_batch_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_contract_metadata_batch_status_200.78a02ffe28", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_contract_metadata_batch_status_200"], "alias": "get_contract_metadata_batch_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.879622, "relation_name": "SUI.test_alchemy_nfts.get_contract_metadata_batch_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_contract_metadata_batch_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_contract_metadata_batch' AS test_name\n        ,['eth-mainnet', {'contractAddresses': ['0xe785E82358879F061BC3dcAC6f0444462D4b5330', '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d']}] as parameters\n        ,SUI.get.get_contract_metadata_batch('eth-mainnet', {'contractAddresses': ['0xe785E82358879F061BC3dcAC6f0444462D4b5330', '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d']}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_contract_metadata_batch('eth-mainnet', {'contractAddresses': ['0xe785E82358879F061BC3dcAC6f0444462D4b5330', '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d']})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_contract_metadata_batch('eth-mainnet', {'contractAddresses': ['0xe785E82358879F061BC3dcAC6f0444462D4b5330', '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d']})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_contract_metadata_batch", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddresses': ['0xe785E82358879F061BC3dcAC6f0444462D4b5330', '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d']}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_contract_metadata_batch", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__invalidate_contract_status_200.1ac32b4945": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__invalidate_contract_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__invalidate_contract_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__invalidate_contract_status_200.1ac32b4945", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__invalidate_contract_status_200"], "alias": "invalidate_contract_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.884898, "relation_name": "SUI.test_alchemy_nfts.invalidate_contract_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__invalidate_contract_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'invalidate.invalidate_contract' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}] as parameters\n        ,SUI.invalidate.invalidate_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.invalidate.invalidate_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.invalidate.invalidate_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "invalidate_contract", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "invalidate_contract", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__reingest_contract_status_200.3c2c45fd00": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__reingest_contract_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__reingest_contract_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__reingest_contract_status_200.3c2c45fd00", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__reingest_contract_status_200"], "alias": "reingest_contract_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.8900056, "relation_name": "SUI.test_alchemy_nfts.reingest_contract_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__reingest_contract_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'reingest.reingest_contract' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}] as parameters\n        ,SUI.reingest.reingest_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.reingest.reingest_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.reingest.reingest_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "reingest_contract", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "reingest_contract", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__search_contract_metadata_status_200.1e97937b32": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__search_contract_metadata_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__search_contract_metadata_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__search_contract_metadata_status_200.1e97937b32", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__search_contract_metadata_status_200"], "alias": "search_contract_metadata_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.8949475, "relation_name": "SUI.test_alchemy_nfts.search_contract_metadata_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__search_contract_metadata_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'search.search_contract_metadata' AS test_name\n        ,['eth-mainnet', {'query': 'bored'}] as parameters\n        ,SUI.search.search_contract_metadata('eth-mainnet', {'query': 'bored'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.search.search_contract_metadata('eth-mainnet', {'query': 'bored'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.search.search_contract_metadata('eth-mainnet', {'query': 'bored'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "search_contract_metadata", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'query': 'bored'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "search_contract_metadata", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_nfts_for_collection_status_200.f7ff9b5ee5": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_nfts_for_collection_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_nfts_for_collection_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_nfts_for_collection_status_200.f7ff9b5ee5", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_nfts_for_collection_status_200"], "alias": "get_nfts_for_collection_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.9003801, "relation_name": "SUI.test_alchemy_nfts.get_nfts_for_collection_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_nfts_for_collection_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_nfts_for_collection' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withMetadata': True}] as parameters\n        ,SUI.get.get_nfts_for_collection('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withMetadata': True}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_nfts_for_collection('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withMetadata': True})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_nfts_for_collection('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withMetadata': True})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_nfts_for_collection", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'withMetadata': True}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_nfts_for_collection", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_spam_contracts_status_200.b9dfb4e306": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_spam_contracts_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_spam_contracts_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_spam_contracts_status_200.b9dfb4e306", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_spam_contracts_status_200"], "alias": "get_spam_contracts_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.9058933, "relation_name": "SUI.test_alchemy_nfts.get_spam_contracts_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_spam_contracts_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_spam_contracts' AS test_name\n        ,['eth-mainnet', {}] as parameters\n        ,SUI.get.get_spam_contracts('eth-mainnet', {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_spam_contracts('eth-mainnet', {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_spam_contracts('eth-mainnet', {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_spam_contracts", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_spam_contracts", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__is_spam_contract_status_200.91af21989f": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__is_spam_contract_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__is_spam_contract_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__is_spam_contract_status_200.91af21989f", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__is_spam_contract_status_200"], "alias": "is_spam_contract_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.9111285, "relation_name": "SUI.test_alchemy_nfts.is_spam_contract_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__is_spam_contract_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'is.is_spam_contract' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}] as parameters\n        ,SUI.is.is_spam_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.is.is_spam_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.is.is_spam_contract('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_spam_contract", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "is_spam_contract", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__is_airdrop_status_200.58ce4f1bdc": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__is_airdrop_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__is_airdrop_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__is_airdrop_status_200.58ce4f1bdc", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__is_airdrop_status_200"], "alias": "is_airdrop_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.9169269, "relation_name": "SUI.test_alchemy_nfts.is_airdrop_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__is_airdrop_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'is.is_airdrop' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}] as parameters\n        ,SUI.is.is_airdrop('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.is.is_airdrop('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.is.is_airdrop('eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_airdrop", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "is_airdrop", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_floor_price_status_200.f2125d71e4": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_floor_price_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_floor_price_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_floor_price_status_200.f2125d71e4", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_floor_price_status_200"], "alias": "get_floor_price_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.9271045, "relation_name": "SUI.test_alchemy_nfts.get_floor_price_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_floor_price_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_floor_price' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'}] as parameters\n        ,SUI.get.get_floor_price('eth-mainnet', {'contractAddress': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_floor_price('eth-mainnet', {'contractAddress': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_floor_price('eth-mainnet', {'contractAddress': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_floor_price", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_floor_price", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__get_nft_sales_status_200.223f727f9f": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__get_nft_sales_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__get_nft_sales_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__get_nft_sales_status_200.223f727f9f", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__get_nft_sales_status_200"], "alias": "get_nft_sales_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.9323518, "relation_name": "SUI.test_alchemy_nfts.get_nft_sales_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__get_nft_sales_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_nft_sales' AS test_name\n        ,['eth-mainnet', {'fromBlock': 0, 'toBlock': 'latest', 'order': 'asc', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}] as parameters\n        ,SUI.get.get_nft_sales('eth-mainnet', {'fromBlock': 0, 'toBlock': 'latest', 'order': 'asc', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_nft_sales('eth-mainnet', {'fromBlock': 0, 'toBlock': 'latest', 'order': 'asc', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_nft_sales('eth-mainnet', {'fromBlock': 0, 'toBlock': 'latest', 'order': 'asc', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_nft_sales", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'fromBlock': 0, 'toBlock': 'latest', 'order': 'asc', 'contractAddress': '0xe785E82358879F061BC3dcAC6f0444462D4b5330', 'tokenId': 44}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_nft_sales", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__compute_rarity_status_200.942425aa31": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__compute_rarity_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__compute_rarity_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__compute_rarity_status_200.942425aa31", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__compute_rarity_status_200"], "alias": "compute_rarity_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.9377766, "relation_name": "SUI.test_alchemy_nfts.compute_rarity_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__compute_rarity_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'compute.compute_rarity' AS test_name\n        ,['eth-mainnet', {'tokenId': 3603, 'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'}] as parameters\n        ,SUI.compute.compute_rarity('eth-mainnet', {'tokenId': 3603, 'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.compute.compute_rarity('eth-mainnet', {'tokenId': 3603, 'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.compute.compute_rarity('eth-mainnet', {'tokenId': 3603, 'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "compute_rarity", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'tokenId': 3603, 'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "compute_rarity", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_nfts__summarize_nft_attributes_status_200.99d7f57e35": {"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__summarize_nft_attributes_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__summarize_nft_attributes_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__summarize_nft_attributes_status_200.99d7f57e35", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__summarize_nft_attributes_status_200"], "alias": "summarize_nft_attributes_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.9432998, "relation_name": "SUI.test_alchemy_nfts.summarize_nft_attributes_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_nfts__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml/test_alchemy_nfts__summarize_nft_attributes_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'summarize.summarize_nft_attributes' AS test_name\n        ,['eth-mainnet', {'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'}] as parameters\n        ,SUI.summarize.summarize_nft_attributes('eth-mainnet', {'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.summarize.summarize_nft_attributes('eth-mainnet', {'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.summarize.summarize_nft_attributes('eth-mainnet', {'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_nfts__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_nfts' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "summarize_nft_attributes", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', {'contractAddress': '0xb6a37b5d14d502c3ab0ae6f3a0e058bc9517786e'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "summarize_nft_attributes", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_alchemy_transfers__get_asset_transfers_status_200.f1f3f416e4": {"database": "SUI", "schema": "test_alchemy_transfers", "name": "test_alchemy_transfers__get_asset_transfers_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_transfers__get_asset_transfers_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_transfers__get_asset_transfers_status_200.f1f3f416e4", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_transfers__get_asset_transfers_status_200"], "alias": "get_asset_transfers_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.9495764, "relation_name": "SUI.test_alchemy_transfers.get_asset_transfers_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "alchemy_transfers__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.alchemy_transfers__alchemy_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/alchemy/alchemy_transfers__alchemy_utils.yml/test_alchemy_transfers__get_asset_transfers_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n),  __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_transfers' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n) ,\ntest AS\n(\n    SELECT\n        'get.get_asset_transfers' AS test_name\n        ,['eth-mainnet', [{'fromBlock': '0x0', 'toBlock': 'latest', 'toAddress': '0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1', 'category': ['external'], 'withMetadata': True, 'excludeZeroValue': True}]] as parameters\n        ,SUI.get.get_asset_transfers('eth-mainnet', [{'fromBlock': '0x0', 'toBlock': 'latest', 'toAddress': '0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1', 'category': ['external'], 'withMetadata': True, 'excludeZeroValue': True}]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_asset_transfers('eth-mainnet', [{'fromBlock': '0x0', 'toBlock': 'latest', 'toAddress': '0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1', 'category': ['external'], 'withMetadata': True, 'excludeZeroValue': True}])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_asset_transfers('eth-mainnet', [{'fromBlock': '0x0', 'toBlock': 'latest', 'toAddress': '0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1', 'category': ['external'], 'withMetadata': True, 'excludeZeroValue': True}])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.alchemy_utils__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'alchemy_utils' as schema_\n)"}, {"id": "model.livequery_models.alchemy_transfers__alchemy_utils", "sql": " __dbt__cte__alchemy_utils as (\n\nSELECT 'alchemy_transfers' as schema_-- depends_on: __dbt__cte__alchemy_utils\n-- depends_on: __dbt__cte__\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_asset_transfers", "file_key_name": "models.alchemy_transfers__alchemy_utils", "attached_node": "model.livequery_models.alchemy_transfers__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'eth-mainnet', [{'fromBlock': '0x0', 'toBlock': 'latest', 'toAddress': '0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1', 'category': ['external'], 'withMetadata': True, 'excludeZeroValue': True}]\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_asset_transfers", "model": "{{ get_where_subquery(ref('alchemy_transfers__alchemy_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_apilayer__get_status_200.f739b0d36b": {"database": "SUI", "schema": "test_apilayer", "name": "test_apilayer__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_apilayer__get_status_200.sql", "original_file_path": "models/deploy/marketplace/apilayer/apilayer__.yml", "unique_id": "test.livequery_models.test_apilayer__get_status_200.f739b0d36b", "fqn": ["livequery_models", "deploy", "marketplace", "apilayer", "test_apilayer__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.9558527, "relation_name": "SUI.test_apilayer.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "apilayer__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.apilayer__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/apilayer/apilayer__.yml/test_apilayer__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'apilayer' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['/odds/sports' , {'all': 'true'}] as parameters\n        ,SUI.get.get('/odds/sports' , {'all': 'true'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/odds/sports' , {'all': 'true'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/odds/sports' , {'all': 'true'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.apilayer__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'apilayer' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.apilayer__", "attached_node": "model.livequery_models.apilayer__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/odds/sports' , {'all': 'true'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('apilayer__')) }}"}, "namespace": null}}, "test.livequery_models.test_defillama__get_status_200.90864f8f89": {"database": "SUI", "schema": "test_defillama", "name": "test_defillama__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_defillama__get_status_200.sql", "original_file_path": "models/deploy/marketplace/defillama/defillama__.yml", "unique_id": "test.livequery_models.test_defillama__get_status_200.90864f8f89", "fqn": ["livequery_models", "deploy", "marketplace", "defillama", "test_defillama__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.9737973, "relation_name": "SUI.test_defillama.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "defillama__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.defillama__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/defillama/defillama__.yml/test_defillama__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'defillama' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['/protocols' , {}] as parameters\n        ,SUI.get.get('/protocols' , {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/protocols' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/protocols' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.defillama__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'defillama' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.defillama__", "attached_node": "model.livequery_models.defillama__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/protocols' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('defillama__')) }}"}, "namespace": null}}, "test.livequery_models.test_deepnftvalue__get_status_200.49fba544bb": {"database": "SUI", "schema": "test_deepnftvalue", "name": "test_deepnftvalue__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_deepnftvalue__get_status_200.sql", "original_file_path": "models/deploy/marketplace/deepnftvalue/deepnftvalue__.yml", "unique_id": "test.livequery_models.test_deepnftvalue__get_status_200.49fba544bb", "fqn": ["livequery_models", "deploy", "marketplace", "deepnftvalue", "test_deepnftvalue__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.9799376, "relation_name": "SUI.test_deepnftvalue.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "deepnftvalue__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.deepnftvalue__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/deepnftvalue/deepnftvalue__.yml/test_deepnftvalue__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'deepnftvalue' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['/v1/collections' , {'limit': 5}] as parameters\n        ,SUI.get.get('/v1/collections' , {'limit': 5}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/v1/collections' , {'limit': 5})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/v1/collections' , {'limit': 5})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.deepnftvalue__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'deepnftvalue' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.deepnftvalue__", "attached_node": "model.livequery_models.deepnftvalue__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/collections' , {'limit': 5}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('deepnftvalue__')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__get_asset_status_200.3e65208714": {"database": "SUI", "schema": "test_helius_das", "name": "test_helius_das__get_asset_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_asset_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_asset_status_200.3e65208714", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_asset_status_200"], "alias": "get_asset_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.9887993, "relation_name": "SUI.test_helius_das.get_asset_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__get_asset_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_asset' AS test_name\n        ,['mainnet' , {\n  'id': 'F9Lw3ki3hJ7PF9HQXsBzoY8GyE6sPoEZZdXJBsTTD2rk'\n}] as parameters\n        ,SUI.get.get_asset('mainnet' , {\n  'id': 'F9Lw3ki3hJ7PF9HQXsBzoY8GyE6sPoEZZdXJBsTTD2rk'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_asset('mainnet' , {\n  'id': 'F9Lw3ki3hJ7PF9HQXsBzoY8GyE6sPoEZZdXJBsTTD2rk'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_asset('mainnet' , {\n  'id': 'F9Lw3ki3hJ7PF9HQXsBzoY8GyE6sPoEZZdXJBsTTD2rk'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_asset", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'id': 'F9Lw3ki3hJ7PF9HQXsBzoY8GyE6sPoEZZdXJBsTTD2rk'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_asset", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__get_signatures_for_asset_status_200.529a6b605d": {"database": "SUI", "schema": "test_helius_das", "name": "test_helius_das__get_signatures_for_asset_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_signatures_for_asset_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_signatures_for_asset_status_200.529a6b605d", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_signatures_for_asset_status_200"], "alias": "get_signatures_for_asset_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.994085, "relation_name": "SUI.test_helius_das.get_signatures_for_asset_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__get_signatures_for_asset_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_signatures_for_asset' AS test_name\n        ,['mainnet' , {\n  'id': 'FNt6A9Mfnqbwc1tY7uwAguKQ1JcpBrxmhczDgbdJy5AC',\n  'page': 1, -- Starts at 1\n  'limit': 1000 -- Limit 1000 per request.\n}] as parameters\n        ,SUI.get.get_signatures_for_asset('mainnet' , {\n  'id': 'FNt6A9Mfnqbwc1tY7uwAguKQ1JcpBrxmhczDgbdJy5AC',\n  'page': 1, -- Starts at 1\n  'limit': 1000 -- Limit 1000 per request.\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_signatures_for_asset('mainnet' , {\n  'id': 'FNt6A9Mfnqbwc1tY7uwAguKQ1JcpBrxmhczDgbdJy5AC',\n  'page': 1, -- Starts at 1\n  'limit': 1000 -- Limit 1000 per request.\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_signatures_for_asset('mainnet' , {\n  'id': 'FNt6A9Mfnqbwc1tY7uwAguKQ1JcpBrxmhczDgbdJy5AC',\n  'page': 1, -- Starts at 1\n  'limit': 1000 -- Limit 1000 per request.\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_signatures_for_asset", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'id': 'FNt6A9Mfnqbwc1tY7uwAguKQ1JcpBrxmhczDgbdJy5AC',\n  'page': 1, -- Starts at 1\n  'limit': 1000 -- Limit 1000 per request.\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_signatures_for_asset", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__search_assets_status_200.2373c30616": {"database": "SUI", "schema": "test_helius_das", "name": "test_helius_das__search_assets_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__search_assets_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__search_assets_status_200.2373c30616", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__search_assets_status_200"], "alias": "search_assets_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141891.9996066, "relation_name": "SUI.test_helius_das.search_assets_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__search_assets_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n) ,\ntest AS\n(\n    SELECT\n        'search.search_assets' AS test_name\n        ,['mainnet' , {\n  'ownerAddress': '2k5AXX4guW9XwRQ1AKCpAuUqgWDpQpwFfpVFh3hnm2Ha',\n  'compressed': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}] as parameters\n        ,SUI.search.search_assets('mainnet' , {\n  'ownerAddress': '2k5AXX4guW9XwRQ1AKCpAuUqgWDpQpwFfpVFh3hnm2Ha',\n  'compressed': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.search.search_assets('mainnet' , {\n  'ownerAddress': '2k5AXX4guW9XwRQ1AKCpAuUqgWDpQpwFfpVFh3hnm2Ha',\n  'compressed': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.search.search_assets('mainnet' , {\n  'ownerAddress': '2k5AXX4guW9XwRQ1AKCpAuUqgWDpQpwFfpVFh3hnm2Ha',\n  'compressed': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "search_assets", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'ownerAddress': '2k5AXX4guW9XwRQ1AKCpAuUqgWDpQpwFfpVFh3hnm2Ha',\n  'compressed': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "search_assets", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__get_asset_proof_status_200.2ed48f9fe3": {"database": "SUI", "schema": "test_helius_das", "name": "test_helius_das__get_asset_proof_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_asset_proof_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_asset_proof_status_200.2ed48f9fe3", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_asset_proof_status_200"], "alias": "get_asset_proof_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.005047, "relation_name": "SUI.test_helius_das.get_asset_proof_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__get_asset_proof_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_asset_proof' AS test_name\n        ,['mainnet' , {\n  'id': 'Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss'\n}] as parameters\n        ,SUI.get.get_asset_proof('mainnet' , {\n  'id': 'Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_asset_proof('mainnet' , {\n  'id': 'Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_asset_proof('mainnet' , {\n  'id': 'Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_asset_proof", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'id': 'Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_asset_proof", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__get_assets_by_owner_status_200.6f2f1ef95c": {"database": "SUI", "schema": "test_helius_das", "name": "test_helius_das__get_assets_by_owner_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_assets_by_owner_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_assets_by_owner_status_200.6f2f1ef95c", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_assets_by_owner_status_200"], "alias": "get_assets_by_owner_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.010471, "relation_name": "SUI.test_helius_das.get_assets_by_owner_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__get_assets_by_owner_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_assets_by_owner' AS test_name\n        ,['mainnet' , {\n  'ownerAddress': '86xCnPeV69n6t3DnyGvkKobf9FdN2H9oiVDdaMpo2MMY',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}] as parameters\n        ,SUI.get.get_assets_by_owner('mainnet' , {\n  'ownerAddress': '86xCnPeV69n6t3DnyGvkKobf9FdN2H9oiVDdaMpo2MMY',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_assets_by_owner('mainnet' , {\n  'ownerAddress': '86xCnPeV69n6t3DnyGvkKobf9FdN2H9oiVDdaMpo2MMY',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_assets_by_owner('mainnet' , {\n  'ownerAddress': '86xCnPeV69n6t3DnyGvkKobf9FdN2H9oiVDdaMpo2MMY',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_assets_by_owner", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'ownerAddress': '86xCnPeV69n6t3DnyGvkKobf9FdN2H9oiVDdaMpo2MMY',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_assets_by_owner", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__get_assets_by_authority_status_200.c9ac02b165": {"database": "SUI", "schema": "test_helius_das", "name": "test_helius_das__get_assets_by_authority_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_assets_by_authority_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_assets_by_authority_status_200.c9ac02b165", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_assets_by_authority_status_200"], "alias": "get_assets_by_authority_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.0159414, "relation_name": "SUI.test_helius_das.get_assets_by_authority_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__get_assets_by_authority_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_assets_by_authority' AS test_name\n        ,['mainnet' , {\n  'authorityAddress': '2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}] as parameters\n        ,SUI.get.get_assets_by_authority('mainnet' , {\n  'authorityAddress': '2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_assets_by_authority('mainnet' , {\n  'authorityAddress': '2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_assets_by_authority('mainnet' , {\n  'authorityAddress': '2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_assets_by_authority", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'authorityAddress': '2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW',\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_assets_by_authority", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__get_assets_by_creator_status_200.e8cb071d3a": {"database": "SUI", "schema": "test_helius_das", "name": "test_helius_das__get_assets_by_creator_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_assets_by_creator_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_assets_by_creator_status_200.e8cb071d3a", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_assets_by_creator_status_200"], "alias": "get_assets_by_creator_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.0213351, "relation_name": "SUI.test_helius_das.get_assets_by_creator_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__get_assets_by_creator_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_assets_by_creator' AS test_name\n        ,['mainnet' , {\n  'creatorAddress': 'D3XrkNZz6wx6cofot7Zohsf2KSsu2ArngNk8VqU9cTY3',\n  'onlyVerified': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}] as parameters\n        ,SUI.get.get_assets_by_creator('mainnet' , {\n  'creatorAddress': 'D3XrkNZz6wx6cofot7Zohsf2KSsu2ArngNk8VqU9cTY3',\n  'onlyVerified': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_assets_by_creator('mainnet' , {\n  'creatorAddress': 'D3XrkNZz6wx6cofot7Zohsf2KSsu2ArngNk8VqU9cTY3',\n  'onlyVerified': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_assets_by_creator('mainnet' , {\n  'creatorAddress': 'D3XrkNZz6wx6cofot7Zohsf2KSsu2ArngNk8VqU9cTY3',\n  'onlyVerified': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_assets_by_creator", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'creatorAddress': 'D3XrkNZz6wx6cofot7Zohsf2KSsu2ArngNk8VqU9cTY3',\n  'onlyVerified': true,\n  'page': 1, -- Starts at 1\n  'limit': 1000\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_assets_by_creator", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_das__get_assets_by_group_status_200.fe5813195d": {"database": "SUI", "schema": "test_helius_das", "name": "test_helius_das__get_assets_by_group_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_das__get_assets_by_group_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_das__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_das__get_assets_by_group_status_200.fe5813195d", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_das__get_assets_by_group_status_200"], "alias": "get_assets_by_group_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.0274947, "relation_name": "SUI.test_helius_das.get_assets_by_group_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_das__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_das__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_das__helius_utils.yml/test_helius_das__get_assets_by_group_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_assets_by_group' AS test_name\n        ,['mainnet' , {\n  'groupKey': 'collection',\n  'groupValue': 'J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w',\n  'page': 1,\n  'limit': 1000\n}] as parameters\n        ,SUI.get.get_assets_by_group('mainnet' , {\n  'groupKey': 'collection',\n  'groupValue': 'J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w',\n  'page': 1,\n  'limit': 1000\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_assets_by_group('mainnet' , {\n  'groupKey': 'collection',\n  'groupValue': 'J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w',\n  'page': 1,\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_assets_by_group('mainnet' , {\n  'groupKey': 'collection',\n  'groupValue': 'J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w',\n  'page': 1,\n  'limit': 1000\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_das__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_das' as schema_-- depends_on: __dbt__cte__helius_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_assets_by_group", "file_key_name": "models.helius_das__helius_utils", "attached_node": "model.livequery_models.helius_das__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'groupKey': 'collection',\n  'groupValue': 'J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w',\n  'page': 1,\n  'limit': 1000\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_assets_by_group", "model": "{{ get_where_subquery(ref('helius_das__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_apis__token_metadata_status_200.c2bafa3fb0": {"database": "SUI", "schema": "test_helius_apis", "name": "test_helius_apis__token_metadata_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_apis__token_metadata_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_apis__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_apis__token_metadata_status_200.c2bafa3fb0", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_apis__token_metadata_status_200"], "alias": "token_metadata_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.0345986, "relation_name": "SUI.test_helius_apis.token_metadata_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_apis__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_apis__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_apis__helius_utils.yml/test_helius_apis__token_metadata_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_apis' as schema_-- depends_on: __dbt__cte__helius_utils\n) ,\ntest AS\n(\n    SELECT\n        'token.token_metadata' AS test_name\n        ,['mainnet' , {\n  'mintAccounts': [\n    'BAAzgRGWY2v5AJBNZNFd2abiRXAUo56UxywKEjoCZW2',\n    '8s6kQUZfdm7GSaThAcsmSs56wMinXrbk6SdNVngutrz5'\n  ],\n  'includeOffChain': true\n}] as parameters\n        ,SUI.token.token_metadata('mainnet' , {\n  'mintAccounts': [\n    'BAAzgRGWY2v5AJBNZNFd2abiRXAUo56UxywKEjoCZW2',\n    '8s6kQUZfdm7GSaThAcsmSs56wMinXrbk6SdNVngutrz5'\n  ],\n  'includeOffChain': true\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.token.token_metadata('mainnet' , {\n  'mintAccounts': [\n    'BAAzgRGWY2v5AJBNZNFd2abiRXAUo56UxywKEjoCZW2',\n    '8s6kQUZfdm7GSaThAcsmSs56wMinXrbk6SdNVngutrz5'\n  ],\n  'includeOffChain': true\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.token.token_metadata('mainnet' , {\n  'mintAccounts': [\n    'BAAzgRGWY2v5AJBNZNFd2abiRXAUo56UxywKEjoCZW2',\n    '8s6kQUZfdm7GSaThAcsmSs56wMinXrbk6SdNVngutrz5'\n  ],\n  'includeOffChain': true\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_apis__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_apis' as schema_-- depends_on: __dbt__cte__helius_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "token_metadata", "file_key_name": "models.helius_apis__helius_utils", "attached_node": "model.livequery_models.helius_apis__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , {\n  'mintAccounts': [\n    'BAAzgRGWY2v5AJBNZNFd2abiRXAUo56UxywKEjoCZW2',\n    '8s6kQUZfdm7GSaThAcsmSs56wMinXrbk6SdNVngutrz5'\n  ],\n  'includeOffChain': true\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "token_metadata", "model": "{{ get_where_subquery(ref('helius_apis__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_apis__balances_status_200.d668884644": {"database": "SUI", "schema": "test_helius_apis", "name": "test_helius_apis__balances_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_apis__balances_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_apis__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_apis__balances_status_200.d668884644", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_apis__balances_status_200"], "alias": "balances_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.0398738, "relation_name": "SUI.test_helius_apis.balances_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_apis__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_apis__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_apis__helius_utils.yml/test_helius_apis__balances_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_apis' as schema_-- depends_on: __dbt__cte__helius_utils\n) ,\ntest AS\n(\n    SELECT\n        'balances.balances' AS test_name\n        ,['mainnet' , '231B38ZpsbtrWbsBEjSXfjVj9JT2XyuNXy4f98V5NXxg'] as parameters\n        ,SUI.balances.balances('mainnet' , '231B38ZpsbtrWbsBEjSXfjVj9JT2XyuNXy4f98V5NXxg') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.balances.balances('mainnet' , '231B38ZpsbtrWbsBEjSXfjVj9JT2XyuNXy4f98V5NXxg')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.balances.balances('mainnet' , '231B38ZpsbtrWbsBEjSXfjVj9JT2XyuNXy4f98V5NXxg')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_apis__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_apis' as schema_-- depends_on: __dbt__cte__helius_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "balances", "file_key_name": "models.helius_apis__helius_utils", "attached_node": "model.livequery_models.helius_apis__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , '231B38ZpsbtrWbsBEjSXfjVj9JT2XyuNXy4f98V5NXxg'\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "balances", "model": "{{ get_where_subquery(ref('helius_apis__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_helius_apis__parse_transactions_status_200.71053900da": {"database": "SUI", "schema": "test_helius_apis", "name": "test_helius_apis__parse_transactions_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_helius_apis__parse_transactions_status_200.sql", "original_file_path": "models/deploy/marketplace/helius/helius_apis__helius_utils.yml", "unique_id": "test.livequery_models.test_helius_apis__parse_transactions_status_200.71053900da", "fqn": ["livequery_models", "deploy", "marketplace", "helius", "test_helius_apis__parse_transactions_status_200"], "alias": "parse_transactions_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.0452707, "relation_name": "SUI.test_helius_apis.parse_transactions_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "helius_apis__helius_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.helius_apis__helius_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/helius/helius_apis__helius_utils.yml/test_helius_apis__parse_transactions_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n),  __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_apis' as schema_-- depends_on: __dbt__cte__helius_utils\n) ,\ntest AS\n(\n    SELECT\n        'parse.parse_transactions' AS test_name\n        ,['mainnet' , [\n  '5u5S6yWN5wJkEDr3hKeqF3Y8nWcyWaZDboEnpfUuAw1zcvbvevs58rEfCpN6VkfxaS4N8RCMkBcyhxBFs3eoL4U4',\n  '2bWLiRSA8GCh7UNEpiZdgsh2BMxZwKawk8ND4Z3iWrqDZE6JQk69n9WoCU9rKDrgWHw6qV25g8UBMJYddRJRHR9v'\n]] as parameters\n        ,SUI.parse.parse_transactions('mainnet' , [\n  '5u5S6yWN5wJkEDr3hKeqF3Y8nWcyWaZDboEnpfUuAw1zcvbvevs58rEfCpN6VkfxaS4N8RCMkBcyhxBFs3eoL4U4',\n  '2bWLiRSA8GCh7UNEpiZdgsh2BMxZwKawk8ND4Z3iWrqDZE6JQk69n9WoCU9rKDrgWHw6qV25g8UBMJYddRJRHR9v'\n]) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.parse.parse_transactions('mainnet' , [\n  '5u5S6yWN5wJkEDr3hKeqF3Y8nWcyWaZDboEnpfUuAw1zcvbvevs58rEfCpN6VkfxaS4N8RCMkBcyhxBFs3eoL4U4',\n  '2bWLiRSA8GCh7UNEpiZdgsh2BMxZwKawk8ND4Z3iWrqDZE6JQk69n9WoCU9rKDrgWHw6qV25g8UBMJYddRJRHR9v'\n])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.parse.parse_transactions('mainnet' , [\n  '5u5S6yWN5wJkEDr3hKeqF3Y8nWcyWaZDboEnpfUuAw1zcvbvevs58rEfCpN6VkfxaS4N8RCMkBcyhxBFs3eoL4U4',\n  '2bWLiRSA8GCh7UNEpiZdgsh2BMxZwKawk8ND4Z3iWrqDZE6JQk69n9WoCU9rKDrgWHw6qV25g8UBMJYddRJRHR9v'\n])\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.helius_utils__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_utils' as schema_\n)"}, {"id": "model.livequery_models.helius_apis__helius_utils", "sql": " __dbt__cte__helius_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'helius_apis' as schema_-- depends_on: __dbt__cte__helius_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "parse_transactions", "file_key_name": "models.helius_apis__helius_utils", "attached_node": "model.livequery_models.helius_apis__helius_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'mainnet' , [\n  '5u5S6yWN5wJkEDr3hKeqF3Y8nWcyWaZDboEnpfUuAw1zcvbvevs58rEfCpN6VkfxaS4N8RCMkBcyhxBFs3eoL4U4',\n  '2bWLiRSA8GCh7UNEpiZdgsh2BMxZwKawk8ND4Z3iWrqDZE6JQk69n9WoCU9rKDrgWHw6qV25g8UBMJYddRJRHR9v'\n]\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "parse_transactions", "model": "{{ get_where_subquery(ref('helius_apis__helius_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_espn__get_status_200.b4f84cc829": {"database": "SUI", "schema": "test_espn", "name": "test_espn__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_espn__get_status_200.sql", "original_file_path": "models/deploy/marketplace/espn/espn__.yml", "unique_id": "test.livequery_models.test_espn__get_status_200.b4f84cc829", "fqn": ["livequery_models", "deploy", "marketplace", "espn", "test_espn__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.0513074, "relation_name": "SUI.test_espn.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "espn__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.espn__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/espn/espn__.yml/test_espn__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'espn' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['http://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard' , {}] as parameters\n        ,SUI.get.get('http://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard' , {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('http://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('http://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.espn__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'espn' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.espn__", "attached_node": "model.livequery_models.espn__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'http://site.api.espn.com/apis/site/v2/sports/football/college-football/scoreboard' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('espn__')) }}"}, "namespace": null}}, "test.livequery_models.test_github_utils__octocat_status_200.3573395088": {"database": "SUI", "schema": "test_github_utils", "name": "test_github_utils__octocat_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_github_utils__octocat_status_200.sql", "original_file_path": "models/deploy/marketplace/github/github_utils__github_utils.yml", "unique_id": "test.livequery_models.test_github_utils__octocat_status_200.3573395088", "fqn": ["livequery_models", "deploy", "marketplace", "github", "test_github_utils__octocat_status_200"], "alias": "octocat_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.057404, "relation_name": "SUI.test_github_utils.octocat_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "github_utils__github_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.github_utils__github_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/github/github_utils__github_utils.yml/test_github_utils__octocat_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'github_utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'octocat.octocat' AS test_name\n        ,[] as parameters\n        ,SUI.octocat.octocat() AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.octocat.octocat()\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.octocat.octocat()\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.github_utils__github_utils", "sql": " __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'github_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "octocat", "file_key_name": "models.github_utils__github_utils", "attached_node": "model.livequery_models.github_utils__github_utils", "test_metadata": {"name": "test_udf", "kwargs": {"assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "octocat", "model": "{{ get_where_subquery(ref('github_utils__github_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_github_actions__workflows_status_200.1cc531bd94": {"database": "SUI", "schema": "test_github_actions", "name": "test_github_actions__workflows_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_github_actions__workflows_status_200.sql", "original_file_path": "models/deploy/marketplace/github/github_actions__github_utils.yml", "unique_id": "test.livequery_models.test_github_actions__workflows_status_200.1cc531bd94", "fqn": ["livequery_models", "deploy", "marketplace", "github", "test_github_actions__workflows_status_200"], "alias": "workflows_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.0641859, "relation_name": "SUI.test_github_actions.workflows_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "github_actions__github_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.github_actions__github_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/github/github_actions__github_utils.yml/test_github_actions__workflows_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'github_utils' as schema_\n),  __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__github_utils\nSELECT 'github_actions' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'workflows.workflows' AS test_name\n        ,['FlipsideCrypto', 'admin-models'] as parameters\n        ,SUI.workflows.workflows('FlipsideCrypto', 'admin-models') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.workflows.workflows('FlipsideCrypto', 'admin-models')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.workflows.workflows('FlipsideCrypto', 'admin-models')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.github_utils__github_utils", "sql": " __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'github_utils' as schema_\n)"}, {"id": "model.livequery_models.github_actions__github_utils", "sql": " __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__github_utils\nSELECT 'github_actions' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "workflows", "file_key_name": "models.github_actions__github_utils", "attached_node": "model.livequery_models.github_actions__github_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'FlipsideCrypto', 'admin-models'\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "workflows", "model": "{{ get_where_subquery(ref('github_actions__github_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_github_actions__runs_status_200.2d145a41cb": {"database": "SUI", "schema": "test_github_actions", "name": "test_github_actions__runs_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_github_actions__runs_status_200.sql", "original_file_path": "models/deploy/marketplace/github/github_actions__github_utils.yml", "unique_id": "test.livequery_models.test_github_actions__runs_status_200.2d145a41cb", "fqn": ["livequery_models", "deploy", "marketplace", "github", "test_github_actions__runs_status_200"], "alias": "runs_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.0698912, "relation_name": "SUI.test_github_actions.runs_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "github_actions__github_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.github_actions__github_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/github/github_actions__github_utils.yml/test_github_actions__runs_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'github_utils' as schema_\n),  __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__github_utils\nSELECT 'github_actions' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'runs.runs' AS test_name\n        ,['FlipsideCrypto', 'admin-models', {}] as parameters\n        ,SUI.runs.runs('FlipsideCrypto', 'admin-models', {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.runs.runs('FlipsideCrypto', 'admin-models', {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.runs.runs('FlipsideCrypto', 'admin-models', {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.github_utils__github_utils", "sql": " __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'github_utils' as schema_\n)"}, {"id": "model.livequery_models.github_actions__github_utils", "sql": " __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__github_utils\nSELECT 'github_actions' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "runs", "file_key_name": "models.github_actions__github_utils", "attached_node": "model.livequery_models.github_actions__github_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'FlipsideCrypto', 'admin-models', {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "runs", "model": "{{ get_where_subquery(ref('github_actions__github_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_github_actions__workflow_runs_status_200.abcfd5d553": {"database": "SUI", "schema": "test_github_actions", "name": "test_github_actions__workflow_runs_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_github_actions__workflow_runs_status_200.sql", "original_file_path": "models/deploy/marketplace/github/github_actions__github_utils.yml", "unique_id": "test.livequery_models.test_github_actions__workflow_runs_status_200.abcfd5d553", "fqn": ["livequery_models", "deploy", "marketplace", "github", "test_github_actions__workflow_runs_status_200"], "alias": "workflow_runs_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.075256, "relation_name": "SUI.test_github_actions.workflow_runs_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "github_actions__github_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.github_actions__github_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/github/github_actions__github_utils.yml/test_github_actions__workflow_runs_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'github_utils' as schema_\n),  __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__github_utils\nSELECT 'github_actions' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'workflow.workflow_runs' AS test_name\n        ,['FlipsideCrypto', 'admin-models', 'dbt_run_dev_refresh.yml', {}] as parameters\n        ,SUI.workflow.workflow_runs('FlipsideCrypto', 'admin-models', 'dbt_run_dev_refresh.yml', {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.workflow.workflow_runs('FlipsideCrypto', 'admin-models', 'dbt_run_dev_refresh.yml', {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.workflow.workflow_runs('FlipsideCrypto', 'admin-models', 'dbt_run_dev_refresh.yml', {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.github_utils__github_utils", "sql": " __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'github_utils' as schema_\n)"}, {"id": "model.livequery_models.github_actions__github_utils", "sql": " __dbt__cte__github_utils as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__github_utils\nSELECT 'github_actions' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "workflow_runs", "file_key_name": "models.github_actions__github_utils", "attached_node": "model.livequery_models.github_actions__github_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'FlipsideCrypto', 'admin-models', 'dbt_run_dev_refresh.yml', {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "workflow_runs", "model": "{{ get_where_subquery(ref('github_actions__github_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_transpose__get_status_200.8721d94682": {"database": "SUI", "schema": "test_transpose", "name": "test_transpose__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_transpose__get_status_200.sql", "original_file_path": "models/deploy/marketplace/transpose/transpose__.yml", "unique_id": "test.livequery_models.test_transpose__get_status_200.8721d94682", "fqn": ["livequery_models", "deploy", "marketplace", "transpose", "test_transpose__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.0814233, "relation_name": "SUI.test_transpose.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "transpose__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.transpose__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/transpose/transpose__.yml/test_transpose__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'transpose' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['/ens/ens-records-by-name' , {'chain_id': 'ethereum','ens_names': 'vitalik.eth'}] as parameters\n        ,SUI.get.get('/ens/ens-records-by-name' , {'chain_id': 'ethereum','ens_names': 'vitalik.eth'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/ens/ens-records-by-name' , {'chain_id': 'ethereum','ens_names': 'vitalik.eth'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/ens/ens-records-by-name' , {'chain_id': 'ethereum','ens_names': 'vitalik.eth'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.transpose__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'transpose' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.transpose__", "attached_node": "model.livequery_models.transpose__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/ens/ens-records-by-name' , {'chain_id': 'ethereum','ens_names': 'vitalik.eth'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('transpose__')) }}"}, "namespace": null}}, "test.livequery_models.test_solscan_public_api_get__get_status_200.388381be71": {"database": "SUI", "schema": "test_solscan_public_api_get", "name": "test_solscan_public_api_get__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_solscan_public_api_get__get_status_200.sql", "original_file_path": "models/deploy/marketplace/solscan/solscan__.yml", "unique_id": "test.livequery_models.test_solscan_public_api_get__get_status_200.388381be71", "fqn": ["livequery_models", "deploy", "marketplace", "solscan", "test_solscan_public_api_get__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.087874, "relation_name": "SUI.test_solscan_public_api_get.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "solscan__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.solscan__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/solscan/solscan__.yml/test_solscan_public_api_get__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'solscan' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.public_api_get' AS test_name\n        ,['/chaininfo' , {}] as parameters\n        ,SUI.get.public_api_get('/chaininfo' , {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.public_api_get('/chaininfo' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.public_api_get('/chaininfo' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.solscan__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'solscan' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "public_api_get", "file_key_name": "models.solscan__", "attached_node": "model.livequery_models.solscan__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/chaininfo' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "public_api_get", "model": "{{ get_where_subquery(ref('solscan__')) }}"}, "namespace": null}}, "test.livequery_models.test_allday__graphql_status_200.8cfd62f9a1": {"database": "SUI", "schema": "test_allday", "name": "test_allday__graphql_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_allday__graphql_status_200.sql", "original_file_path": "models/deploy/marketplace/allday/allday__.yml", "unique_id": "test.livequery_models.test_allday__graphql_status_200.8cfd62f9a1", "fqn": ["livequery_models", "deploy", "marketplace", "allday", "test_allday__graphql_status_200"], "alias": "graphql_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.0941007, "relation_name": "SUI.test_allday.graphql_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "allday__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.allday__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/allday/allday__.yml/test_allday__graphql_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'allday' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'graphql.graphql' AS test_name\n        ,[{\n  'query': '{\n    searchPlays(input: {filters: {byFlowIDs: [\"1666\"]}}){\n    plays {\n          id\n          flowID\n          metadata {\n              description\n              playerID\n              playTypeV2\n              classification\n              week\n              season\n              playerFullName\n              playerPosition\n              playerDraftTeam\n              gameDate\n              teamName\n          }\n      }\n  }',\n  'variables': '{}'\n}] as parameters\n        ,SUI.graphql.graphql({\n  'query': '{\n    searchPlays(input: {filters: {byFlowIDs: [\"1666\"]}}){\n    plays {\n          id\n          flowID\n          metadata {\n              description\n              playerID\n              playTypeV2\n              classification\n              week\n              season\n              playerFullName\n              playerPosition\n              playerDraftTeam\n              gameDate\n              teamName\n          }\n      }\n  }',\n  'variables': '{}'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.graphql.graphql({\n  'query': '{\n    searchPlays(input: {filters: {byFlowIDs: [\"1666\"]}}){\n    plays {\n          id\n          flowID\n          metadata {\n              description\n              playerID\n              playTypeV2\n              classification\n              week\n              season\n              playerFullName\n              playerPosition\n              playerDraftTeam\n              gameDate\n              teamName\n          }\n      }\n  }',\n  'variables': '{}'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.graphql.graphql({\n  'query': '{\n    searchPlays(input: {filters: {byFlowIDs: [\"1666\"]}}){\n    plays {\n          id\n          flowID\n          metadata {\n              description\n              playerID\n              playTypeV2\n              classification\n              week\n              season\n              playerFullName\n              playerPosition\n              playerDraftTeam\n              gameDate\n              teamName\n          }\n      }\n  }',\n  'variables': '{}'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.allday__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'allday' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "graphql", "file_key_name": "models.allday__", "attached_node": "model.livequery_models.allday__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'query': '{\n    searchPlays(input: {filters: {byFlowIDs: [\"1666\"]}}){\n    plays {\n          id\n          flowID\n          metadata {\n              description\n              playerID\n              playTypeV2\n              classification\n              week\n              season\n              playerFullName\n              playerPosition\n              playerDraftTeam\n              gameDate\n              teamName\n          }\n      }\n  }',\n  'variables': '{}'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "graphql", "model": "{{ get_where_subquery(ref('allday__')) }}"}, "namespace": null}}, "test.livequery_models.test_reservoir__get_status_200.cb905ea233": {"database": "SUI", "schema": "test_reservoir", "name": "test_reservoir__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_reservoir__get_status_200.sql", "original_file_path": "models/deploy/marketplace/reservoir/reservoir__.yml", "unique_id": "test.livequery_models.test_reservoir__get_status_200.cb905ea233", "fqn": ["livequery_models", "deploy", "marketplace", "reservoir", "test_reservoir__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.100342, "relation_name": "SUI.test_reservoir.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "reservoir__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.reservoir__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/reservoir/reservoir__.yml/test_reservoir__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'reservoir' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['/tokens/floor/v1' , {'collection': '0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63'}] as parameters\n        ,SUI.get.get('/tokens/floor/v1' , {'collection': '0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/tokens/floor/v1' , {'collection': '0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/tokens/floor/v1' , {'collection': '0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.reservoir__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'reservoir' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.reservoir__", "attached_node": "model.livequery_models.reservoir__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/tokens/floor/v1' , {'collection': '0x8d04a8c79ceb0889bdd12acdf3fa9d207ed3ff63'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('reservoir__')) }}"}, "namespace": null}}, "test.livequery_models.test_bitquery__graphql_status_200.11917beb18": {"database": "SUI", "schema": "test_bitquery", "name": "test_bitquery__graphql_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_bitquery__graphql_status_200.sql", "original_file_path": "models/deploy/marketplace/bitquery/bitquery__.yml", "unique_id": "test.livequery_models.test_bitquery__graphql_status_200.11917beb18", "fqn": ["livequery_models", "deploy", "marketplace", "bitquery", "test_bitquery__graphql_status_200"], "alias": "graphql_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.1066284, "relation_name": "SUI.test_bitquery.graphql_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "bitquery__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.bitquery__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/bitquery/bitquery__.yml/test_bitquery__graphql_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'bitquery' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'graphql.graphql' AS test_name\n        ,[{\n  'query': '{\n    ethereum( network: bsc ) {\n      dexTrades(\n        options: {limit: 1}\n        baseCurrency: {is: \"0x6679eB24F59dFe111864AEc72B443d1Da666B360\"}\n        quoteCurrency: {is: \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\"}\n      ) {\n        buyAmount\n        buyAmountInUsd: buyAmount(in: USD)\n        buyCurrency {\n          symbol\n          address\n        }\n        sellAmount\n        sellCurrency {\n          symbol\n          address\n        }\n        tradeAmount(in: USD)\n      }\n    }\n  }',\n  'variables': '{}'\n}] as parameters\n        ,SUI.graphql.graphql({\n  'query': '{\n    ethereum( network: bsc ) {\n      dexTrades(\n        options: {limit: 1}\n        baseCurrency: {is: \"0x6679eB24F59dFe111864AEc72B443d1Da666B360\"}\n        quoteCurrency: {is: \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\"}\n      ) {\n        buyAmount\n        buyAmountInUsd: buyAmount(in: USD)\n        buyCurrency {\n          symbol\n          address\n        }\n        sellAmount\n        sellCurrency {\n          symbol\n          address\n        }\n        tradeAmount(in: USD)\n      }\n    }\n  }',\n  'variables': '{}'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.graphql.graphql({\n  'query': '{\n    ethereum( network: bsc ) {\n      dexTrades(\n        options: {limit: 1}\n        baseCurrency: {is: \"0x6679eB24F59dFe111864AEc72B443d1Da666B360\"}\n        quoteCurrency: {is: \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\"}\n      ) {\n        buyAmount\n        buyAmountInUsd: buyAmount(in: USD)\n        buyCurrency {\n          symbol\n          address\n        }\n        sellAmount\n        sellCurrency {\n          symbol\n          address\n        }\n        tradeAmount(in: USD)\n      }\n    }\n  }',\n  'variables': '{}'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.graphql.graphql({\n  'query': '{\n    ethereum( network: bsc ) {\n      dexTrades(\n        options: {limit: 1}\n        baseCurrency: {is: \"0x6679eB24F59dFe111864AEc72B443d1Da666B360\"}\n        quoteCurrency: {is: \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\"}\n      ) {\n        buyAmount\n        buyAmountInUsd: buyAmount(in: USD)\n        buyCurrency {\n          symbol\n          address\n        }\n        sellAmount\n        sellCurrency {\n          symbol\n          address\n        }\n        tradeAmount(in: USD)\n      }\n    }\n  }',\n  'variables': '{}'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.bitquery__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'bitquery' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "graphql", "file_key_name": "models.bitquery__", "attached_node": "model.livequery_models.bitquery__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'query': '{\n    ethereum( network: bsc ) {\n      dexTrades(\n        options: {limit: 1}\n        baseCurrency: {is: \"0x6679eB24F59dFe111864AEc72B443d1Da666B360\"}\n        quoteCurrency: {is: \"0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c\"}\n      ) {\n        buyAmount\n        buyAmountInUsd: buyAmount(in: USD)\n        buyCurrency {\n          symbol\n          address\n        }\n        sellAmount\n        sellCurrency {\n          symbol\n          address\n        }\n        tradeAmount(in: USD)\n      }\n    }\n  }',\n  'variables': '{}'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "graphql", "model": "{{ get_where_subquery(ref('bitquery__')) }}"}, "namespace": null}}, "test.livequery_models.test_topshot__graphql_status_200.fb93e3b220": {"database": "SUI", "schema": "test_topshot", "name": "test_topshot__graphql_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_topshot__graphql_status_200.sql", "original_file_path": "models/deploy/marketplace/topshot/topshot__.yml", "unique_id": "test.livequery_models.test_topshot__graphql_status_200.fb93e3b220", "fqn": ["livequery_models", "deploy", "marketplace", "topshot", "test_topshot__graphql_status_200"], "alias": "graphql_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.1130662, "relation_name": "SUI.test_topshot.graphql_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "topshot__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.topshot__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/topshot/topshot__.yml/test_topshot__graphql_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'topshot' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'graphql.graphql' AS test_name\n        ,[{\n  'query': '\n    query {\n      getMintedMoment (momentId: 5) {\n          data {\n              id\n          }\n      }\n  }\n}',\n  'variables': '{}'\n}] as parameters\n        ,SUI.graphql.graphql({\n  'query': '\n    query {\n      getMintedMoment (momentId: 5) {\n          data {\n              id\n          }\n      }\n  }\n}',\n  'variables': '{}'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.graphql.graphql({\n  'query': '\n    query {\n      getMintedMoment (momentId: 5) {\n          data {\n              id\n          }\n      }\n  }\n}',\n  'variables': '{}'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.topshot__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'topshot' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "graphql", "file_key_name": "models.topshot__", "attached_node": "model.livequery_models.topshot__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'query': '\n    query {\n      getMintedMoment (momentId: 5) {\n          data {\n              id\n          }\n      }\n  }\n}',\n  'variables': '{}'\n}\n", "assertions": ["result:status_code = 200"], "column_name": "graphql", "model": "{{ get_where_subquery(ref('topshot__')) }}"}, "namespace": null}}, "test.livequery_models.test_cmc__get_status_200.1e44de8c9e": {"database": "SUI", "schema": "test_cmc", "name": "test_cmc__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_cmc__get_status_200.sql", "original_file_path": "models/deploy/marketplace/cmc/cmc__.yml", "unique_id": "test.livequery_models.test_cmc__get_status_200.1e44de8c9e", "fqn": ["livequery_models", "deploy", "marketplace", "cmc", "test_cmc__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.1188283, "relation_name": "SUI.test_cmc.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "cmc__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.cmc__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/cmc/cmc__.yml/test_cmc__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'cmc' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['/v2/cryptocurrency/ohlcv/historical' , {'interval': 'hourly', 'time_period': 'hourly', 'time_start': DATE_PART('EPOCH_SECOND', DATEADD('hour', -2, CURRENT_TIMESTAMP())), 'time_end': DATE_PART('EPOCH_SECOND', DATEADD('hour', -1, CURRENT_TIMESTAMP())), 'id': '15478,15479'}] as parameters\n        ,SUI.get.get('/v2/cryptocurrency/ohlcv/historical' , {'interval': 'hourly', 'time_period': 'hourly', 'time_start': DATE_PART('EPOCH_SECOND', DATEADD('hour', -2, CURRENT_TIMESTAMP())), 'time_end': DATE_PART('EPOCH_SECOND', DATEADD('hour', -1, CURRENT_TIMESTAMP())), 'id': '15478,15479'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/v2/cryptocurrency/ohlcv/historical' , {'interval': 'hourly', 'time_period': 'hourly', 'time_start': DATE_PART('EPOCH_SECOND', DATEADD('hour', -2, CURRENT_TIMESTAMP())), 'time_end': DATE_PART('EPOCH_SECOND', DATEADD('hour', -1, CURRENT_TIMESTAMP())), 'id': '15478,15479'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/v2/cryptocurrency/ohlcv/historical' , {'interval': 'hourly', 'time_period': 'hourly', 'time_start': DATE_PART('EPOCH_SECOND', DATEADD('hour', -2, CURRENT_TIMESTAMP())), 'time_end': DATE_PART('EPOCH_SECOND', DATEADD('hour', -1, CURRENT_TIMESTAMP())), 'id': '15478,15479'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.cmc__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'cmc' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.cmc__", "attached_node": "model.livequery_models.cmc__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v2/cryptocurrency/ohlcv/historical' , {'interval': 'hourly', 'time_period': 'hourly', 'time_start': DATE_PART('EPOCH_SECOND', DATEADD('hour', -2, CURRENT_TIMESTAMP())), 'time_end': DATE_PART('EPOCH_SECOND', DATEADD('hour', -1, CURRENT_TIMESTAMP())), 'id': '15478,15479'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('cmc__')) }}"}, "namespace": null}}, "test.livequery_models.test_strangelove__get_status_200.0a58865924": {"database": "SUI", "schema": "test_strangelove", "name": "test_strangelove__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_strangelove__get_status_200.sql", "original_file_path": "models/deploy/marketplace/strangelove/strangelove__.yml", "unique_id": "test.livequery_models.test_strangelove__get_status_200.0a58865924", "fqn": ["livequery_models", "deploy", "marketplace", "strangelove", "test_strangelove__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.125552, "relation_name": "SUI.test_strangelove.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "strangelove__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.strangelove__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/strangelove/strangelove__.yml/test_strangelove__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'strangelove' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash' , {\n  'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n}] as parameters\n        ,SUI.get.get('https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash' , {\n  'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash' , {\n  'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash' , {\n  'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.strangelove__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'strangelove' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.strangelove__", "attached_node": "model.livequery_models.strangelove__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://api.strange.love/cosmoshub/mainnet/rpc/block_by_hash' , {\n  'blockHash': '0xD70952032620CC4E2737EB8AC379806359D8E0B17B0488F627997A0B043ABDED'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('strangelove__')) }}"}, "namespace": null}}, "test.livequery_models.test_subquery__graphql_status_200.b25433a976": {"database": "SUI", "schema": "test_subquery", "name": "test_subquery__graphql_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_subquery__graphql_status_200.sql", "original_file_path": "models/deploy/marketplace/subquery/subquery__.yml", "unique_id": "test.livequery_models.test_subquery__graphql_status_200.b25433a976", "fqn": ["livequery_models", "deploy", "marketplace", "subquery", "test_subquery__graphql_status_200"], "alias": "graphql_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.1326845, "relation_name": "SUI.test_subquery.graphql_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "subquery__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.subquery__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/subquery/subquery__.yml/test_subquery__graphql_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'subquery' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'graphql.graphql' AS test_name\n        ,['subquery-mainnet', {\n  'query': '{\n    _pois(first: 5) {\n      nodes {\n        id\n        chainBlockHash\n        hash\n        parentHash\n        createdAt\n        operationHashRoot\n        nodeId\n        updatedAt\n      }\n    }\n  }'\n}] as parameters\n        ,SUI.graphql.graphql('subquery-mainnet', {\n  'query': '{\n    _pois(first: 5) {\n      nodes {\n        id\n        chainBlockHash\n        hash\n        parentHash\n        createdAt\n        operationHashRoot\n        nodeId\n        updatedAt\n      }\n    }\n  }'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.graphql.graphql('subquery-mainnet', {\n  'query': '{\n    _pois(first: 5) {\n      nodes {\n        id\n        chainBlockHash\n        hash\n        parentHash\n        createdAt\n        operationHashRoot\n        nodeId\n        updatedAt\n      }\n    }\n  }'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.graphql.graphql('subquery-mainnet', {\n  'query': '{\n    _pois(first: 5) {\n      nodes {\n        id\n        chainBlockHash\n        hash\n        parentHash\n        createdAt\n        operationHashRoot\n        nodeId\n        updatedAt\n      }\n    }\n  }'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.subquery__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'subquery' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "graphql", "file_key_name": "models.subquery__", "attached_node": "model.livequery_models.subquery__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'subquery-mainnet', {\n  'query': '{\n    _pois(first: 5) {\n      nodes {\n        id\n        chainBlockHash\n        hash\n        parentHash\n        createdAt\n        operationHashRoot\n        nodeId\n        updatedAt\n      }\n    }\n  }'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "graphql", "model": "{{ get_where_subquery(ref('subquery__')) }}"}, "namespace": null}}, "test.livequery_models.test_nftscan__get_status_200.33868e0f0d": {"database": "SUI", "schema": "test_nftscan", "name": "test_nftscan__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_nftscan__get_status_200.sql", "original_file_path": "models/deploy/marketplace/nftscan/nftscan__.yml", "unique_id": "test.livequery_models.test_nftscan__get_status_200.33868e0f0d", "fqn": ["livequery_models", "deploy", "marketplace", "nftscan", "test_nftscan__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.1389086, "relation_name": "SUI.test_nftscan.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "nftscan__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.nftscan__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/nftscan/nftscan__.yml/test_nftscan__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'nftscan' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['https://restapi.nftscan.com/api/v2/account/own/0xca1257ade6f4fa6c6834fdc42e030be6c0f5a813' , {'erc_type': 'erc721'}] as parameters\n        ,SUI.get.get('https://restapi.nftscan.com/api/v2/account/own/0xca1257ade6f4fa6c6834fdc42e030be6c0f5a813' , {'erc_type': 'erc721'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('https://restapi.nftscan.com/api/v2/account/own/0xca1257ade6f4fa6c6834fdc42e030be6c0f5a813' , {'erc_type': 'erc721'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('https://restapi.nftscan.com/api/v2/account/own/0xca1257ade6f4fa6c6834fdc42e030be6c0f5a813' , {'erc_type': 'erc721'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.nftscan__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'nftscan' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.nftscan__", "attached_node": "model.livequery_models.nftscan__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'https://restapi.nftscan.com/api/v2/account/own/0xca1257ade6f4fa6c6834fdc42e030be6c0f5a813' , {'erc_type': 'erc721'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('nftscan__')) }}"}, "namespace": null}}, "test.livequery_models.test_dappradar__get_status_200.979ea475dc": {"database": "SUI", "schema": "test_dappradar", "name": "test_dappradar__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_dappradar__get_status_200.sql", "original_file_path": "models/deploy/marketplace/dappradar/dappradar__.yml", "unique_id": "test.livequery_models.test_dappradar__get_status_200.979ea475dc", "fqn": ["livequery_models", "deploy", "marketplace", "dappradar", "test_dappradar__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.145314, "relation_name": "SUI.test_dappradar.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dappradar__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.dappradar__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/dappradar/dappradar__.yml/test_dappradar__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'dappradar' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['/v2/defi/chains' , {}] as parameters\n        ,SUI.get.get('/v2/defi/chains' , {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/v2/defi/chains' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/v2/defi/chains' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.dappradar__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'dappradar' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.dappradar__", "attached_node": "model.livequery_models.dappradar__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v2/defi/chains' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('dappradar__')) }}"}, "namespace": null}}, "test.livequery_models.test_opensea__get_status_200.5de63cfbb1": {"database": "SUI", "schema": "test_opensea", "name": "test_opensea__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_opensea__get_status_200.sql", "original_file_path": "models/deploy/marketplace/opensea/opensea__.yml", "unique_id": "test.livequery_models.test_opensea__get_status_200.5de63cfbb1", "fqn": ["livequery_models", "deploy", "marketplace", "opensea", "test_opensea__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.1517074, "relation_name": "SUI.test_opensea.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "opensea__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.opensea__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/opensea/opensea__.yml/test_opensea__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'opensea' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['/health' , {}] as parameters\n        ,SUI.get.get('/health' , {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/health' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/health' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.opensea__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'opensea' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.opensea__", "attached_node": "model.livequery_models.opensea__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/health' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('opensea__')) }}"}, "namespace": null}}, "test.livequery_models.test_snapshot__query_status_200.35a2cffb40": {"database": "SUI", "schema": "test_snapshot", "name": "test_snapshot__query_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_snapshot__query_status_200.sql", "original_file_path": "models/deploy/marketplace/snapshot/snapshot__ .yml", "unique_id": "test.livequery_models.test_snapshot__query_status_200.35a2cffb40", "fqn": ["livequery_models", "deploy", "marketplace", "snapshot", "test_snapshot__query_status_200"], "alias": "query_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.157729, "relation_name": "SUI.test_snapshot.query_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "snapshot__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.snapshot__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/snapshot/snapshot__ .yml/test_snapshot__query_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'snapshot' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'query.query' AS test_name\n        ,[{\n  'query': '{\n      space(id: \"snapshot.dcl.eth\") {\n        id\n        name\n        members\n    }\n  }',\n  'variables': {}\n}] as parameters\n        ,SUI.query.query({\n  'query': '{\n      space(id: \"snapshot.dcl.eth\") {\n        id\n        name\n        members\n    }\n  }',\n  'variables': {}\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.query.query({\n  'query': '{\n      space(id: \"snapshot.dcl.eth\") {\n        id\n        name\n        members\n    }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.query.query({\n  'query': '{\n      space(id: \"snapshot.dcl.eth\") {\n        id\n        name\n        members\n    }\n  }',\n  'variables': {}\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.snapshot__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'snapshot' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "query", "file_key_name": "models.snapshot__", "attached_node": "model.livequery_models.snapshot__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'query': '{\n      space(id: \"snapshot.dcl.eth\") {\n        id\n        name\n        members\n    }\n  }',\n  'variables': {}\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "query", "model": "{{ get_where_subquery(ref('snapshot__')) }}"}, "namespace": null}}, "test.livequery_models.test_footprint_utils__get_status_200_v2_protocol_info.4d260facf4": {"database": "SUI", "schema": "test_footprint_utils", "name": "test_footprint_utils__get_status_200_v2_protocol_info", "resource_type": "test", "package_name": "livequery_models", "path": "test_footprint_utils__get_status_200_v2_protocol_info.sql", "original_file_path": "models/deploy/marketplace/footprint/footprint_utils__footprint_utils.yml", "unique_id": "test.livequery_models.test_footprint_utils__get_status_200_v2_protocol_info.4d260facf4", "fqn": ["livequery_models", "deploy", "marketplace", "footprint", "test_footprint_utils__get_status_200_v2_protocol_info"], "alias": "get_status_200_v2_protocol_info", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.1638768, "relation_name": "SUI.test_footprint_utils.get_status_200_v2_protocol_info", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "footprint_utils__footprint_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.footprint_utils__footprint_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/footprint/footprint_utils__footprint_utils.yml/test_footprint_utils__get_status_200_v2_protocol_info.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__footprint_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'footprint_utils' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['/v3/protocol/getProtocolStatsHistory' , {\n    'chain': 'Polygon',\n    'protocol_slug': 'planet-ix',\n    'start_time': '2023-07-01',\n    'end_time': '2023-07-25'\n  }] as parameters\n        ,SUI.get.get('/v3/protocol/getProtocolStatsHistory' , {\n    'chain': 'Polygon',\n    'protocol_slug': 'planet-ix',\n    'start_time': '2023-07-01',\n    'end_time': '2023-07-25'\n  }) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/v3/protocol/getProtocolStatsHistory' , {\n    'chain': 'Polygon',\n    'protocol_slug': 'planet-ix',\n    'start_time': '2023-07-01',\n    'end_time': '2023-07-25'\n  })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/v3/protocol/getProtocolStatsHistory' , {\n    'chain': 'Polygon',\n    'protocol_slug': 'planet-ix',\n    'start_time': '2023-07-01',\n    'end_time': '2023-07-25'\n  })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.footprint_utils__footprint_utils", "sql": " __dbt__cte__footprint_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'footprint_utils' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.footprint_utils__footprint_utils", "attached_node": "model.livequery_models.footprint_utils__footprint_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v3/protocol/getProtocolStatsHistory' , {\n    'chain': 'Polygon',\n    'protocol_slug': 'planet-ix',\n    'start_time': '2023-07-01',\n    'end_time': '2023-07-25'\n  }\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('footprint_utils__footprint_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.3d5c91f8e2": {"database": "SUI", "schema": "test_quicknode_ethereum_tokens", "name": "test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.3d5c91f8e2", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200"], "alias": "get_token_metadata_by_contract_address_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.171665, "relation_name": "SUI.test_quicknode_ethereum_tokens.get_token_metadata_by_contract_address_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml/test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_token_metadata_by_contract_address' AS test_name\n        ,[{\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n}] as parameters\n        ,SUI.get.get_token_metadata_by_contract_address({\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_token_metadata_by_contract_address({\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_token_metadata_by_contract_address({\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_token_metadata_by_contract_address", "file_key_name": "models.quicknode_ethereum_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_metadata_by_contract_address", "model": "{{ get_where_subquery(ref('quicknode_ethereum_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.c34c43a92d": {"database": "SUI", "schema": "test_quicknode_ethereum_tokens", "name": "test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.c34c43a92d", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200"], "alias": "get_token_metadata_by_symbol_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.177137, "relation_name": "SUI.test_quicknode_ethereum_tokens.get_token_metadata_by_symbol_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml/test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_token_metadata_by_symbol' AS test_name\n        ,[{\n  'symbol': 'USDC'\n}] as parameters\n        ,SUI.get.get_token_metadata_by_symbol({\n  'symbol': 'USDC'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_token_metadata_by_symbol({\n  'symbol': 'USDC'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_token_metadata_by_symbol({\n  'symbol': 'USDC'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_token_metadata_by_symbol", "file_key_name": "models.quicknode_ethereum_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'symbol': 'USDC'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_metadata_by_symbol", "model": "{{ get_where_subquery(ref('quicknode_ethereum_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.29d4ecb431": {"database": "SUI", "schema": "test_quicknode_ethereum_tokens", "name": "test_quicknode_ethereum_tokens__get_transactions_by_address_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.29d4ecb431", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_tokens__get_transactions_by_address_status_200"], "alias": "get_transactions_by_address_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.1823447, "relation_name": "SUI.test_quicknode_ethereum_tokens.get_transactions_by_address_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml/test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_transactions_by_address' AS test_name\n        ,[{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n}] as parameters\n        ,SUI.get.get_transactions_by_address({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_transactions_by_address({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_transactions_by_address({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_transactions_by_address", "file_key_name": "models.quicknode_ethereum_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_transactions_by_address", "model": "{{ get_where_subquery(ref('quicknode_ethereum_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.9cda095850": {"database": "SUI", "schema": "test_quicknode_ethereum_tokens", "name": "test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.9cda095850", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200"], "alias": "get_wallet_token_balance_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.1877506, "relation_name": "SUI.test_quicknode_ethereum_tokens.get_wallet_token_balance_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml/test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_wallet_token_balance' AS test_name\n        ,[{\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n}] as parameters\n        ,SUI.get.get_wallet_token_balance({\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_wallet_token_balance({\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_wallet_token_balance({\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_wallet_token_balance", "file_key_name": "models.quicknode_ethereum_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_wallet_token_balance", "model": "{{ get_where_subquery(ref('quicknode_ethereum_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.990e59cd6c": {"database": "SUI", "schema": "test_quicknode_ethereum_tokens", "name": "test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.990e59cd6c", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200"], "alias": "get_wallet_token_transactions_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.192964, "relation_name": "SUI.test_quicknode_ethereum_tokens.get_wallet_token_transactions_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_tokens__quicknode_utils.yml/test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_wallet_token_transactions' AS test_name\n        ,[{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n}] as parameters\n        ,SUI.get.get_wallet_token_transactions({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_wallet_token_transactions({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_wallet_token_transactions({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_wallet_token_transactions", "file_key_name": "models.quicknode_ethereum_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_wallet_token_transactions", "model": "{{ get_where_subquery(ref('quicknode_ethereum_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.529daa7446": {"database": "SUI", "schema": "test_quicknode_polygon_tokens", "name": "test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.529daa7446", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200"], "alias": "get_token_metadata_by_contract_address_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.1993322, "relation_name": "SUI.test_quicknode_polygon_tokens.get_token_metadata_by_contract_address_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml/test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_token_metadata_by_contract_address' AS test_name\n        ,[{\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n}] as parameters\n        ,SUI.get.get_token_metadata_by_contract_address({\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_token_metadata_by_contract_address({\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_token_metadata_by_contract_address({\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_token_metadata_by_contract_address", "file_key_name": "models.quicknode_polygon_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'contract': '0x4d224452801ACEd8B2F0aebE155379bb5D594381'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_metadata_by_contract_address", "model": "{{ get_where_subquery(ref('quicknode_polygon_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.d60e37734e": {"database": "SUI", "schema": "test_quicknode_polygon_tokens", "name": "test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.d60e37734e", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200"], "alias": "get_token_metadata_by_symbol_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.2044778, "relation_name": "SUI.test_quicknode_polygon_tokens.get_token_metadata_by_symbol_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml/test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_token_metadata_by_symbol' AS test_name\n        ,[{\n  'symbol': 'USDC'\n}] as parameters\n        ,SUI.get.get_token_metadata_by_symbol({\n  'symbol': 'USDC'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_token_metadata_by_symbol({\n  'symbol': 'USDC'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_token_metadata_by_symbol({\n  'symbol': 'USDC'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_token_metadata_by_symbol", "file_key_name": "models.quicknode_polygon_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'symbol': 'USDC'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_token_metadata_by_symbol", "model": "{{ get_where_subquery(ref('quicknode_polygon_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_tokens__get_transactions_by_address_status_200.194093aade": {"database": "SUI", "schema": "test_quicknode_polygon_tokens", "name": "test_quicknode_polygon_tokens__get_transactions_by_address_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_tokens__get_transactions_by_address_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_tokens__get_transactions_by_address_status_200.194093aade", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_tokens__get_transactions_by_address_status_200"], "alias": "get_transactions_by_address_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.20939, "relation_name": "SUI.test_quicknode_polygon_tokens.get_transactions_by_address_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml/test_quicknode_polygon_tokens__get_transactions_by_address_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_transactions_by_address' AS test_name\n        ,[{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n}] as parameters\n        ,SUI.get.get_transactions_by_address({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_transactions_by_address({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_transactions_by_address({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_transactions_by_address", "file_key_name": "models.quicknode_polygon_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_transactions_by_address", "model": "{{ get_where_subquery(ref('quicknode_polygon_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.2bffddb733": {"database": "SUI", "schema": "test_quicknode_polygon_tokens", "name": "test_quicknode_polygon_tokens__get_wallet_token_balance_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.2bffddb733", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_tokens__get_wallet_token_balance_status_200"], "alias": "get_wallet_token_balance_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.214526, "relation_name": "SUI.test_quicknode_polygon_tokens.get_wallet_token_balance_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml/test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_wallet_token_balance' AS test_name\n        ,[{\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n}] as parameters\n        ,SUI.get.get_wallet_token_balance({\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_wallet_token_balance({\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_wallet_token_balance({\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_wallet_token_balance", "file_key_name": "models.quicknode_polygon_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'wallet': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045'\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_wallet_token_balance", "model": "{{ get_where_subquery(ref('quicknode_polygon_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.57669f1a96": {"database": "SUI", "schema": "test_quicknode_polygon_tokens", "name": "test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.57669f1a96", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200"], "alias": "get_wallet_token_transactions_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.219376, "relation_name": "SUI.test_quicknode_polygon_tokens.get_wallet_token_transactions_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_tokens__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_tokens__quicknode_utils.yml/test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_wallet_token_transactions' AS test_name\n        ,[{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n}] as parameters\n        ,SUI.get.get_wallet_token_transactions({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_wallet_token_transactions({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_wallet_token_transactions({\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_tokens' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_wallet_token_transactions", "file_key_name": "models.quicknode_polygon_tokens__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'address': '0xd8da6bf26964af9d7eed9e03e53415d37aa96045',\n  'contract': '0x95aD61b0a150d79219dCF64E1E6Cc01f0B64C4cE',\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_wallet_token_transactions", "model": "{{ get_where_subquery(ref('quicknode_polygon_tokens__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.5a3e5bd53e": {"database": "SUI", "schema": "test_quicknode_ethereum_nfts", "name": "test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.5a3e5bd53e", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200"], "alias": "fetch_nft_collection_details_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.2268336, "relation_name": "SUI.test_quicknode_ethereum_nfts.fetch_nft_collection_details_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml/test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'fetch.fetch_nft_collection_details' AS test_name\n        ,[{\n    'contracts': [\n      '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n      '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n      ]\n}] as parameters\n        ,SUI.fetch.fetch_nft_collection_details({\n    'contracts': [\n      '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n      '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n      ]\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nft_collection_details({\n    'contracts': [\n      '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n      '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n      ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nft_collection_details({\n    'contracts': [\n      '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n      '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n      ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nft_collection_details", "file_key_name": "models.quicknode_ethereum_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n    'contracts': [\n      '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n      '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n      ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nft_collection_details", "model": "{{ get_where_subquery(ref('quicknode_ethereum_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_status_200.e34b6fbe64": {"database": "SUI", "schema": "test_quicknode_ethereum_nfts", "name": "test_quicknode_ethereum_nfts__fetch_nfts_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_nfts__fetch_nfts_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_status_200.e34b6fbe64", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_nfts__fetch_nfts_status_200"], "alias": "fetch_nfts_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.232272, "relation_name": "SUI.test_quicknode_ethereum_nfts.fetch_nfts_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml/test_quicknode_ethereum_nfts__fetch_nfts_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'fetch.fetch_nfts' AS test_name\n        ,[{\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n}] as parameters\n        ,SUI.fetch.fetch_nfts({\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nfts({\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nfts({\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nfts", "file_key_name": "models.quicknode_ethereum_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts", "model": "{{ get_where_subquery(ref('quicknode_ethereum_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.ba7f5aeceb": {"database": "SUI", "schema": "test_quicknode_ethereum_nfts", "name": "test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.ba7f5aeceb", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200"], "alias": "fetch_nfts_by_collection_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.2375193, "relation_name": "SUI.test_quicknode_ethereum_nfts.fetch_nfts_by_collection_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml/test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'fetch.fetch_nfts_by_collection' AS test_name\n        ,[{\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}] as parameters\n        ,SUI.fetch.fetch_nfts_by_collection({\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nfts_by_collection({\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nfts_by_collection({\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nfts_by_collection", "file_key_name": "models.quicknode_ethereum_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts_by_collection", "model": "{{ get_where_subquery(ref('quicknode_ethereum_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.2e5143d642": {"database": "SUI", "schema": "test_quicknode_ethereum_nfts", "name": "test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.2e5143d642", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200"], "alias": "get_transfers_by_nft_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.2438087, "relation_name": "SUI.test_quicknode_ethereum_nfts.get_transfers_by_nft_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml/test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_transfers_by_nft' AS test_name\n        ,[{ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 }] as parameters\n        ,SUI.get.get_transfers_by_nft({ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 }) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_transfers_by_nft({ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_transfers_by_nft({ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_transfers_by_nft", "file_key_name": "models.quicknode_ethereum_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 }\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_transfers_by_nft", "model": "{{ get_where_subquery(ref('quicknode_ethereum_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.34afbca510": {"database": "SUI", "schema": "test_quicknode_ethereum_nfts", "name": "test_quicknode_ethereum_nfts__verify_nfts_owner_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.34afbca510", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_ethereum_nfts__verify_nfts_owner_status_200"], "alias": "verify_nfts_owner_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.2491455, "relation_name": "SUI.test_quicknode_ethereum_nfts.verify_nfts_owner_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_ethereum_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_ethereum_nfts__quicknode_utils.yml/test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'verify.verify_nfts_owner' AS test_name\n        ,[{ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n}] as parameters\n        ,SUI.verify.verify_nfts_owner({ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.verify.verify_nfts_owner({ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.verify.verify_nfts_owner({ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_ethereum_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "verify_nfts_owner", "file_key_name": "models.quicknode_ethereum_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "verify_nfts_owner", "model": "{{ get_where_subquery(ref('quicknode_ethereum_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.b69737052b": {"database": "SUI", "schema": "test_quicknode_polygon_nfts", "name": "test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.b69737052b", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200"], "alias": "fetch_nft_collection_details_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.2553198, "relation_name": "SUI.test_quicknode_polygon_nfts.fetch_nft_collection_details_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml/test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'fetch.fetch_nft_collection_details' AS test_name\n        ,[{ 'contracts': [\n  '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n  ]\n}] as parameters\n        ,SUI.fetch.fetch_nft_collection_details({ 'contracts': [\n  '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n  ]\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nft_collection_details({ 'contracts': [\n  '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nft_collection_details({ 'contracts': [\n  '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nft_collection_details", "file_key_name": "models.quicknode_polygon_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{ 'contracts': [\n  '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  '0x7Bd29408f11D2bFC23c34f18275bBf23bB716Bc7'\n  ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nft_collection_details", "model": "{{ get_where_subquery(ref('quicknode_polygon_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_status_200.2d1f2ae9d6": {"database": "SUI", "schema": "test_quicknode_polygon_nfts", "name": "test_quicknode_polygon_nfts__fetch_nfts_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_nfts__fetch_nfts_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_status_200.2d1f2ae9d6", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_nfts__fetch_nfts_status_200"], "alias": "fetch_nfts_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.2608075, "relation_name": "SUI.test_quicknode_polygon_nfts.fetch_nfts_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml/test_quicknode_polygon_nfts__fetch_nfts_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'fetch.fetch_nfts' AS test_name\n        ,[{\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n}] as parameters\n        ,SUI.fetch.fetch_nfts({\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nfts({\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nfts({\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nfts", "file_key_name": "models.quicknode_polygon_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10,\n  'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa',\n    '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D'\n    ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts", "model": "{{ get_where_subquery(ref('quicknode_polygon_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.8286191e06": {"database": "SUI", "schema": "test_quicknode_polygon_nfts", "name": "test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.8286191e06", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200"], "alias": "fetch_nfts_by_collection_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.2658253, "relation_name": "SUI.test_quicknode_polygon_nfts.fetch_nfts_by_collection_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml/test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'fetch.fetch_nfts_by_collection' AS test_name\n        ,[{\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}] as parameters\n        ,SUI.fetch.fetch_nfts_by_collection({\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nfts_by_collection({\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nfts_by_collection({\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nfts_by_collection", "file_key_name": "models.quicknode_polygon_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6',\n  'omitFields': [\n    'imageUrl',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts_by_collection", "model": "{{ get_where_subquery(ref('quicknode_polygon_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.2f6ba1e185": {"database": "SUI", "schema": "test_quicknode_polygon_nfts", "name": "test_quicknode_polygon_nfts__get_transfers_by_nft_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.2f6ba1e185", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_nfts__get_transfers_by_nft_status_200"], "alias": "get_transfers_by_nft_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.2707722, "relation_name": "SUI.test_quicknode_polygon_nfts.get_transfers_by_nft_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml/test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'get.get_transfers_by_nft' AS test_name\n        ,[{ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 }] as parameters\n        ,SUI.get.get_transfers_by_nft({ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 }) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_transfers_by_nft({ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_transfers_by_nft({ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 })\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_transfers_by_nft", "file_key_name": "models.quicknode_polygon_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{ 'collection': '0x60E4d786628Fea6478F785A6d7e704777c86a7c6', 'collectionTokenId': '1', 'page': 1, 'perPage': 10 }\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get_transfers_by_nft", "model": "{{ get_where_subquery(ref('quicknode_polygon_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_polygon_nfts__verify_nfts_owner_status_200.e87bb12c13": {"database": "SUI", "schema": "test_quicknode_polygon_nfts", "name": "test_quicknode_polygon_nfts__verify_nfts_owner_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_polygon_nfts__verify_nfts_owner_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_polygon_nfts__verify_nfts_owner_status_200.e87bb12c13", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_polygon_nfts__verify_nfts_owner_status_200"], "alias": "verify_nfts_owner_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.2760339, "relation_name": "SUI.test_quicknode_polygon_nfts.verify_nfts_owner_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_polygon_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_polygon_nfts__quicknode_utils.yml/test_quicknode_polygon_nfts__verify_nfts_owner_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'verify.verify_nfts_owner' AS test_name\n        ,[{ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n}] as parameters\n        ,SUI.verify.verify_nfts_owner({ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.verify.verify_nfts_owner({ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.verify.verify_nfts_owner({ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_polygon_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "verify_nfts_owner", "file_key_name": "models.quicknode_polygon_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{ 'wallet': '0x91b51c173a4bdaa1a60e234fc3f705a16d228740', 'contracts': [\n    '0x2106c00ac7da0a3430ae667879139e832307aeaa:3643',\n    '0xd07dc4262bcdbf85190c01c996b4c06a461d2430:133803'\n  ]\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "verify_nfts_owner", "model": "{{ get_where_subquery(ref('quicknode_polygon_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_status_200.94f0e0082e": {"database": "SUI", "schema": "test_quicknode_solana_nfts", "name": "test_quicknode_solana_nfts__fetch_nfts_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_solana_nfts__fetch_nfts_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_status_200.94f0e0082e", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_solana_nfts__fetch_nfts_status_200"], "alias": "fetch_nfts_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.2821832, "relation_name": "SUI.test_quicknode_solana_nfts.fetch_nfts_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_solana_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_solana_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.yml/test_quicknode_solana_nfts__fetch_nfts_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_solana_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'fetch.fetch_nfts' AS test_name\n        ,[{\n  'wallet': 'DcTmx4VLcf5euAB17nynax7g55xuB3XKBDyz1pudMcjW',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}] as parameters\n        ,SUI.fetch.fetch_nfts({\n  'wallet': 'DcTmx4VLcf5euAB17nynax7g55xuB3XKBDyz1pudMcjW',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nfts({\n  'wallet': 'DcTmx4VLcf5euAB17nynax7g55xuB3XKBDyz1pudMcjW',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nfts({\n  'wallet': 'DcTmx4VLcf5euAB17nynax7g55xuB3XKBDyz1pudMcjW',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_solana_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_solana_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nfts", "file_key_name": "models.quicknode_solana_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_solana_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'wallet': 'DcTmx4VLcf5euAB17nynax7g55xuB3XKBDyz1pudMcjW',\n  'omitFields': [\n    'provenance',\n    'traits'\n    ],\n  'page': 1,\n  'perPage': 10\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts", "model": "{{ get_where_subquery(ref('quicknode_solana_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.70f38f0e31": {"database": "SUI", "schema": "test_quicknode_solana_nfts", "name": "test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.sql", "original_file_path": "models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.yml", "unique_id": "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.70f38f0e31", "fqn": ["livequery_models", "deploy", "marketplace", "quicknode", "test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200"], "alias": "fetch_nfts_by_creator_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.2877655, "relation_name": "SUI.test_quicknode_solana_nfts.fetch_nfts_by_creator_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "quicknode_solana_nfts__quicknode_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.quicknode_solana_nfts__quicknode_utils"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/quicknode/quicknode_solana_nfts__quicknode_utils.yml/test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n),  __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_solana_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n) ,\ntest AS\n(\n    SELECT\n        'fetch.fetch_nfts_by_creator' AS test_name\n        ,[{\n  'creator': 'DznU28LgherhU2JwC2db3KmAeWPqoF9Yx2aVtNUudW6R',\n  'page': 1,\n  'perPage': 3\n}] as parameters\n        ,SUI.fetch.fetch_nfts_by_creator({\n  'creator': 'DznU28LgherhU2JwC2db3KmAeWPqoF9Yx2aVtNUudW6R',\n  'page': 1,\n  'perPage': 3\n}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nfts_by_creator({\n  'creator': 'DznU28LgherhU2JwC2db3KmAeWPqoF9Yx2aVtNUudW6R',\n  'page': 1,\n  'perPage': 3\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.fetch.fetch_nfts_by_creator({\n  'creator': 'DznU28LgherhU2JwC2db3KmAeWPqoF9Yx2aVtNUudW6R',\n  'page': 1,\n  'perPage': 3\n})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.quicknode_utils__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_utils' as schema_\n)"}, {"id": "model.livequery_models.quicknode_solana_nfts__quicknode_utils", "sql": " __dbt__cte__quicknode_utils as (\n-- depends_on: __dbt__cte__\nSELECT 'quicknode_solana_nfts' as schema_-- depends_on: __dbt__cte__quicknode_utils\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "fetch_nfts_by_creator", "file_key_name": "models.quicknode_solana_nfts__quicknode_utils", "attached_node": "model.livequery_models.quicknode_solana_nfts__quicknode_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": "{\n  'creator': 'DznU28LgherhU2JwC2db3KmAeWPqoF9Yx2aVtNUudW6R',\n  'page': 1,\n  'perPage': 3\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "fetch_nfts_by_creator", "model": "{{ get_where_subquery(ref('quicknode_solana_nfts__quicknode_utils')) }}"}, "namespace": null}}, "test.livequery_models.test_coingecko__get_status_200.047f15c956": {"database": "SUI", "schema": "test_coingecko", "name": "test_coingecko__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_coingecko__get_status_200.sql", "original_file_path": "models/deploy/marketplace/coingecko/coingecko__.yml", "unique_id": "test.livequery_models.test_coingecko__get_status_200.047f15c956", "fqn": ["livequery_models", "deploy", "marketplace", "coingecko", "test_coingecko__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.2941566, "relation_name": "SUI.test_coingecko.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "coingecko__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.coingecko__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/coingecko/coingecko__.yml/test_coingecko__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'coingecko' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['/api/v3/simple/price' , {'ids': '0x', 'vs_currencies': 'btc,usd,eth'}] as parameters\n        ,SUI.get.get('/api/v3/simple/price' , {'ids': '0x', 'vs_currencies': 'btc,usd,eth'}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/api/v3/simple/price' , {'ids': '0x', 'vs_currencies': 'btc,usd,eth'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/api/v3/simple/price' , {'ids': '0x', 'vs_currencies': 'btc,usd,eth'})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.coingecko__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'coingecko' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.coingecko__", "attached_node": "model.livequery_models.coingecko__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/api/v3/simple/price' , {'ids': '0x', 'vs_currencies': 'btc,usd,eth'}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('coingecko__')) }}"}, "namespace": null}}, "test.livequery_models.test_dapplooker__get_chart_status_202.4fedf28822": {"database": "SUI", "schema": "test_dapplooker", "name": "test_dapplooker__get_chart_status_202", "resource_type": "test", "package_name": "livequery_models", "path": "test_dapplooker__get_chart_status_202.sql", "original_file_path": "models/deploy/marketplace/dapplooker/dapplooker__.yml", "unique_id": "test.livequery_models.test_dapplooker__get_chart_status_202.4fedf28822", "fqn": ["livequery_models", "deploy", "marketplace", "dapplooker", "test_dapplooker__get_chart_status_202"], "alias": "get_chart_status_202", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.3004286, "relation_name": "SUI.test_dapplooker.get_chart_status_202", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "dapplooker__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.dapplooker__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/dapplooker/dapplooker__.yml/test_dapplooker__get_chart_status_202.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'dapplooker' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get_chart' AS test_name\n        ,['a68cc6dd-1bc1-40ca-aaf8-b5155785f0b4'] as parameters\n        ,SUI.get.get_chart('a68cc6dd-1bc1-40ca-aaf8-b5155785f0b4') AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code between 200 and 299$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get_chart('a68cc6dd-1bc1-40ca-aaf8-b5155785f0b4')\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code between 200 and 299\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.dapplooker__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'dapplooker' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get_chart", "file_key_name": "models.dapplooker__", "attached_node": "model.livequery_models.dapplooker__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'a68cc6dd-1bc1-40ca-aaf8-b5155785f0b4'\n", "assertions": ["result:status_code between 200 and 299"], "column_name": "get_chart", "model": "{{ get_where_subquery(ref('dapplooker__')) }}"}, "namespace": null}}, "test.livequery_models.test_covalent__get_status_200.bb43bb7f69": {"database": "SUI", "schema": "test_covalent", "name": "test_covalent__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_covalent__get_status_200.sql", "original_file_path": "models/deploy/marketplace/covalent/covalent__.yml", "unique_id": "test.livequery_models.test_covalent__get_status_200.bb43bb7f69", "fqn": ["livequery_models", "deploy", "marketplace", "covalent", "test_covalent__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true}, "created_at": 1756141892.3063545, "relation_name": "SUI.test_covalent.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "covalent__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": ["model.livequery_models.covalent__"]}, "compiled_path": "target/compiled/livequery_models/models/deploy/marketplace/covalent/covalent__.yml/test_covalent__get_status_200.sql", "compiled": true, "compiled_code": "\n    \n    \n    \n    \n    \n        \n        \n        \n        \n        \n        \n        \n            \n            \n            \n                \n            \n        \n    \n    \n    \n\n    \n\nwith __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n),  __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n),  __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'covalent' as schema_\n) ,\ntest AS\n(\n    SELECT\n        'get.get' AS test_name\n        ,['/v1/1/block_v2/5000000/' , {}] as parameters\n        ,SUI.get.get('/v1/1/block_v2/5000000/' , {}) AS result\n)\n  \n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:status_code = 200$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/v1/1/block_v2/5000000/' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:status_code = 200\n    UNION ALL\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $$result:error IS NULL$$ AS assertion,\n    $$SET LIVEQUERY_CONTEXT = '{\"userId\":\"98d15c30-9fa5-43cd-9c69-3d4c0bb269f5\"}';\nSELECT SUI.get.get('/v1/1/block_v2/5000000/' , {})\n;$$ AS sql\n    FROM test\n    WHERE NOT result:error IS NULL\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.livequery_models._utils", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_utils' as schema_\n)"}, {"id": "model.livequery_models.utils", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'utils' as schema_\n)"}, {"id": "model.livequery_models._live", "sql": " __dbt__cte__ as (\n\n\n\n    SELECT '_live' as schema_\n)"}, {"id": "model.livequery_models.live", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n-- depends_on: __dbt__cte__\n\n\n\n    SELECT 'live' as schema_\n)"}, {"id": "model.livequery_models.covalent__", "sql": " __dbt__cte__ as (\n-- depends_on: __dbt__cte__\nSELECT 'covalent' as schema_\n)"}], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.covalent__", "attached_node": "model.livequery_models.covalent__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/1/block_v2/5000000/' , {}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('covalent__')) }}"}, "namespace": null}}}, "sources": {"source.sui_models.bronze_streamline.checkpoints": {"database": "streamline", "schema": "sui", "name": "checkpoints", "resource_type": "source", "package_name": "sui_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.sui_models.bronze_streamline.checkpoints", "fqn": ["sui_models", "bronze_streamline", "checkpoints"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "checkpoints", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.sui.checkpoints", "created_at": 1756141892.328143, "unrendered_database": "streamline", "unrendered_schema": "{{ 'sui' if target.database == 'SUI' else 'sui_dev' }}"}, "source.sui_models.bronze_streamline.transactions": {"database": "streamline", "schema": "sui", "name": "transactions", "resource_type": "source", "package_name": "sui_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.sui_models.bronze_streamline.transactions", "fqn": ["sui_models", "bronze_streamline", "transactions"], "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "transactions", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.sui.transactions", "created_at": 1756141892.3295393, "unrendered_database": "streamline", "unrendered_schema": "{{ 'sui' if target.database == 'SUI' else 'sui_dev' }}"}, "source.sui_models.crosschain.address_tags": {"database": "crosschain", "schema": "core", "name": "address_tags", "resource_type": "source", "package_name": "sui_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.sui_models.crosschain.address_tags", "fqn": ["sui_models", "crosschain", "address_tags"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "address_tags", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.core.address_tags", "created_at": 1756141892.3299298, "unrendered_database": "{{ 'crosschain' if target.database == 'SUI' else 'crosschain_dev' }}", "unrendered_schema": "core"}, "source.sui_models.crosschain.dim_dates": {"database": "crosschain", "schema": "core", "name": "dim_dates", "resource_type": "source", "package_name": "sui_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.sui_models.crosschain.dim_dates", "fqn": ["sui_models", "crosschain", "dim_dates"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_dates", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.core.dim_dates", "created_at": 1756141892.3303192, "unrendered_database": "{{ 'crosschain' if target.database == 'SUI' else 'crosschain_dev' }}", "unrendered_schema": "core"}, "source.sui_models.crosschain_silver.number_sequence": {"database": "crosschain", "schema": "silver", "name": "number_sequence", "resource_type": "source", "package_name": "sui_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.sui_models.crosschain_silver.number_sequence", "fqn": ["sui_models", "crosschain_silver", "number_sequence"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "number_sequence", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.number_sequence", "created_at": 1756141892.3306785, "unrendered_database": "{{ 'crosschain' if target.database == 'SUI' else 'crosschain_dev' }}", "unrendered_schema": "silver"}, "source.sui_models.crosschain_silver.labels_combined": {"database": "crosschain", "schema": "silver", "name": "labels_combined", "resource_type": "source", "package_name": "sui_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.sui_models.crosschain_silver.labels_combined", "fqn": ["sui_models", "crosschain_silver", "labels_combined"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "labels_combined", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.labels_combined", "created_at": 1756141892.331027, "unrendered_database": "{{ 'crosschain' if target.database == 'SUI' else 'crosschain_dev' }}", "unrendered_schema": "silver"}, "source.sui_models.crosschain_silver.complete_token_asset_metadata": {"database": "crosschain", "schema": "silver", "name": "complete_token_asset_metadata", "resource_type": "source", "package_name": "sui_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.sui_models.crosschain_silver.complete_token_asset_metadata", "fqn": ["sui_models", "crosschain_silver", "complete_token_asset_metadata"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "complete_token_asset_metadata", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.complete_token_asset_metadata", "created_at": 1756141892.3313868, "unrendered_database": "{{ 'crosschain' if target.database == 'SUI' else 'crosschain_dev' }}", "unrendered_schema": "silver"}, "source.sui_models.crosschain_silver.complete_token_prices": {"database": "crosschain", "schema": "silver", "name": "complete_token_prices", "resource_type": "source", "package_name": "sui_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.sui_models.crosschain_silver.complete_token_prices", "fqn": ["sui_models", "crosschain_silver", "complete_token_prices"], "source_name": "crosschain_silver", "source_description": "", "loader": "", "identifier": "complete_token_prices", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.silver.complete_token_prices", "created_at": 1756141892.3317337, "unrendered_database": "{{ 'crosschain' if target.database == 'SUI' else 'crosschain_dev' }}", "unrendered_schema": "silver"}, "source.livequery_models.crosschain.dim_date_hours": {"database": "crosschain_dev", "schema": "core", "name": "dim_date_hours", "resource_type": "source", "package_name": "livequery_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_models.crosschain.dim_date_hours", "fqn": ["livequery_models", "crosschain", "dim_date_hours"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_date_hours", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_date_hours", "created_at": 1756141892.3320832, "unrendered_database": "{{ 'crosschain' if target.database == 'LIVEQUERY' else 'crosschain_dev' }}", "unrendered_schema": "core"}, "source.livequery_models.crosschain.dim_contracts": {"database": "crosschain_dev", "schema": "core", "name": "dim_contracts", "resource_type": "source", "package_name": "livequery_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_models.crosschain.dim_contracts", "fqn": ["livequery_models", "crosschain", "dim_contracts"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_contracts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_contracts", "created_at": 1756141892.3324387, "unrendered_database": "{{ 'crosschain' if target.database == 'LIVEQUERY' else 'crosschain_dev' }}", "unrendered_schema": "core"}, "source.livequery_models.crosschain.dim_evm_event_abis": {"database": "crosschain_dev", "schema": "core", "name": "dim_evm_event_abis", "resource_type": "source", "package_name": "livequery_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_models.crosschain.dim_evm_event_abis", "fqn": ["livequery_models", "crosschain", "dim_evm_event_abis"], "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "dim_evm_event_abis", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain_dev.core.dim_evm_event_abis", "created_at": 1756141892.3327823, "unrendered_database": "{{ 'crosschain' if target.database == 'LIVEQUERY' else 'crosschain_dev' }}", "unrendered_schema": "core"}, "source.livequery_models.ethereum_core.fact_event_logs": {"database": "ethereum_dev", "schema": "core", "name": "fact_event_logs", "resource_type": "source", "package_name": "livequery_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_models.ethereum_core.fact_event_logs", "fqn": ["livequery_models", "ethereum_core", "fact_event_logs"], "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "fact_event_logs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum_dev.core.fact_event_logs", "created_at": 1756141892.3331301, "unrendered_database": "{{ 'ethereum' if target.database == 'LIVEQUERY' else 'ethereum_dev' }}", "unrendered_schema": "core"}, "source.livequery_models.ethereum_core.ez_decoded_event_logs": {"database": "ethereum_dev", "schema": "core", "name": "ez_decoded_event_logs", "resource_type": "source", "package_name": "livequery_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "unique_id": "source.livequery_models.ethereum_core.ez_decoded_event_logs", "fqn": ["livequery_models", "ethereum_core", "ez_decoded_event_logs"], "source_name": "ethereum_core", "source_description": "", "loader": "", "identifier": "ez_decoded_event_logs", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true, "event_time": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum_dev.core.ez_decoded_event_logs", "created_at": 1756141892.3334875, "unrendered_database": "{{ 'ethereum' if target.database == 'LIVEQUERY' else 'ethereum_dev' }}", "unrendered_schema": "core"}}, "macros": {"macro.sui_models.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "sui_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.sui_models.generate_schema_name", "macro_sql": "{% macro generate_schema_name(\n        custom_schema_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.7848449, "supported_languages": null}, "macro.sui_models.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "sui_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.sui_models.generate_alias_name", "macro_sql": "{% macro generate_alias_name(\n        custom_alias_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {% if split_name | length < 2 %}\n        {{ split_name [0] | trim }}\n    {% else %}\n        {{ split_name [1] | trim }}\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.7856014, "supported_languages": null}, "macro.sui_models.generate_tmp_view_name": {"name": "generate_tmp_view_name", "resource_type": "macro", "package_name": "sui_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.sui_models.generate_tmp_view_name", "macro_sql": "{% macro generate_tmp_view_name(model_name) -%}\n    {% set node_name = model_name.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ target.database ~ '.' ~ split_name[0] ~ '.' ~ split_name [1] ~ '__dbt_tmp' | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.7861412, "supported_languages": null}, "macro.sui_models.generate_view_name": {"name": "generate_view_name", "resource_type": "macro", "package_name": "sui_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.sui_models.generate_view_name", "macro_sql": "{% macro generate_view_name(model_name) -%}\n    {% set node_name = model_name.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ target.database ~ '.' ~ split_name[0] ~ '.' ~ split_name [1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.7866552, "supported_languages": null}, "macro.sui_models.create_sps": {"name": "create_sps", "resource_type": "macro", "package_name": "sui_models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "unique_id": "macro.sui_models.create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if target.database == 'SUI' %}\n        CREATE schema IF NOT EXISTS _internal;\n{{ sp_create_prod_clone('_internal') }};\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.sui_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.7871628, "supported_languages": null}, "macro.sui_models.enable_search_optimization": {"name": "enable_search_optimization", "resource_type": "macro", "package_name": "sui_models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "unique_id": "macro.sui_models.enable_search_optimization", "macro_sql": "{% macro enable_search_optimization(\n        schema_name,\n        table_name,\n        condition = ''\n    ) %}\n    {% if target.database == 'SUI' %}\n    ALTER TABLE\n        {{ schema_name }}.{{ table_name }}\n    ADD\n        search optimization {{ condition }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.7875981, "supported_languages": null}, "macro.sui_models.create_udfs": {"name": "create_udfs", "resource_type": "macro", "package_name": "sui_models", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.sui_models.create_udfs", "macro_sql": "{% macro create_udfs() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% set sql %}\n        {{ create_udf_bulk_rest_api_v2() }};\n{% endset %}\n        {% do run_query(sql) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.sui_models.create_udf_bulk_rest_api_v2", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.7881815, "supported_languages": null}, "macro.sui_models.sp_create_prod_clone": {"name": "sp_create_prod_clone", "resource_type": "macro", "package_name": "sui_models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "unique_id": "macro.sui_models.sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `CREATE OR REPLACE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA IF EXISTS ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n        snowflake.execute({sqlText: `GRANT USAGE ON DATABASE ${DESTINATION_DB_NAME} TO ROLE AWS_LAMBDA_SUI_API`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL SCHEMAS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_SUI;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_SUI;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_SUI;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_SUI;`}); \n        snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} FROM ROLE DBT_CLOUD_SUI;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT USAGE ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE AWS_LAMBDA_SUI_API;`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`})\n\n        var existing_tags = snowflake.execute({sqlText: `SHOW TAGS IN DATABASE ${DESTINATION_DB_NAME};`});\n        while (existing_tags.next()) {\n            var schema = existing_tags.getColumnValue(4);\n            var tag_name = existing_tags.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TAG ${DESTINATION_DB_NAME}.${schema}.${tag_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n\n    return true\n$$\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.788995, "supported_languages": null}, "macro.sui_models.run_sp_create_prod_clone": {"name": "run_sp_create_prod_clone", "resource_type": "macro", "package_name": "sui_models", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "unique_id": "macro.sui_models.run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n    {% set clone_query %}\n    call sui._internal.create_prod_clone(\n        'sui',\n        'sui_dev',\n        'internal_dev'\n    );\n{% endset %}\n    {% do run_query(clone_query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.7893922, "supported_languages": null}, "macro.sui_models.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "sui_models", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.sui_models.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n {% set new_json = {\"repo\":project_name, \"object\":this.table, \"profile\":target.profile_name, \"env\":target.name, \"existing_tag\":get_current_query_tag()  } %}\n{% set new_query_tag = tojson(new_json) | as_text %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.7907288, "supported_languages": null}, "macro.sui_models.streamline_external_table_query": {"name": "streamline_external_table_query", "resource_type": "macro", "package_name": "sui_models", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.sui_models.streamline_external_table_query", "macro_sql": "{% macro streamline_external_table_query(\n        model,\n        partition_function\n) %}\nWITH meta AS (\n    SELECT\n        job_created_time AS _inserted_timestamp,\n        file_name,\n        {{ partition_function }} AS partition_key\n    FROM\n        TABLE(\n            information_schema.external_table_file_registration_history(\n                start_time => DATEADD('day', -3, CURRENT_TIMESTAMP()),\n                table_name => '{{ source( \"bronze_streamline\", model) }}')\n            ) A\n)\nSELECT\n    s.*,\n    b.file_name,\n    b._inserted_timestamp\nFROM\n    {{ source(\n        \"bronze_streamline\",\n        model\n    ) }}\n    s\nJOIN \n    meta b\n    ON b.file_name = metadata$filename\n    AND b.partition_key = s.partition_key\nWHERE\n    b.partition_key = s.partition_key\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.7914002, "supported_languages": null}, "macro.sui_models.streamline_external_table_query_fr": {"name": "streamline_external_table_query_fr", "resource_type": "macro", "package_name": "sui_models", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.sui_models.streamline_external_table_query_fr", "macro_sql": "{% macro streamline_external_table_query_fr(\n        model,\n        partition_function\n) %}\nWITH meta AS (\n    SELECT\n       registered_on AS _inserted_timestamp,\n        file_name,\n        {{ partition_function }} AS partition_key\n    FROM\n        TABLE(\n            information_schema.external_table_files(\n                table_name => '{{ source( \"bronze_streamline\", model) }}'\n            )\n        ) A\n)\nSELECT\n    s.*,\n    b.file_name,\n    b._inserted_timestamp\nFROM\n    {{ source(\n        \"bronze_streamline\",\n        model\n    ) }}\n    s\nJOIN \n    meta b\n    ON b.file_name = metadata$filename\n    AND b.partition_key = s.partition_key\nWHERE\n    b.partition_key = s.partition_key\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.7918022, "supported_languages": null}, "macro.sui_models.create_udf_bulk_rest_api_v2": {"name": "create_udf_bulk_rest_api_v2", "resource_type": "macro", "package_name": "sui_models", "path": "macros/streamline/streamline_udfs.sql", "original_file_path": "macros/streamline/streamline_udfs.sql", "unique_id": "macro.sui_models.create_udf_bulk_rest_api_v2", "macro_sql": "{% macro create_udf_bulk_rest_api_v2() %}\n    CREATE\n    OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_rest_api_v2(\n        json OBJECT\n    ) returns ARRAY {% if target.database == 'SUI' -%}\n        api_integration = aws_sui_api_prod_v2 AS 'https://nqj8j7ln67.execute-api.us-east-1.amazonaws.com/prod/udf_bulk_rest_api'\n    {% else %}\n        api_integration = aws_sui_api_stg_v2 AS 'https://azbc07ki8d.execute-api.us-east-1.amazonaws.com/stg/udf_bulk_rest_api'\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.7922084, "supported_languages": null}, "macro.sui_models.test_compare_model_subset": {"name": "test_compare_model_subset", "resource_type": "macro", "package_name": "sui_models", "path": "macros/tests/compare_model_subset.sql", "original_file_path": "macros/tests/compare_model_subset.sql", "unique_id": "macro.sui_models.test_compare_model_subset", "macro_sql": "{% test compare_model_subset(model, compare_model, compare_columns, model_condition) %}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n    select {{compare_cols_csv}} from {{ model }}\n    {{ model_condition }}\n),\nb as (\n    select {{compare_cols_csv}} from {{ compare_model }}\n),\na_minus_b as (\n    select * from a\n    except\n    select * from b\n),\nb_minus_a as (\n    select * from b\n    except\n    select * from a\n),\nunioned as (\n    select 'in_actual_not_in_expected' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'in_expected_not_in_actual' as which_diff, b_minus_a.* from b_minus_a\n)\nselect * from unioned\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.792826, "supported_languages": null}, "macro.sui_models.sequence_gaps": {"name": "sequence_gaps", "resource_type": "macro", "package_name": "sui_models", "path": "macros/tests/sequence_gaps.sql", "original_file_path": "macros/tests/sequence_gaps.sql", "unique_id": "macro.sui_models.sequence_gaps", "macro_sql": "{% macro sequence_gaps(\n        table,\n        partition_by,\n        column\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }}\n        FROM\n            {{ table }}\n        WHERE\n            block_timestamp::date <= current_date - 1\n    )\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column }},\n    {{ column }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.794006, "supported_languages": null}, "macro.sui_models.apply_meta_as_tags": {"name": "apply_meta_as_tags", "resource_type": "macro", "package_name": "sui_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.sui_models.apply_meta_as_tags", "macro_sql": "{% macro apply_meta_as_tags(results) %}\n    {% if var(\"UPDATE_SNOWFLAKE_TAGS\") %}\n        {{ log('apply_meta_as_tags', info=False) }}\n        {{ log(results, info=False) }}\n        {% if execute %}\n\n            {%- set tags_by_schema = {} -%}\n            {% for res in results -%}\n                {% if res.node.meta.database_tags %}\n\n                    {%- set model_database = res.node.database -%}\n                    {%- set model_schema = res.node.schema -%}\n                    {%- set model_schema_full = model_database+'.'+model_schema -%}\n                    {%- set model_alias = res.node.alias -%}\n\n                    {% if model_schema_full not in tags_by_schema.keys() %}\n                        {{ log('need to fetch tags for schema '+model_schema_full, info=False) }}\n                        {%- call statement('main', fetch_result=True) -%}\n                            show tags in {{model_database}}.{{model_schema}}\n                        {%- endcall -%}\n                        {%- set _ = tags_by_schema.update({model_schema_full: load_result('main')['table'].columns.get('name').values()|list}) -%}\n                        {{ log('Added tags to cache', info=False) }}\n                    {% else %}\n                        {{ log('already have tag info for schema', info=False) }}\n                    {% endif %}\n\n                    {%- set current_tags_in_schema = tags_by_schema[model_schema_full] -%}\n                    {{ log('current_tags_in_schema:', info=False) }}\n                    {{ log(current_tags_in_schema, info=False) }}\n                    {{ log(\"========== Processing tags for \"+model_schema_full+\".\"+model_alias+\" ==========\", info=False) }}\n\n                    {% set line -%}\n                        node: {{ res.node.unique_id }}; status: {{ res.status }} (message: {{ res.message }})\n                        node full: {{ res.node}}\n                        meta: {{ res.node.meta}}\n                        materialized: {{ res.node.config.materialized }}\n                    {%- endset %}\n                    {{ log(line, info=False) }}\n\n                    {%- call statement('main', fetch_result=True) -%}\n                        select LEVEL,UPPER(TAG_NAME) as TAG_NAME,TAG_VALUE from table(information_schema.tag_references_all_columns('{{model_schema}}.{{model_alias}}', 'table'))\n                    {%- endcall -%}\n                    {%- set existing_tags_for_table = load_result('main')['data'] -%}\n                    {{ log('Existing tags for table:', info=False) }}\n                    {{ log(existing_tags_for_table, info=False) }}\n\n                    {{ log('--', info=False) }}\n                    {% for table_tag in res.node.meta.database_tags.table %}\n\n                        {{ create_tag_if_missing(current_tags_in_schema,table_tag|upper) }}\n                        {% set desired_tag_value = res.node.meta.database_tags.table[table_tag] %}\n\n                        {{set_table_tag_value_if_different(model_schema,model_alias,table_tag,desired_tag_value,existing_tags_for_table)}}\n                    {% endfor %}\n                    {{ log(\"========== Finished processing tags for \"+model_alias+\" ==========\", info=False) }}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.sui_models.create_tag_if_missing", "macro.sui_models.set_table_tag_value_if_different"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.7997959, "supported_languages": null}, "macro.sui_models.create_tag_if_missing": {"name": "create_tag_if_missing", "resource_type": "macro", "package_name": "sui_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.sui_models.create_tag_if_missing", "macro_sql": "{% macro create_tag_if_missing(all_tag_names,table_tag) %}\n\t{% if table_tag not in all_tag_names %}\n\t\t{{ log('Creating missing tag '+table_tag, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            create tag if not exists silver.{{table_tag}}\n        {%- endcall -%}\n\t\t{{ log(load_result('main').data, info=False) }}\n\t{% else %}\n\t\t{{ log('Tag already exists: '+table_tag, info=False) }}\n\t{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8006344, "supported_languages": null}, "macro.sui_models.set_table_tag_value_if_different": {"name": "set_table_tag_value_if_different", "resource_type": "macro", "package_name": "sui_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.sui_models.set_table_tag_value_if_different", "macro_sql": "{% macro set_table_tag_value_if_different(model_schema,table_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at table level', info=False) }}\n    {%- set existing_tag_for_table = existing_tags|selectattr('0','equalto','TABLE')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for table:', info=False) }}\n    {{ log(existing_tag_for_table[0], info=False) }}\n    {% if existing_tag_for_table|length > 0 and existing_tag_for_table[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{model_schema}}.{{table_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8022242, "supported_languages": null}, "macro.sui_models.set_column_tag_value_if_different": {"name": "set_column_tag_value_if_different", "resource_type": "macro", "package_name": "sui_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.sui_models.set_column_tag_value_if_different", "macro_sql": "{% macro set_column_tag_value_if_different(table_name,column_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at column level', info=False) }}\n    {%- set existing_tag_for_column = existing_tags|selectattr('0','equalto','COLUMN')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for column:', info=False) }}\n    {{ log(existing_tag_for_column[0], info=False) }}\n    {% if existing_tag_for_column|length > 0 and existing_tag_for_column[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{table_name}} modify column {{column_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8037999, "supported_languages": null}, "macro.sui_models.set_database_tag_value": {"name": "set_database_tag_value", "resource_type": "macro", "package_name": "sui_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.sui_models.set_database_tag_value", "macro_sql": "{% macro set_database_tag_value(tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter database {{target.database}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8044553, "supported_languages": null}, "macro.sui_models.set_schema_tag_value": {"name": "set_schema_tag_value", "resource_type": "macro", "package_name": "sui_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.sui_models.set_schema_tag_value", "macro_sql": "{% macro set_schema_tag_value(target_schema,tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter schema {{target.database}}.{{target_schema}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8050883, "supported_languages": null}, "macro.sui_models.add_database_or_schema_tags": {"name": "add_database_or_schema_tags", "resource_type": "macro", "package_name": "sui_models", "path": "macros/tags/add_database_or_schema_tags.sql", "original_file_path": "macros/tags/add_database_or_schema_tags.sql", "unique_id": "macro.sui_models.add_database_or_schema_tags", "macro_sql": "{% macro add_database_or_schema_tags() %}\n    {{ set_database_tag_value(\n        'BLOCKCHAIN_NAME',\n        'SUI'\n    ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.sui_models.set_database_tag_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.805425, "supported_languages": null}, "macro.sui_models.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "sui_models", "path": "macros/dbt/get_merge.sql", "original_file_path": "macros/dbt/get_merge.sql", "unique_id": "macro.sui_models.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n    {% set merge_sql = fsc_utils.get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {{ return(merge_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8061578, "supported_languages": null}, "macro.sui_models.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "sui_models", "path": "macros/dbt/get_merge.sql", "original_file_path": "macros/dbt/get_merge.sql", "unique_id": "macro.sui_models.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n    {% set predicate_override = \"\" %}\n    -- get the min value of column\n    {% if incremental_predicates[0] == \"min_value_predicate\" %}\n        {% set min_column_name = incremental_predicates[1] %}\n        {% set query %}\n            select min({{ min_column_name }}) from {{ source }}\n        {% endset %}\n        {% set min_block = run_query(query).columns[0][0] %}\n\n        {% if min_block is not none %}\n            {% set predicate_override %}\n                round({{ target }}.{{ min_column_name }},-5) >= round({{ min_block }},-5)\n            {% endset %}\n        {% else %}\n            {% set predicate_override = \"1=1\" %}\n        {% endif %}\n    {% endif %}\n    {% set predicates = [predicate_override] + incremental_predicates[2:] if predicate_override else incremental_predicates %}\n    -- standard delete+insert from here\n    {% set merge_sql = dbt.get_delete_insert_merge_sql(target, source, unique_key, dest_columns, predicates) %}\n    {{ return(merge_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8077226, "supported_languages": null}, "macro.sui_models.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "sui_models", "path": "macros/dbt/get_tmp_relation_type.sql", "original_file_path": "macros/dbt/get_tmp_relation_type.sql", "unique_id": "macro.sui_models.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n    -- always table\n    {{ return('table') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8080275, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.808456, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.80864, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_relation_last_modified": {"name": "snowflake__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata.sql", "original_file_path": "macros/metadata.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_relation_last_modified", "macro_sql": "{% macro snowflake__get_relation_last_modified(information_schema, relations) -%}\n\n  {%- call statement('last_modified', fetch_result=True) -%}\n        select table_schema as schema,\n               table_name as identifier,\n               last_altered as last_modified,\n               {{ current_timestamp() }} as snapshotted_at\n        from {{ information_schema }}.tables\n        where (\n          {%- for relation in relations -%}\n            (upper(table_schema) = upper('{{ relation.schema }}') and\n             upper(table_name) = upper('{{ relation.identifier }}')){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n  {%- endcall -%}\n\n  {{ return(load_result('last_modified')) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8095636, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_schemas_where_clause_sql(schemas) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8108838, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations": {"name": "snowflake__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations", "macro_sql": "{% macro snowflake__get_catalog_relations(information_schema, relations) -%}\n\n    {% set query %}\n        with tables as (\n            {{ snowflake__get_catalog_tables_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        ),\n        columns as (\n            {{ snowflake__get_catalog_columns_sql(information_schema) }}\n            {{ snowflake__get_catalog_relations_where_clause_sql(relations) }}\n        )\n        {{ snowflake__get_catalog_results_sql() }}\n    {%- endset -%}\n\n    {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8114774, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_tables_sql": {"name": "snowflake__get_catalog_tables_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_tables_sql", "macro_sql": "{% macro snowflake__get_catalog_tables_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n        case\n            when is_dynamic = 'YES' and table_type = 'BASE TABLE' THEN 'DYNAMIC TABLE'\n            else table_type\n        end as \"table_type\",\n        comment as \"table_comment\",\n\n        -- note: this is the _role_ that owns the table\n        table_owner as \"table_owner\",\n\n        'Clustering Key' as \"stats:clustering_key:label\",\n        clustering_key as \"stats:clustering_key:value\",\n        'The key used to cluster this table' as \"stats:clustering_key:description\",\n        (clustering_key is not null) as \"stats:clustering_key:include\",\n\n        'Row Count' as \"stats:row_count:label\",\n        row_count as \"stats:row_count:value\",\n        'An approximate count of rows in this table' as \"stats:row_count:description\",\n        (row_count is not null) as \"stats:row_count:include\",\n\n        'Approximate Size' as \"stats:bytes:label\",\n        bytes as \"stats:bytes:value\",\n        'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n        (bytes is not null) as \"stats:bytes:include\",\n\n        'Last Modified' as \"stats:last_modified:label\",\n        to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n        'The timestamp for last update/change' as \"stats:last_modified:description\",\n        (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n    from {{ information_schema }}.tables\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.811785, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_columns_sql": {"name": "snowflake__get_catalog_columns_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_columns_sql", "macro_sql": "{% macro snowflake__get_catalog_columns_sql(information_schema) -%}\n    select\n        table_catalog as \"table_database\",\n        table_schema as \"table_schema\",\n        table_name as \"table_name\",\n\n        column_name as \"column_name\",\n        ordinal_position as \"column_index\",\n        data_type as \"column_type\",\n        comment as \"column_comment\"\n    from {{ information_schema }}.columns\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8119867, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_results_sql": {"name": "snowflake__get_catalog_results_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_results_sql", "macro_sql": "{% macro snowflake__get_catalog_results_sql() -%}\n    select *\n    from tables\n    join columns using (\"table_database\", \"table_schema\", \"table_name\")\n    order by \"column_index\"\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8121212, "supported_languages": null}, "macro.dbt_snowflake.snowflake__catalog_equals": {"name": "snowflake__catalog_equals", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__catalog_equals", "macro_sql": "{% macro snowflake__catalog_equals(field, value) %}\n    \"{{ field }}\" ilike '{{ value }}' and upper(\"{{ field }}\") = upper('{{ value }}')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8124053, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql": {"name": "snowflake__get_catalog_schemas_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_schemas_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_schemas_where_clause_sql(schemas) -%}\n    where ({%- for schema in schemas -%}\n        ({{ snowflake__catalog_equals('table_schema', schema) }}){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8129394, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql": {"name": "snowflake__get_catalog_relations_where_clause_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog_relations_where_clause_sql", "macro_sql": "{% macro snowflake__get_catalog_relations_where_clause_sql(relations) -%}\n    where (\n        {%- for relation in relations -%}\n            {% if relation.schema and relation.identifier %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                    and {{ snowflake__catalog_equals('table_name', relation.identifier) }}\n                )\n            {% elif relation.schema %}\n                (\n                    {{ snowflake__catalog_equals('table_schema', relation.schema) }}\n                )\n            {% else %}\n                {% do exceptions.raise_compiler_error(\n                    '`get_catalog_relations` requires a list of relations, each with a schema'\n                ) %}\n            {% endif %}\n\n            {%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__catalog_equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8138626, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.81683, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.817274, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation.render() }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation.render() }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8184948, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_object_metadata": {"name": "snowflake__show_object_metadata", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_object_metadata", "macro_sql": "{% macro snowflake__show_object_metadata(relation) %}\n  {%- set sql -%}\n    show objects in {{ relation.include(identifier=False) }} starts with '{{ relation.identifier }}' limit 1\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8189719, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.819835, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8203468, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} table {{ relation.render() }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.820821, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n    {%- if relation.is_dynamic_table -%}\n        {%- set relation_type = 'dynamic table' -%}\n    {%- else -%}\n        {%- set relation_type = relation.type -%}\n    {%- endif -%}\n    comment on {{ relation_type }} {{ relation.render() }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.821388, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n    alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8224754, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.822753, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8230078, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8237424, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.824024, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8247874, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n    {% if relation.is_dynamic_table -%}\n        {% set relation_type = \"dynamic table\" %}\n    {% else -%}\n        {% set relation_type = relation.type %}\n    {% endif %}\n\n    {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n    {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.get_ddl_prefix_for_alter() }} {{ relation_type }} {{ relation.render() }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8263907, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8267329, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation.render() }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8271377, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata/list_relations_without_caching.sql", "original_file_path": "macros/metadata/list_relations_without_caching.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation, max_iter=10000, max_results_per_iter=10000) %}\n\n    {%- if schema_relation is string -%}\n        {%- set schema = schema_relation -%}\n    {%- else -%}\n        {%- set schema = schema_relation.include(identifier=False) -%}\n    {%- endif -%}\n\n    {%- set max_results_per_iter = adapter.config.flags.get('list_relations_per_page', max_results_per_iter) -%}\n    {%- set max_iter = adapter.config.flags.get('list_relations_page_limit', max_iter) -%}\n    {%- set too_many_relations_msg -%}\n        dbt is currently configured to list a maximum of {{ max_results_per_iter * max_iter }} objects per schema.\n        {{ schema }} exceeds this limit. If this is expected, you may configure this limit\n        by setting list_relations_per_page and list_relations_page_limit in your project flags.\n        It is recommended to start by increasing list_relations_page_limit.\n    {%- endset -%}\n\n    {%- set paginated_state = namespace(paginated_results=[], watermark=none) -%}\n\n    {%- do run_query('alter session set quoted_identifiers_ignore_case = false;') -%}\n\n    {#-\n        loop an extra time to catch the breach of max iterations\n        Note: while range is 0-based, loop.index starts at 1\n    -#}\n    {%- for _ in range(max_iter + 1) -%}\n\n        {#-\n            raise a warning and break if we still didn't exit and we're beyond the max iterations limit\n            Note: while range is 0-based, loop.index starts at 1\n        -#}\n        {%- if loop.index == max_iter + 1 -%}\n            {%- do exceptions.warn(too_many_relations_msg) -%}\n            {%- break -%}\n        {%- endif -%}\n\n        {%- set show_objects_sql = snowflake__show_objects_sql(schema, max_results_per_iter, paginated_state.watermark) -%}\n        {%- set paginated_result = run_query(show_objects_sql) -%}\n        {%- do paginated_state.paginated_results.append(paginated_result) -%}\n        {%- set paginated_state.watermark = paginated_result.columns.get('name').values()[-1] -%}\n\n        {#- we got less results than the max_results_per_iter (includes 0), meaning we reached the end -#}\n        {%- if (paginated_result | length) < max_results_per_iter -%}\n            {%- break -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- do run_query('alter session unset quoted_identifiers_ignore_case;') -%}\n\n    {#- grab the first table in the paginated results to access the `merge` method -#}\n    {%- set agate_table = paginated_state.paginated_results[0] -%}\n    {%- do return(agate_table.merge(paginated_state.paginated_results)) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_snowflake.snowflake__show_objects_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.830133, "supported_languages": null}, "macro.dbt_snowflake.snowflake__show_objects_sql": {"name": "snowflake__show_objects_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/metadata/list_relations_without_caching.sql", "original_file_path": "macros/metadata/list_relations_without_caching.sql", "unique_id": "macro.dbt_snowflake.snowflake__show_objects_sql", "macro_sql": "{% macro snowflake__show_objects_sql(schema, max_results_per_iter=10000, watermark=none) %}\n\n{%- set _sql -%}\nshow objects in {{ schema }}\n    limit {{ max_results_per_iter }}\n    {% if watermark is not none -%} from '{{ watermark }}' {%- endif %}\n;\n\n{#- gated for performance reasons - if you don't want iceberg, you shouldn't pay the latency penalty -#}\n{%- if adapter.behavior.enable_iceberg_materializations.no_warn %}\nselect all_objects.*, all_tables.IS_ICEBERG as \"is_iceberg\"\nfrom table(result_scan(last_query_id(-1))) all_objects\nleft join {{ schema.database }}.INFORMATION_SCHEMA.tables as all_tables\non all_tables.table_name = all_objects.\"name\"\nand all_tables.table_schema = all_objects.\"schema_name\"\nand all_tables.table_catalog = all_objects.\"database_name\"\n;\n{%- endif -%}\n\n{%- endset -%}\n\n{%- do return(_sql) -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.830884, "supported_languages": null}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = snowflake__create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8317063, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8322587, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8327944, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set existing_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=catalog_relation.table_format\n   ) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if target_relation.needs_to_drop(existing_relation) %}\n    {{ drop_relation_if_exists(existing_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.835354, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__can_clone_table": {"name": "snowflake__can_clone_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__can_clone_table", "macro_sql": "{% macro snowflake__can_clone_table() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8357017, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_clone": {"name": "snowflake__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/clone.sql", "original_file_path": "macros/materializations/clone.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_clone", "macro_sql": "{% macro snowflake__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace\n      {{ \"transient\" if config.get(\"transient\", true) }}\n      table {{ this_relation }}\n      clone {{ defer_relation }}\n      {{ \"copy grants\" if config.get(\"copy_grants\", false) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8361537, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.83867, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.83913, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert and microbatch strategies can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy in [\"delete+insert\", \"microbatch\"] and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `\" ~ strategy ~ \"` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\", \"insert_overwrite\") %}\n    {{ return(\"view\") }}\n  {% elif strategy in [\"delete+insert\", \"microbatch\"] and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.84238, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n\n  {%- set identifier = this.name -%}\n  {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n  {%- set target_relation = api.Relation.create(\n\tidentifier=identifier,\n\tschema=schema,\n\tdatabase=database,\n\ttype='table',\n\ttable_format=catalog_relation.table_format\n  ) -%}\n\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif full_refresh_mode %}\n    {% if target_relation.needs_to_drop(existing_relation) %}\n      {{ drop_relation_if_exists(existing_relation) }}\n    {% endif %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif target_relation.table_format != existing_relation.table_format %}\n    {% do exceptions.raise_compiler_error(\n        \"Unable to update the incremental model `\" ~ target_relation.identifier ~ \"` from `\" ~ existing_relation.table_format ~ \"` to `\" ~ target_relation.table_format ~ \"` due to Snowflake limitation. Please execute with --full-refresh to drop the table and recreate in the new catalog.'\"\n      )\n    %}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.drop_relation_if_exists", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8483675, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8486495, "supported_languages": null}, "macro.dbt_snowflake.materialization_dynamic_table_snowflake": {"name": "materialization_dynamic_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.materialization_dynamic_table_snowflake", "macro_sql": "{% materialization dynamic_table, adapter='snowflake' %}\n\n    {% set query_tag = set_query_tag() %}\n\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.DynamicTable) %}\n\n    {{ run_hooks(pre_hooks) }}\n\n    {% set build_sql = dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% if build_sql == '' %}\n        {{ dynamic_table_execute_no_op(target_relation) }}\n    {% else %}\n        {{ dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) }}\n    {% endif %}\n\n    {{ run_hooks(post_hooks) }}\n\n    {% do unset_query_tag(query_tag) %}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.load_cached_relation", "macro.dbt.run_hooks", "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8505626, "supported_languages": ["sql"]}, "macro.dbt_snowflake.dynamic_table_get_build_sql": {"name": "dynamic_table_get_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_get_build_sql", "macro_sql": "{% macro dynamic_table_get_build_sql(existing_relation, target_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_dynamic_table %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = snowflake__get_dynamic_table_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"No configuration changes were identified on: `\" ~ target_relation ~ \"`. Continuing.\") }}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = snowflake__get_alter_dynamic_table_as_sql(existing_relation, configuration_changes, target_relation, sql) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'continue', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario: `\" ~ on_configuration_change ~ \"`\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_sql", "macro.dbt.get_replace_sql", "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8525991, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_no_op": {"name": "dynamic_table_execute_no_op", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_no_op", "macro_sql": "{% macro dynamic_table_execute_no_op(relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8529534, "supported_languages": null}, "macro.dbt_snowflake.dynamic_table_execute_build_sql": {"name": "dynamic_table_execute_build_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.dynamic_table_execute_build_sql", "macro_sql": "{% macro dynamic_table_execute_build_sql(build_sql, existing_relation, target_relation) %}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8537047, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes": {"name": "snowflake__get_dynamic_table_configuration_changes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/dynamic_table.sql", "original_file_path": "macros/materializations/dynamic_table.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_dynamic_table_configuration_changes", "macro_sql": "{% macro snowflake__get_dynamic_table_configuration_changes(existing_relation, new_config) -%}\n    {% set _existing_dynamic_table = snowflake__describe_dynamic_table(existing_relation) %}\n    {% set _configuration_changes = existing_relation.dynamic_table_config_changeset(_existing_dynamic_table, new_config.model) %}\n    {% do return(_configuration_changes) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__describe_dynamic_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8541393, "supported_languages": null}, "macro.dbt_snowflake.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental/insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) -%}\n  {{ adapter.dispatch('insert_overwrite_get_sql', 'dbt')(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"]) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__insert_overwrite_get_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8548903, "supported_languages": null}, "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql": {"name": "snowflake__insert_overwrite_get_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/insert_overwrite.sql", "original_file_path": "macros/materializations/incremental/insert_overwrite.sql", "unique_id": "macro.dbt_snowflake.snowflake__insert_overwrite_get_sql", "macro_sql": "{% macro snowflake__insert_overwrite_get_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dml -%}\n\n    {%- set overwrite_columns = config.get('overwrite_columns', []) -%}\n\n    {{ config.get('sql_header', '') }}\n\n    {% set target_columns_list = '(' ~ ', '.join(overwrite_columns) ~ ')' if overwrite_columns else '' %}\n    {% set source_query_columns_list = ', '.join(overwrite_columns) if overwrite_columns else '*' %}\n    insert overwrite into {{ target.render() }} {{ target_columns_list }}\n        select {{ source_query_columns_list }}\n        from {{ source.render() }}\n\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8559225, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8576322, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.858093, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8584971, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_append_sql": {"name": "snowflake__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_append_sql", "macro_sql": "{% macro snowflake__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% set dml = default__get_incremental_append_sql(get_incremental_append_sql) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8588264, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql": {"name": "snowflake__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental/merge.sql", "original_file_path": "macros/materializations/incremental/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql", "macro_sql": "{% macro snowflake__get_incremental_microbatch_sql(arg_dict) %}\n    {%- set target = arg_dict[\"target_relation\"] -%}\n    {%- set source = arg_dict[\"temp_relation\"] -%}\n    {%- set dest_columns = arg_dict[\"dest_columns\"] -%}\n    {%- set incremental_predicates = [] if arg_dict.get('incremental_predicates') is none else arg_dict.get('incremental_predicates') -%}\n\n    {#-- Add additional incremental_predicates to filter for batch --#}\n    {% if model.batch and model.batch.event_time_start -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" >= to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_start ~ \"')\") %}\n    {% endif %}\n    {% if model.batch and model.batch.event_time_end -%}\n        {% do incremental_predicates.append(\"DBT_INTERNAL_TARGET.\" ~ model.config.event_time ~ \" < to_timestamp_tz('\" ~ model.config.__dbt_internal_microbatch_event_time_end ~ \"')\") %}\n    {% endif %}\n    {% do arg_dict.update({'incremental_predicates': incremental_predicates}) %}\n\n    delete from {{ target }} DBT_INTERNAL_TARGET\n    where (\n    {% for predicate in incremental_predicates %}\n        {%- if not loop.first %}and {% endif -%} {{ predicate }}\n    {% endfor %}\n    );\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.860678, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8611217, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.861435, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    {% if type|upper == \"GEOMETRY\" -%}\n        try_to_geometry({{field}})\n    {% elif type|upper == \"GEOGRAPHY\" -%}\n        try_to_geography({{field}})\n    {% elif type|upper != \"VARIANT\" -%}\n        {#-- Snowflake try_cast does not support casting to variant, and expects the field as a string --#}\n        {% set field_as_string =  dbt.string_literal(field) if field is number else field %}\n        try_cast({{field_as_string}} as {{type}})\n    {% else -%}\n        {{ adapter.dispatch('cast', 'dbt')(field, type) }}\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.cast", "macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8624842, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.862713, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8630798, "supported_languages": null}, "macro.dbt_snowflake.snowflake__cast": {"name": "snowflake__cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__cast", "macro_sql": "{% macro snowflake__cast(field, type) %}\n    {% if (type|upper == \"GEOGRAPHY\") -%}\n        to_geography({{field}})\n    {% elif (type|upper == \"GEOMETRY\") -%}\n        to_geometry({{field}})\n    {% else -%}\n        cast({{field}} as {{type}})\n    {% endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.863725, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8640504, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8643496, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.864525, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.864696, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8649175, "supported_languages": null}, "macro.dbt_snowflake.optional": {"name": "optional", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/optional.sql", "original_file_path": "macros/utils/optional.sql", "unique_id": "macro.dbt_snowflake.optional", "macro_sql": "{% macro optional(name, value, quote_char = '', equals_char = '= ') %}\n{#-\n--  Insert optional DDL parameters only when their value is provided; makes DDL statements more readable\n--\n--  Args:\n--  - name: the name of the DDL option\n--  - value: the value of the DDL option, may be None\n--  - quote_char: the quote character to use (e.g. '\"', '(', etc.), leave blank if unnecessary\n--  - equals_char: the equals character to use (e.g. '= ')\n--  Returns:\n--      If the value is not None (e.g. provided by the user), return the option setting DDL\n--      If the value is None, return an empty string\n-#}\n{%- set quote_char_right = ')' if quote_char == '(' else quote_char -%}\n{% if value is not none %}{{ name }} {{ equals_char }}{{ quote_char }}{{ value }}{{ quote_char_right }}{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.865684, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_sql": {"name": "snowflake__get_replace_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_sql", "macro_sql": "{% macro snowflake__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {% if existing_relation.is_dynamic_table and target_relation.is_dynamic_table %}\n        {{ snowflake__get_replace_dynamic_table_sql(target_relation, sql) }}\n\n    {% else %}\n        {{ default__get_replace_sql(existing_relation, target_relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8664403, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.866832, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_sql": {"name": "snowflake__get_drop_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_sql", "macro_sql": "{% macro snowflake__get_drop_sql(relation) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_drop_dynamic_table_sql(relation) }}\n\n    {% else %}\n        {{ default__get_drop_sql(relation) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.867304, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql": {"name": "snowflake__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_intermediate_sql", "macro_sql": "{%- macro snowflake__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(intermediate_relation, relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8677194, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_sql": {"name": "snowflake__get_create_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_sql", "macro_sql": "{% macro snowflake__get_create_sql(relation, sql) %}\n\n    {% if relation.is_dynamic_table %}\n        {{ snowflake__get_create_dynamic_table_as_sql(relation, sql) }}\n\n    {% else %}\n        {{ default__get_create_sql(relation, sql) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8683062, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_backup_sql": {"name": "snowflake__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_backup_sql", "macro_sql": "{%- macro snowflake__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    -- use `render` to ensure that the fully qualified name is used\n    {{ get_rename_sql(relation, backup_relation.render()) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.868819, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_table_sql": {"name": "snowflake__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_table_sql", "macro_sql": "{% macro snowflake__get_replace_table_sql(relation, sql) %}\n    {{ snowflake__create_table_as(False, relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.869117, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_table_sql": {"name": "snowflake__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_table_sql", "macro_sql": "{%- macro snowflake__get_rename_table_sql(relation, new_name) -%}\n    /*\n    Rename or move a table to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter table {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8694696, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_table_sql": {"name": "snowflake__get_drop_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_table_sql", "macro_sql": "{% macro snowflake__get_drop_table_sql(relation) %}\n    drop table if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8696885, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    {%- if language == 'sql' -%}\n        {%- if temporary -%}\n            {{ snowflake__create_table_temporary_sql(relation, compiled_code) }}\n        {%- elif catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n            {{ snowflake__create_table_info_schema_sql(relation, compiled_code) }}\n        {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n            {{ snowflake__create_table_built_in_sql(relation, compiled_code) }}\n        {%- else -%}\n            {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n        {%- endif -%}\n\n    {%- elif language == 'python' -%}\n        {%- if catalog_relation.catalog_type == 'BUILT_IN' %}\n            {% do exceptions.raise_compiler_error('Iceberg is incompatible with Python models. Please use a SQL model for the iceberg format.') %}\n        {%- else -%}\n            {{ py_write_table(compiled_code, relation) }}\n        {%- endif %}\n\n    {%- else -%}\n        {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_temporary_sql", "macro.dbt_snowflake.snowflake__create_table_info_schema_sql", "macro.dbt_snowflake.snowflake__create_table_built_in_sql", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8725402, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_temporary_sql": {"name": "snowflake__create_table_temporary_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_temporary_sql", "macro_sql": "{% macro snowflake__create_table_temporary_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE TEMPORARY TABLE and CREATE TEMPORARY TABLE ... AS SELECT:\n    https://docs.snowflake.com/en/sql-reference/sql/create-table\n    https://docs.snowflake.com/en/sql-reference/sql/create-table#create-table-as-select-also-referred-to-as-ctas\n-#}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace temporary table {{ relation }}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\nas (\n    {{ compiled_code }}\n    )\n;\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8734486, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_info_schema_sql": {"name": "snowflake__create_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_info_schema_sql", "macro_sql": "{% macro snowflake__create_table_info_schema_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE TABLE and CREATE TABLE ... AS SELECT:\n    https://docs.snowflake.com/en/sql-reference/sql/create-table\n    https://docs.snowflake.com/en/sql-reference/sql/create-table#create-table-as-select-also-referred-to-as-ctas\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{%- if catalog_relation.is_transient -%}\n    {%- set transient='transient ' -%}\n{%- else -%}\n    {%- set transient='' -%}\n{%- endif -%}\n\n{%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace {{ transient }}table {{ relation }}\n    {%- set contract_config = config.get('contract') -%}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\n    {{ optional('cluster by', catalog_relation.cluster_by, '(', '') }}\n    {% if copy_grants -%} copy grants {%- endif %}\n    as (\n        {%- if catalog_relation.cluster_by is not none -%}\n        select * from (\n            {{ compiled_code }}\n        )\n        order by (\n            {{ catalog_relation.cluster_by }}\n        )\n        {%- else -%}\n        {{ compiled_code }}\n        {%- endif %}\n    )\n;\n\n{% if catalog_relation.cluster_by is not none -%}\nalter table {{ relation }} cluster by ({{ catalog_relation.cluster_by }});\n{%- endif -%}\n\n{% if catalog_relation.automatic_clustering and catalog_relation.cluster_by is not none %}\nalter table {{ relation }} resume recluster;\n{%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8756495, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_built_in_sql": {"name": "snowflake__create_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_built_in_sql", "macro_sql": "{% macro snowflake__create_table_built_in_sql(relation, compiled_code) -%}\n{#-\n    Implements CREATE ICEBERG TABLE and CREATE ICEBERG TABLE ... AS SELECT (Snowflake as the Iceberg catalog):\n    https://docs.snowflake.com/en/sql-reference/sql/create-iceberg-table-snowflake\n\n    Limitations:\n    - Iceberg does not support temporary tables (use a standard Snowflake table)\n-#}\n\n{%- if not adapter.behavior.enable_iceberg_materializations.no_warn -%}\n    {%- do exceptions.raise_compiler_error('Was unable to create model as Iceberg Table Format. Please set the `enable_iceberg_materializations` behavior flag to True in your dbt_project.yml. For more information, go to https://docs.getdbt.com/reference/resource-configs/snowflake-configs#iceberg-table-format') -%}\n{%- endif -%}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n{%- set contract_config = config.get('contract') -%}\n{%- if contract_config.enforced -%}\n    {{- get_assert_columns_equivalent(compiled_code) -}}\n    {%- set compiled_code = get_select_subquery(compiled_code) -%}\n{%- endif -%}\n\n{%- set sql_header = config.get('sql_header', none) -%}\n{{ sql_header if sql_header is not none }}\n\ncreate or replace iceberg table {{ relation }}\n    {%- if contract_config.enforced %}\n    {{ get_table_columns_and_constraints() }}\n    {%- endif %}\n    {{ optional('cluster by', catalog_relation.cluster_by, '(', '') }}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    catalog = 'SNOWFLAKE'  -- required, and always SNOWFLAKE for built-in Iceberg tables\n    base_location = '{{ catalog_relation.base_location }}'\n    {% if copy_grants -%} copy grants {%- endif %}\nas (\n    {%- if catalog_relation.cluster_by is not none -%}\n    select * from (\n        {{ compiled_code }}\n    )\n    order by (\n        {{ catalog_relation.cluster_by }}\n    )\n    {%- else -%}\n    {{ compiled_code }}\n    {%- endif %}\n    )\n;\n\n{% if catalog_relation.cluster_by is not none -%}\nalter iceberg table {{ relation }} cluster by ({{ catalog_relation.cluster_by }});\n{%- endif -%}\n\n{% if catalog_relation.automatic_clustering and catalog_relation.cluster_by is not none %}\nalter iceberg table {{ relation }} resume recluster;\n{%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_select_subquery", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8778489, "supported_languages": null}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation) %}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n{% if catalog_relation.is_transient %}\n    {%- set table_type='transient' -%}\n{% endif %}\n\n{{ compiled_code }}\n\n\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n            session.use_database(target_relation.database)\n            session.use_schema(target_relation.schema)\n            # session.write_pandas does not have overwrite function\n            df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', table_type='{{table_type}}')\n\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8785014, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql": {"name": "snowflake__get_replace_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_replace_dynamic_table_sql(relation, sql) -%}\n{#-\n    Produce DDL that replaces a dynamic table with a new dynamic table\n\n    Args:\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Globals:\n    - config: NodeConfig - contains the attribution required to produce a SnowflakeDynamicTableConfig\n    Returns:\n        A valid DDL statement which will result in a new dynamic table.\n-#}\n\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\n    {%- if catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n        {{ snowflake__replace_dynamic_table_info_schema_sql(dynamic_table, relation, sql) }}\n    {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n        {{ snowflake__replace_dynamic_table_built_in_sql(dynamic_table, relation, sql) }}\n    {%- else -%}\n        {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql", "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8798914, "supported_languages": null}, "macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql": {"name": "snowflake__replace_dynamic_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__replace_dynamic_table_info_schema_sql", "macro_sql": "{% macro snowflake__replace_dynamic_table_info_schema_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that replaces an info schema dynamic table with a new info schema dynamic table\n\n    This follows the syntax outlined here:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic info schema table.\n-#}\n\ncreate or replace dynamic table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.880443, "supported_languages": null}, "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql": {"name": "snowflake__replace_dynamic_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/replace.sql", "original_file_path": "macros/relations/dynamic_table/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__replace_dynamic_table_built_in_sql", "macro_sql": "{% macro snowflake__replace_dynamic_table_built_in_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that replaces a dynamic iceberg table with a new dynamic iceberg table\n\n    This follows the syntax outlined here:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\ncreate or replace dynamic iceberg table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    catalog = 'snowflake'\n    base_location = '{{ catalog_relation.base_location }}'\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8812273, "supported_languages": null}, "macro.dbt_snowflake.snowflake__describe_dynamic_table": {"name": "snowflake__describe_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/describe.sql", "original_file_path": "macros/relations/dynamic_table/describe.sql", "unique_id": "macro.dbt_snowflake.snowflake__describe_dynamic_table", "macro_sql": "{% macro snowflake__describe_dynamic_table(relation) %}\n{#-\n    Get all relevant metadata about a dynamic table\n\n    Args:\n    - relation: SnowflakeRelation - the relation to describe\n    Returns:\n        A dictionary with one or two entries depending on whether iceberg is enabled:\n        - dynamic_table: the metadata associated with an info schema dynamic table\n-#}\n    {%- set _dynamic_table_sql -%}\n    alter session set quoted_identifiers_ignore_case = false;\n    show dynamic tables\n        like '{{ relation.identifier }}'\n        in schema {{ relation.database }}.{{ relation.schema }}\n    ;\n    select\n        \"name\",\n        \"schema_name\",\n        \"database_name\",\n        \"text\",\n        \"target_lag\",\n        \"warehouse\",\n        \"refresh_mode\"\n    from table(result_scan(last_query_id()))\n    ;\n    {%- endset -%}\n\n    {%- set results = {'dynamic_table': run_query(_dynamic_table_sql)} -%}\n\n    alter session unset quoted_identifiers_ignore_case;\n\n    {%- do return(results) -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8819869, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql": {"name": "snowflake__get_drop_dynamic_table_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/drop.sql", "original_file_path": "macros/relations/dynamic_table/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_dynamic_table_sql", "macro_sql": "{% macro snowflake__get_drop_dynamic_table_sql(relation) %}\n    drop dynamic table if exists {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.882212, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql": {"name": "snowflake__get_alter_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/alter.sql", "original_file_path": "macros/relations/dynamic_table/alter.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_alter_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_alter_dynamic_table_as_sql(\n    existing_relation,\n    configuration_changes,\n    target_relation,\n    sql\n) -%}\n    {{- log('Applying ALTER to: ' ~ existing_relation) -}}\n\n    {% if configuration_changes.requires_full_refresh %}\n        {{- get_replace_sql(existing_relation, target_relation, sql) -}}\n\n    {% else %}\n\n        {%- set target_lag = configuration_changes.target_lag -%}\n        {%- if target_lag -%}{{- log('Applying UPDATE TARGET_LAG to: ' ~ existing_relation) -}}{%- endif -%}\n        {%- set snowflake_warehouse = configuration_changes.snowflake_warehouse -%}\n        {%- if snowflake_warehouse -%}{{- log('Applying UPDATE WAREHOUSE to: ' ~ existing_relation) -}}{%- endif -%}\n\n        alter dynamic table {{ existing_relation }} set\n            {% if target_lag %}target_lag = '{{ target_lag.context }}'{% endif %}\n            {% if snowflake_warehouse %}warehouse = {{ snowflake_warehouse.context }}{% endif %}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8836055, "supported_languages": null}, "macro.dbt_snowflake.snowflake__refresh_dynamic_table": {"name": "snowflake__refresh_dynamic_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/refresh.sql", "original_file_path": "macros/relations/dynamic_table/refresh.sql", "unique_id": "macro.dbt_snowflake.snowflake__refresh_dynamic_table", "macro_sql": "{% macro snowflake__refresh_dynamic_table(relation) -%}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n\n    alter dynamic table {{ relation }} refresh\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8839219, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql": {"name": "snowflake__get_create_dynamic_table_as_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_create_dynamic_table_as_sql", "macro_sql": "{% macro snowflake__get_create_dynamic_table_as_sql(relation, sql) -%}\n\n    {%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n    {%- set dynamic_table = relation.from_config(config.model) -%}\n\n    {%- if catalog_relation.catalog_type == 'INFO_SCHEMA' -%}\n        {{ snowflake__create_dynamic_table_info_schema_sql(dynamic_table, relation, compiled_code) }}\n    {%- elif catalog_relation.catalog_type == 'BUILT_IN' -%}\n        {{ snowflake__create_dynamic_table_built_in_sql(dynamic_table, relation, compiled_code) }}\n    {%- else -%}\n        {% do exceptions.raise_compiler_error('Unexpected model config for: ' ~ relation) %}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql", "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8852503, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql": {"name": "snowflake__create_dynamic_table_info_schema_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_dynamic_table_info_schema_sql", "macro_sql": "{% macro snowflake__create_dynamic_table_info_schema_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that creates an info schema dynamic table\n\n    Implements CREATE DYNAMIC TABLE:\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#syntax\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic info schema table.\n-#}\n\ncreate dynamic table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8857784, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql": {"name": "snowflake__create_dynamic_table_built_in_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/dynamic_table/create.sql", "original_file_path": "macros/relations/dynamic_table/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_dynamic_table_built_in_sql", "macro_sql": "{% macro snowflake__create_dynamic_table_built_in_sql(dynamic_table, relation, sql) -%}\n{#-\n    Produce DDL that creates a dynamic iceberg table\n\n    Implements CREATE DYNAMIC ICEBERG TABLE (Snowflake as the Iceberg catalog):\n    https://docs.snowflake.com/en/sql-reference/sql/create-dynamic-table#create-dynamic-iceberg-table\n\n    Args:\n    - dynamic_table: SnowflakeDynamicTableConfig - contains all of the configuration for the dynamic table\n    - relation: Union[SnowflakeRelation, str]\n        - SnowflakeRelation - required for relation.render()\n        - str - is already the rendered relation name\n    - sql: str - the code defining the model\n    Returns:\n        A valid DDL statement which will result in a new dynamic iceberg table.\n-#}\n\n{%- set catalog_relation = adapter.build_catalog_relation(config.model) -%}\n\ncreate dynamic iceberg table {{ relation }}\n    target_lag = '{{ dynamic_table.target_lag }}'\n    warehouse = {{ dynamic_table.snowflake_warehouse }}\n    {{ optional('external_volume', catalog_relation.external_volume, \"'\") }}\n    catalog = 'SNOWFLAKE'  -- required, and always SNOWFLAKE for built-in Iceberg tables\n    base_location = '{{ catalog_relation.base_location }}'\n    {{ optional('refresh_mode', dynamic_table.refresh_mode) }}\n    {{ optional('initialize', dynamic_table.initialize) }}\n    as (\n        {{ sql }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.optional"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8865867, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_replace_view_sql": {"name": "snowflake__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_replace_view_sql", "macro_sql": "{% macro snowflake__get_replace_view_sql(relation, sql) %}\n    {{ snowflake__create_view_as(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8868752, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_rename_view_sql": {"name": "snowflake__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_rename_view_sql", "macro_sql": "{%- macro snowflake__get_rename_view_sql(relation, new_name) -%}\n    /*\n    Rename or move a view to the new name.\n\n    Args:\n        relation: SnowflakeRelation - relation to be renamed\n        new_name: Union[str, SnowflakeRelation] - new name for `relation`\n            if providing a string, the default database/schema will be used if that string is just an identifier\n            if providing a SnowflakeRelation, `render` will be used to produce a fully qualified name\n    Returns: templated string\n    */\n    alter view {{ relation }} rename to {{ new_name }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8872206, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_drop_view_sql": {"name": "snowflake__get_drop_view_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_drop_view_sql", "macro_sql": "{% macro snowflake__get_drop_view_sql(relation) %}\n    drop view if exists {{ relation }} cascade\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8874614, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.889659, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.889902, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_or_replace_view": {"name": "snowflake__create_or_replace_view", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_or_replace_view", "macro_sql": "{% macro snowflake__create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and not old_relation.is_view -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8916008, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.893208, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.89341, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.893666, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.893843, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.894381, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8946621, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8948596, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8951993, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation.render() }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8955405, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.895885, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation.render() }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8962028, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8965578, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8975976, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8978796, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.898274, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.8986168, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation.render() ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9004016, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9008257, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.901167, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9018059, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.902066, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9023874, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.90265, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9031792, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9039314, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9051285, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9055533, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9058635, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9062784, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9065614, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9068115, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9070795, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9074724, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9077823, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9082592, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9085402, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.908791, "supported_languages": null}, "macro.dbt.get_catalog_for_single_relation": {"name": "get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_for_single_relation", "macro_sql": "{% macro get_catalog_for_single_relation(relation) %}\n  {{ return(adapter.dispatch('get_catalog_for_single_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_for_single_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9090695, "supported_languages": null}, "macro.dbt.default__get_catalog_for_single_relation": {"name": "default__get_catalog_for_single_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_for_single_relation", "macro_sql": "{% macro default__get_catalog_for_single_relation(relation) %}\n  {{ exceptions.raise_not_implemented(\n    'get_catalog_for_single_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.909337, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9095862, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9098284, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.910141, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9104452, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9109175, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.911201, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9114656, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.911753, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9124155, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9130323, "supported_languages": null}, "macro.dbt.collect_freshness_custom_sql": {"name": "collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness_custom_sql", "macro_sql": "{% macro collect_freshness_custom_sql(source, loaded_at_query) %}\n  {{ return(adapter.dispatch('collect_freshness_custom_sql', 'dbt')(source, loaded_at_query))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness_custom_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.913497, "supported_languages": null}, "macro.dbt.default__collect_freshness_custom_sql": {"name": "default__collect_freshness_custom_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness_custom_sql", "macro_sql": "{% macro default__collect_freshness_custom_sql(source, loaded_at_query) %}\n  {% call statement('collect_freshness_custom_sql', fetch_result=True, auto_begin=False) -%}\n  with source_query as (\n    {{ loaded_at_query }}\n  )\n  select\n    (select * from source_query) as max_loaded_at,\n    {{ current_timestamp() }} as snapshotted_at\n  {% endcall %}\n  {{ return(load_result('collect_freshness_custom_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9139788, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.91565, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9158976, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9163947, "supported_languages": null}, "macro.dbt.get_list_of_column_names": {"name": "get_list_of_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_list_of_column_names", "macro_sql": "\n\n{%- macro get_list_of_column_names(columns) -%}\n  {% set col_names = [] %}\n  {% for col in columns %}\n    {% do col_names.append(col.name) %}\n  {% endfor %}\n  {{ return(col_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9168391, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9171658, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9175098, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9177823, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      {{ cast('null', col['data_type']) }} as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.919552, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9200857, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.920379, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.920889, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9212263, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation.render() }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation.render() }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation.render() }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation.render() }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.922224, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9226267, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation.render() }}\n\n            {% for column in add_columns %}\n               add column {{ column.quoted }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.quoted }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9238625, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header is not none -%}\n  {{ sql_header }}\n  {%- endif %}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9244528, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "\n{%- macro get_limit_subquery_sql(sql, limit) -%}\n  {{ adapter.dispatch('get_limit_sql', 'dbt')(sql, limit) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_limit_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9247358, "supported_languages": null}, "macro.dbt.default__get_limit_sql": {"name": "default__get_limit_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_sql", "macro_sql": "{% macro default__get_limit_sql(sql, limit) %}\n  {{ sql }}\n  {% if limit is not none %}\n  limit {{ limit }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9250264, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9260175, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9262836, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {#-- This ensures microbatch batches get unique temp relations to avoid clobbering --#}\n  {% if suffix == '__dbt_tmp' and model.batch %}\n    {% set suffix = suffix ~ '_' ~ model.batch.id %}\n  {% endif %}\n\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9268534, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.927306, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9276683, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9286451, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9289262, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation.render() }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.92921, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.929595, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.930419, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9307706, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9309855, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9316924, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9319048, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9321456, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9327807, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9330618, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9332974, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9335382, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.933734, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9344077, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9346385, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.934863, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9350314, "supported_languages": null}, "macro.dbt.get_snapshot_get_time_data_type": {"name": "get_snapshot_get_time_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.get_snapshot_get_time_data_type", "macro_sql": "{% macro get_snapshot_get_time_data_type() %}\n    {% set snapshot_time = adapter.dispatch('snapshot_get_time', 'dbt')() %}\n    {% set time_data_type_sql = 'select ' ~ snapshot_time ~ ' as dbt_snapshot_time' %}\n    {% set snapshot_time_column_schema = get_column_schema_from_query(time_data_type_sql) %}\n    {% set time_data_type = snapshot_time_column_schema[0].dtype %}\n    {{ return(time_data_type or none) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9356613, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.935916, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9360392, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9363196, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9365802, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9370124, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9374938, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9379506, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.939396, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9396932, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.939915, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9401357, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9403765, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n  {% set limit = config.get('limit') %}\n\n  {% set sql_with_limit %}\n    {{ get_limit_subquery_sql(sql, limit) }}\n  {% endset %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql_with_limit) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {# Since the test failures have already been saved to the database, reuse that result rather than querying again #}\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql_with_limit %}\n\n  {% endif %}\n\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {# The limit has already been included above, and we do not want to duplicate it again. We also want to be safe for macro overrides treating `limit` as a required parameter. #}\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit=none)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql", "macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9437978, "supported_languages": ["sql"]}, "macro.dbt.materialization_unit_default": {"name": "materialization_unit_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/unit.sql", "original_file_path": "macros/materializations/tests/unit.sql", "unique_id": "macro.dbt.materialization_unit_default", "macro_sql": "{%- materialization unit, default -%}\n\n  {% set relations = [] %}\n\n  {% set expected_rows = config.get('expected_rows') %}\n  {% set expected_sql = config.get('expected_sql') %}\n  {% set tested_expected_column_names = expected_rows[0].keys() if (expected_rows | length ) > 0 else get_columns_in_query(sql) %}\n\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {% do run_query(get_create_table_as_sql(True, temp_relation, get_empty_subquery_sql(sql))) %}\n  {%- set columns_in_relation = adapter.get_columns_in_relation(temp_relation) -%}\n  {%- set column_name_to_data_types = {} -%}\n  {%- set column_name_to_quoted = {} -%}\n  {%- for column in columns_in_relation -%}\n  {%-   do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n  {%-   do column_name_to_quoted.update({column.name|lower: column.quoted}) -%}\n  {%- endfor -%}\n\n  {%- set expected_column_names_quoted = [] -%}\n  {%- for column_name in tested_expected_column_names -%}\n  {%-   do expected_column_names_quoted.append(column_name_to_quoted[column_name|lower]) -%}\n  {%- endfor -%}\n\n  {% if not expected_sql %}\n  {%   set expected_sql = get_expected_sql(expected_rows, column_name_to_data_types, column_name_to_quoted) %}\n  {% endif %}\n  {% set unit_test_sql = get_unit_test_sql(sql, expected_sql, expected_column_names_quoted) %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ unit_test_sql }}\n\n  {%- endcall %}\n\n  {% do adapter.drop_relation(temp_relation) %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_empty_subquery_sql", "macro.dbt.get_expected_sql", "macro.dbt.get_unit_test_sql", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.946642, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9474487, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9479158, "supported_languages": null}, "macro.dbt.get_unit_test_sql": {"name": "get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_unit_test_sql", "macro_sql": "{% macro get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n  {{ adapter.dispatch('get_unit_test_sql', 'dbt')(main_sql, expected_fixture_sql, expected_column_names) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_unit_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9482305, "supported_languages": null}, "macro.dbt.default__get_unit_test_sql": {"name": "default__get_unit_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_unit_test_sql", "macro_sql": "{% macro default__get_unit_test_sql(main_sql, expected_fixture_sql, expected_column_names) -%}\n-- Build actual result given inputs\nwith dbt_internal_unit_test_actual as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%},{% endif %}{%- endfor -%}, {{ dbt.string_literal(\"actual\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ main_sql }}\n  ) _dbt_internal_unit_test_actual\n),\n-- Build expected result\ndbt_internal_unit_test_expected as (\n  select\n    {% for expected_column_name in expected_column_names %}{{expected_column_name}}{% if not loop.last -%}, {% endif %}{%- endfor -%}, {{ dbt.string_literal(\"expected\") }} as {{ adapter.quote(\"actual_or_expected\") }}\n  from (\n    {{ expected_fixture_sql }}\n  ) _dbt_internal_unit_test_expected\n)\n-- Union actual and expected results\nselect * from dbt_internal_unit_test_actual\nunion all\nselect * from dbt_internal_unit_test_expected\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9491742, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9496589, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9503021, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {# The model['config'] parameter below is no longer used, but passing anyway for compatibility #}\n  {# It was a dictionary of config, instead of the config object from the context #}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", model['config'], target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set build_or_select_sql = build_sql %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n      {{ adapter.assert_valid_snapshot_target_given_strategy(target_relation, columns, strategy) }}\n\n      {% set build_or_select_sql = snapshot_staging_table(strategy, sql, target_relation) %}\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set remove_columns = ['dbt_change_type', 'DBT_CHANGE_TYPE', 'dbt_unique_key', 'DBT_UNIQUE_KEY'] %}\n      {% if unique_key | is_list %}\n          {% for key in strategy.unique_key %}\n              {{ remove_columns.append('dbt_unique_key_' + loop.index|string) }}\n              {{ remove_columns.append('DBT_UNIQUE_KEY_' + loop.index|string) }}\n          {% endfor %}\n      {% endif %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'in', remove_columns)\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n\n  {{ check_time_data_types(build_or_select_sql) }}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_staging_table", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.check_time_data_types", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9564307, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9594991, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9597585, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9601042, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set primary_key = config.get('unique_key') %}\n    {% set updated_at = config.get('updated_at') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.{{ columns.dbt_valid_from }} < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.961587, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9618425, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9621127, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9642289, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, model_config, target_exists) %}\n    {# The model_config parameter is no longer used, but is passed in anyway for compatibility. #}\n    {% set check_cols_config = config.get('check_cols') %}\n    {% set primary_key = config.get('unique_key') %}\n    {% set hard_deletes = adapter.get_hard_deletes_behavior(config) %}\n    {% set invalidate_hard_deletes = hard_deletes == 'invalidate' %}\n    {% set updated_at = config.get('updated_at') or snapshot_get_time() %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_args = api.Relation.scd_args(primary_key, updated_at) %}\n    {% set scd_id_expr = snapshot_hash_arguments(scd_args) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes,\n        \"hard_deletes\": hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9664376, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9693918, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation.render() }} add column {{ adapter.quote(column.name) }} {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.96989, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9701424, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9703064, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9705293, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9707124, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9710197, "supported_languages": null}, "macro.dbt.get_snapshot_table_column_names": {"name": "get_snapshot_table_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_snapshot_table_column_names", "macro_sql": "{% macro get_snapshot_table_column_names() %}\n    {{ return({'dbt_valid_to': 'dbt_valid_to', 'dbt_valid_from': 'dbt_valid_from', 'dbt_scd_id': 'dbt_scd_id', 'dbt_updated_at': 'dbt_updated_at', 'dbt_is_deleted': 'dbt_is_deleted'}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9713988, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n    {% if strategy.hard_deletes == 'new_record' %}\n        {% set new_scd_id = snapshot_hash_arguments([columns.dbt_scd_id, snapshot_get_time()]) %}\n    {% endif %}\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from {{ target_relation }}\n        where\n            {% if config.get('dbt_valid_to_current') %}\n\t\t{% set source_unique_key = columns.dbt_valid_to | trim %}\n\t\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\n\t\t{# The exact equals semantics between NULL values depends on the current behavior flag set. Also, update records if the source field is null #}\n                ( {{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null )\n            {% else %}\n                {{ columns.dbt_valid_to }} is null\n            {% endif %}\n\n    ),\n\n    insertions_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ get_dbt_valid_to_current(strategy, columns) }},\n            {{ strategy.scd_id }} as {{ columns.dbt_scd_id }}\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }},\n            {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n            {{ strategy.updated_at }} as {{ columns.dbt_valid_to }}\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n\n    deletes_source_data as (\n\n        select *, {{ unique_key_fields(strategy.unique_key) }}\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            ,'False' as {{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"snapshotted_data\") }}\n            or ({{ unique_key_is_not_null(strategy.unique_key, \"snapshotted_data\") }} and (\n               {{ strategy.row_changed }} {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n            )\n\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n\n        from updates_source_data as source_data\n        join snapshotted_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where (\n            {{ strategy.row_changed }}  {%- if strategy.hard_deletes == 'new_record' -%} or snapshotted_data.{{ columns.dbt_is_deleted }} = 'True' {% endif %}\n        )\n    )\n\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    ,\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_to }},\n            snapshotted_data.{{ columns.dbt_scd_id }}\n          {%- if strategy.hard_deletes == 'new_record' -%}\n            , snapshotted_data.{{ columns.dbt_is_deleted }}\n          {%- endif %}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n            where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n\n            {%- if strategy.hard_deletes == 'new_record' %}\n            and not (\n                --avoid updating the record's valid_to if the latest entry is marked as deleted\n                snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n                and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n            {%- endif %}\n    )\n    {%- endif %}\n\n    {%- if strategy.hard_deletes == 'new_record' %}\n        {% set snapshotted_cols = get_list_of_column_names(get_columns_in_relation(target_relation)) %}\n        {% set source_sql_cols = get_column_schema_from_query(source_sql) %}\n    ,\n    deletion_records as (\n\n        select\n            'insert' as dbt_change_type,\n            {#\n                If a column has been added to the source it won't yet exist in the\n                snapshotted table so we insert a null value as a placeholder for the column.\n             #}\n            {%- for col in source_sql_cols -%}\n            {%- if col.name in snapshotted_cols -%}\n            snapshotted_data.{{ adapter.quote(col.column) }},\n            {%- else -%}\n            NULL as {{ adapter.quote(col.column) }},\n            {%- endif -%}\n            {% endfor -%}\n            {%- if strategy.unique_key | is_list -%}\n                {%- for key in strategy.unique_key -%}\n            snapshotted_data.{{ key }} as dbt_unique_key_{{ loop.index }},\n                {% endfor -%}\n            {%- else -%}\n            snapshotted_data.dbt_unique_key as dbt_unique_key,\n            {% endif -%}\n            {{ snapshot_get_time() }} as {{ columns.dbt_valid_from }},\n            {{ snapshot_get_time() }} as {{ columns.dbt_updated_at }},\n            snapshotted_data.{{ columns.dbt_valid_to }} as {{ columns.dbt_valid_to }},\n            {{ new_scd_id }} as {{ columns.dbt_scd_id }},\n            'True' as {{ columns.dbt_is_deleted }}\n        from snapshotted_data\n        left join deletes_source_data as source_data\n            on {{ unique_key_join_on(strategy.unique_key, \"snapshotted_data\", \"source_data\") }}\n        where {{ unique_key_is_null(strategy.unique_key, \"source_data\") }}\n        and not (\n            --avoid inserting a new record if the latest one is marked as deleted\n            snapshotted_data.{{ columns.dbt_is_deleted }} = 'True'\n            and snapshotted_data.{{ columns.dbt_valid_to }} is null\n            )\n\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.hard_deletes == 'invalidate' or strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletes\n    {%- endif %}\n    {%- if strategy.hard_deletes == 'new_record' %}\n    union all\n    select * from deletion_records\n    {%- endif %}\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.snapshot_hash_arguments", "macro.dbt.snapshot_get_time", "macro.dbt.unique_key_fields", "macro.dbt.equals", "macro.dbt.get_dbt_valid_to_current", "macro.dbt.unique_key_join_on", "macro.dbt.unique_key_is_null", "macro.dbt.unique_key_is_not_null", "macro.dbt.get_list_of_column_names", "macro.dbt.get_columns_in_relation", "macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9777217, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9780464, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n    {% set columns = config.get('snapshot_table_column_names') or get_snapshot_table_column_names() %}\n\n    select *,\n        {{ strategy.scd_id }} as {{ columns.dbt_scd_id }},\n        {{ strategy.updated_at }} as {{ columns.dbt_updated_at }},\n        {{ strategy.updated_at }} as {{ columns.dbt_valid_from }},\n        {{ get_dbt_valid_to_current(strategy, columns) }}\n      {%- if strategy.hard_deletes == 'new_record' -%}\n        , 'False' as {{ columns.dbt_is_deleted }}\n      {% endif -%}\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.get_dbt_valid_to_current"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9788465, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9795053, "supported_languages": null}, "macro.dbt.get_updated_at_column_data_type": {"name": "get_updated_at_column_data_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_updated_at_column_data_type", "macro_sql": "{% macro get_updated_at_column_data_type(snapshot_sql) %}\n    {% set snapshot_sql_column_schema = get_column_schema_from_query(snapshot_sql) %}\n    {% set dbt_updated_at_data_type = null %}\n    {% set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {% set ns.dbt_updated_at_data_type = null -%}\n    {% for column in snapshot_sql_column_schema %}\n    {%   if ((column.column == 'dbt_updated_at') or (column.column == 'DBT_UPDATED_AT')) %}\n    {%     set ns.dbt_updated_at_data_type = column.dtype %}\n    {%   endif %}\n    {% endfor %}\n    {{ return(ns.dbt_updated_at_data_type or none)  }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9804251, "supported_languages": null}, "macro.dbt.check_time_data_types": {"name": "check_time_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.check_time_data_types", "macro_sql": "{% macro check_time_data_types(sql) %}\n  {% set dbt_updated_at_data_type = get_updated_at_column_data_type(sql) %}\n  {% set snapshot_get_time_data_type = get_snapshot_get_time_data_type() %}\n  {% if snapshot_get_time_data_type is not none and dbt_updated_at_data_type is not none and snapshot_get_time_data_type != dbt_updated_at_data_type %}\n  {%   if exceptions.warn_snapshot_timestamp_data_types %}\n  {{     exceptions.warn_snapshot_timestamp_data_types(snapshot_get_time_data_type, dbt_updated_at_data_type) }}\n  {%   endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_updated_at_column_data_type", "macro.dbt.get_snapshot_get_time_data_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9810715, "supported_languages": null}, "macro.dbt.get_dbt_valid_to_current": {"name": "get_dbt_valid_to_current", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_dbt_valid_to_current", "macro_sql": "{% macro get_dbt_valid_to_current(strategy, columns) %}\n  {% set dbt_valid_to_current = config.get('dbt_valid_to_current') or \"null\" %}\n  coalesce(nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}), {{dbt_valid_to_current}})\n  as {{ columns.dbt_valid_to }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9815104, "supported_languages": null}, "macro.dbt.unique_key_fields": {"name": "unique_key_fields", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_fields", "macro_sql": "{% macro unique_key_fields(unique_key) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n            {{ key }} as dbt_unique_key_{{ loop.index }}\n            {%- if not loop.last %} , {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ unique_key }} as dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.982035, "supported_languages": null}, "macro.dbt.unique_key_join_on": {"name": "unique_key_join_on", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_join_on", "macro_sql": "{% macro unique_key_join_on(unique_key, identifier, from_identifier) %}\n    {% if unique_key | is_list %}\n        {% for key in unique_key %}\n\t    {% set source_unique_key = (identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {% set target_unique_key = (from_identifier ~ \".dbt_unique_key_\" ~ loop.index) | trim %}\n\t    {{ equals(source_unique_key, target_unique_key) }}\n            {%- if not loop.last %} and {%- endif %}\n        {% endfor %}\n    {% else %}\n        {{ identifier }}.dbt_unique_key = {{ from_identifier }}.dbt_unique_key\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9829137, "supported_languages": null}, "macro.dbt.unique_key_is_null": {"name": "unique_key_is_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_null", "macro_sql": "{% macro unique_key_is_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9832525, "supported_languages": null}, "macro.dbt.unique_key_is_not_null": {"name": "unique_key_is_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.unique_key_is_not_null", "macro_sql": "{% macro unique_key_is_not_null(unique_key, identifier) %}\n    {% if unique_key | is_list %}\n        {{ identifier }}.dbt_unique_key_1 is not null\n    {% else %}\n        {{ identifier }}.dbt_unique_key is not null\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9835792, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.984193, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {%- set columns = config.get(\"snapshot_table_column_names\") or get_snapshot_table_column_names() -%}\n\n    merge into {{ target.render() }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.{{ columns.dbt_scd_id }} = DBT_INTERNAL_DEST.{{ columns.dbt_scd_id }}\n\n    when matched\n     {% if config.get(\"dbt_valid_to_current\") %}\n\t{% set source_unique_key = (\"DBT_INTERNAL_DEST.\" ~ columns.dbt_valid_to) | trim %}\n\t{% set target_unique_key = config.get('dbt_valid_to_current') | trim %}\n\tand ({{ equals(source_unique_key, target_unique_key) }} or {{ source_unique_key }} is null)\n\n     {% else %}\n       and DBT_INTERNAL_DEST.{{ columns.dbt_valid_to }} is null\n     {% endif %}\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set {{ columns.dbt_valid_to }} = DBT_INTERNAL_SOURCE.{{ columns.dbt_valid_to }}\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_snapshot_table_column_names", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9855256, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation.render())) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9892824, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9906228, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.991995, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.992368, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation.render() %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9931285, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9934366, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9936533, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9938686, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9940524, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.99431, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9944944, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9952583, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.995544, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141886.9975793, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.000739, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0030937, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0036962, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0040755, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation.render() ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation.render() ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0060587, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0064297, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0074122, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  {% do create_indexes(intermediate_relation) %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.01055, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0114424, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0129714, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set source_unique_key = (\"DBT_INTERNAL_SOURCE.\" ~ unique_key) | trim %}\n\t    {% set target_unique_key = (\"DBT_INTERNAL_DEST.\" ~ unique_key) | trim %}\n\t    {% set unique_key_match = equals(source_unique_key, target_unique_key) | trim %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns", "macro.dbt.equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0156045, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0159967, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is string %}\n        {% set unique_key = [unique_key] %}\n        {% endif %}\n\n        {%- set unique_key_str = unique_key|join(', ') -%}\n\n        delete from {{ target }} as DBT_INTERNAL_DEST\n        where ({{ unique_key_str }}) in (\n            select distinct {{ unique_key_str }}\n            from {{ source }} as DBT_INTERNAL_SOURCE\n        )\n        {%- if incremental_predicates %}\n            {% for predicate in incremental_predicates %}\n                and {{ predicate }}\n            {% endfor %}\n        {%- endif -%};\n\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0170946, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0175118, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0184941, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0196838, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0205274, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0216908, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0220478, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0231707, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0241258, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0244968, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0247834, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0252194, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0256634, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0260937, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.026394, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0267801, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.027057, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.027302, "supported_languages": null}, "macro.dbt.get_incremental_microbatch_sql": {"name": "get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_microbatch_sql", "macro_sql": "{% macro get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_microbatch_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_microbatch_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.02758, "supported_languages": null}, "macro.dbt.default__get_incremental_microbatch_sql": {"name": "default__get_incremental_microbatch_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_microbatch_sql", "macro_sql": "{% macro default__get_incremental_microbatch_sql(arg_dict) %}\n\n  {{ exceptions.raise_not_implemented('microbatch materialization strategy not implemented for adapter ' + adapter.type()) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0278285, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0282667, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0299795, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0318444, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.033687, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0349793, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n      {% set relation_for_indexes = target_relation %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set relation_for_indexes = intermediate_relation %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% set relation_for_indexes = temp_relation %}\n    {% set contract_config = config.get('contract') %}\n    {% if not contract_config or not contract_config.enforced %}\n      {% do adapter.expand_target_column_types(\n               from_relation=temp_relation,\n               to_relation=target_relation) %}\n    {% endif %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(relation_for_indexes) %}\n  {% endif %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0415423, "supported_languages": ["sql"]}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0419393, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0421245, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation.render() ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% if target_relation.database == defer_relation.database and\n            target_relation.schema == defer_relation.schema and\n            target_relation.identifier == defer_relation.identifier %}\n        {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation.render()) }}\n      {% else %}\n        {% call statement('main') %}\n            {{ create_or_replace_clone(target_relation, defer_relation) }}\n        {% endcall %}\n      {% endif %}\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0458891, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0463572, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation.render() }} clone {{ defer_relation.render() }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.046621, "supported_languages": null}, "macro.dbt.get_fixture_sql": {"name": "get_fixture_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_fixture_sql", "macro_sql": "{% macro get_fixture_sql(rows, column_name_to_data_types) %}\n-- Fixture for {{ model.name }}\n{% set default_row = {} %}\n\n{%- if not column_name_to_data_types -%}\n{#-- Use defer_relation IFF it is available in the manifest and 'this' is missing from the database --#}\n{%-   set this_or_defer_relation = defer_relation if (defer_relation and not load_relation(this)) else this -%}\n{%-   set columns_in_relation = adapter.get_columns_in_relation(this_or_defer_relation) -%}\n\n{%-   set column_name_to_data_types = {} -%}\n{%-   set column_name_to_quoted = {} -%}\n{%-   for column in columns_in_relation -%}\n\n{#-- This needs to be a case-insensitive comparison --#}\n{%-     do column_name_to_data_types.update({column.name|lower: column.data_type}) -%}\n{%-     do column_name_to_quoted.update({column.name|lower: column.quoted}) -%}\n{%-   endfor -%}\n{%- endif -%}\n\n{%- if not column_name_to_data_types -%}\n    {{ exceptions.raise_compiler_error(\"Not able to get columns for unit test '\" ~ model.name ~ \"' from relation \" ~ this ~ \" because the relation doesn't exist\") }}\n{%- endif -%}\n\n{%- for column_name, column_type in column_name_to_data_types.items() -%}\n    {%- do default_row.update({column_name: (safe_cast(\"null\", column_type) | trim )}) -%}\n{%- endfor -%}\n\n{{ validate_fixture_rows(rows, row_number) }}\n\n{%- for row in rows -%}\n{%-   set formatted_row = format_row(row, column_name_to_data_types) -%}\n{%-   set default_row_copy = default_row.copy() -%}\n{%-   do default_row_copy.update(formatted_row) -%}\nselect\n{%-   for column_name, column_value in default_row_copy.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%}, {%- endif %}\n{%-   endfor %}\n{%-   if not loop.last %}\nunion all\n{%    endif %}\n{%- endfor -%}\n\n{%- if (rows | length) == 0 -%}\n    select\n    {%- for column_name, column_value in default_row.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%},{%- endif %}\n    {%- endfor %}\n    limit 0\n{%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.safe_cast", "macro.dbt.validate_fixture_rows", "macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0505464, "supported_languages": null}, "macro.dbt.get_expected_sql": {"name": "get_expected_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.get_expected_sql", "macro_sql": "{% macro get_expected_sql(rows, column_name_to_data_types, column_name_to_quoted) %}\n\n{%- if (rows | length) == 0 -%}\n    select * from dbt_internal_unit_test_actual\n    limit 0\n{%- else -%}\n{%- for row in rows -%}\n{%- set formatted_row = format_row(row, column_name_to_data_types) -%}\nselect\n{%- for column_name, column_value in formatted_row.items() %} {{ column_value }} as {{ column_name_to_quoted[column_name] }}{% if not loop.last -%}, {%- endif %}\n{%- endfor %}\n{%- if not loop.last %}\nunion all\n{% endif %}\n{%- endfor -%}\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.format_row"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.051467, "supported_languages": null}, "macro.dbt.format_row": {"name": "format_row", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.format_row", "macro_sql": "\n\n{%- macro format_row(row, column_name_to_data_types) -%}\n    {#-- generate case-insensitive formatted row --#}\n    {% set formatted_row = {} %}\n    {%- for column_name, column_value in row.items() -%}\n        {% set column_name = column_name|lower %}\n\n        {%- if column_name not in column_name_to_data_types %}\n            {#-- if user-provided row contains column name that relation does not contain, raise an error --#}\n            {% set fixture_name = \"expected output\" if model.resource_type == 'unit_test' else (\"'\" ~ model.name ~ \"'\") %}\n            {{ exceptions.raise_compiler_error(\n                \"Invalid column name: '\" ~ column_name ~ \"' in unit test fixture for \" ~ fixture_name ~ \".\"\n                \"\\nAccepted columns for \" ~ fixture_name ~ \" are: \" ~ (column_name_to_data_types.keys()|list)\n            ) }}\n        {%- endif -%}\n\n        {%- set column_type = column_name_to_data_types[column_name] %}\n\n        {#-- sanitize column_value: wrap yaml strings in quotes, apply cast --#}\n        {%- set column_value_clean = column_value -%}\n        {%- if column_value is string -%}\n            {%- set column_value_clean = dbt.string_literal(dbt.escape_single_quotes(column_value)) -%}\n        {%- elif column_value is none -%}\n            {%- set column_value_clean = 'null' -%}\n        {%- endif -%}\n\n        {%- set row_update = {column_name: safe_cast(column_value_clean, column_type) } -%}\n        {%- do formatted_row.update(row_update) -%}\n    {%- endfor -%}\n    {{ return(formatted_row) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.string_literal", "macro.dbt.escape_single_quotes", "macro.dbt.safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.053151, "supported_languages": null}, "macro.dbt.validate_fixture_rows": {"name": "validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.validate_fixture_rows", "macro_sql": "{%- macro validate_fixture_rows(rows, row_number) -%}\n  {{ return(adapter.dispatch('validate_fixture_rows', 'dbt')(rows, row_number)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__validate_fixture_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0535123, "supported_languages": null}, "macro.dbt.default__validate_fixture_rows": {"name": "default__validate_fixture_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/unit_test_sql/get_fixture_sql.sql", "original_file_path": "macros/unit_test_sql/get_fixture_sql.sql", "unique_id": "macro.dbt.default__validate_fixture_rows", "macro_sql": "{%- macro default__validate_fixture_rows(rows, row_number) -%}\n  {# This is an abstract method for adapter overrides as needed #}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0536728, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.05422, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0546398, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.055189, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0557842, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0564396, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0568438, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0573366, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0577803, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.058133, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0586076, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0593958, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0604372, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0606816, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n\n        {#\n            We want to get the string of the returned relation by calling .render() in order to skip sample/empty\n            mode rendering logic. However, people override the default ref macro, and often return a string instead\n            of a relation (like the ref macro does by default). Thus, to make sure we dont blow things up, we have\n            to ensure the resolved relation has a .render() method.\n        #}\n        {%- if resolved.render is defined and resolved.render is callable -%}\n            {%- set resolved = resolved.render() -%}\n        {%- endif -%}\n\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0622659, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0628886, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0637743, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0644996, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0646222, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0649886, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0652497, "supported_languages": null}, "macro.dbt.equals": {"name": "equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.equals", "macro_sql": "{% macro equals(expr1, expr2) %}\n    {{ return(adapter.dispatch('equals', 'dbt') (expr1, expr2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__equals"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0657167, "supported_languages": null}, "macro.dbt.default__equals": {"name": "default__equals", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/equals.sql", "original_file_path": "macros/utils/equals.sql", "unique_id": "macro.dbt.default__equals", "macro_sql": "{% macro default__equals(expr1, expr2) -%}\n{%- if adapter.behavior.enable_truthy_nulls_equals_macro.no_warn %}\n    case when (({{ expr1 }} = {{ expr2 }}) or ({{ expr1 }} is null and {{ expr2 }} is null))\n        then 0\n        else 1\n    end = 0\n{%- else -%}\n    ({{ expr1 }} = {{ expr2 }})\n{%- endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.066164, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0666296, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0668905, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0673237, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0675404, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0679917, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0684154, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0686457, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0691044, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0693822, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0700977, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0710115, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.07138, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.071931, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0723274, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.072584, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0729158, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0730526, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0734797, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0736911, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0742495, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.074765, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0754359, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0760665, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.076627, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0768874, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.077248, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0776763, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.077894, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.078271, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.07844, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0788016, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0789678, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.079603, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0802622, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0805504, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0813613, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0817332, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.081898, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.082312, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0825326, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0828934, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0830948, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0835218, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0837438, "supported_languages": null}, "macro.dbt.date": {"name": "date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.date", "macro_sql": "{% macro date(year, month, day) %}\n  {{ return(adapter.dispatch('date', 'dbt') (year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.084209, "supported_languages": null}, "macro.dbt.default__date": {"name": "default__date", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date.sql", "original_file_path": "macros/utils/date.sql", "unique_id": "macro.dbt.default__date", "macro_sql": "{% macro default__date(year, month, day) -%}\n    {%- set dt = modules.datetime.date(year, month, day) -%}\n    {%- set iso_8601_formatted_date = dt.strftime('%Y-%m-%d') -%}\n    to_date('{{ iso_8601_formatted_date }}', 'YYYY-MM-DD')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.084665, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0851324, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0855277, "supported_languages": null}, "macro.dbt.cast": {"name": "cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.cast", "macro_sql": "{% macro cast(field, type) %}\n  {{ return(adapter.dispatch('cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0859263, "supported_languages": null}, "macro.dbt.default__cast": {"name": "default__cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast.sql", "original_file_path": "macros/utils/cast.sql", "unique_id": "macro.dbt.default__cast", "macro_sql": "{% macro default__cast(field, type) %}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0861282, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.086508, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0866752, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0870674, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0872908, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0882895, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0885324, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0887794, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0890098, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.089273, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0895157, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0897565, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.090022, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0902832, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0905159, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0907652, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.090987, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0912316, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0914838, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.091909, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0921197, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0924644, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0925937, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.093404, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation.type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.095376, "supported_languages": null}, "macro.dbt.drop_schema_named": {"name": "drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.drop_schema_named", "macro_sql": "{% macro drop_schema_named(schema_name) %}\n    {{ return(adapter.dispatch('drop_schema_named', 'dbt') (schema_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema_named"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0957806, "supported_languages": null}, "macro.dbt.default__drop_schema_named": {"name": "default__drop_schema_named", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/schema.sql", "original_file_path": "macros/relations/schema.sql", "unique_id": "macro.dbt.default__drop_schema_named", "macro_sql": "{% macro default__drop_schema_named(schema_name) %}\n  {% set schema_relation = api.Relation.create(schema=schema_name) %}\n  {{ adapter.drop_schema(schema_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0961008, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.096788, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0974536, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0977588, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation.render() }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0982094, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.098872, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation.render() }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0994725, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.0997453, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.10005, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1003647, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1008584, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1012523, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.101719, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1020334, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.102491, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1028042, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1033628, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1040456, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1045175, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1049416, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1053514, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.105582, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1059675, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1062126, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{- adapter.dispatch('drop_materialized_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1065867, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1069205, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.107719, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.10801, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1084464, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1086714, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1091046, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1093292, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1097198, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1099427, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.110346, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1105733, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1109564, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1111827, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{- adapter.dispatch('drop_table', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1115541, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1117578, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.112652, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1129303, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1135907, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1146514, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1153598, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1156366, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1159065, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1169696, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1171565, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1179698, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1186538, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1188657, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.120807, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.121401, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.121909, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1226814, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1229103, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1245663, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.124872, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation.render() ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.125226, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1256335, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1258569, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{- adapter.dispatch('drop_view', 'dbt')(relation) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1262095, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation.render() }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1264205, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1269426, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1271837, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.127474, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.render() }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1281295, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1300528, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.130919, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1313684, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1324425, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1344006, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.135549, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1358938, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.136572, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1369479, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.137422, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1378686, "supported_languages": null}, "macro.dbt_snowflake_query_tags.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.set_query_tag", "macro_sql": "{% macro set_query_tag(extra = {}) -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt_snowflake_query_tags')(extra=extra)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1389203, "supported_languages": null}, "macro.dbt_snowflake_query_tags.default__set_query_tag": {"name": "default__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.default__set_query_tag", "macro_sql": "{% macro default__set_query_tag(extra = {}) -%}\n    {# Get session level query tag #}\n    {% set original_query_tag = get_current_query_tag() %}\n    {% set original_query_tag_parsed = {} %}\n\n    {% if original_query_tag %}\n        {% if fromjson(original_query_tag) is mapping %}\n            {% set original_query_tag_parsed = fromjson(original_query_tag) %}\n        {% endif %}\n    {% endif %}\n\n    {# The env_vars_to_query_tag_list should contain an environment variables list to construct query tag dict #}\n    {% set env_var_query_tags = {} %}\n    {% if var('env_vars_to_query_tag_list', '') %} {# Get a list of env vars from env_vars_to_query_tag_list variable to add additional query tags #}\n        {% for k in var('env_vars_to_query_tag_list') %}\n            {% set v = env_var(k, '') %}\n            {% do env_var_query_tags.update({k.lower(): v}) if v %}\n        {% endfor %}\n    {% endif %}\n\n    {# Start with any model-configured dict #}\n    {% set query_tag = config.get('query_tag', default={}) %}\n\n    {% if query_tag is not mapping %}\n    {% do log(\"dbt-snowflake-query-tags warning: the query_tag config value of '{}' is not a mapping type, so is being ignored. If you'd like to add additional query tag information, use a mapping type instead, or remove it to avoid this message.\".format(query_tag), True) %}\n    {% set query_tag = {} %} {# If the user has set the query tag config as a non mapping type, start fresh #}\n    {% endif %}\n\n    {% do query_tag.update(original_query_tag_parsed) %}\n    {% do query_tag.update(env_var_query_tags) %}\n    {% do query_tag.update(extra) %}\n\n    {%- do query_tag.update(\n        app='dbt',\n        dbt_snowflake_query_tags_version='2.5.0',\n    ) -%}\n\n    {% if thread_id %}\n        {%- do query_tag.update(\n            thread_id=thread_id\n        ) -%}\n    {% endif %}\n\n\n    {# We have to bring is_incremental through here because its not available in the comment context #}\n    {% if model.resource_type == 'model' %}\n        {%- do query_tag.update(\n            is_incremental=is_incremental()\n        ) -%}\n    {% endif %}\n\n    {% set query_tag_json = tojson(query_tag) %}\n    {{ log(\"Setting query_tag to '\" ~ query_tag_json ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(query_tag_json)) %}\n    {{ return(original_query_tag)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.is_incremental", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1416845, "supported_languages": null}, "macro.dbt_snowflake_query_tags.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt_snowflake_query_tags')(original_query_tag)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake_query_tags.default__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1419804, "supported_languages": null}, "macro.dbt_snowflake_query_tags.default__unset_query_tag": {"name": "default__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_tags.sql", "original_file_path": "macros/query_tags.sql", "unique_id": "macro.dbt_snowflake_query_tags.default__unset_query_tag", "macro_sql": "{% macro default__unset_query_tag(original_query_tag) -%}\n    {% if original_query_tag %}\n    {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n    {{ log(\"No original query_tag, unsetting parameter.\") }}\n    {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1425536, "supported_languages": null}, "macro.dbt_snowflake_query_tags.get_query_comment": {"name": "get_query_comment", "resource_type": "macro", "package_name": "dbt_snowflake_query_tags", "path": "macros/query_comment.sql", "original_file_path": "macros/query_comment.sql", "unique_id": "macro.dbt_snowflake_query_tags.get_query_comment", "macro_sql": "{% macro get_query_comment(node, extra = {}) %}\n    {%- set comment_dict = extra -%}\n    {%- do comment_dict.update(\n        app='dbt',\n        dbt_snowflake_query_tags_version='2.5.0',\n        dbt_version=dbt_version,\n        project_name=project_name,\n        target_name=target.name,\n        target_database=target.database,\n        target_schema=target.schema,\n        invocation_id=invocation_id,\n        run_started_at=run_started_at.astimezone(modules.pytz.utc).isoformat(),\n        full_refresh=flags.FULL_REFRESH,\n        which=flags.WHICH,\n    ) -%}\n\n    {%- if node is not none -%}\n        {%- do comment_dict.update(\n            node_name=node.name,\n            node_alias=node.alias,\n            node_package_name=node.package_name,\n            node_original_file_path=node.original_file_path,\n            node_database=node.database,\n            node_schema=node.schema,\n            node_id=node.unique_id,\n            node_resource_type=node.resource_type,\n            node_meta=node.config.meta,\n            node_tags=node.tags,\n        ) -%}\n\n        {%- if flags.INVOCATION_COMMAND -%}\n            {%- do comment_dict.update(\n                invocation_command=flags.INVOCATION_COMMAND\n            ) -%}\n        {%- endif -%}\n\n        {%- if node.resource_type != ('seed') -%} {# Otherwise this throws an error saying 'Seeds cannot depend on other nodes.' #}\n            {%- if node.refs is defined -%}\n                {% set refs = [] %}\n                {% for ref in node.refs %}\n                    {%- if (dbt_version.split('.')[0] | int > 1)\n                       or (dbt_version.split('.')[0] | int == 1 and dbt_version.split('.')[1] | int >= 5) -%}\n                        {%- do refs.append(ref.name) -%}\n                    {%- else -%}\n                        {%- do refs.append(ref[0]) -%}\n                    {%- endif -%}\n                {% endfor %}\n                {%- do comment_dict.update(\n                    node_refs=refs | unique | list\n                ) -%}\n            {%- endif -%}\n        {%- endif -%}\n        {%- if node.resource_type == 'model' -%}\n            {%- do comment_dict.update(\n                materialized=node.config.materialized,\n            ) -%}\n        {%- endif -%}\n\n        {%- if node.raw_code is not none and local_md5 -%}\n            {%- do comment_dict.update({\n                \"raw_code_hash\": local_md5(node.raw_code)\n            }) -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_PROJECT_ID', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_project_id=env_var('DBT_CLOUD_PROJECT_ID')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_JOB_ID', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_job_id=env_var('DBT_CLOUD_JOB_ID')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_ID', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_run_id=env_var('DBT_CLOUD_RUN_ID')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_REASON_CATEGORY', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_run_reason_category=env_var('DBT_CLOUD_RUN_REASON_CATEGORY')\n        ) -%}\n    {%- endif -%}\n\n    {%- if env_var('DBT_CLOUD_RUN_REASON', False) -%}\n        {%- do comment_dict.update(\n            dbt_cloud_run_reason=env_var('DBT_CLOUD_RUN_REASON')\n        ) -%}\n    {%- endif -%}\n\n    {{ return(tojson(comment_dict)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1474621, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.148319, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.149464, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1505108, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1521854, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.155539, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1591668, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1598275, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1601171, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1603734, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1606996, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1609814, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1615322, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.162132, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1625073, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1630113, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1634407, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1636622, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1638803, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1641588, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1650383, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1655073, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1661139, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1666007, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.167257, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1678264, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1687555, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1690736, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1693366, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.169593, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1699498, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1702492, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1709008, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1713426, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.171631, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.171866, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1720912, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1726189, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1729465, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.173286, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1738627, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.174173, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1745, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1748111, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1751256, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1757472, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.176067, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1763024, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1765213, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1768014, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1773458, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1780033, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1782455, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1787195, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1791098, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1794238, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1802464, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1806774, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1810837, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1820395, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.182677, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1830208, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1836596, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1839697, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.184329, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1846502, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1849692, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1854274, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1856742, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1859188, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.186281, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1865897, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1868534, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1872692, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1874928, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1877089, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1878731, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1881516, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1885304, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1889396, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1893442, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1899493, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1901565, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1904988, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1908078, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1911664, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.191469, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1922264, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1924856, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1927059, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.192922, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1931367, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1938574, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1948044, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1951551, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1957548, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1964142, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.19705, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1973534, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1981468, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1989725, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.1998944, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2008572, "supported_languages": null}, "macro.fsc_utils.create_gha_tasks": {"name": "create_gha_tasks", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.create_gha_tasks", "macro_sql": "{% macro create_gha_tasks() %}\n    {% set query %}\nSELECT\n    task_name,\n    workflow_name,\n    workflow_schedule\nFROM\n    {{ ref('github_actions__tasks') }}\n\n    {% endset %}\n    {% set results = run_query(query) %}\n    {% if execute and results is not none %}\n        {% set results_list = results.rows %}\n    {% else %}\n        {% set results_list = [] %}\n    {% endif %}\n\n    {% set prod_db = target.database.lower().replace(\n        '_dev',\n        ''\n    ) %}\n    {% for result in results_list %}\n        {% set task_name = result [0] %}\n        {% set workflow_name = result [1] %}\n        {% set workflow_schedule = result [2] %}\n        {% set sql %}\n        EXECUTE IMMEDIATE 'CREATE OR REPLACE TASK github_actions.{{ task_name }} WAREHOUSE = DBT_CLOUD SCHEDULE = \\'USING CRON {{ workflow_schedule }} UTC\\' COMMENT = \\'Task to trigger {{ workflow_name }}.yml workflow according to {{ workflow_schedule }}\\' AS DECLARE rs resultset; output string; BEGIN rs := (SELECT github_actions.workflow_dispatches(\\'FlipsideCrypto\\', \\'{{ prod_db }}-models\\', \\'{{ workflow_name }}.yml\\', NULL):status_code::int AS status_code); SELECT LISTAGG($1, \\';\\') INTO :output FROM TABLE(result_scan(LAST_QUERY_ID())) LIMIT 1; CALL SYSTEM$SET_RETURN_VALUE(:output); END;' {% endset %}\n        {% do run_query(sql) %}\n        {% if var(\"START_GHA_TASKS\") %}\n            {% if target.database.lower() == prod_db %}\n                {% set sql %}\n                ALTER task github_actions.{{ task_name }}\n                resume;\n{% endset %}\n                {% do run_query(sql) %}\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2037697, "supported_languages": null}, "macro.fsc_utils.gha_tasks_view": {"name": "gha_tasks_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_tasks_view", "macro_sql": "{% macro gha_tasks_view() %}\nSELECT\n    workflow_name,\n    concat_ws(\n        '_',\n        'TRIGGER',\n        UPPER(workflow_name)\n    ) AS task_name,\n    workflow_schedule\nFROM\n    {{ source(\n        'github_actions',\n        'workflows'\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2040162, "supported_languages": null}, "macro.fsc_utils.gha_task_history_view": {"name": "gha_task_history_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_history_view", "macro_sql": "{% macro gha_task_history_view() %}\n    {% set query %}\nSELECT\n    DISTINCT task_name\nFROM\n    {{ ref('github_actions__tasks') }}\n\n    {% endset %}\n    {% set results = run_query(query) %}\n    {% if execute and results is not none %}\n        {% set results_list = results.rows %}\n    {% else %}\n        {% set results_list = [] %}\n    {% endif %}\n\n    WITH task_history_data AS (\n        SELECT\n            *\n        FROM\n            ({% for result in results_list %}\n            SELECT\n                NAME AS task_name, completed_time, return_value, state, database_name, schema_name, scheduled_time, query_start_time\n            FROM\n                TABLE(information_schema.task_history(scheduled_time_range_start => DATEADD('hour', -24, CURRENT_TIMESTAMP()), task_name => '{{ result[0]}}')) {% if not loop.last %}\n                UNION ALL\n                {% endif %}\n            {% endfor %}) AS subquery\n        WHERE\n            database_name = '{{ target.database }}'\n            AND schema_name = 'GITHUB_ACTIONS')\n        SELECT\n            *\n        FROM\n            task_history_data\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.204976, "supported_languages": null}, "macro.fsc_utils.gha_task_schedule_view": {"name": "gha_task_schedule_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_schedule_view", "macro_sql": "{% macro gha_task_schedule_view() %}\n    WITH base AS (\n        SELECT\n            w.workflow_name AS workflow_name,\n            w.workflow_schedule AS workflow_schedule,\n            w.task_name AS task_name,\n            t.timestamp AS scheduled_time\n        FROM\n            {{ ref('github_actions__tasks') }} AS w\n            CROSS JOIN TABLE(\n                utils.udf_cron_to_prior_timestamps(\n                    w.workflow_name,\n                    w.workflow_schedule\n                )\n            ) AS t\n    )\nSELECT\n    task_name,\n    workflow_name,\n    workflow_schedule,\n    scheduled_time\nFROM\n    base\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2052176, "supported_languages": null}, "macro.fsc_utils.gha_task_performance_view": {"name": "gha_task_performance_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_performance_view", "macro_sql": "{% macro gha_task_performance_view() %}\nSELECT\n    s.task_name,\n    s.workflow_name,\n    s.scheduled_time,\n    h.return_value\nFROM\n    {{ ref('github_actions__task_schedule') }}\n    s\n    LEFT JOIN {{ ref('github_actions__task_history') }}\n    h\n    ON s.task_name = h.task_name\n    AND TO_TIMESTAMP_NTZ(\n        s.scheduled_time\n    ) BETWEEN TO_TIMESTAMP_NTZ(DATEADD(MINUTE, -1, h.scheduled_time))\n    AND TO_TIMESTAMP_NTZ(DATEADD(MINUTE, 1, h.scheduled_time))\n    AND TRY_TO_NUMBER(\n        h.return_value\n    ) BETWEEN 200\n    AND 299\n    AND h.state = 'SUCCEEDED'\nORDER BY\n    task_name,\n    scheduled_time\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.205518, "supported_languages": null}, "macro.fsc_utils.gha_task_current_status_view": {"name": "gha_task_current_status_view", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.gha_task_current_status_view", "macro_sql": "{% macro gha_task_current_status_view() %}\n    WITH base AS (\n        SELECT\n            task_name,\n            workflow_name,\n            scheduled_time,\n            return_value,\n            return_value IS NOT NULL AS was_successful\n        FROM\n            {{ ref('github_actions__task_performance') }}\n            qualify ROW_NUMBER() over (\n                PARTITION BY task_name\n                ORDER BY\n                    scheduled_time DESC\n            ) <= 2\n    )\nSELECT\n    task_name,\n    workflow_name,\n    MAX(scheduled_time) AS recent_scheduled_time,\n    MIN(scheduled_time) AS prior_scheduled_time,\n    SUM(IFF(return_value = 204, 1, 0)) AS successes,\n    successes > 0 AS pipeline_active\nFROM\n    base\nGROUP BY\n    task_name,\n    workflow_name\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2057593, "supported_languages": null}, "macro.fsc_utils.alter_gha_task": {"name": "alter_gha_task", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/workflow_tasks.sql", "original_file_path": "macros/workflow_tasks.sql", "unique_id": "macro.fsc_utils.alter_gha_task", "macro_sql": "{% macro alter_gha_task(\n        task_name,\n        task_action\n    ) %}\n    {% set sql %}\n    EXECUTE IMMEDIATE 'ALTER TASK IF EXISTS github_actions.{{ task_name }} {{ task_action }};' {% endset %}\n    {% do run_query(sql) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2061083, "supported_languages": null}, "macro.fsc_utils.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.fsc_utils.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2066932, "supported_languages": null}, "macro.fsc_utils.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.fsc_utils.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2071047, "supported_languages": null}, "macro.fsc_utils.get_ancestors": {"name": "get_ancestors", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.get_ancestors", "macro_sql": "{%- macro get_ancestors(node, include_depth=false, exclude_source=false) -%}\n{#\n    Return a list of ancestors for a node in a DAG.\n #}\n    {%- for dep in node.depends_on.nodes | unique | list  recursive %}\n        {% if dep.startswith(\"model.\") and \"bronze__\" not in dep %}\n            \"{{- loop.depth0 ~ '-'if include_depth else '' }}{{node.config.materialized }}-{{ dep -}}\",\n            {{- loop(graph.nodes[dep].depends_on.nodes) -}}\n        {% elif not exclude_source %}\n            \"{{- loop.depth0 ~ '-'if include_depth else '' }}{{node.config.materialized }}-{{ dep -}}\",\n        {%- endif -%}\n    {%- endfor %}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2100904, "supported_languages": null}, "macro.fsc_utils.get_view_ddl": {"name": "get_view_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.get_view_ddl", "macro_sql": "{% macro get_view_ddl() %}\n{#\n    Return a dictionary of view names and their DDL statements.\n    The DDL statements are escaped to be used in a Snowflake query.\n    The dictionary is converted to JSON to be used in a dbt macro..\n #}\n    {% if execute %}\n        {% set query %}\n            SELECT\n            CONCAT_WS('.', TABLE_SCHEMA, TABLE_NAME) as VIEW_NAME,\n            VIEW_DEFINITION\n            FROM {{target.database}}.INFORMATION_SCHEMA.VIEWS\n            WHERE TABLE_SCHEMA NOT IN ('INFORMATION_SCHEMA', 'STREAMLINE')\n            AND TABLE_SCHEMA NOT LIKE 'TEST_%'\n        {%- endset -%}\n        {%- set results = run_query(query) -%}\n        {% set ddl = {} %}\n        {% for key, value in results.rows %}\n          {%- do ddl.update({key: value|replace(\"$$\", \"\\$\\$\")}) -%}\n        {%- endfor -%}\n        {{- tojson(ddl) -}}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2109785, "supported_languages": null}, "macro.fsc_utils.replace_database_references": {"name": "replace_database_references", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.replace_database_references", "macro_sql": "{% macro replace_database_references(references_to_replace, ddl) %}\n{#\n    Return the DDL statement for a view with the references replaced.\n    All items in references_to_replace are replaced with __NEW__,\n    while all remaining references to the database are replaced with __SOURCE__.\n\n    references_to_replace: a list of references to replace with __NEW__\n    ddl: the DDL statement to be replaced\n\n#}\n    {% set re = modules.re %}\n    {% set outer = namespace(replaced=ddl) %}\n    {% for key in references_to_replace %}\n        {%- set original = re.compile(\"\\\\b\" ~ target.database ~ \".\" ~ key ~ \"\\\\b\", re.IGNORECASE) -%}\n        {%- set replacement  =  \"__NEW__\" ~ \".\" ~ key -%}\n        {% set outer.replaced = original.sub(replacement, outer.replaced) %}\n    {%- endfor -%}\n    {%- set original = re.compile(\"\\\\b\" ~ target.database ~ \".\" ~ \"\\\\b\", re.IGNORECASE) -%}\n    {% set outer.replaced = original.sub(\"__SOURCE__.\", outer.replaced) %}\n    {{- outer.replaced -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.212267, "supported_languages": null}, "macro.fsc_utils.generate_view_ddl": {"name": "generate_view_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_view_ddl", "macro_sql": "{% macro generate_view_ddl(dag, schema) %}\n{#\n    Return a list of DDL statements for views in a DAG.\n\n    dag: a DAG of views\n    schema: schemas to create schema DDL for\n #}\n    {%- set ddl =  fromjson(fsc_utils.get_view_ddl())  -%}\n    {%- set created = {} -%}\n    {%- set final_text = [] -%}\n    {%- for view, deps in dag.items() -%}\n        {%- for d in deps -%}\n            {%- set table_name = d.split(\".\")[-1].replace(\"__\", \".\").upper() -%}\n            {%- if ddl.get(table_name) and table_name not in created -%}\n                {%- set replaced = fsc_utils.replace_database_references(ddl.keys(), ddl[table_name]) -%}\n                {%- do final_text.append(replaced) -%}\n                {%- do created.update({table_name:true}) -%}\n            {%- endif -%}\n        {%- endfor -%}\n    {%- endfor -%}\n    {%- set schema_ddl = [] -%}\n    {%- for s in schema -%}\n        {%- do schema_ddl.append(\"CREATE SCHEMA IF NOT EXISTS __NEW__.\" ~ s ~ \";\") -%}\n    {%- endfor -%}\n    {{- toyaml(schema_ddl + final_text) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.get_view_ddl", "macro.fsc_utils.replace_database_references"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2139297, "supported_languages": null}, "macro.fsc_utils.generate_dag_and_schemas": {"name": "generate_dag_and_schemas", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_dag_and_schemas", "macro_sql": "{% macro generate_dag_and_schemas(node_paths, materializations) %}\n{#\n    Return a DAG of views and a list of schemas to create.\n\n    node_paths: a list of node paths to include in the DAG\n    materializations: a list of materializations to include in the DAG\n #}\n    {%- set dag = {} -%}\n    {%- set schema = [] -%}\n    {%- for key, value in graph.nodes.items() -%}\n        {%\n        if value.refs\n        and set(value.fqn).intersection(node_paths)\n        and value.config.materialized in materializations\n        and value.config.enabled\n        and not value.sources\n        and not key.endswith(\"_create_gold\")\n        -%}\n        {%- set name = value.schema + \".\" + value.alias -%}\n        {%- set _result = fromyaml(\"[\" ~ fsc_utils.get_ancestors(value, exclude_source=true)[:-1] ~ \"]\") -%}\n            {% if _result -%}\n                {%- do _result.insert(0, key) -%}\n                {%- do dag.update({name.upper() : _result | reverse|list})  -%}\n                {% for d in _result -%}\n                    {%- if d.split(\".\")[-1].split(\"__\")[0] not in schema -%}\n                        {%- do schema.append(d.split(\".\")[-1].split(\"__\")[0]) -%}\n                    {%- endif -%}\n                {%- endfor -%}\n            {%- else -%}\n                {%- do dag.update({name.upper() : [key] }) -%}\n                {%- if value.schema not in schema -%}\n                    {%- do schema.append(value.schema) -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {%- set final = {\"dag\": dag, \"schema\": schema} -%}\n    {{- tojson(final) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.get_ancestors"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.216477, "supported_languages": null}, "macro.fsc_utils.generate_table_views_ddl": {"name": "generate_table_views_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_table_views_ddl", "macro_sql": "{% macro generate_table_views_ddl(tables, schema) %}\n{#\n    Return a list of DDL statements for views of tables from a list.\n\n    tables: a list of tables to create views for\n    schema: schemas to create schema DDL for\n #}\n    {%- set schema_ddl = [] -%}\n    {%- set view_ddl = [] -%}\n    {% for s in schema %}\n        {%- do schema_ddl.append(\"CREATE SCHEMA IF NOT EXISTS __NEW__.\" ~ s ~ \";\") -%}\n    {%- endfor -%}\n    {% for table in tables %}\n        {%- do view_ddl.append(\"CREATE OR REPLACE VIEW __NEW__.\" ~ table ~ \" copy grants AS SELECT * FROM \" ~ \"__SOURCE__.\" ~ table ~\";\") -%}\n    {%- endfor -%}\n    {{- toyaml(schema_ddl + view_ddl) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2173011, "supported_languages": null}, "macro.fsc_utils.generate_datashare_ddl": {"name": "generate_datashare_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_datashare_ddl", "macro_sql": "{% macro generate_datashare_ddl() %}\n{#\n    generate DDL for datashare\n\n    Return: DDL for datashare\n #}\n    {%- set gold_views = fromjson(fsc_utils.generate_dag_and_schemas([\"gold\"], [\"view\"])) -%}\n    {%- set gold_views_ddl = fromyaml(fsc_utils.generate_view_ddl(gold_views[\"dag\"], gold_views[\"schema\"])) -%}\n    {%- set gold_tables = fromjson(fsc_utils.generate_dag_and_schemas([\"gold\"], [\"incremental\", \"table\"])) -%}\n    {%- set gold_tables_ddl = fromyaml(fsc_utils.generate_table_views_ddl(gold_tables[\"dag\"].keys(), gold_tables[\"schema\"])) -%}\n    {%- set combined_ddl = gold_views_ddl + gold_tables_ddl -%}\n    {%- do combined_ddl.insert(0, \"CREATE DATABASE IF NOT EXISTS __NEW__;\") -%}\n    {{- \"BEGIN\\n\" ~ (combined_ddl | join(\"\\n\")) ~ \"\\nEND\" -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.generate_dag_and_schemas", "macro.fsc_utils.generate_view_ddl", "macro.fsc_utils.generate_table_views_ddl"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2185028, "supported_languages": null}, "macro.fsc_utils.generate_datashare_udf_ddl": {"name": "generate_datashare_udf_ddl", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/datashares.sql", "original_file_path": "macros/datashares.sql", "unique_id": "macro.fsc_utils.generate_datashare_udf_ddl", "macro_sql": "{% macro generate_datashare_udf_ddl() %}\n{#\n    generate UDF DDL for datashare\n\n    Return: UDF DDL for datashare\n #}\n    {%- set schema = \"UTILS\" -%}\n    {%- set udfs = fromyaml(fsc_utils.udf_configs(schema)) -%}\n    {%- set combined_ddl = [] -%}\n    {%- for udf in udfs -%}\n        {% set name_ = udf [\"name\"] %}\n        {% set signature = udf [\"signature\"] %}\n        {% set return_type = udf [\"return_type\"] %}\n        {% set sql_ = udf [\"sql\"] %}\n        {% set options = udf [\"options\"] %}\n        {% set api_integration = udf [\"api_integration\"] %}\n        {% set func_type = udf [\"func_type\"] %}\n        {% set exclude_from_datashare = udf.get(\"exclude_from_datashare\",False) %}\n        {% if not exclude_from_datashare %}\n            {%- set udf_ddl = fsc_utils.create_sql_function(\n                name_ = name_,\n                signature = signature,\n                return_type = return_type,\n                sql_ = sql_,\n                options = options,\n                api_integration = api_integration,\n                func_type = func_type\n            ).replace(\"\\\\\",\"\\\\\\\\\").replace(\"'\",\"\\\\'\") -%}\n            {%- do combined_ddl.append(udf_ddl) -%}       \n        {% endif %} \n    {% endfor %}\n    {%- do combined_ddl.insert(0, \"CREATE DATABASE IF NOT EXISTS __NEW__;\") -%}\n    {%- do combined_ddl.insert(1, \"USE DATABASE __NEW__;\") -%}\n    {%- do combined_ddl.insert(2, \"CREATE SCHEMA IF NOT EXISTS \"~schema~\";\") -%}\n    {{- \"'BEGIN','\" ~ (combined_ddl | join(\"','\")) ~ \"','END'\" -}}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.fsc_utils.udf_configs", "macro.fsc_utils.create_sql_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.220688, "supported_languages": null}, "macro.fsc_utils.dynamic_range_predicate": {"name": "dynamic_range_predicate", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/dynamic_range_predicate.sql", "original_file_path": "macros/dynamic_range_predicate.sql", "unique_id": "macro.fsc_utils.dynamic_range_predicate", "macro_sql": "{% macro dynamic_range_predicate(source, predicate_column, output_alias=\"\") -%}\n    {% set supported_data_types = [\"INTEGER\",\"DATE\"] %}\n    {% set predicate_column_data_type_query %}\n        SELECT typeof({{predicate_column}}::variant)\n        FROM {{ source }}\n        WHERE {{predicate_column}} IS NOT NULL\n        LIMIT 1;\n    {% endset %}\n    {% set predicate_column_data_type_result = run_query(predicate_column_data_type_query) %}\n    {% if predicate_column_data_type_result.rows|length == 0 %}\n        {{ return('1=1') }}\n    {% endif %}\n    {% set predicate_column_data_type = predicate_column_data_type_result.columns[0].values()[0] %}\n    \n\n    {% if predicate_column_data_type not in supported_data_types %}\n        {{ exceptions.raise_compiler_error(\"Data type of \"~ predicate_column_data_type ~\" is not supported, use one of \"~ supported_data_types ~\" column instead\") }}\n    {% endif %}\n\n    {% set get_start_end_query %}\n        SELECT\n            MIN(\n                {{ predicate_column }}\n            ) AS full_range_start,\n            MAX(\n                {{ predicate_column }}\n            ) AS full_range_end\n        FROM\n            {{ source }}\n    {% endset %}\n    {% set start_end_results = run_query(get_start_end_query).columns %}\n    {% set start_preciate_value = start_end_results[0].values()[0] %}\n    {% set end_predicate_value = start_end_results[1].values()[0] %}\n\n    {% set get_limits_query %}\n        WITH block_range AS (\n            {% if predicate_column_data_type == \"INTEGER\" %}\n                SELECT \n                    SEQ4() + {{ start_preciate_value }} as predicate_value\n                FROM \n                    TABLE(GENERATOR(rowcount => {{ end_predicate_value - start_preciate_value }}+1))\n            {% else %}\n                SELECT\n                    date_day as predicate_value\n                FROM\n                    crosschain.core.dim_dates\n                WHERE\n                    date_day BETWEEN '{{ start_preciate_value }}' AND '{{ end_predicate_value }}'\n            {% endif %}\n        ),\n        partition_block_counts AS (\n            SELECT\n                b.predicate_value,\n                COUNT(r.{{ predicate_column }}) AS count_in_window\n            FROM\n                block_range b\n                LEFT OUTER JOIN {{ source }}\n                r\n                ON r.{{ predicate_column }} = b.predicate_value\n            GROUP BY\n                1\n        ),\n        range_groupings AS (\n            SELECT\n                predicate_value,\n                count_in_window,\n                conditional_change_event(\n                    count_in_window > 0\n                ) over (\n                    ORDER BY\n                        predicate_value\n                ) AS group_val\n            FROM\n                partition_block_counts\n        ),\n        contiguous_ranges AS (\n            SELECT\n                MIN(predicate_value) AS start_value,\n                MAX(predicate_value) AS end_value\n            FROM\n                range_groupings\n            WHERE\n                count_in_window > 0\n            GROUP BY\n                group_val\n        ),\n        between_stmts AS (\n            SELECT\n                CONCAT(\n                    '{{ output_alias~\".\" if output_alias else \"\" }}',\n                    '{{ predicate_column }} between \\'',\n                    start_value,\n                    '\\' and \\'',\n                    end_value,\n                    '\\''\n                ) AS b\n            FROM\n                contiguous_ranges\n        )\n        SELECT\n            CONCAT('(', LISTAGG(b, ' OR '), ')')\n        FROM\n            between_stmts \n    {% endset %}\n    \n    {% set between_stmts = run_query(get_limits_query).columns[0].values()[0] %}\n\n    {% if between_stmts != '()' %}\n        /* in case empty update array */\n        {% set predicate_override = between_stmts %}\n    {% else %}\n        {% set predicate_override = '1=1' %}\n        /* need to have something or it will error since it expects at least 1 predicate */\n    {% endif %}\n\n    {{ return(predicate_override) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2241988, "supported_languages": null}, "macro.fsc_utils.create_udfs": {"name": "create_udfs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "unique_id": "macro.fsc_utils.create_udfs", "macro_sql": "{% macro create_udfs(drop_=False,schema=\"utils\") %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% set name %}\n        {{- fsc_utils.udf_configs(schema) -}}\n        {% endset %}\n        {%  set udfs = fromyaml(name) %}\n        {% set sql %}\n        CREATE schema if NOT EXISTS {{ schema }};\n        {%- for udf in udfs -%}\n        {{- fsc_utils.create_or_drop_function_from_config(udf, drop_=drop_) -}}\n        {% endfor %}\n        {% endset %}\n        {% do run_query(sql) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.udf_configs", "macro.fsc_utils.create_or_drop_function_from_config", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2253153, "supported_languages": null}, "macro.fsc_utils.create_streamline_udfs": {"name": "create_streamline_udfs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/create_streamline_udfs.sql", "original_file_path": "macros/create_streamline_udfs.sql", "unique_id": "macro.fsc_utils.create_streamline_udfs", "macro_sql": "{% macro create_streamline_udfs() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% do run_query(\"CREATE SCHEMA IF NOT EXISTS streamline\") %}\n        \n        {{ create_udf_bulk_rest_api_v2() }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.fsc_utils.create_udf_bulk_rest_api_v2"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2258625, "supported_languages": null}, "macro.fsc_utils.create_evm_streamline_udfs": {"name": "create_evm_streamline_udfs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/create_streamline_udfs.sql", "original_file_path": "macros/create_streamline_udfs.sql", "unique_id": "macro.fsc_utils.create_evm_streamline_udfs", "macro_sql": "{% macro create_evm_streamline_udfs() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% do run_query(\"CREATE SCHEMA IF NOT EXISTS streamline\") %}\n        \n        {{ create_udf_bulk_rest_api_v2() }}\n        {{ create_udf_bulk_decode_logs() }}\n        {{ create_udf_bulk_decode_traces() }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.fsc_utils.create_udf_bulk_rest_api_v2", "macro.fsc_utils.create_udf_bulk_decode_logs", "macro.fsc_utils.create_udf_bulk_decode_traces"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2263005, "supported_languages": null}, "macro.fsc_utils.get_query_tag": {"name": "get_query_tag", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.fsc_utils.get_query_tag", "macro_sql": "{% macro get_query_tag() %}\n    {# Get the full path of the model #}\n    {% set model_path = model.path | string %}\n    {% set folder_path = '/'.join(model_path.split('/')[:-1]) %}\n    \n    {# Get core folders from vars #}\n    {% set core_folders = var('core_folders') %}\n    \n    {# Initialize is_core and check each path pattern #}\n    {% set ns = namespace(is_core=false) %}\n    \n    {% for folder in core_folders %}\n        {% if folder in folder_path %}\n            {% set ns.is_core = true %}\n        {% endif %}\n    {% endfor %}\n    \n    {# Build the JSON query tag #}\n    {% set tag_dict = {\n        \"project\": project_name,\n        \"model\": model.name,\n        \"model_type\": \"core\" if ns.is_core else \"non_core\",\n        \"invocation_id\": invocation_id,\n        \"dbt_tags\": config.get('tags', [])\n    } %}\n    \n    {% set query_tag = tojson(tag_dict) %}\n    \n    {# Return the properly escaped string #}\n    {{ return(\"'\" ~ query_tag ~ \"'\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2281063, "supported_languages": null}, "macro.fsc_utils.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.fsc_utils.set_query_tag", "macro_sql": "{% macro set_query_tag() %}\n    {% set tag = fsc_utils.get_query_tag() %}\n    {% do run_query(\"alter session set query_tag = \" ~ tag) %}\n    {{ return(\"\") }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.get_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2284977, "supported_languages": null}, "macro.fsc_utils.test_sequence_gaps": {"name": "test_sequence_gaps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\n    model,\n    partition_by,\n    column_name\n) %}\n{%- set partition_sql = partition_by | join(\", \") -%}\n{%- set previous_column = \"prev_\" ~ column_name -%}\nWITH source AS (\n    SELECT\n        {{ partition_sql + \",\" if partition_sql }}\n        {{ column_name }},\n        LAG(\n            {{ column_name }},\n            1\n        ) over (\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n            ORDER BY\n                {{ column_name }} ASC\n        ) AS {{ previous_column }}\n    FROM\n        {{ model }}\n)\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column_name }},\n    {{ column_name }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column_name }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC \n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2299168, "supported_languages": null}, "macro.fsc_utils.test_tx_block_count": {"name": "test_tx_block_count", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.test_tx_block_count", "macro_sql": "{% test tx_block_count(\n        model,\n        column_name\n) %}\n\nSELECT \n    {{ column_name }}, \n    COUNT(DISTINCT block_number) AS num_blocks\nFROM\n    {{ model }}\nGROUP BY {{ column_name }}\nHAVING num_blocks > 1\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.230204, "supported_languages": null}, "macro.fsc_utils.tx_gaps": {"name": "tx_gaps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.tx_gaps", "macro_sql": "{% macro tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_number,\n            tx_count\n        FROM\n            {{ ref('test_silver__blocks_full') }}\n    ),\n    model_name AS (\n        SELECT\n            block_number,\n            COUNT(\n                DISTINCT tx_hash\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_number\n    )\nSELECT\n    block_base.block_number,\n    tx_count,\n    model_name.block_number AS model_block_number,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_number = model_name.block_number\nWHERE\n    (\n        tx_count <> model_tx_count\n    )\n    OR (\n        model_tx_count IS NULL\n        AND tx_count <> 0\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2305775, "supported_languages": null}, "macro.fsc_utils.recent_tx_gaps": {"name": "recent_tx_gaps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.recent_tx_gaps", "macro_sql": "{% macro recent_tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_number,\n            tx_count\n        FROM\n            {{ ref('test_silver__blocks_recent') }}\n    ),\n    model_name AS (\n        SELECT\n            block_number,\n            COUNT(\n                DISTINCT tx_hash\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_number\n    )\nSELECT\n    block_base.block_number,\n    tx_count,\n    model_name.block_number AS model_block_number,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_number = model_name.block_number\nWHERE\n    (\n        tx_count <> model_tx_count\n    )\n    OR (\n        model_tx_count IS NULL\n        AND tx_count <> 0\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2308695, "supported_languages": null}, "macro.fsc_utils.test_recent_decoded_logs_match": {"name": "test_recent_decoded_logs_match", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/tests.sql", "original_file_path": "macros/streamline/tests.sql", "unique_id": "macro.fsc_utils.test_recent_decoded_logs_match", "macro_sql": "{% test recent_decoded_logs_match(\n    model\n) %}\nSELECT\n    block_number,\n    _log_id\nFROM\n    {{ model }}\n    d\nWHERE\n    NOT EXISTS (\n        SELECT\n            1\n        FROM\n            {{ ref('silver__logs') }}\n            l\n        WHERE\n            d.block_number = l.block_number\n            AND d.tx_hash = l.tx_hash\n            AND d.event_index = l.event_index\n            AND d.contract_address = l.contract_address\n            AND d.topics [0] :: STRING = l.topics [0] :: STRING\n    ) \n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2311368, "supported_languages": null}, "macro.fsc_utils.python_hex_to_int": {"name": "python_hex_to_int", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.python_hex_to_int", "macro_sql": "{% macro python_hex_to_int() %}\ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    return (str(int(hex, 16)) if hex and hex != \"0x\" else None)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2328353, "supported_languages": null}, "macro.fsc_utils.python_udf_hex_to_int_with_encoding": {"name": "python_udf_hex_to_int_with_encoding", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.python_udf_hex_to_int_with_encoding", "macro_sql": "{% macro python_udf_hex_to_int_with_encoding() %}\ndef hex_to_int(encoding, hex) -> str:\n  \"\"\"\n  Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n  hex_to_int('hex', '200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  hex_to_int('hex', '0x200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  hex_to_int('hex', NULL);\n  >> NULL\n  hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\n  >> -440911153\n  \"\"\"\n  if not hex:\n    return None\n  if encoding.lower() == 's2c':\n    if hex[0:2].lower() != '0x':\n      hex = f'0x{hex}'\n\n    bits = len(hex[2:])*4\n    value = int(hex, 0)\n    if value & (1 << (bits-1)):\n        value -= 1 << bits\n    return str(value)\n  else:\n    return str(int(hex, 16))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2330287, "supported_languages": null}, "macro.fsc_utils.create_udf_keccak256": {"name": "create_udf_keccak256", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_keccak256", "macro_sql": "{% macro create_udf_keccak256() %}\nfrom Crypto.Hash import keccak\n\ndef udf_encode(event_name):\n    keccak_hash = keccak.new(digest_bits=256)\n    keccak_hash.update(event_name.encode('utf-8'))\n    return '0x' + keccak_hash.hexdigest()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2331634, "supported_languages": null}, "macro.fsc_utils.create_udf_evm_text_signature": {"name": "create_udf_evm_text_signature", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_evm_text_signature", "macro_sql": "{% macro create_udf_evm_text_signature() %}\n\ndef get_simplified_signature(abi):\n    def generate_signature(inputs):\n        signature_parts = []\n        for input_data in inputs:\n            if 'components' in input_data:\n                component_signature_parts = []\n                components = input_data['components']\n                component_signature_parts.extend(generate_signature(components))\n                component_signature_parts[-1] = component_signature_parts[-1].rstrip(\",\")\n                if input_data['type'].endswith('[]'):\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \")[],\")\n                else:\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \"),\")\n            else:\n                signature_parts.append(input_data['type'].replace('enum ', '').replace(' payable', '') + \",\")\n        return signature_parts\n\n    signature_parts = [abi['name'] + \"(\"]\n    signature_parts.extend(generate_signature(abi['inputs']))\n    signature_parts[-1] = signature_parts[-1].rstrip(\",\") + \")\"\n    return \"\".join(signature_parts)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2333841, "supported_languages": null}, "macro.fsc_utils.create_udf_decimal_adjust": {"name": "create_udf_decimal_adjust", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_decimal_adjust", "macro_sql": "{% macro create_udf_decimal_adjust() %}\n\nfrom decimal import Decimal, ROUND_DOWN\n\ndef custom_divide(input, adjustment):\n    try:\n        if adjustment is None or input is None:\n            return None\n\n        # Perform the division using Decimal type\n        result = Decimal(input) / pow(10, Decimal(adjustment))\n\n        # Determine the number of decimal places in the result\n        decimal_places = max(0, -result.as_tuple().exponent)\n\n        # Convert the result to a string representation without scientific notation and with dynamic decimal precision\n        result_str = \"{:.{prec}f}\".format(result, prec=decimal_places)\n\n        return result_str\n    except Exception as e:\n        return None\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2335615, "supported_languages": null}, "macro.fsc_utils.create_udf_cron_to_prior_timestamps": {"name": "create_udf_cron_to_prior_timestamps", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_cron_to_prior_timestamps", "macro_sql": "{% macro create_udf_cron_to_prior_timestamps() %}\nimport croniter\nimport datetime\n\nclass TimestampGenerator:\n\n    def __init__(self):\n        pass\n\n    def process(self, workflow_name, workflow_schedule):\n        for timestamp in self.generate_timestamps(workflow_name, workflow_schedule):\n            yield (workflow_name, workflow_schedule, timestamp)\n\n    def generate_timestamps(self, workflow_name, workflow_schedule):\n        # Create a cron iterator object\n        cron = croniter.croniter(workflow_schedule)\n\n        # Generate timestamps for the prev 10 runs\n        timestamps = []\n        for i in range(10):\n            prev_run = cron.get_prev(datetime.datetime)\n            timestamps.append(prev_run)\n\n        return timestamps\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2337375, "supported_languages": null}, "macro.fsc_utils.create_udf_transform_logs": {"name": "create_udf_transform_logs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_transform_logs", "macro_sql": "{% macro create_udf_transform_logs() %}\n\nfrom copy import deepcopy\n\ndef transform_tuple(components: list, values: list):\n    transformed_values = []\n    for i, component in enumerate(components):\n        if i < len(values):\n            if component[\"type\"] == \"tuple\":\n                transformed_values.append({\"value\": transform_tuple(component[\"components\"], values[i]), **component})\n            elif component[\"type\"] == \"tuple[]\":\n                if not values[i]:\n                    transformed_values.append({\"value\": [], **component})\n                    continue\n                sub_values = [transform_tuple(component[\"components\"], v) for v in values[i]]\n                transformed_values.append({\"value\": sub_values, **component})\n            else:\n                transformed_values.append({\"value\": values[i], **component})\n    return {item[\"name\"]: item[\"value\"] for item in transformed_values}\n\ndef transform_event(event: dict):\n    new_event = deepcopy(event)\n    if new_event.get(\"components\"):\n        components = new_event.get(\"components\")\n\n        if not new_event[\"value\"]:\n            return new_event\n\n        if isinstance(new_event[\"value\"][0], list):\n            result_list = []\n            for value_set in new_event[\"value\"]:\n                result_list.append(transform_tuple(components, value_set))\n            new_event[\"value\"] = result_list\n\n        else:\n            new_event[\"value\"] = transform_tuple(components, new_event[\"value\"])\n\n        return new_event\n\n    else:\n        return event\n\ndef transform(events: dict):\n    try:\n        results = [\n            transform_event(event) if event.get(\"decoded\") else event\n            for event in events[\"data\"]\n        ]\n        events[\"data\"] = results\n        return events\n    except:\n        return events\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2340057, "supported_languages": null}, "macro.fsc_utils.create_udf_base58_to_hex": {"name": "create_udf_base58_to_hex", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_base58_to_hex", "macro_sql": "{% macro create_udf_base58_to_hex() %}\n\ndef transform_base58_to_hex(base58):\n    if base58 is None:\n        return 'Invalid input'\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    base_count = len(ALPHABET)\n\n    num = 0\n    leading_zeros = 0\n\n    for char in base58:\n        if char == '1':\n            leading_zeros += 1\n        else:\n            break\n\n    for char in base58:\n        num *= base_count\n        if char in ALPHABET:\n            num += ALPHABET.index(char)\n        else:\n            return 'Invalid character in input'\n\n    hex_string = hex(num)[2:]\n\n    if len(hex_string) % 2 != 0:\n        hex_string = '0' + hex_string\n\n    hex_leading_zeros = '00' * leading_zeros\n\n    return '0x' + hex_leading_zeros + hex_string\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2341871, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_base58": {"name": "create_udf_hex_to_base58", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_base58", "macro_sql": "{% macro create_udf_hex_to_base58() %}\n\ndef transform_hex_to_base58(input):\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(input)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.234381, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_bech32": {"name": "create_udf_hex_to_bech32", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_bech32", "macro_sql": "{% macro create_udf_hex_to_bech32() %}\n\ndef transform_hex_to_bech32(input, hrp=''):\n    CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n\n    def bech32_polymod(values):\n        generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n        checksum = 1\n        for value in values:\n            top = checksum >> 25\n            checksum = ((checksum & 0x1ffffff) << 5) ^ value\n            for i in range(5):\n                checksum ^= generator[i] if ((top >> i) & 1) else 0\n        return checksum\n\n    def bech32_hrp_expand(hrp):\n        return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n\n    def bech32_create_checksum(hrp, data):\n        values = bech32_hrp_expand(hrp) + data\n        polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n        return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n\n    def bech32_convertbits(data, from_bits, to_bits, pad=True):\n        acc = 0\n        bits = 0\n        ret = []\n        maxv = (1 << to_bits) - 1\n        max_acc = (1 << (from_bits + to_bits - 1)) - 1\n        for value in data:\n            acc = ((acc << from_bits) | value) & max_acc\n            bits += from_bits\n            while bits >= to_bits:\n                bits -= to_bits\n                ret.append((acc >> bits) & maxv)\n        if pad and bits:\n            ret.append((acc << (to_bits - bits)) & maxv)\n        return ret\n\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n\n    data = bytes.fromhex(input)\n    data5bit = bech32_convertbits(list(data), 8, 5)\n\n    if data5bit is None:\n        return 'Data conversion failed'\n\n    checksum = bech32_create_checksum(hrp, data5bit)\n\n    return hrp + '1' + ''.join([CHARSET[d] for d in data5bit + checksum])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2346473, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_algorand": {"name": "create_udf_hex_to_algorand", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_algorand", "macro_sql": "{% macro create_udf_hex_to_algorand() %}\n\nimport hashlib\nimport base64\n\ndef transform_hex_to_algorand(input):\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n    public_key_bytes = bytearray.fromhex(input)\n\n    sha512_256_hash = hashlib.new('sha512_256', public_key_bytes).digest()\n\n    checksum = sha512_256_hash[-4:]\n\n    algorand_address = base64.b32encode(public_key_bytes + checksum).decode('utf-8').rstrip('=')\n\n    return algorand_address\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.234957, "supported_languages": null}, "macro.fsc_utils.create_udf_hex_to_tezos": {"name": "create_udf_hex_to_tezos", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_hex_to_tezos", "macro_sql": "{% macro create_udf_hex_to_tezos() %}\n\nimport hashlib\n\ndef transform_hex_to_tezos(input, prefix):\n    if input is None or not input.startswith('0x'):\n        return 'Invalid input'\n\n    input = input[2:]\n\n    if len(input) != 40:\n        return 'Invalid length'\n\n    hash_bytes = bytes.fromhex(input)\n\n    prefixes = {\n        'tz1': '06a19f',  # Ed25519\n        'tz2': '06a1a1',  # Secp256k1\n        'tz3': '06a1a4'   # P-256\n    }\n\n    if prefix not in prefixes:\n        return 'Invalid prefix: Must be tz1, tz2, or tz3'\n\n    prefix_bytes = bytes.fromhex(prefixes[prefix])\n\n    prefixed_hash = prefix_bytes + hash_bytes\n\n    checksum = hashlib.sha256(hashlib.sha256(prefixed_hash).digest()).digest()[:4]\n\n    full_hash = prefixed_hash + checksum\n\n    tezos_address = transform_hex_to_base58(full_hash.hex())\n\n    return tezos_address\n\ndef transform_hex_to_base58(input):\n    if input is None:\n        return None\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(input)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2351933, "supported_languages": null}, "macro.fsc_utils.create_udf_detect_overflowed_responses": {"name": "create_udf_detect_overflowed_responses", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udf_detect_overflowed_responses", "macro_sql": "{% macro create_udf_detect_overflowed_responses() %}\n\nimport pandas as pd\nfrom snowflake.snowpark.files import SnowflakeFile\n\nVARCHAR_MAX = 16_777_216\ndef main(file_url, index_cols):\n    with SnowflakeFile.open(file_url, 'rb') as f:\n        df = pd.read_json(f, lines=True, compression='gzip')\n    data_length = df[\"data\"].astype(str).apply(len)\n    return df[data_length > VARCHAR_MAX][index_cols].values.tolist()\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.235362, "supported_languages": null}, "macro.fsc_utils.create_udtf_flatten_overflowed_responses": {"name": "create_udtf_flatten_overflowed_responses", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.py.sql", "original_file_path": "macros/streamline/functions.py.sql", "unique_id": "macro.fsc_utils.create_udtf_flatten_overflowed_responses", "macro_sql": "{% macro create_udtf_flatten_overflowed_responses() %}\n\nimport logging\nimport simplejson as json\n\nimport numpy as np\nimport pandas as pd\nfrom snowflake.snowpark.files import SnowflakeFile\n\nVARCHAR_MAX = 16_777_216\n\nlogger = logging.getLogger(\"udtf_flatten_overflowed_responses\")\n\nclass Flatten:\n    \"\"\"\n    Recursive function to flatten a nested JSON file\n    \"\"\"\n\n    def __init__(self, mode: str, exploded_key: list) -> None:\n        self.mode = mode\n        self.exploded_key = exploded_key\n\n    def _flatten_response(\n        self,\n        response_key: str,\n        responses: str,\n        block_number: int,\n        metadata: dict,\n        seq_index: int = 0,\n        path: str = \"\",\n    ):\n        \"\"\"\n        Example:\n\n        input: {\"a\":1, \"b\":[77,88], \"c\": {\"d\":\"X\"}}\n\n        output:\n        - SEQ: A unique sequence number associated with the input record; the sequence is not guaranteed to be gap-free or ordered in any particular way.\n        - KEY: For maps or objects, this column contains the key to the exploded value.\n        - PATH: The path to the element within a data structure which needs to be flattened.\n        - INDEX: The index of the element, if it is an array; otherwise NULL.\n        - VALUE_: The value of the element of the flattened array/object.\n\n        \"\"\"\n        exploded_data = []\n        if self.mode == \"array\":\n            check_mode = isinstance(responses, list)\n        elif self.mode == \"dict\":\n            check_mode = isinstance(responses, dict)\n        elif self.mode == \"both\":\n            check_mode = isinstance(responses, list) or isinstance(responses, dict)\n\n        if check_mode:\n            if isinstance(responses, dict):\n                looped_keys = responses.keys()\n                for key in looped_keys:\n                    next_path = f\"{path}.{key}\" if path else key\n                    index = None\n                    exploded_data.append(\n                        {\n                            \"block_number\": block_number,\n                            \"metadata\": metadata,\n                            \"seq\": seq_index,\n                            \"key\": key,\n                            \"path\": next_path,\n                            \"index\": index,\n                            \"value_\": responses[key],\n                        }\n                    )\n                    exploded_data.extend(\n                        self._flatten_response(\n                            key,\n                            responses[key],\n                            block_number,\n                            metadata,\n                            seq_index,\n                            next_path,\n                        )\n                    )\n\n            elif isinstance(responses, list):\n                looped_keys = range(len(responses))\n                if response_key in self.exploded_key or len(self.exploded_key) == 0:\n                    for item_i, item in enumerate(responses):\n                        if response_key == \"result\":\n                            seq_index += 1\n                        index = item_i\n                        exploded_data.append(\n                            {\n                                \"block_number\": block_number,\n                                \"metadata\": metadata,\n                                \"seq\": seq_index,\n                                \"key\": None,\n                                \"path\": f\"{path}[{item_i}]\",\n                                \"index\": index,\n                                \"value_\": item,\n                            }\n                        )\n                        exploded_data.extend(\n                            self._flatten_response(\n                                item_i,\n                                item,\n                                block_number,\n                                metadata,\n                                seq_index,\n                                f\"{path}[{item_i}]\",\n                            )\n                        )\n\n        return exploded_data\n\nclass FlattenRows:\n    \"\"\"\n    Recursive function to flatten a given JSON file from Snowflake stage\n    \"\"\"\n    def process(self, file_url: str, index_cols: list, index_vals: list):\n        with SnowflakeFile.open(file_url, 'rb') as f:\n            df = pd.read_json(f, lines=True, compression='gzip')\n\n        df.set_index(index_cols, inplace=True, drop=False)\n        df = df.loc[index_vals]\n\n        flattener = Flatten(mode=\"both\", exploded_key=[])\n\n        df[\"value_\"] = df.apply(\n                lambda x: flattener._flatten_response(\n                    block_number=x[\"block_number\"], metadata=x[\"metadata\"], responses=x[\"data\"], response_key=None\n                ),\n                axis=\"columns\",\n            )\n        df[\"value_\"] = df[\"value_\"].apply(pd.DataFrame.from_records)\n        df[\"index_cols\"] = df.index\n        df = df[[\"index_cols\", \"value_\"]]\n        flattened = pd.concat(\n            df[\"value_\"].values.tolist(), keys=df[\"index_cols\"].values.tolist()\n        ).droplevel(-1)\n\n        cleansed = flattened.replace({np.nan: None})\n\n        overflow = cleansed[\"value_\"].astype(str).apply(len) > VARCHAR_MAX\n\n        cleansed.loc[overflow, [\"value_\"]] = None\n        temp_index_cols = list(range(len(index_cols)))\n        cleansed = cleansed.reset_index(names=temp_index_cols, drop=False)\n        cleansed[\"index_cols\"] = cleansed[temp_index_cols].apply(list, axis=1)\n        cleansed.drop(columns=temp_index_cols, inplace=True, errors=\"ignore\")\n        return list(cleansed[np.roll(cleansed.columns.values, 1).tolist()].itertuples(index=False, name=None))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2359214, "supported_languages": null}, "macro.fsc_utils.drop_function": {"name": "drop_function", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.drop_function", "macro_sql": "{% macro drop_function(\n        func_name,\n        signature\n    ) %}\n    DROP FUNCTION IF EXISTS {{ func_name }}({{ fsc_utils.compile_signature(signature, drop_ = True) }});\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.compile_signature"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2372448, "supported_languages": null}, "macro.fsc_utils.construct_api_route": {"name": "construct_api_route", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.construct_api_route", "macro_sql": "\n\n{%- macro construct_api_route(route) -%}\n    'https://{{ var(\"REST_API_ID_PROD\") if target.name == \"prod\" else var(\"REST_API_ID_DEV\") }}.execute-api.{{ var( aws_region, \"us-east-1\" ) }}.amazonaws.com/{{ target.name }}/{{ route }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2376995, "supported_languages": null}, "macro.fsc_utils.compile_signature": {"name": "compile_signature", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.compile_signature", "macro_sql": "{%- macro compile_signature(\n        params,\n        drop_ = False\n    ) -%}\n    {% for name,\n        data_type in params -%}\n        {% if drop_ %}\n            {{ data_type -}}\n        {% else %}\n            {{ name ~ \" \" ~ data_type -}}\n        {% endif -%}\n        {%-if not loop.last -%},\n        {%- endif -%}\n    {% endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2382307, "supported_languages": null}, "macro.fsc_utils.create_sql_function": {"name": "create_sql_function", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.create_sql_function", "macro_sql": "{% macro create_sql_function(\n        name_,\n        signature,\n        return_type,\n        sql_,\n        api_integration = none,\n        options = none,\n        func_type = none\n    ) %}\n    CREATE OR REPLACE {{ func_type }} FUNCTION {{ name_ }}(\n            {{- fsc_utils.compile_signature(signature) }}\n    )\n    COPY GRANTS\n    RETURNS {{ return_type }}\n    {% if options -%}\n        {{ options }}\n    {% endif %}\n    {%- if api_integration -%}\n    api_integration = {{ api_integration }}\n    AS {{ fsc_utils.construct_api_route(sql_) ~ \";\" }}\n    {% else -%}\n    AS\n    $$\n    {{ sql_ }}\n    $$;\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.fsc_utils.compile_signature", "macro.fsc_utils.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2390356, "supported_languages": null}, "macro.fsc_utils.create_or_drop_function_from_config": {"name": "create_or_drop_function_from_config", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.create_or_drop_function_from_config", "macro_sql": "{%- macro create_or_drop_function_from_config(\n        config,\n        drop_ = False\n    ) -%}\n    {% set name_ = config [\"name\"] %}\n    {% set signature = config [\"signature\"] %}\n    {% set return_type = config [\"return_type\"] %}\n    {% set sql_ = config [\"sql\"] %}\n    {% set options = config [\"options\"] %}\n    {% set api_integration = config [\"api_integration\"] %}\n    {% set func_type = config [\"func_type\"] %}\n\n    {% if not drop_ -%}\n        {{ fsc_utils.create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            options = options,\n            api_integration = api_integration,\n            func_type = func_type\n        ) }}\n    {%- else -%}\n        {{ fsc_utils.drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.create_sql_function", "macro.fsc_utils.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2403517, "supported_languages": null}, "macro.fsc_utils.if_data_call_function_v2": {"name": "if_data_call_function_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.if_data_call_function_v2", "macro_sql": "{% macro if_data_call_function_v2(\n        func,\n        target,\n        params\n    ) %}\n    {% if var(\n            \"STREAMLINE_INVOKE_STREAMS\"\n        ) %}\n        {% if execute %}\n            {{ log(\n                \"Running macro `if_data_call_function`: Calling udf \" ~ func ~ \" with params: \\n\" ~ params | tojson(indent=2) ~  \"\\n on \" ~ target,\n                True\n            ) }}\n        {% endif %}\n    SELECT\n        {{ func }}( parse_json($${{ params | tojson }}$$) )\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{ target }}\n            LIMIT\n                1\n        )\n    {% else %}\n        {% if execute %}\n            {{ log(\n                \"Running macro `if_data_call_function`: NOOP\",\n                False\n            ) }}\n        {% endif %}\n    SELECT\n        NULL\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2412271, "supported_languages": null}, "macro.fsc_utils.if_data_call_wait": {"name": "if_data_call_wait", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/utils.sql", "original_file_path": "macros/streamline/utils.sql", "unique_id": "macro.fsc_utils.if_data_call_wait", "macro_sql": "{% macro if_data_call_wait() %}\n    {% if var(\n            \"STREAMLINE_INVOKE_STREAMS\"\n        ) %}\n        {% set query %}\n    SELECT\n        1\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{ model.schema ~ \".\" ~ model.alias }}\n            LIMIT\n                1\n        ) {% endset %}\n        {% if execute %}\n            {% set results = run_query(\n                query\n            ) %}\n            {% if results %}\n                {{ log(\n                    \"Waiting...\",\n                    info = True\n                ) }}\n\n                {% set wait_query %}\n            SELECT\n                system$wait(\n                    {{ var(\n                        \"WAIT\",\n                        400\n                    ) }}\n                ) {% endset %}\n                {% do run_query(wait_query) %}\n            {% else %}\n            SELECT\n                NULL;\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2422626, "supported_languages": null}, "macro.fsc_utils.sql_udf_json_rpc_call": {"name": "sql_udf_json_rpc_call", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/functions.sql", "original_file_path": "macros/streamline/functions.sql", "unique_id": "macro.fsc_utils.sql_udf_json_rpc_call", "macro_sql": "{% macro sql_udf_json_rpc_call(use_default_id=True ) %}\n    SELECT IFF(method IS NULL or params IS NULL,\n              NULL,\n              {\n                'jsonrpc': '2.0',\n                'method': method,\n                'params': params\n                {% if use_default_id %}\n                  , 'id': hash(method, params)::string\n                {% else %}\n                  , 'id': id\n                {% endif %}\n              }\n              )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.242666, "supported_languages": null}, "macro.fsc_utils.decode_logs_history": {"name": "decode_logs_history", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.decode_logs_history", "macro_sql": "{% macro decode_logs_history(\n        start,\n        stop\n    ) %}\n    WITH look_back AS (\n        SELECT\n            block_number\n        FROM\n            {{ ref(\"_max_block_by_date\") }}\n            qualify ROW_NUMBER() over (\n                ORDER BY\n                    block_number DESC\n            ) = 1\n    )\nSELECT\n    l.block_number,\n    l._log_id,\n    A.abi AS abi,\n    OBJECT_CONSTRUCT(\n        'topics',\n        l.topics,\n        'data',\n        l.data,\n        'address',\n        l.contract_address\n    ) AS DATA\nFROM\n    {{ ref(\"silver__logs\") }}\n    l\n    INNER JOIN {{ ref(\"silver__complete_event_abis\") }} A\n    ON A.parent_contract_address = l.contract_address\n    AND A.event_signature = l.topics[0]:: STRING\n    AND l.block_number BETWEEN A.start_block\n    AND A.end_block\nWHERE\n    (\n        l.block_number BETWEEN {{ start }}\n        AND {{ stop }}\n    )\n    AND l.block_number <= (\n        SELECT\n            block_number\n        FROM\n            look_back\n    )\n    AND _log_id NOT IN (\n        SELECT\n            _log_id\n        FROM\n            {{ ref(\"streamline__complete_decode_logs\") }}\n        WHERE\n            (\n                block_number BETWEEN {{ start }}\n                AND {{ stop }}\n            )\n            AND block_number <= (\n                SELECT\n                    block_number\n                FROM\n                    look_back\n            )\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2438822, "supported_languages": null}, "macro.fsc_utils.block_reorg": {"name": "block_reorg", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.block_reorg", "macro_sql": "{% macro block_reorg(reorg_model_list, hours) %}\n  {% set models = reorg_model_list.split(\",\") %}\n  {% for model in models %}\n  {% set sql %}\n    DELETE FROM\n        {{ ref(model) }} t\n    WHERE\n        t._inserted_timestamp > DATEADD(\n            'hour',\n            -{{ hours }},\n            SYSDATE()\n        )\n        AND NOT EXISTS (\n            SELECT\n                1\n            FROM\n                {{ ref('silver__transactions') }}\n                s\n            WHERE s.block_number = t.block_number\n                AND s.tx_hash = t.tx_hash\n        );\n    {% endset %}\n    {% do run_query(sql) %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2445621, "supported_languages": null}, "macro.fsc_utils.streamline_external_table_query_v2": {"name": "streamline_external_table_query_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.streamline_external_table_query_v2", "macro_sql": "{% macro streamline_external_table_query_v2(\n        model,\n        partition_function\n    ) %}\n    WITH meta AS (\n        SELECT\n            job_created_time AS _inserted_timestamp,\n            file_name,\n            {{ partition_function }} AS partition_key\n        FROM\n            TABLE(\n                information_schema.external_table_file_registration_history(\n                    start_time => DATEADD('day', -3, CURRENT_TIMESTAMP()),\n                    table_name => '{{ source( \"bronze_streamline\", model) }}')\n                ) A\n            )\n        SELECT\n            s.*,\n            b.file_name,\n            _inserted_timestamp\n        FROM\n            {{ source(\n                \"bronze_streamline\",\n                model\n            ) }}\n            s\n            JOIN meta b\n            ON b.file_name = metadata$filename\n            AND b.partition_key = s.partition_key\n        WHERE\n            b.partition_key = s.partition_key\n            AND DATA :error IS NULL\n            AND DATA is not null\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2449775, "supported_languages": null}, "macro.fsc_utils.streamline_external_table_FR_query_v2": {"name": "streamline_external_table_FR_query_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/models.sql", "original_file_path": "macros/streamline/models.sql", "unique_id": "macro.fsc_utils.streamline_external_table_FR_query_v2", "macro_sql": "{% macro streamline_external_table_FR_query_v2(\n        model,\n        partition_function\n    ) %}\n    WITH meta AS (\n        SELECT\n            registered_on AS _inserted_timestamp,\n            file_name,\n            {{ partition_function }} AS partition_key\n        FROM\n            TABLE(\n                information_schema.external_table_files(\n                    table_name => '{{ source( \"bronze_streamline\", model) }}'\n                )\n            ) A\n    )\nSELECT\n    s.*,\n    b.file_name,\n    _inserted_timestamp\nFROM\n    {{ source(\n        \"bronze_streamline\",\n        model\n    ) }}\n    s\n    JOIN meta b\n    ON b.file_name = metadata$filename\n    AND b.partition_key = s.partition_key\nWHERE\n    b.partition_key = s.partition_key\n    AND DATA :error IS NULL\n    AND DATA is not null\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2453854, "supported_languages": null}, "macro.fsc_utils.udf_configs": {"name": "udf_configs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/configs.yaml.sql", "original_file_path": "macros/streamline/configs.yaml.sql", "unique_id": "macro.fsc_utils.udf_configs", "macro_sql": "{% macro udf_configs(schema) %}\n\n{#\n  UTILITY SCHEMA\n#}\n\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    STRICT IMMUTABLE\n    RUNTIME_VERSION = '3.9'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ fsc_utils.python_hex_to_int() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [encoding, STRING]\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    STRICT IMMUTABLE\n    RUNTIME_VERSION = '3.9'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ fsc_utils.python_udf_hex_to_int_with_encoding() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_string\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    STRICT IMMUTABLE\n  sql: |\n    SELECT\n      LTRIM(regexp_replace(\n        try_hex_decode_string(hex),\n          '[\\x00-\\x1F\\x7F-\\x9F\\xAD]', '', 1))\n\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call() }}\n  exclude_from_datashare: true\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call() }}\n  exclude_from_datashare: true\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call(False) }}\n  exclude_from_datashare: true\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ fsc_utils.sql_udf_json_rpc_call(False) }}\n  exclude_from_datashare: true\n\n- name: {{ schema }}.udf_evm_text_signature\n  signature:\n    - [abi, VARIANT]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.9'\n    HANDLER = 'get_simplified_signature'\n  sql: |\n    {{ fsc_utils.create_udf_evm_text_signature() | indent(4) }}\n\n- name: {{ schema }}.udf_keccak256\n  signature:\n    - [event_name, VARCHAR(255)]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.9'\n    PACKAGES = ('pycryptodome==3.15.0')\n    HANDLER = 'udf_encode'\n  sql: |\n    {{ fsc_utils.create_udf_keccak256() | indent(4) }}\n\n- name: {{ schema }}.udf_decimal_adjust\n  signature:\n    - [input, string]\n    - [adjustment, int]\n  return_type: VARCHAR\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.9'\n    HANDLER = 'custom_divide'\n  sql: |\n    {{ fsc_utils.create_udf_decimal_adjust() | indent(4) }}\n\n- name: {{ schema }}.udf_cron_to_prior_timestamps\n  signature:\n    - [workflow_name, STRING]\n    - [workflow_schedule, STRING]\n  return_type: TABLE(workflow_name STRING, workflow_schedule STRING, timestamp TIMESTAMP_NTZ)\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.9'\n    PACKAGES = ('croniter')\n    HANDLER = 'TimestampGenerator'\n  sql: |\n    {{ fsc_utils.create_udf_cron_to_prior_timestamps() | indent(4) }}\n\n- name: {{ schema }}.udf_transform_logs\n  signature:\n    - [decoded, VARIANT]\n  return_type: VARIANT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.9'\n    HANDLER = 'transform'\n  sql: |\n    {{ fsc_utils.create_udf_transform_logs() | indent(4) }}\n\n- name: {{ schema }}.udf_base58_to_hex\n  signature:\n    - [base58, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.9'\n    HANDLER = 'transform_base58_to_hex'\n  sql: |\n    {{ fsc_utils.create_udf_base58_to_hex() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_base58\n  signature:\n    - [input, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.9'\n    HANDLER = 'transform_hex_to_base58'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_base58() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_bech32\n  signature:\n    - [input, STRING]\n    - [hrp, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.9'\n    HANDLER = 'transform_hex_to_bech32'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_bech32() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_algorand\n  signature:\n    - [input, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.9'\n    HANDLER = 'transform_hex_to_algorand'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_algorand() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_tezos\n  signature:\n    - [input, STRING]\n    - [prefix, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.9'\n    HANDLER = 'transform_hex_to_tezos'\n  sql: |\n    {{ fsc_utils.create_udf_hex_to_tezos() | indent(4) }}\n\n- name: {{ schema }}.udf_detect_overflowed_responses\n  signature:\n    - [file_url, STRING]\n    - [index_cols, ARRAY]\n  return_type: ARRAY\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.11'\n    COMMENT = 'Detect overflowed responses larger than 16MB'\n    PACKAGES = ('snowflake-snowpark-python', 'pandas')\n    HANDLER = 'main'\n  sql: |\n    {{ fsc_utils.create_udf_detect_overflowed_responses() | indent(4) }}\n\n- name: {{ schema }}.udtf_flatten_overflowed_responses\n  signature:\n    - [file_url, STRING]\n    - [index_cols, ARRAY]\n    - [index_vals, ARRAY]\n  return_type: |\n    table(\n          index_vals ARRAY,\n          block_number NUMBER,\n          metadata OBJECT,\n          seq NUMBER,\n          key STRING,\n          path STRING,\n          index NUMBER,\n          value_ VARIANT\n        )\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.11'\n    COMMENT = 'Flatten rows from a JSON file with overflowed responses larger than 16MB'\n    PACKAGES = ('snowflake-snowpark-python', 'pandas', 'simplejson', 'numpy')\n    HANDLER = 'FlattenRows'\n  sql: |\n    {{ fsc_utils.create_udtf_flatten_overflowed_responses() | indent(4) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.python_hex_to_int", "macro.fsc_utils.python_udf_hex_to_int_with_encoding", "macro.fsc_utils.sql_udf_json_rpc_call", "macro.fsc_utils.create_udf_evm_text_signature", "macro.fsc_utils.create_udf_keccak256", "macro.fsc_utils.create_udf_decimal_adjust", "macro.fsc_utils.create_udf_cron_to_prior_timestamps", "macro.fsc_utils.create_udf_transform_logs", "macro.fsc_utils.create_udf_base58_to_hex", "macro.fsc_utils.create_udf_hex_to_base58", "macro.fsc_utils.create_udf_hex_to_bech32", "macro.fsc_utils.create_udf_hex_to_algorand", "macro.fsc_utils.create_udf_hex_to_tezos", "macro.fsc_utils.create_udf_detect_overflowed_responses", "macro.fsc_utils.create_udtf_flatten_overflowed_responses"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2486362, "supported_languages": null}, "macro.fsc_utils.create_udf_bulk_rest_api_v2": {"name": "create_udf_bulk_rest_api_v2", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/udfs.sql", "original_file_path": "macros/streamline/udfs.sql", "unique_id": "macro.fsc_utils.create_udf_bulk_rest_api_v2", "macro_sql": "{% macro create_udf_bulk_rest_api_v2() %}    \n    {{ log(\"Creating udf udf_bulk_rest_api for target:\" ~ target.name ~ \", schema: \" ~ target.schema ~ \", DB: \" ~ target.database, info=True) }}\n    {{ log(\"role:\" ~ target.role ~ \", user:\" ~ target.user, info=True) }}\n\n    {% set sql %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_rest_api_v2(json object) returns array api_integration = \n    {% if target.name == \"prod\" %} \n        {{ log(\"Creating prod udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}udf_bulk_rest_api'\n    {% elif target.name == \"dev\" %}\n        {{ log(\"Creating dev udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}udf_bulk_rest_api'\n    {% elif  target.name == \"sbx\" %}\n        {{ log(\"Creating stg udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}udf_bulk_rest_api'\n    {% else %}\n        {{ log(\"Creating default (dev) udf_bulk_rest_api_v2\", info=True) }}\n        {{ var(\"config\")[\"dev\"][\"API_INTEGRATION\"] }} AS 'https://{{ var(\"config\")[\"dev\"][\"EXTERNAL_FUNCTION_URI\"] | lower }}udf_bulk_rest_api'\n    {% endif %};\n    {% endset %}\n    {{ log(sql, info=True) }}\n    {% do adapter.execute(sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.251747, "supported_languages": null}, "macro.fsc_utils.create_udf_bulk_decode_logs": {"name": "create_udf_bulk_decode_logs", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/udfs.sql", "original_file_path": "macros/streamline/udfs.sql", "unique_id": "macro.fsc_utils.create_udf_bulk_decode_logs", "macro_sql": "{% macro create_udf_bulk_decode_logs() %}    \n    {{ log(\"Creating udf udf_bulk_decode_logs_v2 for target:\" ~ target.name ~ \", schema: \" ~ target.schema ~ \", DB: \" ~ target.database, info=True) }}\n    {{ log(\"role:\" ~ target.role ~ \", user:\" ~ target.user, info=True) }}\n\n    {% set sql %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_decode_logs_v2(json object) returns array api_integration = \n    {% if target.name == \"prod\" %} \n        {{ log(\"Creating prod udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_logs'\n    {% elif target.name == \"dev\" %}\n        {{ log(\"Creating dev udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_logs'\n    {% elif  target.name == \"sbx\" %}\n        {{ log(\"Creating stg udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_logs'\n    {% else %}\n        {{ log(\"Creating default (dev) udf_bulk_decode_logs_v2\", info=True) }}\n        {{ var(\"config\")[\"dev\"][\"API_INTEGRATION\"] }} AS 'https://{{ var(\"config\")[\"dev\"][\"EXTERNAL_FUNCTION_URI\"] | lower }}bulk_decode_logs'\n    {% endif %};\n    {% endset %}\n    {{ log(sql, info=True) }}\n    {% do adapter.execute(sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.25389, "supported_languages": null}, "macro.fsc_utils.create_udf_bulk_decode_traces": {"name": "create_udf_bulk_decode_traces", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/streamline/udfs.sql", "original_file_path": "macros/streamline/udfs.sql", "unique_id": "macro.fsc_utils.create_udf_bulk_decode_traces", "macro_sql": "{% macro create_udf_bulk_decode_traces() %}    \n    {{ log(\"Creating udf udf_bulk_decode_traces_v2 for target:\" ~ target.name ~ \", schema: \" ~ target.schema ~ \", DB: \" ~ target.database, info=True) }}\n    {{ log(\"role:\" ~ target.role ~ \", user:\" ~ target.user, info=True) }}\n\n    {% set sql %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_bulk_decode_traces_v2(json object) returns array api_integration = \n    {% if target.name == \"prod\" %} \n        {{ log(\"Creating prod udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_traces'\n    {% elif target.name == \"dev\" %}\n        {{ log(\"Creating dev udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_traces'\n    {% elif  target.name == \"sbx\" %}\n        {{ log(\"Creating stg udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"API_INTEGRATION\") }} AS 'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}bulk_decode_traces'\n    {% else %}\n        {{ log(\"Creating default (dev) udf_bulk_decode_traces_v2\", info=True) }}\n        {{ var(\"config\")[\"dev\"][\"API_INTEGRATION\"] }} AS 'https://{{ var(\"config\")[\"dev\"][\"EXTERNAL_FUNCTION_URI\"] | lower }}bulk_decode_traces'\n    {% endif %};\n    {% endset %}\n    {{ log(sql, info=True) }}\n    {% do adapter.execute(sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2558746, "supported_languages": null}, "macro.fsc_utils.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "fsc_utils", "path": "macros/dbt/get_merge.sql", "original_file_path": "macros/dbt/get_merge.sql", "unique_id": "macro.fsc_utils.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n    {% set predicate_override = \"\" %}\n    {% if incremental_predicates[0] == \"dynamic_range_predicate\" %}\n        -- run some queries to dynamically determine the min + max of this 'date_column' in the new data\n        {% set predicate_override = fsc_utils.dynamic_range_predicate(source, incremental_predicates[1], \"DBT_INTERNAL_DEST\") %}\n    {% endif %}\n    {% set predicates = [predicate_override] if predicate_override else incremental_predicates %}\n    -- standard merge from here\n    {% set merge_sql = dbt.get_merge_sql(target, source, unique_key, dest_columns, predicates) %}\n    {{ return(merge_sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fsc_utils.dynamic_range_predicate", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2569366, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2573721, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2575843, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2583663, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.258696, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2590015, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2593145, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.259574, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2598372, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2603443, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2612226, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2618294, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2629411, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2639914, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2664416, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2671616, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2680993, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2684627, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.269011, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2694595, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2696767, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.269891, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2704, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2707584, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2711937, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2718663, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2722964, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2726781, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2737079, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2758665, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2766564, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2773662, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2780592, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2783735, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2789235, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.279371, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2803295, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2808793, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2819884, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2827775, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.283265, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2840788, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2846801, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2858, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2868347, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2892563, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2898965, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2905285, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2908072, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.291595, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2920184, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.292543, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2940457, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.2992296, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.299965, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3012476, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3018937, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3023293, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3031783, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.304422, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3049579, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3059602, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.30715, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.308446, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3091285, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3104172, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3108652, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.31136, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3118412, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3129618, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.313421, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3142867, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3149908, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3157265, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.316329, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3170204, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3176003, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3181152, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3187432, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3194473, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3202739, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3218043, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3224764, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3236942, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3242984, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3248944, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3257344, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.327379, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3280952, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3294394, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3299787, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.330445, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3311784, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.332917, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3335593, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.334552, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3357017, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3380036, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3385644, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3391194, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.339902, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3412771, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.341964, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3424857, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3428614, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3431194, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3434982, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3437517, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3448162, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3452153, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3455215, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3464434, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3470795, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3474736, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3475976, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.347717, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3478515, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3479788, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.348097, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3487792, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3491008, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3494375, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.349822, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3499844, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3501449, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3503196, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3506253, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3514142, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.353631, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.355008, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.355963, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3568535, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.357811, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3595226, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.360068, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3610306, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3621466, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3629856, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3636887, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3655772, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3659382, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3661, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3669448, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3682268, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3690088, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3694522, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3703876, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.371291, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3717983, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3726943, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3737335, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3741825, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3747928, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3754568, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3768282, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.377815, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3787358, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3793201, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.380728, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3814435, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3818696, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3830934, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3845017, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.386029, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3875384, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3880475, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.389025, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.389563, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3911526, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.392564, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3936248, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3946846, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3950396, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.3955736, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.396917, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.398468, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.399769, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4001467, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4010406, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4016435, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4022205, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4068599, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.407586, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4084299, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.409754, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4105668, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4127584, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4137874, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4146826, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4156241, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.416572, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4175756, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4185596, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4195921, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4209275, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4218564, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4228153, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4235501, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4245489, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4256253, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4262009, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4269443, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4278762, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4289029, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4296477, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4306178, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.431501, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4323802, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.433636, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4345827, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4349658, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4356606, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4363527, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4374826, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4386103, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4398453, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.440538, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.441904, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4424436, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.44322, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.443982, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4444475, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4449477, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4454722, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\" \n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.446138, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4466653, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4467893, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4469092, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4470274, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4472792, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4474032, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4475238, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.447644, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.448041, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.448434, "supported_languages": null}, "macro.livequery_models.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.livequery_models.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[0] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.449009, "supported_languages": null}, "macro.livequery_models.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "unique_id": "macro.livequery_models.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[1] | trim }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4494464, "supported_languages": null}, "macro.livequery_models.create_sps": {"name": "create_sps", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "unique_id": "macro.livequery_models.create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% if target.database == 'LIVEQUERY' %}\n            CREATE schema IF NOT EXISTS _internal;\n    {{ sp_create_prod_clone('_internal') }};\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.449948, "supported_languages": null}, "macro.livequery_models.sp_create_prod_clone": {"name": "sp_create_prod_clone", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "unique_id": "macro.livequery_models.sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `CREATE OR REPLACE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA IF EXISTS ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL SCHEMAS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON ALL TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE STAGES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`}); \n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`})\n\n        var existing_tags = snowflake.execute({sqlText: `SHOW TAGS IN DATABASE ${DESTINATION_DB_NAME};`});\n        while (existing_tags.next()) {\n            var schema = existing_tags.getColumnValue(4);\n            var tag_name = existing_tags.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TAG ${DESTINATION_DB_NAME}.${schema}.${tag_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n\n    return true\n$$\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4505746, "supported_languages": null}, "macro.livequery_models.run_sp_create_prod_clone": {"name": "run_sp_create_prod_clone", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "unique_id": "macro.livequery_models.run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n    {% set clone_query %}\n    call livequery._internal.create_prod_clone(\n        'livequery',\n        'livequery_dev',\n        'livequery_dev_owner'\n    );\n{% endset %}\n    {% do run_query(clone_query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4509287, "supported_languages": null}, "macro.livequery_models.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/custom_query_tag.sql", "original_file_path": "macros/custom_query_tag.sql", "unique_id": "macro.livequery_models.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n {% set new_json = {\"repo\":project_name, \"object\":this.table, \"profile\":target.profile_name, \"env\":target.name, \"existing_tag\":get_current_query_tag()  } %}\n{% set new_query_tag = tojson(new_json) | as_text %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4522219, "supported_languages": null}, "macro.livequery_models.apply_grants_by_schema": {"name": "apply_grants_by_schema", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/grants.sql", "original_file_path": "macros/grants.sql", "unique_id": "macro.livequery_models.apply_grants_by_schema", "macro_sql": "{% macro apply_grants_by_schema(schema) %}\n{#\n    Generates SQL to grant permissions to roles for a given schema.\n    This gets run automatically when a deployment is made to prod.\n\n    This can be manually run to grant permissions to a new schema:\n    `dbt run-operation apply_grants_by_schema --args '{\"schema\": \"my_schema\"}'`\n #}\n    {%- set outer = namespace(sql=\"\") -%}\n    {% for role in fromyaml(var(\"ROLES\")) %}\n            {% set sql -%}\n                {% if schema.startswith(\"_\") %}\n                    REVOKE USAGE ON SCHEMA {{ target.database }}.{{ schema }} FROM {{ role }};\n                    REVOKE USAGE ON ALL FUNCTIONS IN SCHEMA {{ target.database }}.{{ schema }} FROM {{ role }};\n                {%- else -%}\n                    GRANT USAGE ON SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n                    GRANT USAGE ON ALL FUNCTIONS IN SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n\n                    GRANT SELECT ON ALL TABLES IN SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n                    GRANT SELECT ON ALL VIEWS IN SCHEMA {{ target.database }}.{{ schema }} TO {{ role }};\n                {%- endif -%}\n            {%- endset -%}\n            {%- set outer.sql = outer.sql ~ sql -%}\n    {%- endfor -%}\n    {{ outer.sql }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4540415, "supported_languages": null}, "macro.livequery_models.apply_grants_to_all_schema": {"name": "apply_grants_to_all_schema", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/grants.sql", "original_file_path": "macros/grants.sql", "unique_id": "macro.livequery_models.apply_grants_to_all_schema", "macro_sql": "{% macro apply_grants_to_all_schema() %}\n{#\n    Run SQL to grant permissions to roles for all schemas.\n    This is useful for when a new role is created and needs to be granted access to all schemas.\n    This is not used in the normal grant process.\n\n    `dbt run-operation apply_grants_to_all_schema`\n #}\n    {% if execute and target.name in (\"prod\", \"hosted\",) %}\n        {% set sql_get_schema %}\n            SELECT SCHEMA_NAME\n            FROM {{ target.database }}.INFORMATION_SCHEMA.SCHEMATA\n            WHERE SCHEMA_NAME NOT IN ('PUBLIC', 'INFORMATION_SCHEMA')\n        {%- endset -%}\n        {%- set results = run_query(sql_get_schema) -%}\n        {% set sql_apply_grants %}\n            {%- for schema in results.columns[0].values() -%}\n                {{ apply_grants_by_schema(schema) }}\n            {%- endfor -%}\n        {%- endset -%}\n        {% do log(sql_apply_grants, true) %}\n        {% do run_query(sql_apply_grants) %}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.livequery_models.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4549792, "supported_languages": null}, "macro.livequery_models.config_core__live": {"name": "config_core__live", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/_live.yaml.sql", "original_file_path": "macros/core/_live.yaml.sql", "unique_id": "macro.livequery_models.config_core__live", "macro_sql": "{% macro config_core__live(schema=\"_live\") %}\n\n- name: {{ schema }}.udf_api_batched\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [DATA, VARIANT]\n    - [user_id, STRING]\n    - [SECRET, STRING]\n  return_type: VARIANT\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  max_batch_rows: '{{ var(\"MAX_BATCH_ROWS\") }}'\n  options: |\n    NOT NULL\n  sql: udf_api\n\n- name: {{ schema }}.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [DATA, VARIANT]\n    - [user_id, STRING]\n    - [SECRET, STRING]\n  return_type: VARIANT\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n  sql: udf_api\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4555762, "supported_languages": null}, "macro.livequery_models.python_hex_to_int": {"name": "python_hex_to_int", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.python_hex_to_int", "macro_sql": "{% macro python_hex_to_int() %}\ndef hex_to_int(hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int(NULL);\n    >> NULL\n    \"\"\"\n    try:\n        return str(int(hex, 16)) if hex and hex != \"0x\" else None\n    except:\n        return None\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4564962, "supported_languages": null}, "macro.livequery_models.python_udf_hex_to_int_with_encoding": {"name": "python_udf_hex_to_int_with_encoding", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.python_udf_hex_to_int_with_encoding", "macro_sql": "{% macro python_udf_hex_to_int_with_encoding() %}\ndef hex_to_int(encoding, hex) -> str:\n    \"\"\"\n    Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n    hex_to_int('hex', '200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', '0x200000000000000000000000000000211');\n    >> 680564733841876926926749214863536423441\n    hex_to_int('hex', NULL);\n    >> NULL\n    hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\n    >> -440911153\n    \"\"\"\n    try:\n        if not hex:\n            return None\n        if encoding.lower() == 's2c':\n            if hex[0:2].lower() != '0x':\n                hex = f'0x{hex}'\n\n            bits = len(hex[2:]) * 4\n            value = int(hex, 0)\n            if value & (1 << (bits - 1)):\n                value -= 1 << bits\n            return str(value)\n        else:\n            return str(int(hex, 16))\n    except:\n        return None\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4566984, "supported_languages": null}, "macro.livequery_models.create_udf_keccak256": {"name": "create_udf_keccak256", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_keccak256", "macro_sql": "{% macro create_udf_keccak256() %}\nfrom Crypto.Hash import keccak\n\ndef udf_encode(event_name):\n    keccak_hash = keccak.new(digest_bits=256)\n    keccak_hash.update(event_name.encode('utf-8'))\n    return '0x' + keccak_hash.hexdigest()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.456839, "supported_languages": null}, "macro.livequery_models.create_udf_evm_text_signature": {"name": "create_udf_evm_text_signature", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_evm_text_signature", "macro_sql": "{% macro create_udf_evm_text_signature() %}\n\ndef get_simplified_signature(abi):\n    def generate_signature(inputs):\n        signature_parts = []\n        for input_data in inputs:\n            if 'components' in input_data:\n                component_signature_parts = []\n                components = input_data['components']\n                component_signature_parts.extend(generate_signature(components))\n                component_signature_parts[-1] = component_signature_parts[-1].rstrip(\",\")\n                if input_data['type'].endswith('[]'):\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \")[],\")\n                else:\n                    signature_parts.append(\"(\" + \"\".join(component_signature_parts) + \"),\")\n            else:\n                signature_parts.append(input_data['type'].replace('enum ', '').replace(' payable', '') + \",\")\n        return signature_parts\n\n    signature_parts = [abi['name'] + \"(\"]\n    signature_parts.extend(generate_signature(abi['inputs']))\n    signature_parts[-1] = signature_parts[-1].rstrip(\",\") + \")\"\n    return \"\".join(signature_parts)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4570448, "supported_languages": null}, "macro.livequery_models.python_object_to_url_query_string": {"name": "python_object_to_url_query_string", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.python_object_to_url_query_string", "macro_sql": "{% macro python_object_to_url_query_string() %}\nfrom urllib.parse import urlencode\n\ndef object_to_url_query_string(query, doseq=False):\n    {# return type(query) #}\n    if isinstance(query, dict):\n        return urlencode(query, doseq)\n    return urlencode([tuple(i) for i in query], doseq)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4573483, "supported_languages": null}, "macro.livequery_models.python_udf_evm_transform_log": {"name": "python_udf_evm_transform_log", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.python_udf_evm_transform_log", "macro_sql": "{% macro python_udf_evm_transform_log(schema) %}\nfrom copy import deepcopy\n\ndef transform_event(event: dict):\n    new_event = deepcopy(event)\n    if new_event.get(\"components\"):\n        components = new_event.get(\"components\")\n        for iy, y in enumerate(new_event[\"value\"]):\n            for i, c in enumerate(components):\n                y[i] = {\"value\": y[i], **c}\n            new_event[\"value\"][iy] = {z[\"name\"]: z[\"value\"] for z in y}\n        return new_event\n    else:\n        return event\n\n\ndef transform(events: list):\n    try:\n        results = [\n            transform_event(event) if event[\"decoded\"] else event\n            for event in events[\"data\"]\n        ]\n        events[\"data\"] = results\n        return events\n    except:\n        return events\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4575398, "supported_languages": null}, "macro.livequery_models.create_udf_base58_to_hex": {"name": "create_udf_base58_to_hex", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_base58_to_hex", "macro_sql": "{% macro create_udf_base58_to_hex() %}\n\ndef transform_base58_to_hex(base58):\n    if base58 is None:\n        return 'Invalid input'\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    base_count = len(ALPHABET)\n\n    num = 0\n    leading_zeros = 0\n\n    for char in base58:\n        if char == '1':\n            leading_zeros += 1\n        else:\n            break\n\n    for char in base58:\n        num *= base_count\n        if char in ALPHABET:\n            num += ALPHABET.index(char)\n        else:\n            return 'Invalid character in input'\n\n    hex_string = hex(num)[2:]\n\n    if len(hex_string) % 2 != 0:\n        hex_string = '0' + hex_string\n\n    hex_leading_zeros = '00' * leading_zeros\n\n    return '0x' + hex_leading_zeros + hex_string\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4577184, "supported_languages": null}, "macro.livequery_models.create_udf_hex_to_base58": {"name": "create_udf_hex_to_base58", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_hex_to_base58", "macro_sql": "{% macro create_udf_hex_to_base58() %}\n\ndef transform_hex_to_base58(hex):\n    if hex is None or not hex.startswith('0x'):\n        return 'Invalid input'\n\n    hex = hex[2:]\n\n    ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n    byte_array = bytes.fromhex(hex)\n    num = int.from_bytes(byte_array, 'big')\n\n    encoded = ''\n    while num > 0:\n        num, remainder = divmod(num, 58)\n        encoded = ALPHABET[remainder] + encoded\n\n    for byte in byte_array:\n        if byte == 0:\n            encoded = '1' + encoded\n        else:\n            break\n\n    return encoded\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4578805, "supported_languages": null}, "macro.livequery_models.create_udf_hex_to_bech32": {"name": "create_udf_hex_to_bech32", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_hex_to_bech32", "macro_sql": "{% macro create_udf_hex_to_bech32() %}\n\ndef transform_hex_to_bech32(hex, hrp=''):\n    CHARSET = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\"\n\n    def bech32_polymod(values):\n        generator = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n        checksum = 1\n        for value in values:\n            top = checksum >> 25\n            checksum = ((checksum & 0x1ffffff) << 5) ^ value\n            for i in range(5):\n                checksum ^= generator[i] if ((top >> i) & 1) else 0\n        return checksum\n\n    def bech32_hrp_expand(hrp):\n        return [ord(x) >> 5 for x in hrp] + [0] + [ord(x) & 31 for x in hrp]\n\n    def bech32_create_checksum(hrp, data):\n        values = bech32_hrp_expand(hrp) + data\n        polymod = bech32_polymod(values + [0, 0, 0, 0, 0, 0]) ^ 1\n        return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n\n    def bech32_convertbits(data, from_bits, to_bits, pad=True):\n        acc = 0\n        bits = 0\n        ret = []\n        maxv = (1 << to_bits) - 1\n        max_acc = (1 << (from_bits + to_bits - 1)) - 1\n        for value in data:\n            acc = ((acc << from_bits) | value) & max_acc\n            bits += from_bits\n            while bits >= to_bits:\n                bits -= to_bits\n                ret.append((acc >> bits) & maxv)\n        if pad and bits:\n            ret.append((acc << (to_bits - bits)) & maxv)\n        return ret\n\n    if hex is None or not hex.startswith('0x'):\n        return 'Invalid input'\n\n    hex = hex[2:]\n\n    data = bytes.fromhex(hex)\n    data5bit = bech32_convertbits(list(data), 8, 5)\n\n    if data5bit is None:\n        return 'Data conversion failed'\n\n    checksum = bech32_create_checksum(hrp, data5bit)\n    \n    return hrp + '1' + ''.join([CHARSET[d] for d in data5bit + checksum])\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4581332, "supported_languages": null}, "macro.livequery_models.create_udf_int_to_binary": {"name": "create_udf_int_to_binary", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_int_to_binary", "macro_sql": "{% macro create_udf_int_to_binary() %}\n\ndef int_to_binary(num):\n    num = int(num)\n    is_negative = num < 0\n    if is_negative:\n        num = -num\n\n    binary_string = bin(num)[2:]\n\n    if is_negative:\n        inverted_string = \"\".join(\"1\" if bit == \"0\" else \"0\" for bit in binary_string)\n\n        carry = 1\n        result = \"\"\n        for i in range(len(inverted_string) - 1, -1, -1):\n            if inverted_string[i] == \"1\" and carry == 1:\n                result = \"0\" + result\n            elif inverted_string[i] == \"0\" and carry == 1:\n                result = \"1\" + result \n                carry = 0\n            else:\n                result = inverted_string[i] + result\n\n        binary_string = result \n\n    return binary_string \n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4583232, "supported_languages": null}, "macro.livequery_models.create_udf_binary_to_int": {"name": "create_udf_binary_to_int", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.py.sql", "original_file_path": "macros/core/functions.py.sql", "unique_id": "macro.livequery_models.create_udf_binary_to_int", "macro_sql": "{% macro create_udf_binary_to_int() %}\n\ndef binary_to_int(binary):\n\n  for char in binary:\n    if char not in \"01\":\n      raise ValueError(\"Input string must be a valid binary string.\")\n      \n  integer = 0\n\n  for i, digit in enumerate(binary[::-1]):\n    digit_int = int(digit)\n\n    integer += digit_int * 2**i\n\n  return str(integer)\n    \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4584682, "supported_languages": null}, "macro.livequery_models.sql_udf_json_rpc_call": {"name": "sql_udf_json_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/functions.sql", "original_file_path": "macros/core/functions.sql", "unique_id": "macro.livequery_models.sql_udf_json_rpc_call", "macro_sql": "{% macro sql_udf_json_rpc_call(use_default_id=True ) %}\n    SELECT IFF(method IS NULL or params IS NULL,\n              NULL,\n              {\n                'jsonrpc': '2.0',\n                'method': method,\n                'params': params\n                {% if use_default_id %}\n                  , 'id': hash(method, params)::string\n                {% else %}\n                  , 'id': id\n                {% endif %}\n              }\n              )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4588616, "supported_languages": null}, "macro.livequery_models.config_core_live": {"name": "config_core_live", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/live.yaml.sql", "original_file_path": "macros/core/live.yaml.sql", "unique_id": "macro.livequery_models.config_core_live", "macro_sql": "{% macro config_core_live(schema=\"live\") %}\n\n- name: {{ schema }}.udf_api_batched\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [data, VARIANT]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          method,\n          url,\n          headers,\n          data,\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n\n- name: {{ schema }}.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [data, VARIANT]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          method,\n          url,\n          headers,\n          data,\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [method, STRING]\n    - [url, STRING]\n    - [headers, OBJECT]\n    - [data, VARIANT]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          method,\n          url,\n          headers,\n          data,\n          _utils.UDF_WHOAMI(),\n          ''\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n    - [data, VARIANT]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'POST',\n          url,\n          {'Content-Type': 'application/json'},\n          data,\n          _utils.UDF_WHOAMI(),\n          ''\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n    - [data, VARIANT]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'POST',\n          url,\n          {'Content-Type': 'application/json'},\n          data,\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'GET',\n          url,\n          {},\n          NULL,\n          _utils.UDF_WHOAMI(),\n          ''\n      )\n- name: {{ schema }}.udf_api\n  signature:\n    - [url, STRING]\n    - [secret_name, STRING]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n  sql: |\n    SELECT\n      _live.UDF_API(\n          'GET',\n          url,\n          {},\n          {},\n          _utils.UDF_WHOAMI(),\n          secret_name\n      )\n\n- name: {{ schema }}.udf_rpc\n  signature:\n    - [blockchain, STRING]\n    - [network, STRING]\n    - [method, STRING]\n    - [parameters, VARIANT]\n  return_type: VARIANT\n  options: |\n    VOLATILE\n    COMMENT = $$Executes an JSON RPC call on a blockchain.$$\n  sql: |\n    {{ sql_live_rpc_call(\"method\", \"parameters\", \"blockchain\", \"network\") | indent(4) -}}\n\n- name: {{ schema }}.udf_allow_list\n  signature: []\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns a list of allowed domains.$$\n  sql: allowed\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.sql_live_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4600728, "supported_languages": null}, "macro.livequery_models.config_core_secrets": {"name": "config_core_secrets", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/secrets.yaml.sql", "original_file_path": "macros/core/secrets.yaml.sql", "unique_id": "macro.livequery_models.config_core_secrets", "macro_sql": "{% macro config_core_secrets(schema=\"secrets\") %}\n\n\n- name: {{ schema }}.udf_register_secret\n  signature:\n    - [request_id, STRING]\n    - [key, STRING]\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Registers a secret with the given request ID and key. $$\n  sql: |\n    SELECT\n      _utils.UDF_REGISTER_SECRET(REQUEST_ID, _utils.UDF_WHOAMI(), KEY)\n\n- name: {{ schema }}.udf_get_secret\n  signature:\n    - [name, STRING]\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Returns the secret value for the given secret name. $$\n  sql: |\n    SELECT\n      live.udf_api(\n        CONCAT_WS('/', {{ construct_api_route(\"secret\") }}, _utils.UDF_WHOAMI(), NAME)\n        ):data::OBJECT\n\n- name: {{ schema }}.udf_get_secrets\n  signature: []\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Returns all secrets for the current user. $$\n  sql: |\n    SELECT\n      {{ schema }}.udf_get_secret('')\n\n- name: {{ schema }}.udf_create_secret\n  signature:\n    - [name, STRING]\n    - [secret, OBJECT]\n  func_type: SECURE\n  return_type: [INTEGER, the HTTP status code - 200 indicates success]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Creates a new secret with the given name and value. $$\n  sql: |\n    SELECT\n      live.udf_api(\n        CONCAT_WS('/', {{ construct_api_route(\"secret\") }}, _utils.UDF_WHOAMI(), NAME),\n        SECRET\n        ):status_code::INTEGER\n\n- name: {{ schema }}.udf_delete_secret\n  signature:\n    - [name, STRING]\n  func_type: SECURE\n  return_type: [INTEGER, the HTTP status code - 200 indicates success]\n  options: |\n    NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    COMMENT = $$ Deletes the secret with the given name. $$\n  sql: |\n    SELECT\n      live.udf_api(\n        'DELETE',\n        CONCAT_WS('/', {{ construct_api_route(\"secret\") }}, _utils.UDF_WHOAMI(), NAME),\n        {},\n        {},\n        ''\n        ):status_code::INTEGER\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4609973, "supported_languages": null}, "macro.livequery_models.config_core_utils": {"name": "config_core_utils", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/utils.yaml.sql", "original_file_path": "macros/core/utils.yaml.sql", "unique_id": "macro.livequery_models.config_core_utils", "macro_sql": "{% macro config_core_utils(schema=\"utils\") %}\n\n\n- name: {{ schema }}.udf_register_secret\n  signature:\n    - [request_id, STRING]\n    - [key, STRING]\n  func_type: SECURE\n  return_type: OBJECT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT\n      _utils.UDF_REGISTER_SECRET(REQUEST_ID, _utils.UDF_WHOAMI(), KEY)\n\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.10'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ python_hex_to_int() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_int\n  signature:\n    - [encoding, STRING]\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.10'\n    HANDLER = 'hex_to_int'\n  sql: |\n    {{ python_udf_hex_to_int_with_encoding() | indent(4) }}\n- name: {{ schema }}.udf_evm_text_signature\n  signature:\n    - [abi, VARIANT]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.10'\n    HANDLER = 'get_simplified_signature'\n  sql: |\n    {{ create_udf_evm_text_signature() | indent(4) }}\n- name: {{ schema }}.udf_keccak256\n  signature:\n    - [event_name, VARCHAR(255)]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.10'\n    PACKAGES = ('pycryptodome==3.15.0')\n    HANDLER = 'udf_encode'\n  sql: |\n    {{ create_udf_keccak256() | indent(4) }}\n- name: {{ schema }}.udf_hex_to_string\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT\n      LTRIM(regexp_replace(\n        try_hex_decode_string(hex),\n          '[\\x00-\\x1F\\x7F-\\x9F\\xAD]', '', 1))\n- name: {{ schema }}.udf_int_to_hex\n  signature:\n    - [int, INTEGER]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    select CONCAT('0x', TRIM(TO_CHAR(int, 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX')))\n\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call() }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call() }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, OBJECT]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call(False) }}\n- name: {{ schema }}.udf_json_rpc_call\n  signature:\n    - [method, STRING]\n    - [params, ARRAY]\n    - [id, STRING]\n  return_type: OBJECT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    {{ sql_udf_json_rpc_call(False) }}\n\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, OBJECT]\n    - [doseq, BOOLEAN]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.10'\n    COMMENT=$$Pthon (function)[https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode] to convert an object to a URL query string.$$\n    HANDLER = 'object_to_url_query_string'\n  sql: |\n    {{ python_object_to_url_query_string() | indent(4) }}\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, ARRAY]\n    - [doseq, BOOLEAN]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    RUNTIME_VERSION = '3.10'\n    COMMENT=$$Pthon (function)[https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode] to convert an array to a URL query string.$$\n    HANDLER = 'object_to_url_query_string'\n  sql: |\n    {{ python_object_to_url_query_string() | indent(4) }}\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, ARRAY]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT {{ schema }}.udf_urlencode(query, FALSE)\n- name: {{ schema }}.udf_urlencode\n  signature:\n    - [query, OBJECT]\n  return_type: TEXT\n  options: |\n    NULL\n    LANGUAGE SQL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: |\n    SELECT {{ schema }}.udf_urlencode(query, FALSE)\n- name: {{ schema }}.udf_object_to_url_query_string\n  signature:\n    - [object, OBJECT]\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n  sql: SELECT utils.udf_urlencode(object, FALSE)\n\n- name: {{ schema }}.udf_evm_transform_log\n  signature:\n    - [decoded, VARIANT]\n  return_type: VARIANT\n  options: |\n    NULL\n    LANGUAGE PYTHON\n    IMMUTABLE\n    RUNTIME_VERSION = '3.10'\n    HANDLER = 'transform'\n  sql: |\n    {{ python_udf_evm_transform_log() | indent(4) }}\n\n- name: {{ schema }}.udf_evm_decode_log\n  signature:\n    - [abi, ARRAY]\n    - [data, OBJECT]\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: evm/decode/log\n- name: {{ schema }}.udf_evm_decode_log\n  signature:\n    - [abi, OBJECT]\n    - [data, OBJECT]\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: evm/decode/log\n\n- name: {{ schema }}.udf_evm_decode_trace\n  signature:\n    - [abi, OBJECT]\n    - [data, OBJECT]\n  return_type: ARRAY\n  func_type: EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: evm/decode/trace\n\n- name: {{ schema }}.udf_base58_to_hex\n  signature:\n    - [base58, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.10'\n    HANDLER = 'transform_base58_to_hex'\n  sql: |\n    {{ create_udf_base58_to_hex() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_base58\n  signature:\n    - [hex, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.10'\n    HANDLER = 'transform_hex_to_base58'\n  sql: |\n    {{ create_udf_hex_to_base58() | indent(4) }}\n\n- name: {{ schema }}.udf_hex_to_bech32\n  signature:\n    - [hex, STRING]\n    - [hrp, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.10'\n    HANDLER = 'transform_hex_to_bech32'\n  sql: |\n    {{ create_udf_hex_to_bech32() | indent(4) }}\n\n- name: {{ schema }}.udf_int_to_binary\n  signature:\n    - [num, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.10'\n    HANDLER = 'int_to_binary'\n  sql: |\n    {{ create_udf_int_to_binary() | indent(4) }}\n\n- name: {{ schema }}.udf_binary_to_int\n  signature:\n    - [binary, STRING]\n  return_type: TEXT\n  options: |\n    LANGUAGE PYTHON\n    RUNTIME_VERSION = '3.10'\n    HANDLER = 'binary_to_int'\n  sql: |\n    {{ create_udf_binary_to_int() | indent(4) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.python_hex_to_int", "macro.livequery_models.python_udf_hex_to_int_with_encoding", "macro.livequery_models.create_udf_evm_text_signature", "macro.livequery_models.create_udf_keccak256", "macro.livequery_models.sql_udf_json_rpc_call", "macro.livequery_models.python_object_to_url_query_string", "macro.livequery_models.python_udf_evm_transform_log", "macro.livequery_models.create_udf_base58_to_hex", "macro.livequery_models.create_udf_hex_to_base58", "macro.livequery_models.create_udf_hex_to_bech32", "macro.livequery_models.create_udf_int_to_binary", "macro.livequery_models.create_udf_binary_to_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4644694, "supported_languages": null}, "macro.livequery_models.config_core__utils": {"name": "config_core__utils", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/core/_utils.yaml.sql", "original_file_path": "macros/core/_utils.yaml.sql", "unique_id": "macro.livequery_models.config_core__utils", "macro_sql": "{% macro config_core__utils(schema=\"_utils\") %}\n\n- name: {{ schema }}.udf_introspect\n  signature:\n    - [echo, STRING]\n  func_type: SECURE EXTERNAL\n  return_type: TEXT\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  sql: introspect\n\n- name: {{ schema }}.udf_user_tier\n  signature: []\n  func_type: SECURE\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT\n      COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):userTier::STRING, 'community')\n\n- name: {{ schema }}.udf_provider\n  signature: []\n  func_type: SECURE\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT\n      COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):provider::STRING, 'quicknode')\n\n- name: {{ schema }}.udf_whoami\n  signature: []\n  func_type: SECURE\n  return_type: TEXT\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT\n      COALESCE(PARSE_JSON(GETVARIABLE('LIVEQUERY_CONTEXT')):userId::STRING, CURRENT_USER())\n\n- name: {{ schema }}.udf_register_secret\n  signature:\n    - [request_id, STRING]\n    - [user_id, STRING]\n    - [key, STRING]\n  return_type: OBJECT\n  func_type: SECURE EXTERNAL\n  api_integration: '{{ var(\"API_INTEGRATION\") }}'\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n  sql: secret/register\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4651892, "supported_languages": null}, "macro.livequery_models.config_playgrounds_udfs": {"name": "config_playgrounds_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/playgrounds/udfs.yaml.sql", "original_file_path": "macros/marketplace/playgrounds/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_playgrounds_udfs", "macro_sql": "{% macro config_playgrounds_udfs(schema_name = \"playgrounds\", utils_schema_name = \"playgrounds_utils\") -%}\n{#\n    This macro is used to generate the Playgrounds calls\n #}\n\n- name: {{ schema_name -}}.query_subgraph\n  signature:\n    - [SUBGRAPH_ID, STRING, The ID of the Subgraph]\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Query a subgraph via the Playgrounds Proxy [Playgrounds docs here](https://docs.playgrounds.network/api/subgraph-proxy/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.playgrounds.network/v1/proxy/subgraphs/id/', SUBGRAPH_ID),\n        {'Playgrounds-Api-Key': '{API_KEY}', 'Content-Type': 'application/json'},\n        QUERY,\n        '_FSC_SYS/PLAYGROUNDS'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4656029, "supported_languages": null}, "macro.livequery_models.config_chainbase_utils_udfs": {"name": "config_chainbase_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/chainbase/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/chainbase/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_chainbase_utils_udfs", "macro_sql": "{% macro config_chainbase_utils_udfs(schema_name = \"chainbase_utils\", utils_schema_name=\"chainbase_utils\") -%}\n{#\n    This macro is used to generate the alchemy base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Chainbase API. [Chainbase Docs](https://docs.chainbase.com/reference/supported-chains)$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n           'https://api.chainbase.online', PATH, '?',\n            utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        {'x-api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/CHAINBASE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Chainbase API. [Chainbase Docs](https://docs.chainbase.com/reference/supported-chains)$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.chainbase.online', PATH),\n        {'x-api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/CHAINBASE'\n    ) as response\n\n- name: {{ schema_name -}}.rpc\n  signature:\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, ARRAY, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an RPC call to Chainbase. [Chainbase Docs](https://docs.chainbase.com/reference/supported-chains)$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      concat('https://api.chainbase.online'),\n      {'x-api-key': '{API_KEY}'},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': PARAMS},\n      '_FSC_SYS/CHAINBASE') as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4662151, "supported_languages": null}, "macro.livequery_models.config_fred_udfs": {"name": "config_fred_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/fred/udfs.yaml.sql", "original_file_path": "macros/marketplace/fred/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_fred_udfs", "macro_sql": "{% macro config_fred_udfs(schema_name = \"fred\", utils_schema_name = \"fred_utils\") -%}\n{#\n    This macro is used to generate the FRED Calls\n #}\n- name: {{ schema_name -}}.get_series\n  signature:\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a FRED series [FRED docs here](https://fred.stlouisfed.org/docs/api/fred/series.html).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.stlouisfed.org/fred/series/observations?api_key={API_KEY}&', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {},\n        {},\n        '_FSC_SYS/FRED'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.466605, "supported_languages": null}, "macro.livequery_models.config_stakingrewards_udfs": {"name": "config_stakingrewards_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/stakingrewards/udfs.yaml.sql", "original_file_path": "macros/marketplace/stakingrewards/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_stakingrewards_udfs", "macro_sql": "{% macro config_stakingrewards_udfs(schema_name = \"stakingrewards\", utils_schema_name=\"stakingrewards_utils\") -%}\n{#\n    This macro is used to generate the StakingRewards Base endpoints\n #}\n\n- name: {{ schema_name -}}.query\n  signature:\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a Graphql Query to the StakingRewards API. [StakingRewards docs here](https://api-docs.stakingrewards.com/api-docs/get-started/quick-start-guide).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        'https://api.stakingrewards.com/public/query',\n        {'X-API-KEY': '{API_KEY}'},\n        QUERY,\n        '_FSC_SYS/STAKINGREWARDS'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4669774, "supported_languages": null}, "macro.livequery_models.config_credmark_utils_udfs": {"name": "config_credmark_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/credmark/util_udfs.sql", "original_file_path": "macros/marketplace/credmark/util_udfs.sql", "unique_id": "macro.livequery_models.config_credmark_utils_udfs", "macro_sql": "{% macro config_credmark_utils_udfs(schema_name = \"credmark_utils\", utils_schema_name=\"credmark_utils\") -%}\n{#\n    This macro is used to generate the Credmark base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Credmark API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n           'https://gateway.credmark.com', PATH, '?',\n            utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        {'Authorization': 'Bearer {API_KEY}'},\n        {},\n        '_FSC_SYS/CREDMARK'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Credmark API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://gateway.credmark.com', PATH),\n        {'Authorization': 'Bearer {API_KEY}'},\n        BODY,\n        '_FSC_SYS/CREDMARK'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.467483, "supported_languages": null}, "macro.livequery_models.config_claude_models_udfs": {"name": "config_claude_models_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/claude/models_udfs.yaml.sql", "original_file_path": "macros/marketplace/claude/models_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_claude_models_udfs", "macro_sql": "{% macro config_claude_models_udfs(schema_name = \"claude\", utils_schema_name = \"claude_utils\") -%}\n{#\n    This macro is used to generate API calls to Claude API endpoints\n #}\n\n{# Claude API Models #}\n- name: {{ schema_name -}}.list_models\n  signature: []\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$List available Claude models [API docs: List Models](https://docs.anthropic.com/claude/reference/models_get)$$\n  sql: |\n    SELECT claude_utils.get(\n        '/v1/models'\n    ) as response\n\n- name: {{ schema_name -}}.get_model\n  signature:\n    - [MODEL, STRING, The model name to get details for (e.g. 'claude-3-opus-20240229')]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get details for a specific Claude model [API docs: Get Model](https://docs.anthropic.com/claude/reference/models_retrieve)$$\n  sql: |\n    SELECT claude_utils.get(\n        CONCAT('/v1/models/', MODEL)\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4679325, "supported_languages": null}, "macro.livequery_models.config_claude_messages_batch_udfs": {"name": "config_claude_messages_batch_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/claude/messages_batch_udfs.yaml.sql", "original_file_path": "macros/marketplace/claude/messages_batch_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_claude_messages_batch_udfs", "macro_sql": "{% macro config_claude_messages_batch_udfs(schema_name = \"claude\", utils_schema_name = \"claude_utils\") -%}\n{#\n    This macro is used to generate API calls to Claude API endpoints\n #}\n\n{# Claude API Messages Batch #}\n- name: {{ schema_name -}}.post_messages_batch\n  signature:\n    - [MESSAGES, OBJECT, Object of array of message objects]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Send a batch of messages to Claude and get responses [API docs: Messages Batch](https://docs.anthropic.com/en/api/creating-message-batches)$$\n  sql: |\n    SELECT claude_utils.post(\n        '/v1/messages/batches',\n        MESSAGES\n    ) as response\n\n{# Claude API Messages Batch Operations #}\n- name: {{ schema_name -}}.get_message_batch\n  signature:\n    - [MESSAGE_BATCH_ID, STRING, ID of the Message Batch to retrieve]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Retrieve details of a specific Message Batch [API docs: Retrieve Message Batch](https://docs.anthropic.com/en/api/retrieving-message-batches)$$\n  sql: |\n    SELECT claude_utils.get(\n        CONCAT('/v1/messages/batches/', MESSAGE_BATCH_ID)\n    ) as response\n\n- name: {{ schema_name -}}.get_message_batch_results\n  signature:\n    - [MESSAGE_BATCH_ID, STRING, ID of the Message Batch to retrieve results for]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Retrieve results of a Message Batch [API docs: Retrieve Message Batch Results](https://docs.anthropic.com/en/api/retrieving-message-batches)$$\n  sql: |\n    SELECT claude_utils.get(\n        CONCAT('/v1/messages/batches/', MESSAGE_BATCH_ID, '/results')\n    ) as response\n\n- name: {{ schema_name -}}.list_message_batches\n  signature: []\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$List all Message Batches [API docs: List Message Batches](https://docs.anthropic.com/en/api/retrieving-message-batches)$$\n  sql: |\n    SELECT claude_utils.get(\n        '/v1/messages/batches'\n    ) as response\n\n- name: {{ schema_name -}}.list_message_batches_with_before\n  signature:\n    - [BEFORE_ID, STRING, ID of the Message Batch to start listing from]\n    - [LIMIT, INTEGER, Maximum number of Message Batches to return]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$List all Message Batches [API docs: List Message Batches](https://docs.anthropic.com/en/api/retrieving-message-batches)$$\n  sql: |\n    SELECT claude_utils.get(\n        CONCAT('/v1/messages/batches',\n            '?before_id=', COALESCE(BEFORE_ID, ''),\n            '&limit=', COALESCE(LIMIT::STRING, '')\n        )\n    ) as response\n\n- name: {{ schema_name -}}.list_message_batches_with_after\n  signature:\n    - [AFTER_ID, STRING, ID of the Message Batch to start listing from]\n    - [LIMIT, INTEGER, Maximum number of Message Batches to return]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$List all Message Batches [API docs: List Message Batches](https://docs.anthropic.com/en/api/retrieving-message-batches)$$\n  sql: |\n    SELECT claude_utils.get(\n        CONCAT('/v1/messages/batches',\n            '?after_id=', COALESCE(AFTER_ID, ''),\n            '&limit=', COALESCE(LIMIT::STRING, '')\n        )\n    ) as response\n- name: {{ schema_name -}}.cancel_message_batch\n  signature:\n    - [MESSAGE_BATCH_ID, STRING, ID of the Message Batch to cancel]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Cancel a Message Batch [API docs: Cancel Message Batch](https://docs.anthropic.com/en/api/retrieving-message-batches)$$\n  sql: |\n    SELECT claude_utils.post(\n        CONCAT('/v1/messages/batches/', MESSAGE_BATCH_ID, '/cancel'),\n        {}\n    ) as response\n\n- name: {{ schema_name -}}.delete_message_batch\n  signature:\n    - [MESSAGE_BATCH_ID, STRING, ID of the Message Batch to delete]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Delete a Message Batch [API docs: Delete Message Batch](https://docs.anthropic.com/en/api/retrieving-message-batches)$$\n  sql: |\n    SELECT claude_utils.delete_method(\n        CONCAT('/v1/messages/batches/', MESSAGE_BATCH_ID)\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4690232, "supported_languages": null}, "macro.livequery_models.claude_get_api_call": {"name": "claude_get_api_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/claude/claude_config_utils.sql", "original_file_path": "macros/marketplace/claude/claude_config_utils.sql", "unique_id": "macro.livequery_models.claude_get_api_call", "macro_sql": "{% macro claude_get_api_call(schema_name, api_path) %}\nSELECT {{ schema_name }}.get(\n    '{{ api_path }}'\n) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.469385, "supported_languages": null}, "macro.livequery_models.claude_post_api_call": {"name": "claude_post_api_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/claude/claude_config_utils.sql", "original_file_path": "macros/marketplace/claude/claude_config_utils.sql", "unique_id": "macro.livequery_models.claude_post_api_call", "macro_sql": "{% macro claude_post_api_call(schema_name, api_path, body) %}\nSELECT {{ schema_name }}.post(\n    '{{ api_path }}',\n    {{ body }}\n) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4696314, "supported_languages": null}, "macro.livequery_models.claude_delete_api_call": {"name": "claude_delete_api_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/claude/claude_config_utils.sql", "original_file_path": "macros/marketplace/claude/claude_config_utils.sql", "unique_id": "macro.livequery_models.claude_delete_api_call", "macro_sql": "{% macro claude_delete_api_call(schema_name, api_path) %}\nSELECT {{ schema_name }}.delete_method(\n    '{{ api_path }}'\n) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4698355, "supported_languages": null}, "macro.livequery_models.config_claude_messages_udfs": {"name": "config_claude_messages_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/claude/messages_udfs.yaml.sql", "original_file_path": "macros/marketplace/claude/messages_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_claude_messages_udfs", "macro_sql": "{% macro config_claude_messages_udfs(schema_name = \"claude\", utils_schema_name = \"claude_utils\") -%}\n{#\n    This macro is used to generate API calls to Claude API endpoints\n #}\n\n{# Claude API Messages #}\n- name: {{ schema_name -}}.post_messages\n  signature:\n    - [MESSAGES, ARRAY, Array of message objects]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Send a message to Claude and get a response [API docs: Messages](https://docs.anthropic.com/claude/reference/messages_post)$$\n  sql: |\n    SELECT claude_utils.post(\n        '/v1/messages',\n        {\n            'model': 'claude-3-5-sonnet-20241022',\n            'messages': MESSAGES,\n            'max_tokens': 4096\n        }\n    ) as response\n\n- name: {{ schema_name -}}.post_messages\n  signature:\n    - [MODEL, STRING, The model to use (e.g. 'claude-3-opus-20240229')]\n    - [MESSAGES, ARRAY, Array of message objects]\n    - [MAX_TOKENS, INTEGER, Maximum number of tokens to generate]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Send a message to Claude and get a response [API docs: Messages](https://docs.anthropic.com/claude/reference/messages_post)$$\n  sql: |\n    SELECT claude_utils.post(\n        '/v1/messages',\n        {\n            'model': COALESCE(MODEL, 'claude-3-5-sonnet-20241022'),\n            'messages': MESSAGES,\n            'max_tokens': COALESCE(MAX_TOKENS, 1024)\n        }\n    ) as response\n\n- name: {{ schema_name -}}.post_messages\n  signature:\n    - [MODEL, STRING, The model to use (e.g. 'claude-3-opus-20240229')]\n    - [MESSAGES, ARRAY, Array of message objects]\n    - [MAX_TOKENS, INTEGER, Maximum number of tokens to generate]\n    - [TEMPERATURE, FLOAT, Temperature for sampling (0-1)]\n    - [TOP_K, INTEGER, Top K for sampling]\n    - [TOP_P, FLOAT, Top P for sampling]\n    - [SYSTEM, STRING, System prompt to use]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Send a message to Claude and get a response [API docs: Messages](https://docs.anthropic.com/claude/reference/messages_post)$$\n  sql: |\n    SELECT claude_utils.post(\n        '/v1/messages',\n        {\n            'model': MODEL,\n            'messages': MESSAGES,\n            'max_tokens': MAX_TOKENS,\n            'temperature': TEMPERATURE,\n            'top_k': TOP_K,\n            'top_p': TOP_P,\n            'system': SYSTEM\n        }\n    ) as response\n\n- name: {{ schema_name -}}.count_message_tokens\n  signature:\n    - [MODEL, STRING, The model to use (e.g. 'claude-3-5-sonnet-20241022')]\n    - [MESSAGES, ARRAY, Array of message objects]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Count tokens in a message array before sending to Claude [API docs: Count Tokens](https://docs.anthropic.com/claude/reference/counting-tokens)$$\n  sql: |\n    SELECT claude_utils.post(\n        '/v1/messages/count_tokens',\n        {\n            'model': COALESCE(MODEL, 'claude-3-5-sonnet-20241022'),\n            'messages': MESSAGES\n        }\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.470651, "supported_languages": null}, "macro.livequery_models.config_claude_utils_udfs": {"name": "config_claude_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/claude/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/claude/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_claude_utils_udfs", "macro_sql": "{% macro config_claude_utils_udfs(schema_name = \"claude_utils\", utils_schema_name = \"claude_utils\") -%}\n{#\n    This macro is used to generate API calls to Claude API endpoints\n #}\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The API endpoint path]\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Make calls to Claude API [API docs: Claude](https://docs.anthropic.com/claude/reference/getting-started-with-the-api)$$\n  sql: |\n    SELECT live.udf_api(\n        'POST',\n        CONCAT('https://api.anthropic.com', PATH),\n        {\n            'anthropic-version': '2023-06-01',\n            'x-api-key': '{API_KEY}',\n            'content-type': 'application/json'\n        },\n        BODY,\n        '_FSC_SYS/CLAUDE'\n    ) as response\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The API endpoint path]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Make GET requests to Claude API [API docs: Get](https://docs.anthropic.com/claude/reference/get)$$\n  sql: |\n    SELECT live.udf_api(\n        'GET',\n        CONCAT('https://api.anthropic.com', PATH),\n        {\n            'anthropic-version': '2023-06-01',\n            'x-api-key': '{API_KEY}',\n            'content-type': 'application/json'\n        },\n        NULL,\n        '_FSC_SYS/CLAUDE'\n    ) as response\n\n- name: {{ schema_name -}}.delete_method\n  signature:\n    - [PATH, STRING, The API endpoint path]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Make DELETE requests to Claude API [API docs: Delete](https://docs.anthropic.com/claude/reference/delete)$$\n  sql: |\n    SELECT live.udf_api(\n        'DELETE',\n        CONCAT('https://api.anthropic.com', PATH),\n        {\n            'anthropic-version': '2023-06-01',\n            'x-api-key': '{API_KEY}',\n            'content-type': 'application/json'\n        },\n        NULL,\n        '_FSC_SYS/CLAUDE'\n    ) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.471285, "supported_languages": null}, "macro.livequery_models.config_alchemy_tokens_udfs": {"name": "config_alchemy_tokens_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/token_udfs.yaml.sql", "original_file_path": "macros/marketplace/alchemy/token_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_alchemy_tokens_udfs", "macro_sql": "{% macro config_alchemy_tokens_udfs(schema_name = \"alchemy_tokens\", utils_schema_name = \"alchemy_utils\") -%}\n{#\n    This macro is used to generate the alchemy token endpoints\n #}\n\n- name: {{ schema_name -}}.get_token_allowance\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PARAMS, ARRAY, Array of JSON param objects for RPC request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns the amount which the spender is allowed to withdraw from the owner. [Alchemy docs here](https://docs.alchemy.com/reference/alchemy-gettokenallowance).$$\n  sql: {{alchemy_rpc_call(utils_schema_name, \"alchemy_getTokenAllowance\") | trim}}\n\n- name: {{ schema_name -}}.get_token_balances\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PARAMS, ARRAY, Array of JSON param objects for RPC request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns ERC20 token balances for all tokens the given address has ever transacted in with. Optionally accepts a list of contracts. [Alchemy docs here](https://docs.alchemy.com/reference/alchemy-gettokenbalances).$$\n  sql: {{alchemy_rpc_call(utils_schema_name, \"alchemy_getTokenBalances\") | trim}}\n\n- name: {{ schema_name -}}.get_token_metadata\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PARAMS, ARRAY, Array of JSON param objects for RPC request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns metadata (name, symbol, decimals, logo) for a given token contract address. [Alchemy docs here](https://docs.alchemy.com/reference/alchemy-gettokenmetadata).$$\n  sql: {{alchemy_rpc_call(utils_schema_name, \"alchemy_getTokenMetadata\") | trim}}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.alchemy_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4721372, "supported_languages": null}, "macro.livequery_models.alchemy_nft_get_api_call": {"name": "alchemy_nft_get_api_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "original_file_path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "unique_id": "macro.livequery_models.alchemy_nft_get_api_call", "macro_sql": "{% macro alchemy_nft_get_api_call(schema_name, api_path) %}\nSELECT {{ schema_name -}}.nfts_get(NETWORK, '/{{api_path}}', QUERY_ARGS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4725392, "supported_languages": null}, "macro.livequery_models.alchemy_nft_get_api_call_version": {"name": "alchemy_nft_get_api_call_version", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "original_file_path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "unique_id": "macro.livequery_models.alchemy_nft_get_api_call_version", "macro_sql": "{% macro alchemy_nft_get_api_call_version(schema_name, api_path, version) %}\nSELECT {{ schema_name -}}.nfts_get(NETWORK, '{{version}}', '/{{api_path}}', QUERY_ARGS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.472911, "supported_languages": null}, "macro.livequery_models.alchemy_nft_post_api_call": {"name": "alchemy_nft_post_api_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "original_file_path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "unique_id": "macro.livequery_models.alchemy_nft_post_api_call", "macro_sql": "{% macro alchemy_nft_post_api_call(schema_name, api_path) %}\nSELECT {{ schema_name -}}.nfts_post(NETWORK, '/{{api_path}}', BODY) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4731166, "supported_languages": null}, "macro.livequery_models.alchemy_rpc_call": {"name": "alchemy_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "original_file_path": "macros/marketplace/alchemy/alchemy_config_utils.sql", "unique_id": "macro.livequery_models.alchemy_rpc_call", "macro_sql": "{% macro alchemy_rpc_call(schema_name, method) %}\nSELECT {{ schema_name -}}.rpc(NETWORK, '{{method}}', PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4733362, "supported_languages": null}, "macro.livequery_models.config_alchemy_transfers_udfs": {"name": "config_alchemy_transfers_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/transfers_udfs.yaml.sql", "original_file_path": "macros/marketplace/alchemy/transfers_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_alchemy_transfers_udfs", "macro_sql": "{% macro config_alchemy_transfers_udfs(schema_name = \"alchemy_transfers\", utils_schema_name = \"alchemy_utils\") -%}\n{#\n    This macro is used to generate the alchemy transfers endpoints\n #}\n\n- name: {{ schema_name -}}.get_asset_transfers\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PARAMS, ARRAY, Array of JSON param objects for RPC request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$The Transfers API allows you to easily fetch historical transactions for any address across Ethereum and supported L2s including Polygon, Arbitrum, and Optimism. [Alchemy docs here](https://docs.alchemy.com/reference/alchemy-getassettransfers).$$\n  sql: {{alchemy_rpc_call(utils_schema_name, \"alchemy_getAssetTransfers\") | trim}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.alchemy_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4738111, "supported_languages": null}, "macro.livequery_models.config_alchemy_nfts_udfs": {"name": "config_alchemy_nfts_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/nft_udfs.yaml.sql", "original_file_path": "macros/marketplace/alchemy/nft_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_alchemy_nfts_udfs", "macro_sql": "{% macro config_alchemy_nfts_udfs(schema_name = \"alchemy_nfts\", utils_schema_name = \"alchemy_utils\") -%}\n{#\n    This macro is used to generate the alchemy nft endpoints\n #}\n\n- name: {{ schema_name -}}.get_nfts\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets all NFTs currently owned by a given address. [Alchemy docs here](https://docs.alchemy.com/reference/getnfts).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getNFTs') | trim }}\n\n- name: {{ schema_name -}}.get_owners_for_token\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get the owner(s) for a token. [Alchemy docs here](https://docs.alchemy.com/reference/getownersfortoken).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getOwnersForToken') | trim }}\n\n- name: {{ schema_name -}}.get_owners_for_collection\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets all owners for a given NFT contract. [Alchemy docs here](https://docs.alchemy.com/reference/getownersforcollection).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getOwnersForCollection') | trim }}\n\n- name: {{ schema_name -}}.is_holder_of_collection\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Checks whether a wallet holds a NFT in a given collection. [Alchemy docs here](https://docs.alchemy.com/reference/isholderofcollection).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'isHolderOfCollection') | trim }}\n\n- name: {{ schema_name -}}.get_contracts_for_owner\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets all NFT contracts held by an owner address. [Alchemy docs here](https://docs.alchemy.com/reference/getcontractsforowner).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getContractsForOwner') | trim }}\n\n- name: {{ schema_name -}}.get_nft_metadata\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets the metadata associated with a given NFT. [Alchemy docs here](https://docs.alchemy.com/reference/getnftmetadata).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getNFTMetadata') | trim }}\n\n- name: {{ schema_name -}}.get_nft_metadata_batch\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [BODY, OBJECT, JSON Body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets the metadata associated with up to 100 given NFT contracts. [Alchemy docs here](https://docs.alchemy.com/reference/getnftmetadatabatch).$$\n  sql: {{ alchemy_nft_post_api_call(utils_schema_name, 'getNFTMetadataBatch') | trim }}\n\n- name: {{ schema_name -}}.get_contract_metadata\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Queries NFT high-level collection/contract level information. [Alchemy docs here](https://docs.alchemy.com/reference/getcontractmetadata).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getContractMetadata') | trim }}\n\n- name: {{ schema_name -}}.get_contract_metadata_batch\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [BODY, OBJECT, JSON Body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets the metadata associated with the given list of contract addresses. [Alchemy docs here](https://docs.alchemy.com/reference/getcontractmetadatabatch).$$\n  sql: {{ alchemy_nft_post_api_call(utils_schema_name, 'getContractMetadataBatch') | trim }}\n\n- name: {{ schema_name -}}.invalidate_contract\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Marks all cached tokens for the particular contract as stale. So the next time the endpoint is queried it fetches live data instead of fetching from cache. [Alchemy docs here](https://docs.alchemy.com/reference/invalidatecontract).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'invalidateContract') | trim }}\n\n- name: {{ schema_name -}}.reingest_contract\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Triggers metadata refresh for an entire NFT collection and refreshes stale metadata after a collection reveal/collection changes. [Alchemy docs here](https://docs.alchemy.com/reference/reingestcontract).$$\n  sql: {{ alchemy_nft_get_api_call_version(utils_schema_name, 'invalidateContract', 'v3') | trim }}\n\n- name: {{ schema_name -}}.search_contract_metadata\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Search for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts. [Alchemy docs here](https://docs.alchemy.com/reference/searchcontractmetadata).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'searchContractMetadata') | trim }}\n\n- name: {{ schema_name -}}.get_nfts_for_collection\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets all NFTs for a given NFT contract. [Alchemy docs here](https://docs.alchemy.com/reference/getnftsforcollection).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getNFTsForCollection') | trim }}\n\n- name: {{ schema_name -}}.get_spam_contracts\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns a list of all spam contracts marked by Alchemy. [Alchemy docs here](https://docs.alchemy.com/reference/getspamcontracts).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getSpamContracts') | trim }}\n\n- name: {{ schema_name -}}.is_spam_contract\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns whether a contract is marked as spam or not by Alchemy. [Alchemy docs here](https://docs.alchemy.com/reference/isspamcontract).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'isSpamContract') | trim }}\n\n- name: {{ schema_name -}}.is_airdrop\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns whether a token is marked as an airdrop or not. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. [Alchemy docs here](https://docs.alchemy.com/reference/isairdrop).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'isAirdrop') | trim }}\n\n- name: {{ schema_name -}}.report_spam\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Report a particular address to our APIs if you think it is spam. [Alchemy docs here](https://docs.alchemy.com/reference/reportspam).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'reportSpam') | trim }}\n\n- name: {{ schema_name -}}.get_floor_price\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns the floor prices of a NFT collection by marketplace. [Alchemy docs here](https://docs.alchemy.com/reference/getfloorprice).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getFloorPrice') | trim }}\n\n- name: {{ schema_name -}}.get_nft_sales\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Gets NFT sales that have happened through on-chain marketplaces. [Alchemy docs here](https://docs.alchemy.com/reference/getnftsales).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'getNFTSales') | trim }}\n\n- name: {{ schema_name -}}.compute_rarity\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Computes the rarity of each attribute of an NFT. [Alchemy docs here](https://docs.alchemy.com/reference/computerarity).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'computeRarity') | trim }}\n\n- name: {{ schema_name -}}.summarize_nft_attributes\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Generate a summary of attribute prevalence for an NFT collection. [Alchemy docs here](https://docs.alchemy.com/reference/summarizenftattributes).$$\n  sql: {{ alchemy_nft_get_api_call(utils_schema_name, 'summarizeNFTAttributes') | trim }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.alchemy_nft_get_api_call", "macro.livequery_models.alchemy_nft_post_api_call", "macro.livequery_models.alchemy_nft_get_api_call_version"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.47814, "supported_languages": null}, "macro.livequery_models.config_alchemy_utils_udfs": {"name": "config_alchemy_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/alchemy/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/alchemy/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_alchemy_utils_udfs", "macro_sql": "{% macro config_alchemy_utils_udfs(schema_name = \"alchemy_utils\", utils_schema_name=\"alchemy_utils\") -%}\n{#\n    This macro is used to generate the alchemy base endpoints\n #}\n\n- name: {{ schema -}}.nfts_get\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Alchemy NFT API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        concat(\n            'https://', NETWORK,'.g.alchemy.com/nft/v2/{',NETWORK,'}', PATH, '?',\n            utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        '_FSC_SYS/ALCHEMY'\n    ) as response\n\n- name: {{ schema -}}.nfts_get\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [VERSION, STRING, The version of the API to use]\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Alchemy NFT API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        concat(\n            'https://', NETWORK,'.g.alchemy.com/nft/', VERSION, '/{',NETWORK,'}', PATH, '?',\n            utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        '_FSC_SYS/ALCHEMY'\n    ) as response\n\n- name: {{ schema -}}.nfts_post\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Alchemy NFT API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://', NETWORK,'.g.alchemy.com/nft/v2/{',NETWORK,'}', PATH),\n        {},\n        BODY,\n        '_FSC_SYS/ALCHEMY'\n    ) as response\n\n- name: {{ schema -}}.rpc\n  signature:\n    - [NETWORK, STRING, The blockchain/network]\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, ARRAY, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an RPC call to Alchemy.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      concat('https://', NETWORK,'.g.alchemy.com/v2/{',NETWORK,'}'),\n      {},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': PARAMS},\n      '_FSC_SYS/ALCHEMY') as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4789135, "supported_languages": null}, "macro.livequery_models.config_apilayer_udfs": {"name": "config_apilayer_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/apilayer/udfs.yaml.sql", "original_file_path": "macros/marketplace/apilayer/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_apilayer_udfs", "macro_sql": "{% macro config_apilayer_udfs(schema_name = \"apilayer\", utils_schema_name=\"apilayer_utils\") -%}\n{#\n    This macro is used to generate the ApiLayer Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the ApiLayer API. [ApiLayer docs here](https://apilayer.com/docs/article/getting-started).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.apilayer.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'apikey': '{API_KEY}'},\n        NULL,\n        '_FSC_SYS/APILAYER'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the ApiLayer API. [ApiLayer docs here](https://apilayer.com/docs/article/getting-started).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.apilayer.com', PATH),\n        {'apikey': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/APILAYER'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4794302, "supported_languages": null}, "macro.livequery_models.config_binance_udfs": {"name": "config_binance_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/binance/udfs.yaml.sql", "original_file_path": "macros/marketplace/binance/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_binance_udfs", "macro_sql": "{% macro config_binance_udfs(schema_name = \"binance\", utils_schema_name=\"binance_utils\") -%}\n{#\n    This macro is used to generate the Binance Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [URL, STRING, The full url including the path]\n    - [QUERY_ARGS, ARRAY, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Binance API. [Binance docs here](https://binance-docs.github.io/apidocs/spot/en/#api-key-setup).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(URL, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-MBX-APIKEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/BINANCE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [URL, STRING, The full url]\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Binance API. [Binance docs here](https://binance-docs.github.io/apidocs/spot/en/#api-key-setup).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        URL,\n        {'X-MBX-APIKEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/BINANCE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4799213, "supported_languages": null}, "macro.livequery_models.config_blockpour_utils_udfs": {"name": "config_blockpour_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/blockpour/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/blockpour/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_blockpour_utils_udfs", "macro_sql": "{% macro config_blockpour_utils_udfs(schema_name = \"blockpour_utils\", utils_schema_name=\"blockpour_utils\") -%}\n{#\n    This macro is used to generate the Blockpour base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Blockpour API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n           'https://services.blockpour.com/api', PATH, '?',\n            utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        {'api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/BLOCKPOUR'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the BlockPour API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://services.blockpour.com/api', PATH),\n        {'api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/BLOCKPOUR'\n    ) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4804223, "supported_languages": null}, "macro.livequery_models.config_defillama_udfs": {"name": "config_defillama_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/defillama/udfs.yaml.sql", "original_file_path": "macros/marketplace/defillama/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_defillama_udfs", "macro_sql": "{% macro config_defillama_udfs(schema_name = \"defillama\", utils_schema_name=\"defillama_utils\") -%}\n{#\n    This macro is used to generate the Defillama endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Defillama API. [Defillama docs here](https://defillama.com/docs/api).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.llama.fi', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'Accept': '*/*', 'User-Agent': 'livequery/1.0 (Snowflake)', 'Host':'api.llama.fi', 'Connection': 'keep-alive'},\n        NULL,\n        IFF(ARRAY_CONTAINS('api_key'::VARIANT, OBJECT_KEYS(QUERY_ARGS)), '_FSC_SYS/DEFILLAMA', '')\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4808197, "supported_languages": null}, "macro.livequery_models.config_deepnftvalue_udfs": {"name": "config_deepnftvalue_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/deepnftvalue/udfs.yaml.sql", "original_file_path": "macros/marketplace/deepnftvalue/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_deepnftvalue_udfs", "macro_sql": "{% macro config_deepnftvalue_udfs(schema_name = \"deepnftvalue\", utils_schema_name=\"deepnftvalue_utils\") -%}\n{#\n    This macro is used to generate the DeepNftValue Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the DeepNftValue API. [DeepNftValue docs here](https://deepnftvalue.readme.io/reference/getting-started-with-deepnftvalue-api).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.deepnftvalue.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'Authorization': 'Token {API_KEY}'},\n        {},\n        '_FSC_SYS/DEEPNFTVALUE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the DeepNftValue API. [DeepNftValue docs here](https://deepnftvalue.readme.io/reference/getting-started-with-deepnftvalue-api).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.deepnftvalue.com', PATH),\n        {'Authorization': 'Token {API_KEY}'},\n        BODY,\n        '_FSC_SYS/DEEPNFTVALUE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4813354, "supported_languages": null}, "macro.livequery_models.helius_rpc_call": {"name": "helius_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/helius_config_utils.sql", "original_file_path": "macros/marketplace/helius/helius_config_utils.sql", "unique_id": "macro.livequery_models.helius_rpc_call", "macro_sql": "{% macro helius_rpc_call(schema_name, method) %}\nSELECT {{ schema_name -}}.rpc(NETWORK, '{{method}}', PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.481679, "supported_languages": null}, "macro.livequery_models.helius_get_call": {"name": "helius_get_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/helius_config_utils.sql", "original_file_path": "macros/marketplace/helius/helius_config_utils.sql", "unique_id": "macro.livequery_models.helius_get_call", "macro_sql": "{% macro helius_get_call(schema_name, path) %}\nSELECT {{ schema_name -}}.get(NETWORK, '{{path}}', QUERY_PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4818833, "supported_languages": null}, "macro.livequery_models.helius_post_call": {"name": "helius_post_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/helius_config_utils.sql", "original_file_path": "macros/marketplace/helius/helius_config_utils.sql", "unique_id": "macro.livequery_models.helius_post_call", "macro_sql": "{% macro helius_post_call(schema_name, path) %}\nSELECT {{ schema_name -}}.post(NETWORK, '{{path}}', BODY) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.482086, "supported_languages": null}, "macro.livequery_models.config_helius_utils_udfs": {"name": "config_helius_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/helius/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_helius_utils_udfs", "macro_sql": "{% macro config_helius_utils_udfs(schema = \"helius_utils\", utils_schema_name=\"helius_utils\") -%}\n{#\n    This macro is used to generate the Helius base endpoints\n #}\n\n- name: {{ schema -}}.get\n  signature:\n    - [NETWORK, STRING, The network 'devnet' or 'mainnet']\n    - [PATH, STRING, The API path starting with '/']\n    - [QUERY_PARAMS, OBJECT, The query parameters]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an HTTP GET request to Helius.$$\n  sql: |\n    SELECT live.udf_api(\n      'GET',\n      CASE\n          WHEN NETWORK = 'devnet' THEN\n              concat('https://api-devnet.helius.xyz', PATH, '?api-key={API_KEY}&', utils.udf_object_to_url_query_string(QUERY_PARAMS))\n          ELSE\n              concat('https://api.helius.xyz', PATH, '?api-key={API_KEY}&', utils.udf_object_to_url_query_string(QUERY_PARAMS))\n      END,\n      {},\n      {},\n      '_FSC_SYS/HELIUS'\n    ) as response\n\n- name: {{ schema -}}.post\n  signature:\n    - [NETWORK, STRING, The network 'devnet' or 'mainnet']\n    - [PATH, STRING, The API path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an HTTP POST request to Helius.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      CASE\n          WHEN NETWORK = 'devnet' THEN\n              concat('https://api-devnet.helius.xyz', PATH, '?api-key={API_KEY}')\n          ELSE\n              concat('https://api.helius.xyz', PATH, '?api-key={API_KEY}')\n      END,\n      {},\n      BODY,\n      '_FSC_SYS/HELIUS'\n    ) as response\n\n- name: {{ schema -}}.rpc\n  signature:\n    - [NETWORK, STRING, The network 'devnet' or 'mainnet']\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, OBJECT, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an RPC call to Helius.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      CASE\n          WHEN NETWORK = 'devnet' THEN\n              'https://devnet.helius-rpc.com?api-key={API_KEY}'\n          ELSE\n              'https://mainnet.helius-rpc.com?api-key={API_KEY}'\n      END,\n      {},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': PARAMS},\n      '_FSC_SYS/HELIUS'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4827704, "supported_languages": null}, "macro.livequery_models.config_helius_apis_udfs": {"name": "config_helius_apis_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/apis_udfs.yaml.sql", "original_file_path": "macros/marketplace/helius/apis_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_helius_apis_udfs", "macro_sql": "{% macro config_helius_apis_udfs(schema_name = \"helius_apis\", utils_schema_name = \"helius_utils\") -%}\n{#\n    This macro is used to generate the Helius API endpoints\n #}\n\n- name: {{ schema_name -}}.token_metadata\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [BODY, OBJECT, The body of the API request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns metadata for a list of given token mint addresses. [Helius docs here](https://docs.helius.xyz/solana-apis/token-metadata-api).$$\n  sql: {{ helius_post_call(utils_schema_name, '/v0/token-metadata') | trim }}\n\n- name: {{ schema_name -}}.balances\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [ADDRESS, STRING, The address to retrieve balances for]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns the native Solana balance (in lamports) and all token balances for a given address. [Helius docs here](https://docs.helius.xyz/solana-apis/balances-api).$$\n  sql: |\n    SELECT live.udf_api(\n      'GET',\n      CASE \n          WHEN NETWORK = 'devnet' THEN \n              concat('https://api-devnet.helius.xyz/v0/addresses/', ADDRESS, '/balances?api-key={API_KEY}')\n          ELSE \n              concat('https://api.helius.xyz/v0/addresses/', ADDRESS, '/balances?api-key={API_KEY}')\n      END,\n      {},\n      {},\n      '_FSC_SYS/HELIUS'\n    ) as response\n\n- name: {{ schema_name -}}.parse_transactions\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [TRANSACTIONS, ARRAY, An array of transaction signatures]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns an array of enriched, human-readable transactions of the given transaction signatures. Up to 100 transactions per call. [Helius docs here](https://docs.helius.xyz/solana-apis/enhanced-transactions-api/parse-transaction-s).$$\n  sql: |\n    SELECT {{ utils_schema_name -}}.post(NETWORK, '/v0/transactions', {'transactions': TRANSACTIONS}) as response\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.helius_post_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4835386, "supported_languages": null}, "macro.livequery_models.config_helius_das_udfs": {"name": "config_helius_das_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/helius/das_udfs.yaml.sql", "original_file_path": "macros/marketplace/helius/das_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_helius_das_udfs", "macro_sql": "{% macro config_helius_das_udfs(schema_name = \"helius_das\", utils_schema_name = \"helius_utils\") -%}\n{#\n    This macro is used to generate the Helius DAS endpoints\n #}\n\n- name: {{ schema_name -}}.get_asset\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get an asset by its ID. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-asset).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAsset') | trim }}\n\n- name: {{ schema_name -}}.get_signatures_for_asset\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a list of transaction signatures related to a compressed asset. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-signatures-for-asset).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getSignaturesForAsset') | trim }}\n\n- name: {{ schema_name -}}.search_assets\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Search for assets by a variety of parameters. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/search-assets).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'searchAssets') | trim }}\n\n- name: {{ schema_name -}}.get_asset_proof\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a merkle proof for a compressed asset by its ID. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-asset-proof).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAssetProof') | trim }}\n\n- name: {{ schema_name -}}.get_assets_by_owner\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a list of assets owned by an address. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-assets-by-owner).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAssetsByOwner') | trim }}\n\n- name: {{ schema_name -}}.get_assets_by_authority\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a list of assets with a specific authority. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-assets-by-authority).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAssetsByAuthority') | trim }}\n\n- name: {{ schema_name -}}.get_assets_by_creator\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a list of assets created by an address. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-assets-by-creator).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAssetsByCreator') | trim }}\n\n- name: {{ schema_name -}}.get_assets_by_group\n  signature:\n    - [NETWORK, STRING, mainnet or devnet]\n    - [PARAMS, OBJECT, The RPC Params argument]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Get a list of assets by a group key and value. [Helius docs here](https://docs.helius.xyz/solana-compression/digital-asset-standard-das-api/get-assets-by-group).$$\n  sql: {{ helius_rpc_call(utils_schema_name, 'getAssetsByGroup') | trim }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.helius_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4853313, "supported_languages": null}, "macro.livequery_models.config_zettablock_udfs": {"name": "config_zettablock_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/zettablock/udfs.yaml.sql", "original_file_path": "macros/marketplace/zettablock/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_zettablock_udfs", "macro_sql": "{% macro config_zettablock_udfs(schema_name = \"zettablock\", utils_schema_name=\"zettablock_utils\") -%}\n{#\n    This macro is used to generate the Zettablock Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Zettablock API. [Zettablock docs here](https://docs.zettablock.com/reference/api-intro).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.zettablock.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'Authorization': 'Bearer {API_KEY}'},\n        {},\n        '_FSC_SYS/ZETTABLOCK'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Zettablock API. [Zettablock docs here](https://docs.zettablock.com/reference/api-intro).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.zettablock.com', PATH),\n        {'Authorization': 'Bearer {API_KEY}'},\n        BODY,\n        '_FSC_SYS/ZETTABLOCK'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4858646, "supported_languages": null}, "macro.livequery_models.config_espn_udfs": {"name": "config_espn_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/espn/udfs.yaml.sql", "original_file_path": "macros/marketplace/espn/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_espn_udfs", "macro_sql": "{% macro config_espn_udfs(schema_name = \"espn\", utils_schema_name=\"espn_utils\") -%}\n{#\n    This macro is used to generate the ESPN Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [URL, STRING, The full url including the path]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the ESPN API. [ESPN docs here](https://gist.github.com/akeaswaran/b48b02f1c94f873c6655e7129910fc3b#file-espn-api-docs-md).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(URL, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {},\n        {}\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [URL, STRING, The full url]\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the ESPN API. [ESPN docs here](https://gist.github.com/akeaswaran/b48b02f1c94f873c6655e7129910fc3b#file-espn-api-docs-md).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        URL,\n        {},\n        BODY\n    ) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4863715, "supported_languages": null}, "macro.livequery_models.config_github_actions_udfs": {"name": "config_github_actions_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/github/actions_udfs.yaml.sql", "original_file_path": "macros/marketplace/github/actions_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_github_actions_udfs", "macro_sql": "{% macro config_github_actions_udfs(schema_name = \"github_actions\", utils_schema_name = \"github_utils\") -%}\n{#\n    This macro is used to generate the Github API Calls\n #}\n- name: {{ schema_name -}}.workflows\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$[List repository workflows](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#list-repository-workflows).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.GET(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/workflows'),\n        query\n    ):data::OBJECT\n- name: {{ schema_name -}}.workflows\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$[List repository workflows](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#list-repository-workflows).$$\n  sql: |\n    SELECT\n      {{ schema_name -}}.workflows(owner, repo, {})\n\n- name: {{ schema_name -}}.runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.GET(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/runs'),\n        query\n    ):data::OBJECT\n- name: {{ schema_name -}}.runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n  sql: |\n    SELECT\n      {{ schema_name -}}.runs(owner, repo, {})\n\n- name: {{ schema_name -}}.workflow_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$List all workflow runs for a workflow. You can replace workflow_id with the workflow file name. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.GET(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/workflows', workflow_id, 'runs'),\n        query\n    ):data::OBJECT\n- name: {{ schema_name -}}.workflow_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$List all workflow runs for a workflow. You can replace workflow_id with the workflow file name. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow).$$\n  sql: |\n    SELECT\n      {{ schema_name -}}.workflow_runs(owner, repo, workflow_id, {})\n\n- name: {{ schema_name -}}.workflow_dispatches\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n    - [body, \"OBJECT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace workflow_id with the workflow file name. For example, you could use main.yaml. [Docs](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#create-a-workflow-dispatch-event).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.POST(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/workflows', workflow_id, 'dispatches'),\n        COALESCE(body, {'ref': 'main'})::OBJECT\n    )::OBJECT\n\n- name: {{ schema_name -}}.workflow_dispatches\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace workflow_id with the workflow file name. For example, you could use main.yaml. [Docs](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#create-a-workflow-dispatch-event).$$\n  sql: |\n    SELECT\n      {{ schema_name -}}.workflow_dispatches(owner, repo, workflow_id, NULL)\n\n- name: {{ schema_name -}}.workflow_enable\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$Enables a workflow. You can replace workflow_id with the workflow file name. For example, you could use main.yaml. [Docs](https://docs.github.com/en/rest/reference/actions#enable-a-workflow).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.PUT(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/workflows', workflow_id, 'enable'),\n        {}\n    )::OBJECT\n- name: {{ schema_name -}}.workflow_disable\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflow_id, \"TEXT\"]\n  return_type:\n    - \"OBJECT\"\n  options: |\n    COMMENT = $$Disables a workflow. You can replace workflow_id with the workflow file name. For example, you could use main.yaml. [Docs](https://docs.github.com/en/rest/reference/actions#disable-a-workflow).$$\n  sql: |\n    SELECT\n      {{ utils_schema_name }}.PUT(\n        CONCAT_WS('/', 'repos', owner, repo, 'actions/workflows', workflow_id, 'disable'),\n        {}\n    )::OBJECT\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4880078, "supported_languages": null}, "macro.livequery_models.config_github_utils_udfs": {"name": "config_github_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/github/utils_udfs.yaml.sql", "original_file_path": "macros/marketplace/github/utils_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_github_utils_udfs", "macro_sql": "{% macro config_github_utils_udfs(schema_name = \"github_utils\", utils_schema_name = \"github_utils\") -%}\n{#\n    This macro is used to generate the Github API Calls\n #}\n- name: {{ schema_name -}}.octocat\n  signature:\n    - []\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Verify token [Authenticating to the REST API](https://docs.github.com/en/rest/overview/authenticating-to-the-rest-api?apiVersion=2022-11-28).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        'https://api.github.com/octocat',\n        {'Authorization': 'Bearer {TOKEN}',\n        'X-GitHub-Api-Version': '2022-11-28'},\n        {},\n        IFF(_utils.udf_whoami() <> CURRENT_USER(), '_FSC_SYS/GITHUB', 'vault/github/api')\n        \n    ) as response\n\n- name: {{ schema_name -}}.headers\n  signature: []\n  return_type:\n    - \"TEXT\"\n  options: |\n    NOT NULL\n    IMMUTABLE\n    MEMOIZABLE\n  sql: |\n    SELECT '{\"Authorization\": \"Bearer {TOKEN}\",\n            \"X-GitHub-Api-Version\": \"2022-11-28\",\n            \"Accept\": \"application/vnd.github+json\"}'\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [route, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$List all workflow runs for a workflow. You can replace workflow_id with the workflow file name. You can use parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        CONCAT_WS('/', 'https://api.github.com',  route || '?') || utils.udf_urlencode(query),\n        PARSE_JSON({{ schema_name -}}.headers()),\n        {},\n        IFF(_utils.udf_whoami() <> CURRENT_USER(), '_FSC_SYS/GITHUB', 'vault/github/api')\n    )\n- name: {{ schema_name -}}.post\n  signature:\n    - [route, \"TEXT\"]\n    - [data, \"OBJECT\"]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$List all workflow runs for a workflow. You can replace workflow_id with the workflow file name. You can use parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT_WS('/', 'https://api.github.com', route),\n        PARSE_JSON({{ schema_name -}}.headers()),\n        data,\n        IFF(_utils.udf_whoami() <> CURRENT_USER(), '_FSC_SYS/GITHUB', 'vault/github/api')\n    )\n- name: {{ schema_name -}}.put\n  signature:\n    - [route, \"TEXT\"]\n    - [data, \"OBJECT\"]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$List all workflow runs for a workflow. You can replace workflow_id with the workflow file name. You can use parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-workflow).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'PUT',\n        CONCAT_WS('/', 'https://api.github.com', route),\n        PARSE_JSON({{ schema_name -}}.headers()),\n        data,\n        IFF(_utils.udf_whoami() <> CURRENT_USER(), '_FSC_SYS/GITHUB', 'vault/github/api')\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4889534, "supported_languages": null}, "macro.livequery_models.config_github_actions_udtfs": {"name": "config_github_actions_udtfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/github/actions_udtfs.yml.sql", "original_file_path": "macros/marketplace/github/actions_udtfs.yml.sql", "unique_id": "macro.livequery_models.config_github_actions_udtfs", "macro_sql": "{% macro config_github_actions_udtfs(schema_name = \"github_actions\", utils_schema_name = \"github_utils\") -%}\n{#\n    This macro is used to generate the Github API Calls\n #}\n- name: {{ schema_name -}}.tf_workflows\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"TABLE(id INTEGER, badge_url STRING, created_at TIMESTAMP, html_url STRING, name STRING, node_id STRING, path STRING, state STRING, updated_at TIMESTAMP, url STRING)\"\n  options: |\n    COMMENT = $$[List repository workflows](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#list-repository-workflows).$$\n  sql: |\n    WITH workflows AS\n    (\n    SELECT\n        github_actions.workflows(OWNER, REPO, QUERY) AS response\n    )\n    SELECT\n        value:id::INTEGER AS id\n        ,value:badge_url::STRING AS badge_url\n        ,value:created_at::TIMESTAMP AS created_at\n        ,value:html_url::STRING AS html_url\n        ,value:name::STRING AS name\n        ,value:node_id::STRING AS node_id\n        ,value:path::STRING AS path\n        ,value:state::STRING AS state\n        ,value:updated_at::TIMESTAMP AS updated_at\n        ,value:url::STRING AS url\n    FROM workflows, LATERAL FLATTEN( input=> response:workflows)\n- name: {{ schema_name -}}.tf_workflows\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n  return_type:\n    - \"TABLE(id INTEGER, badge_url STRING, created_at TIMESTAMP, html_url STRING, name STRING, node_id STRING, path STRING, state STRING, updated_at TIMESTAMP, url STRING)\"\n  options: |\n    COMMENT = $$[List repository workflows](https://docs.github.com/en/rest/actions/workflows?apiVersion=2022-11-28#list-repository-workflows).$$\n  sql: |\n    SELECT *\n    FROM TABLE({{ schema_name -}}.tf_workflows(owner, repo, {}))\n\n- name: {{ schema_name -}}.tf_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"TABLE(id NUMBER, name STRING, node_id STRING, check_suite_id NUMBER, check_suite_node_id STRING, head_branch STRING, head_sha STRING, run_number NUMBER, event STRING, display_title STRING, status STRING, conclusion STRING, workflow_id NUMBER, url STRING, html_url STRING, pull_requests STRING, created_at TIMESTAMP, updated_at TIMESTAMP, actor OBJECT, run_attempt STRING, run_started_at TIMESTAMP, triggering_actor OBJECT, jobs_url STRING, logs_url STRING, check_suite_url STRING, artifacts_url STRING, cancel_url STRING, rerun_url STRING, workflow_url STRING, head_commit OBJECT, repository OBJECT, head_repository OBJECT)\"\n  options: |\n        COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n\n  sql: |\n    WITH response AS\n    (\n    SELECT\n        github_actions.runs(OWNER, REPO, QUERY) AS response\n    )\n    SELECT\n      value:id::NUMBER AS id\n      ,value:name::STRING AS name\n      ,value:node_id::STRING AS node_id\n      ,value:check_suite_id::NUMBER AS check_suite_id\n      ,value:check_suite_node_id::STRING AS check_suite_node_id\n      ,value:head_branch::STRING AS head_branch\n      ,value:head_sha::STRING AS head_sha\n      ,value:run_number::NUMBER AS run_number\n      ,value:event::STRING AS event\n      ,value:display_title::STRING AS display_title\n      ,value:status::STRING AS status\n      ,value:conclusion::STRING AS conclusion\n      ,value:workflow_id::NUMBER AS workflow_id\n      ,value:url::STRING AS url\n      ,value:html_url::STRING AS html_url\n      ,value:pull_requests::STRING AS pull_requests\n      ,value:created_at::TIMESTAMP AS created_at\n      ,value:updated_at::TIMESTAMP AS updated_at\n      ,value:actor::OBJECT AS actor\n      ,value:run_attempt::STRING AS run_attempt\n      ,value:run_started_at::TIMESTAMP AS run_started_at\n      ,value:triggering_actor::OBJECT AS triggering_actor\n      ,value:jobs_url::STRING AS jobs_url\n      ,value:logs_url::STRING AS logs_url\n      ,value:check_suite_url::STRING AS check_suite_url\n      ,value:artifacts_url::STRING AS artifacts_url\n      ,value:cancel_url::STRING AS cancel_url\n      ,value:rerun_url::STRING AS rerun_url\n      ,value:workflow_url::STRING AS workflow_url\n      ,value:head_commit::OBJECT AS head_commit\n      ,value:repository::OBJECT AS repository\n      ,value:head_repository::OBJECT AS head_repository\n    FROM response, LATERAL FLATTEN( input=> response:workflow_runs)\n- name: {{ schema_name -}}.tf_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n  return_type:\n    - \"TABLE(id NUMBER, name STRING, node_id STRING, check_suite_id NUMBER, check_suite_node_id STRING, head_branch STRING, head_sha STRING, run_number NUMBER, event STRING, display_title STRING, status STRING, conclusion STRING, workflow_id NUMBER, url STRING, html_url STRING, pull_requests STRING, created_at TIMESTAMP, updated_at TIMESTAMP, actor OBJECT, run_attempt STRING, run_started_at TIMESTAMP, triggering_actor OBJECT, jobs_url STRING, logs_url STRING, check_suite_url STRING, artifacts_url STRING, cancel_url STRING, rerun_url STRING, workflow_url STRING, head_commit OBJECT, repository OBJECT, head_repository OBJECT)\"\n  options: |\n      COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n  sql: |\n    SELECT *\n    FROM TABLE({{ schema_name -}}.tf_runs(owner, repo, {}))\n\n- name: {{ schema_name -}}.tf_workflow_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflkow_id, \"TEXT\"]\n    - [query, \"OBJECT\"]\n  return_type:\n    - \"TABLE(id NUMBER, name STRING, node_id STRING, check_suite_id NUMBER, check_suite_node_id STRING, head_branch STRING, head_sha STRING, run_number NUMBER, event STRING, display_title STRING, status STRING, conclusion STRING, workflow_id NUMBER, url STRING, html_url STRING, pull_requests STRING, created_at TIMESTAMP, updated_at TIMESTAMP, actor OBJECT, run_attempt STRING, run_started_at TIMESTAMP, triggering_actor OBJECT, jobs_url STRING, logs_url STRING, check_suite_url STRING, artifacts_url STRING, cancel_url STRING, rerun_url STRING, workflow_url STRING, head_commit OBJECT, repository OBJECT, head_repository OBJECT)\"\n  options: |\n      COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n  sql: |\n    WITH response AS\n    (\n    SELECT\n        github_actions.workflow_runs(OWNER, REPO, WORKFLKOW_ID, QUERY) AS response\n    )\n    SELECT\n      value:id::NUMBER AS id\n      ,value:name::STRING AS name\n      ,value:node_id::STRING AS node_id\n      ,value:check_suite_id::NUMBER AS check_suite_id\n      ,value:check_suite_node_id::STRING AS check_suite_node_id\n      ,value:head_branch::STRING AS head_branch\n      ,value:head_sha::STRING AS head_sha\n      ,value:run_number::NUMBER AS run_number\n      ,value:event::STRING AS event\n      ,value:display_title::STRING AS display_title\n      ,value:status::STRING AS status\n      ,value:conclusion::STRING AS conclusion\n      ,value:workflow_id::NUMBER AS workflow_id\n      ,value:url::STRING AS url\n      ,value:html_url::STRING AS html_url\n      ,value:pull_requests::STRING AS pull_requests\n      ,value:created_at::TIMESTAMP AS created_at\n      ,value:updated_at::TIMESTAMP AS updated_at\n      ,value:actor::OBJECT AS actor\n      ,value:run_attempt::STRING AS run_attempt\n      ,value:run_started_at::TIMESTAMP AS run_started_at\n      ,value:triggering_actor::OBJECT AS triggering_actor\n      ,value:jobs_url::STRING AS jobs_url\n      ,value:logs_url::STRING AS logs_url\n      ,value:check_suite_url::STRING AS check_suite_url\n      ,value:artifacts_url::STRING AS artifacts_url\n      ,value:cancel_url::STRING AS cancel_url\n      ,value:rerun_url::STRING AS rerun_url\n      ,value:workflow_url::STRING AS workflow_url\n      ,value:head_commit::OBJECT AS head_commit\n      ,value:repository::OBJECT AS repository\n      ,value:head_repository::OBJECT AS head_repository\n    FROM response, LATERAL FLATTEN( input=> response:workflow_runs)\n- name: {{ schema_name -}}.tf_workflow_runs\n  signature:\n    - [owner, \"TEXT\"]\n    - [repo, \"TEXT\"]\n    - [workflkow_id, \"TEXT\"]\n  return_type:\n    - \"TABLE(id NUMBER, name STRING, node_id STRING, check_suite_id NUMBER, check_suite_node_id STRING, head_branch STRING, head_sha STRING, run_number NUMBER, event STRING, display_title STRING, status STRING, conclusion STRING, workflow_id NUMBER, url STRING, html_url STRING, pull_requests STRING, created_at TIMESTAMP, updated_at TIMESTAMP, actor OBJECT, run_attempt STRING, run_started_at TIMESTAMP, triggering_actor OBJECT, jobs_url STRING, logs_url STRING, check_suite_url STRING, artifacts_url STRING, cancel_url STRING, rerun_url STRING, workflow_url STRING, head_commit OBJECT, repository OBJECT, head_repository OBJECT)\"\n  options: |\n        COMMENT = $$Lists all workflow runs for a repository. You can use query parameters to narrow the list of results. [Docs](https://docs.github.com/en/rest/actions/workflow-runs?apiVersion=2022-11-28#list-workflow-runs-for-a-repository).$$\n  sql: |\n    SELECT *\n    FROM TABLE({{ schema_name -}}.tf_workflow_runs(owner, repo, WORKFLKOW_ID, {}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4907577, "supported_languages": null}, "macro.livequery_models.config_transpose_udfs": {"name": "config_transpose_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/transpose/udfs.yaml.sql", "original_file_path": "macros/marketplace/transpose/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_transpose_udfs", "macro_sql": "{% macro config_transpose_udfs(schema_name = \"transpose\", utils_schema_name=\"transpose_utils\") -%}\n{#\n    This macro is used to generate the Transpose Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Transpose API. [Transpose docs here](https://docs.transpose.io/rest/overview/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.transpose.io', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-API-KEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/TRANSPOSE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Transpose API. [Transpose docs here](https://docs.transpose.io/rest/overview/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.transpose.io', PATH),\n        {'X-API-KEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/TRANSPOSE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4912622, "supported_languages": null}, "macro.livequery_models.config_solscan_udfs": {"name": "config_solscan_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/solscan/udfs.yaml.sql", "original_file_path": "macros/marketplace/solscan/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_solscan_udfs", "macro_sql": "{% macro config_solscan_udfs(schema_name = \"solscan\", utils_schema_name=\"solscan_utils\") -%}\n{#\n    This macro is used to generate the Solscan Base endpoints\n #}\n\n- name: {{ schema_name -}}.pro_api_get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Private Solscan API. [Solscan docs here](https://pro-api.solscan.io/pro-api-docs/v1.0).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://pro-api.solscan.io', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'token': '{API_KEY}'},\n        {},\n        '_FSC_SYS/SOLSCAN'\n    ) as response\n\n- name: {{ schema_name -}}.pro_api_post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Private Solscan API. [Solscan docs here](https://pro-api.solscan.io/pro-api-docs/v1.0).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://pro-api.solscan.io', PATH),\n        {'token': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/SOLSCAN'\n    ) as response\n\n- name: {{ schema_name -}}.public_api_get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Public Solscan API. [Solscan docs here](https://public-api.solscan.io/docs/#/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://public-api.solscan.io', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'token': '{API_KEY}'},\n        {},\n        '_FSC_SYS/SOLSCAN'\n    ) as response\n\n- name: {{ schema_name -}}.public_api_post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Public Solscan API. [Solscan docs here](https://public-api.solscan.io/docs/#/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://public-api.solscan.io', PATH),\n        {'token': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/SOLSCAN'\n    ) as response\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4919724, "supported_languages": null}, "macro.livequery_models.config_allday_udfs": {"name": "config_allday_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/allday/allday.graphql.sql", "original_file_path": "macros/marketplace/allday/allday.graphql.sql", "unique_id": "macro.livequery_models.config_allday_udfs", "macro_sql": "{% macro config_allday_udfs(schema_name = \"allday\", utils_schema_name = \"allday_utils\") -%}\n{#\n    This macro is used to generate the AllDay calls\n #}\n\n- name: {{ schema_name -}}.graphql\n  signature:\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Run a graphql query on AllDay.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        CONCAT('https://nflallday.com/consumer/graphql?query=', utils.udf_object_to_url_query_string(QUERY)),\n        {'User-Agent': 'Flipside_Flow_metadata/0.1','Accept-Encoding': 'gzip', 'Content-Type': 'application/json', 'Accept': 'application/json','Connection': 'keep-alive'},\n        {},\n        '_FSC_SYS/ALLDAY'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4923723, "supported_languages": null}, "macro.livequery_models.config_reservoir_udfs": {"name": "config_reservoir_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/reservoir/udfs.yaml.sql", "original_file_path": "macros/marketplace/reservoir/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_reservoir_udfs", "macro_sql": "{% macro config_reservoir_udfs(schema_name = \"reservoir\", utils_schema_name=\"reservoir_utils\") -%}\n{#\n    This macro is used to generate the Reservoir Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Reservoir NFT Data API. [Reservoir docs here](https://docs.reservoir.tools/reference/nft-data-overview).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.reservoir.tools', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'x-api-key': '{API_KEY}'},\n        NULL,\n        '_FSC_SYS/RESERVOIR'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Reservoir NFT Data API. [Reservoir docs here](https://docs.reservoir.tools/reference/nft-data-overview).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.reservoir.tools', PATH),\n        {'x-api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/RESERVOIR'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4928787, "supported_languages": null}, "macro.livequery_models.config_bitquery_udfs": {"name": "config_bitquery_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/bitquery/udfs.yaml.sql", "original_file_path": "macros/marketplace/bitquery/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_bitquery_udfs", "macro_sql": "{% macro config_bitquery_udfs(schema_name = \"bitquery\", utils_schema_name = \"bitquery_utils\") -%}\n{#\n    This macro is used to generate the BitQuery calls\n #}\n\n- name: {{ schema_name -}}.graphql\n  signature:\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Run a graphql query on BitQuery [BitQuery docs here](https://docs.bitquery.io/docs/start/first-query/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        'https://graphql.bitquery.io',\n        {'X-API-KEY': '{API_KEY}'},\n        QUERY,\n        '_FSC_SYS/BITQUERY'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4932675, "supported_languages": null}, "macro.livequery_models.config_topshot_udfs": {"name": "config_topshot_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/topshot/topshot.graphql.sql", "original_file_path": "macros/marketplace/topshot/topshot.graphql.sql", "unique_id": "macro.livequery_models.config_topshot_udfs", "macro_sql": "{% macro config_topshot_udfs(schema_name = \"topshot\", utils_schema_name = \"topshot_utils\") -%}\n{#\n    This macro is used to generate the Topshot calls\n #}\n\n- name: {{ schema_name -}}.graphql\n  signature:\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Run a graphql query on TopShot.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        'https://public-api.nbatopshot.com/graphql',\n        {'User-Agent': 'Flipside_Flow_metadata/0.1','Accept-Encoding': 'gzip', 'Content-Type': 'application/json', 'Accept': 'application/json','Connection': 'keep-alive'},\n        QUERY,\n        '_FSC_SYS/TOPSHOT'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4937687, "supported_languages": null}, "macro.livequery_models.config_zapper_udfs": {"name": "config_zapper_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/zapper/udfs.yaml.sql", "original_file_path": "macros/marketplace/zapper/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_zapper_udfs", "macro_sql": "{% macro config_zapper_udfs(schema_name = \"zapper\", utils_schema_name=\"zapper_utils\") -%}\n{#\n    This macro is used to generate the Zapper Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Zapper API. [Zapper docs here](https://studio.zapper.xyz/docs/apis/getting-started).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.zapper.xyz', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'Authorization': 'Basic {API_KEY}'},\n        {},\n        '_FSC_SYS/ZAPPER'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Zapper API. [Zapper docs here](https://studio.zapper.xyz/docs/apis/getting-started).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.zapper.xyz', PATH),\n        {'Authorization': 'Basic {API_KEY}'},\n        BODY,\n        '_FSC_SYS/ZAPPER'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4942856, "supported_languages": null}, "macro.livequery_models.config_dune_udfs": {"name": "config_dune_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/dune/udfs.yaml.sql", "original_file_path": "macros/marketplace/dune/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_dune_udfs", "macro_sql": "{% macro config_dune_udfs(schema_name = \"dune\", utils_schema_name=\"dune_utils\") -%}\n{#\n    This macro is used to generate the Dune Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Dune API. [Dune docs here](https://dune.com/docs/api/api-reference/authentication/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.dune.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'x-dune-api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/DUNE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Dune API. [Dune docs here](https://dune.com/docs/api/api-reference/authentication/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.dune.com', PATH),\n        {'x-dune-api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/DUNE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.494775, "supported_languages": null}, "macro.livequery_models.config_cmc_udfs": {"name": "config_cmc_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/cmc/udfs.yaml.sql", "original_file_path": "macros/marketplace/cmc/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_cmc_udfs", "macro_sql": "{% macro config_cmc_udfs(schema_name = \"cmc\", utils_schema_name=\"cmc_utils\") -%}\n{#\n    This macro is used to generate the CoinmarketCap Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the CoinmarketCap API. [CoinmarketCap docs here](https://coinmarketcap.com/api/documentation/v1/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://pro-api.coinmarketcap.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-CMC_PRO_API_KEY': '{API_KEY}'},\n        NULL,\n        '_FSC_SYS/CMC'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the CoinmarketCap API. [CoinmarketCap docs here](https://coinmarketcap.com/api/documentation/v1/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://pro-api.coinmarketcap.com', PATH),\n        {'X-CMC_PRO_API_KEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/CMC'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4952857, "supported_languages": null}, "macro.livequery_models.config_strangelove_udfs": {"name": "config_strangelove_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/strangelove/udfs.yaml.sql", "original_file_path": "macros/marketplace/strangelove/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_strangelove_udfs", "macro_sql": "{% macro config_strangelove_udfs(schema_name = \"strangelove\", utils_schema_name = \"strangelove_utils\") -%}\n{#\n    This macro is used to generate the Subquery Calls\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [URL, STRING, The url to issue a get request to]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Issue a GET request to a Strangelove Endpoint [Strangelove docs here](https://voyager.strange.love/docs/cosmoshub/mainnet#/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n          URL, '?',\n          utils.udf_object_to_url_query_string(QUERY_ARGS)\n        ),\n        {'x-apikey': '{API_KEY}'},\n        {},\n        '_FSC_SYS/STRANGELOVE'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [URL, STRING, The url to issue a post request to]\n    - [QUERY, OBJECT, The body of the request]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Issue a POST request to a Strangelove Endpoint [Strangelove docs here](https://voyager.strange.love/docs/cosmoshub/mainnet#/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        URL,\n        {'x-apikey': '{API_KEY}'},\n        QUERY,\n        '_FSC_SYS/STRANGELOVE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4957917, "supported_languages": null}, "macro.livequery_models.config_subquery_udfs": {"name": "config_subquery_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/subquery/udfs.yaml.sql", "original_file_path": "macros/marketplace/subquery/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_subquery_udfs", "macro_sql": "{% macro config_subquery_udfs(schema_name = \"subquery\", utils_schema_name = \"subquery_utils\") -%}\n{#\n    This macro is used to generate the Subquery Calls\n #}\n- name: {{ schema_name -}}.graphql\n  signature:\n    - [PROJECT, STRING, The sub-query project name]\n    - [QUERY, OBJECT, The graphql query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Query a SubQuery Project [SubQuery docs here](https://explorer.subquery.network/subquery/subquery/kepler-network).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.subquery.network/sq/subquery/', PROJECT),\n        {},\n        QUERY\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4961627, "supported_languages": null}, "macro.livequery_models.config_chainstack_udfs": {"name": "config_chainstack_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/chainstack/udfs.yaml.sql", "original_file_path": "macros/marketplace/chainstack/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_chainstack_udfs", "macro_sql": "{% macro config_chainstack_udfs(schema_name = \"chainstack\", utils_schema_name=\"chainstack_utils\") -%}\n{#\n    This macro is used to generate the Chainstack Base api endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Chainstack API. [Chainstack docs here](https://docs.chainstack.com/reference/blockchain-apis).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.chainstack.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'authorization': 'Bearer {API_KEY}'},\n        {},\n        '_FSC_SYS/CHAINSTACK'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Chainstack API. [Chainstack docs here](https://docs.chainstack.com/reference/blockchain-apis).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.chainstack.com', PATH),\n        {'authorization': 'Bearer {API_KEY}'},\n        BODY,\n        '_FSC_SYS/CHAINSTACK'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.496692, "supported_languages": null}, "macro.livequery_models.config_nftscan_udfs": {"name": "config_nftscan_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/nftscan/udfs.yaml.sql", "original_file_path": "macros/marketplace/nftscan/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_nftscan_udfs", "macro_sql": "{% macro config_nftscan_udfs(schema_name = \"nftscan\", utils_schema_name=\"nftscan_utils\") -%}\n{#\n    This macro is used to generate the NFTScan Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [URL, STRING, The full url including the path]\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the NFTScan API. [NFTScan docs here](https://docs.nftscan.com/guides/Overview/1).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(URL, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-API-KEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/NFTSCAN'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [URL, STRING, The full url]\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the NFTScan API. [NFTScan docs here](https://docs.nftscan.com/guides/Overview/1).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        URL,\n        {'X-API-KEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/NFTSCAN'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4971673, "supported_languages": null}, "macro.livequery_models.config_dappradar_udfs": {"name": "config_dappradar_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/dappradar/udfs.yaml.sql", "original_file_path": "macros/marketplace/dappradar/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_dappradar_udfs", "macro_sql": "{% macro config_dappradar_udfs(schema_name = \"dappradar\", utils_schema_name=\"dappradar_utils\") -%}\n{#\n    This macro is used to generate the DappRadar Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the DappRadar API. [DappRadar docs here](https://api-docs.dappradar.com/#section/Introduction).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://apis.dappradar.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-API-KEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/DAPPRADAR'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the DappRadar API. [DappRadar docs here](https://api-docs.dappradar.com/#section/Introduction).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://apis.dappradar.com', PATH),\n        {'X-API-KEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/DAPPRADAR'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4976733, "supported_languages": null}, "macro.livequery_models.config_opensea_udfs": {"name": "config_opensea_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/opensea/udfs.yaml.sql", "original_file_path": "macros/marketplace/opensea/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_opensea_udfs", "macro_sql": "{% macro config_opensea_udfs(schema_name = \"opensea\", utils_schema_name=\"opensea_utils\") -%}\n{#\n    This macro is used to generate the OpenSea Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the OpenSea API. [OpenSea docs here](https://docs.opensea.io/reference/api-overview).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.opensea.io', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'X-API-KEY': '{API_KEY}'},\n        {},\n        '_FSC_SYS/OPENSEA'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the OpenSea API. [OpenSea docs here](https://docs.opensea.io/reference/api-overview).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.opensea.io', PATH),\n        {'X-API-KEY': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/OPENSEA'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4981565, "supported_languages": null}, "macro.livequery_models.config_snapshot_udfs": {"name": "config_snapshot_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/snapshot/udfs.yaml.sql", "original_file_path": "macros/marketplace/snapshot/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_snapshot_udfs", "macro_sql": "{% macro config_snapshot_udfs(schema_name = \"snapshot\", utils_schema_name=\"snapshot_utils\") -%}\n{#\n    This macro is used to generate the Snapshot Base endpoints\n #}\n\n- name: {{ schema_name -}}.query\n  signature:\n    - [QUERY, OBJECT, The GraphQL query]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a Graphql Query to the Snapshot API. [Snapshot docs here](https://docs.snapshot.org/tools/api).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        'https://hub.snapshot.org/graphql',\n        {},\n        QUERY\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4985282, "supported_languages": null}, "macro.livequery_models.footprint_get_api_call": {"name": "footprint_get_api_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/footprint/footprint_config_utils.sql", "original_file_path": "macros/marketplace/footprint/footprint_config_utils.sql", "unique_id": "macro.livequery_models.footprint_get_api_call", "macro_sql": "{% macro footprint_get_api_call(schema_name, api_path) %}\nSELECT {{ schema_name -}}.get('/{{api_path}}', QUERY_PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4988265, "supported_languages": null}, "macro.livequery_models.footprint_post_api_call": {"name": "footprint_post_api_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/footprint/footprint_config_utils.sql", "original_file_path": "macros/marketplace/footprint/footprint_config_utils.sql", "unique_id": "macro.livequery_models.footprint_post_api_call", "macro_sql": "{% macro footprint_post_api_call(schema_name, api_path) %}\nSELECT {{ schema_name -}}.post('/{{api_path}}', BODY) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4990282, "supported_languages": null}, "macro.livequery_models.config_footprint_utils_udfs": {"name": "config_footprint_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/footprint/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/footprint/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_footprint_utils_udfs", "macro_sql": "{% macro config_footprint_utils_udfs(schema_name = \"footprint_utils\", utils_schema_name=\"footprint_utils\") -%}\n{#\n    This macro is used to generate the Footprint base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, ARRAY, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Footprint API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n           'https://api.footprint.network/api', PATH, '?',\n            utils.udf_urlencode(QUERY_ARGS, TRUE)\n        ),\n        {'api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/FOOTPRINT'\n    ) as response\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Footprint API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat(\n           'https://api.footprint.network/api', PATH, '?',\n            utils.udf_urlencode(QUERY_ARGS, TRUE)\n        ),\n        {'api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/FOOTPRINT'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Footprint API.$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        concat('https://api.footprint.network/api', PATH),\n        {'api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/FOOTPRINT'\n    ) as response\n\n\n- name: {{ schema_name -}}.rpc\n  signature:\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, ARRAY, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an RPC call to Footprint.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      concat('https://api.footprint.network/api'),\n      {'api-key': '{API_KEY}'},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': PARAMS},\n      '_FSC_SYS/FOOTPRINT') as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.4997303, "supported_languages": null}, "macro.livequery_models.config_quicknode_polygon_nfts_udfs": {"name": "config_quicknode_polygon_nfts_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/polygon_nft_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/polygon_nft_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_polygon_nfts_udfs", "macro_sql": "{% macro config_quicknode_polygon_nfts_udfs(schema_name = \"quicknode_polygon_nfts\", utils_schema_name = \"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode Polygon NFT endpoints\n #}\n\n- name: {{ schema_name -}}.fetch_nft_collection_details\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns collection details for specified contracts. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_fetchNFTCollectionDetails_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTCollectionDetails') | trim }}\n\n- name: {{ schema_name -}}.fetch_nfts\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs for a given wallet. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_fetchNFTs_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTs') | trim }}\n\n- name: {{ schema_name -}}.fetch_nfts_by_collection\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs within a given collection. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_fetchNFTsByCollection_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTsByCollection') | trim }}\n\n- name: {{ schema_name -}}.get_transfers_by_nft\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transfers by given NFT. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getTransfersByNFT_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getTransfersByNFT') | trim }}\n\n- name: {{ schema_name -}}.verify_nfts_owner\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Confirms ownership of specified NFTs for a given wallet. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_verifyNFTsOwner_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_verifyNFTsOwner') | trim }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.quicknode_polygon_mainnet_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.500915, "supported_languages": null}, "macro.livequery_models.config_quicknode_ethereum_nfts_udfs": {"name": "config_quicknode_ethereum_nfts_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/ethereum_nft_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/ethereum_nft_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_ethereum_nfts_udfs", "macro_sql": "{% macro config_quicknode_ethereum_nfts_udfs(schema_name = \"quicknode_ethereum_nfts\", utils_schema_name = \"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode Ethereum NFT endpoints\n #}\n\n- name: {{ schema_name -}}.fetch_nft_collection_details\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns collection details for specified contracts. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_fetchNFTCollectionDetails_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTCollectionDetails') | trim }}\n\n- name: {{ schema_name -}}.fetch_nfts\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs for a given wallet. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_fetchNFTs).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTs') | trim }}\n\n- name: {{ schema_name -}}.fetch_nfts_by_collection\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs within a given collection. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_fetchNFTsByCollection_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTsByCollection') | trim }}\n\n- name: {{ schema_name -}}.get_transfers_by_nft\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transfers by given NFT. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getTransfersByNFT_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getTransfersByNFT') | trim }}\n\n- name: {{ schema_name -}}.verify_nfts_owner\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Confirms ownership of specified NFTs for a given wallet. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_verifyNFTsOwner_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_verifyNFTsOwner') | trim }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.quicknode_ethereum_mainnet_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.502097, "supported_languages": null}, "macro.livequery_models.config_quicknode_ethereum_tokens_udfs": {"name": "config_quicknode_ethereum_tokens_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/ethereum_token_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/ethereum_token_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_ethereum_tokens_udfs", "macro_sql": "{% macro config_quicknode_ethereum_tokens_udfs(schema_name = \"quicknode_ethereum_tokens\", utils_schema_name = \"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode Ethereum Token endpoints\n #}\n\n- name: {{ schema_name -}}.get_token_metadata_by_contract_address\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns token details for specified contract.  [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getTokenMetadataByContractAddress_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getTokenMetadataByContractAddress') | trim }}\n\n- name: {{ schema_name -}}.get_token_metadata_by_symbol\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns token details for specified token symbol.  [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getTokenMetadataBySymbol_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getTokenMetadataBySymbol') | trim }}\n\n- name: {{ schema_name -}}.get_transactions_by_address\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transactions within a specified wallet address. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getTransactionsByAddress_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getTransactionsByAddress') | trim }}\n\n- name: {{ schema_name -}}.get_wallet_token_balance\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns ERC-20 tokens and token balances within a wallet. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getWalletTokenBalance_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getWalletTokenBalance') | trim }}\n\n- name: {{ schema_name -}}.get_wallet_token_transactions\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transfers of a specified token within a specified wallet address. [QuickNode docs here](https://www.quicknode.com/docs/ethereum/qn_getWalletTokenTransactions_v2).$$\n  sql: {{ quicknode_ethereum_mainnet_rpc_call(utils_schema_name, 'qn_getWalletTokenTransactions') | trim }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.quicknode_ethereum_mainnet_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5033207, "supported_languages": null}, "macro.livequery_models.quicknode_ethereum_mainnet_rpc_call": {"name": "quicknode_ethereum_mainnet_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "original_file_path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "unique_id": "macro.livequery_models.quicknode_ethereum_mainnet_rpc_call", "macro_sql": "{% macro quicknode_ethereum_mainnet_rpc_call(schema_name, method) %}\nSELECT {{ schema_name -}}.ethereum_mainnet_rpc('{{method}}', PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5036662, "supported_languages": null}, "macro.livequery_models.quicknode_polygon_mainnet_rpc_call": {"name": "quicknode_polygon_mainnet_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "original_file_path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "unique_id": "macro.livequery_models.quicknode_polygon_mainnet_rpc_call", "macro_sql": "{% macro quicknode_polygon_mainnet_rpc_call(schema_name, method) %}\nSELECT {{ schema_name -}}.polygon_mainnet_rpc('{{method}}', PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5038714, "supported_languages": null}, "macro.livequery_models.quicknode_solana_mainnet_rpc_call": {"name": "quicknode_solana_mainnet_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "original_file_path": "macros/marketplace/quicknode/quicknode_config_utils.sql", "unique_id": "macro.livequery_models.quicknode_solana_mainnet_rpc_call", "macro_sql": "{% macro quicknode_solana_mainnet_rpc_call(schema_name, method) %}\nSELECT {{ schema_name -}}.solana_mainnet_rpc('{{method}}', PARAMS) as response\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5040743, "supported_languages": null}, "macro.livequery_models.config_quicknode_polygon_tokens_udfs": {"name": "config_quicknode_polygon_tokens_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/polygon_token_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/polygon_token_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_polygon_tokens_udfs", "macro_sql": "{% macro config_quicknode_polygon_tokens_udfs(schema_name = \"quicknode_polygon_tokens\", utils_schema_name = \"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode Polygon Token endpoints\n #}\n\n- name: {{ schema_name -}}.get_token_metadata_by_contract_address\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns token details for specified contract.  [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getTokenMetadataByContractAddress_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getTokenMetadataByContractAddress') | trim }}\n\n- name: {{ schema_name -}}.get_token_metadata_by_symbol\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns token details for specified token symbol.  [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getTokenMetadataBySymbol_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getTokenMetadataBySymbol') | trim }}\n\n- name: {{ schema_name -}}.get_transactions_by_address\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transactions within a specified wallet address. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getTransactionsByAddress_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getTransactionsByAddress') | trim }}\n\n- name: {{ schema_name -}}.get_wallet_token_balance\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns ERC-20 tokens and token balances within a wallet. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getWalletTokenBalance_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getWalletTokenBalance') | trim }}\n\n- name: {{ schema_name -}}.get_wallet_token_transactions\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns transfers of a specified token within a specified wallet address. [QuickNode docs here](https://www.quicknode.com/docs/polygon/qn_getWalletTokenTransactions_v2).$$\n  sql: {{ quicknode_polygon_mainnet_rpc_call(utils_schema_name, 'qn_getWalletTokenTransactions') | trim }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.quicknode_polygon_mainnet_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.505305, "supported_languages": null}, "macro.livequery_models.config_quicknode_solana_nfts_udfs": {"name": "config_quicknode_solana_nfts_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/solana_nft_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/solana_nft_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_solana_nfts_udfs", "macro_sql": "{% macro config_quicknode_solana_nfts_udfs(schema_name = \"quicknode_solana_nfts\", utils_schema_name = \"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode Solana NFT endpoints\n #}\n\n- name: {{ schema_name -}}.fetch_nfts\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs for a given wallet. [QuickNode docs here](https://www.quicknode.com/docs/solana/qn_fetchNFTs).$$\n  sql: {{ quicknode_solana_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTs') | trim }}\n\n- name: {{ schema_name -}}.fetch_nfts_by_creator\n  signature:\n    - [PARAMS, OBJECT, The RPC Params]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns aggregated data on NFTs that have been created by an address. [QuickNode docs here](https://www.quicknode.com/docs/solana/qn_fetchNFTsByCreator).$$\n  sql: {{ quicknode_solana_mainnet_rpc_call(utils_schema_name, 'qn_fetchNFTsByCreator') | trim }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.quicknode_solana_mainnet_rpc_call"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5059447, "supported_languages": null}, "macro.livequery_models.config_quicknode_utils_udfs": {"name": "config_quicknode_utils_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/quicknode/util_udfs.yaml.sql", "original_file_path": "macros/marketplace/quicknode/util_udfs.yaml.sql", "unique_id": "macro.livequery_models.config_quicknode_utils_udfs", "macro_sql": "{% macro config_quicknode_utils_udfs(schema_name = \"quicknode_utils\", utils_schema_name=\"quicknode_utils\") -%}\n{#\n    This macro is used to generate the QuickNode base endpoints/RPC calls\n #}\n\n- name: {{ schema_name -}}.ethereum_mainnet_rpc\n  signature:\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, OBJECT, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue an Ethereum RPC call to QuickNode.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      '{ethereum-mainnet}',\n      {},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': [PARAMS]},\n      '_FSC_SYS/QUICKNODE'\n    ) as response\n\n- name: {{ schema_name -}}.polygon_mainnet_rpc\n  signature:\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, OBJECT, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a Polygon RPC call to QuickNode.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      '{polygon-matic}',\n      {},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': [PARAMS]},\n      '_FSC_SYS/QUICKNODE'\n    ) as response\n\n- name: {{ schema_name -}}.solana_mainnet_rpc\n  signature:\n    - [METHOD, STRING, The RPC method to call]\n    - [PARAMS, OBJECT, The RPC Params arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a Solana RPC call to QuickNode.$$\n  sql: |\n    SELECT live.udf_api(\n      'POST',\n      '{solana-solana-mainnet}',\n      {},\n      {'id': 1,'jsonrpc': '2.0','method': METHOD,'params': PARAMS},\n      '_FSC_SYS/QUICKNODE'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5065315, "supported_languages": null}, "macro.livequery_models.config_coingecko_udfs": {"name": "config_coingecko_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/coingecko/udfs.yaml.sql", "original_file_path": "macros/marketplace/coingecko/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_coingecko_udfs", "macro_sql": "{% macro config_coingecko_udfs(schema_name = \"coingecko\", utils_schema_name=\"coingecko_utils\") -%}\n{#\n    This macro is used to generate the Coingecko Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the CoinGecko API. [CoinGecko docs here](https://apiguide.coingecko.com/getting-started/introduction).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://pro-api.coingecko.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'x-cg-pro-api-key': '{API_KEY}'},\n        {},\n        '_FSC_SYS/COINGECKO'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path after '/api' starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the CoinGecko API. [CoinGecko docs here](https://apiguide.coingecko.com/getting-started/introduction).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://pro-api.coingecko.com', PATH),\n        {'x-cg-pro-api-key': '{API_KEY}'},\n        BODY,\n        '_FSC_SYS/COINGECKO'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5070305, "supported_languages": null}, "macro.livequery_models.config_dapplooker_udfs": {"name": "config_dapplooker_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/dapplooker/udfs.yaml.sql", "original_file_path": "macros/marketplace/dapplooker/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_dapplooker_udfs", "macro_sql": "{% macro config_dapplooker_udfs(schema_name = \"dapplooker\", utils_schema_name = \"dapplooker_utils\") -%}\n{#\n    This macro is used to generate the DappLooker endpoints\n #}\n\n- name: {{ schema_name -}}.get_chart\n  signature:\n    - [CHART_ID, STRING, The UUID of the chart]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Returns the chart data. [DappLooker docs here](https://github.com/dapplooker/dapplooker-sdk).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.dapplooker.com/chart/', CHART_ID, '?api_key={API_KEY}&output_format=json'),\n        {},\n        {},\n        '_FSC_SYS/DAPPLOOKER'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5074232, "supported_languages": null}, "macro.livequery_models.config_covalent_udfs": {"name": "config_covalent_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/marketplace/covalent/udfs.yaml.sql", "original_file_path": "macros/marketplace/covalent/udfs.yaml.sql", "unique_id": "macro.livequery_models.config_covalent_udfs", "macro_sql": "{% macro config_covalent_udfs(schema_name = \"covalent\", utils_schema_name=\"covalent_utils\") -%}\n{#\n    This macro is used to generate the Covalent Base endpoints\n #}\n\n- name: {{ schema_name -}}.get\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [QUERY_ARGS, OBJECT, The query arguments]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'GET' request to the Covalent API. [Covalent docs here](https://www.covalenthq.com/docs/unified-api/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'GET',\n        concat('https://api.covalenthq.com', PATH, '?', utils.udf_object_to_url_query_string(QUERY_ARGS)),\n        {'Authorization': 'Bearer {API_KEY}'},\n        {},\n        '_FSC_SYS/COVALENT'\n    ) as response\n\n- name: {{ schema_name -}}.post\n  signature:\n    - [PATH, STRING, The path starting with '/']\n    - [BODY, OBJECT, The request body]\n  return_type:\n    - \"VARIANT\"\n  options: |\n    COMMENT = $$Used to issue a 'POST' request to the Covalent API. [Covalent docs here](https://www.covalenthq.com/docs/unified-api/).$$\n  sql: |\n    SELECT\n      live.udf_api(\n        'POST',\n        CONCAT('https://api.covalenthq.com', PATH),\n        {'Authorization': 'Bearer {API_KEY}'},\n        BODY,\n        '_FSC_SYS/COVALENT'\n    ) as response\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5079148, "supported_languages": null}, "macro.livequery_models.base_test_udf": {"name": "base_test_udf", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tests/udfs.sql", "original_file_path": "macros/tests/udfs.sql", "unique_id": "macro.livequery_models.base_test_udf", "macro_sql": "{% macro base_test_udf(model, udf, args, assertions) %}\n{#\n  Generates a test for a UDF.\n #}\n{% if execute %}\n    {%- set context -%}\n      SET LIVEQUERY_CONTEXT = '{\"userId\":\"{{ var(\"STUDIO_TEST_USER_ID\") }}\"}';\n    {%- endset -%}\n  {%- do run_query(context) -%}\n{%- endif -%}\n{%- set call -%}\n{{ target.database }}.{{ udf }}({{ args }})\n{%- endset -%}\n,\ntest AS\n(\n    SELECT\n        '{{ udf }}' AS test_name\n        ,[{{ args }}] as parameters\n        ,{{ call }} AS result\n)\n  {% for assertion in assertions %}\n    SELECT\n    test_name,\n    parameters,\n    result,\n    $${{ assertion }}$$ AS assertion,\n    $${{ context ~ \"\\n\" }}SELECT {{ call ~ \"\\n\" }};$$ AS sql\n    FROM test\n    WHERE NOT {{ assertion }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif -%}\n  {%- endfor -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5093522, "supported_languages": null}, "macro.livequery_models.apply_meta_as_tags": {"name": "apply_meta_as_tags", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.apply_meta_as_tags", "macro_sql": "{% macro apply_meta_as_tags(results) %}\n    {% if var(\"UPDATE_SNOWFLAKE_TAGS\") %}\n        {{ log('apply_meta_as_tags', info=False) }}\n        {{ log(results, info=False) }}\n        {% if execute %}\n\n            {%- set tags_by_schema = {} -%}\n            {% for res in results -%}\n                {% if res.node.meta.database_tags %}\n\n                    {%- set model_database = res.node.database -%}\n                    {%- set model_schema = res.node.schema -%}\n                    {%- set model_schema_full = model_database+'.'+model_schema -%}\n                    {%- set model_alias = res.node.alias -%}\n\n                    {% if model_schema_full not in tags_by_schema.keys() %}\n                        {{ log('need to fetch tags for schema '+model_schema_full, info=False) }}\n                        {%- call statement('main', fetch_result=True) -%}\n                            show tags in {{model_database}}.{{model_schema}}\n                        {%- endcall -%}\n                        {%- set _ = tags_by_schema.update({model_schema_full: load_result('main')['table'].columns.get('name').values()|list}) -%}\n                        {{ log('Added tags to cache', info=False) }}\n                    {% else %}\n                        {{ log('already have tag info for schema', info=False) }}\n                    {% endif %}\n\n                    {%- set current_tags_in_schema = tags_by_schema[model_schema_full] -%}\n                    {{ log('current_tags_in_schema:', info=False) }}\n                    {{ log(current_tags_in_schema, info=False) }}\n                    {{ log(\"========== Processing tags for \"+model_schema_full+\".\"+model_alias+\" ==========\", info=False) }}\n\n                    {% set line -%}\n                        node: {{ res.node.unique_id }}; status: {{ res.status }} (message: {{ res.message }})\n                        node full: {{ res.node}}\n                        meta: {{ res.node.meta}}\n                        materialized: {{ res.node.config.materialized }}\n                    {%- endset %}\n                    {{ log(line, info=False) }}\n\n                    {%- call statement('main', fetch_result=True) -%}\n                        select LEVEL,UPPER(TAG_NAME) as TAG_NAME,TAG_VALUE from table(information_schema.tag_references_all_columns('{{model_schema}}.{{model_alias}}', 'table'))\n                    {%- endcall -%}\n                    {%- set existing_tags_for_table = load_result('main')['data'] -%}\n                    {{ log('Existing tags for table:', info=False) }}\n                    {{ log(existing_tags_for_table, info=False) }}\n\n                    {{ log('--', info=False) }}\n                    {% for table_tag in res.node.meta.database_tags.table %}\n\n                        {{ create_tag_if_missing(current_tags_in_schema,table_tag|upper) }}\n                        {% set desired_tag_value = res.node.meta.database_tags.table[table_tag] %}\n\n                        {{set_table_tag_value_if_different(model_schema,model_alias,table_tag,desired_tag_value,existing_tags_for_table)}}\n                    {% endfor %}\n                    {{ log(\"========== Finished processing tags for \"+model_alias+\" ==========\", info=False) }}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.livequery_models.create_tag_if_missing", "macro.livequery_models.set_table_tag_value_if_different"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.515029, "supported_languages": null}, "macro.livequery_models.create_tag_if_missing": {"name": "create_tag_if_missing", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.create_tag_if_missing", "macro_sql": "{% macro create_tag_if_missing(all_tag_names,table_tag) %}\n\t{% if table_tag not in all_tag_names %}\n\t\t{{ log('Creating missing tag '+table_tag, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            create tag if not exists silver.{{table_tag}}\n        {%- endcall -%}\n\t\t{{ log(load_result('main').data, info=False) }}\n\t{% else %}\n\t\t{{ log('Tag already exists: '+table_tag, info=False) }}\n\t{% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5158222, "supported_languages": null}, "macro.livequery_models.set_table_tag_value_if_different": {"name": "set_table_tag_value_if_different", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.set_table_tag_value_if_different", "macro_sql": "{% macro set_table_tag_value_if_different(model_schema,table_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at table level', info=False) }}\n    {%- set existing_tag_for_table = existing_tags|selectattr('0','equalto','TABLE')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for table:', info=False) }}\n    {{ log(existing_tag_for_table[0], info=False) }}\n    {% if existing_tag_for_table|length > 0 and existing_tag_for_table[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{model_schema}}.{{table_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.517387, "supported_languages": null}, "macro.livequery_models.set_column_tag_value_if_different": {"name": "set_column_tag_value_if_different", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.set_column_tag_value_if_different", "macro_sql": "{% macro set_column_tag_value_if_different(table_name,column_name,tag_name,desired_tag_value,existing_tags) %}\n    {{ log('Ensuring tag '+tag_name+' has value '+desired_tag_value+' at column level', info=False) }}\n    {%- set existing_tag_for_column = existing_tags|selectattr('0','equalto','COLUMN')|selectattr('1','equalto',tag_name|upper)|list -%}\n    {{ log('Filtered tags for column:', info=False) }}\n    {{ log(existing_tag_for_column[0], info=False) }}\n    {% if existing_tag_for_column|length > 0 and existing_tag_for_column[0][2]==desired_tag_value %}\n        {{ log('Correct tag value already exists', info=False) }}\n    {% else %}\n        {{ log('Setting tag value for '+tag_name+' to value '+desired_tag_value, info=False) }}\n        {%- call statement('main', fetch_result=True) -%}\n            alter table {{table_name}} modify column {{column_name}} set tag {{tag_name}} = '{{desired_tag_value}}'\n        {%- endcall -%}\n        {{ log(load_result('main').data, info=False) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5189452, "supported_languages": null}, "macro.livequery_models.set_database_tag_value": {"name": "set_database_tag_value", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.set_database_tag_value", "macro_sql": "{% macro set_database_tag_value(tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter database {{target.database}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5195503, "supported_languages": null}, "macro.livequery_models.set_schema_tag_value": {"name": "set_schema_tag_value", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/snowflake_tagging.sql", "original_file_path": "macros/tags/snowflake_tagging.sql", "unique_id": "macro.livequery_models.set_schema_tag_value", "macro_sql": "{% macro set_schema_tag_value(target_schema,tag_name,tag_value) %}\n    {% set query %}\n        create tag if not exists silver.{{tag_name}}\n    {% endset %}\n    {% do run_query(query) %}\n    {% set query %}\n        alter schema {{target.database}}.{{target_schema}} set tag {{target.database}}.silver.{{tag_name}} = '{{tag_value}}'\n    {% endset %}\n    {% do run_query(query) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5201604, "supported_languages": null}, "macro.livequery_models.add_database_or_schema_tags": {"name": "add_database_or_schema_tags", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/tags/add_database_or_schema_tags.sql", "original_file_path": "macros/tags/add_database_or_schema_tags.sql", "unique_id": "macro.livequery_models.add_database_or_schema_tags", "macro_sql": "{% macro add_database_or_schema_tags() %}\n    {{ set_database_tag_value('BLOCKCHAIN_NAME','LIVEQUERY') }}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.set_database_tag_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5204575, "supported_languages": null}, "macro.livequery_models.config_evm_rpc_primitives": {"name": "config_evm_rpc_primitives", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_primitives.yaml.sql", "original_file_path": "macros/evm/evm_primitives.yaml.sql", "unique_id": "macro.livequery_models.config_evm_rpc_primitives", "macro_sql": "{%- macro config_evm_rpc_primitives(blockchain, network) -%}\n{#-\n    Generates a set of UDFs that call the Ethereum JSON RPC API\n\n    - rpc: Executes an RPC call on the {{ blockchain }} blockchain\n    - eth_call: Executes a new message call immediately without creating a transaction on the block chain\n    - eth_getLogs: Returns an array of all logs matching filter with given address\n    - eth_getBalance: Returns the balance of the account of given address\n\n -#}\n{% set schema = blockchain ~ \"_\" ~ network -%}\n\n- name: {{ schema -}}.udf_rpc\n  signature:\n    - [method, STRING, RPC method to call]\n    - [parameters, VARIANT, Parameters to pass to the RPC method]\n  return_type: [VARIANT, The return value of the RPC method]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Executes an RPC call on the {{ blockchain }} blockchain.$$\n  sql: |\n    SELECT live.udf_rpc('{{ blockchain }}', '{{ network }}', method, parameters)\n\n- name: {{ schema -}}.udf_rpc_eth_call\n  signature:\n    - [transaction, OBJECT, The transaction object]\n    - [block_or_tag, STRING, The block number or tag to execute the call on]\n  return_type: [VARIANT, The return value of the executed contract code]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Executes a new message call immediately without creating a transaction on the block chain.$$\n  sql: |\n    SELECT {{ schema -}}.udf_rpc('eth_call', [transaction, block_or_tag])\n\n- name: {{ schema -}}.udf_rpc_eth_get_logs\n  signature:\n    - [filter, OBJECT, The filter object]\n  return_type: [VARIANT, An array of all logs matching filter with given address]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns an array of all logs matching filter with given address.$$\n  sql: |\n    SELECT {{ schema -}}.udf_rpc('eth_getLogs', [filter])\n\n- name: {{ schema -}}.udf_rpc_eth_get_balance\n  signature:\n    - [address, STRING, The address to get the balance of]\n    - [block_or_tag, STRING, The block number or tag to execute the call on]\n  return_type: [VARIANT, The balance of the account of given address]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the balance of the account of given address.$$\n  sql: |\n    SELECT {{ schema -}}.udf_rpc('eth_getBalance', [address, block_or_tag])\n\n- name: {{ schema -}}.udf_get_token_balance\n  signature:\n    - [wallet_address, STRING, The address to get the balance of]\n    - [token_address, STRING, The token to get the balance of]\n  return_type: [STRING, The balance of the account of given address]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the balance of the wallet of given token address at the latest block.$$\n  sql: |\n    SELECT utils.udf_hex_to_int({{ schema -}}.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', concat('0x70a08231',LPAD(REPLACE(wallet_address, '0x', ''), 64, 0))),'latest')::string)\n\n- name: {{ schema -}}.udf_get_token_balance\n  signature:\n    - [wallet_address, STRING, The address to get the balance of]\n    - [token_address, STRING, The token to get the balance of]\n    - [block_number, INTEGER, The block number to retrieve the balance at]\n  return_type: [STRING, The balance of the account of given address]\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the balance of the wallet of given token address at the given block.$$\n  sql: |\n    SELECT utils.udf_hex_to_int({{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', concat('0x70a08231',LPAD(REPLACE(wallet_address, '0x', ''), 64, 0))), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING)\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.521752, "supported_languages": null}, "macro.livequery_models.evm_latest_native_balance_string": {"name": "evm_latest_native_balance_string", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_native_balance_string", "macro_sql": "{% macro evm_latest_native_balance_string(schema, blockchain, network) %}\nwith base as (select lower(wallet) AS wallet_address)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    symbol,\n    utils.udf_hex_to_int({{schema}}.udf_rpc_eth_get_balance(wallet_address,'latest')::string) AS raw_balance,\n    (raw_balance / POW(10,18))::float AS balance\nFROM base\nLEFT JOIN {{ ref('_evm__native_symbol_map') }}\non '{{blockchain}}' = blockchain\nand '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.52682, "supported_languages": null}, "macro.livequery_models.evm_latest_native_balance_array": {"name": "evm_latest_native_balance_array", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_native_balance_array", "macro_sql": "{% macro evm_latest_native_balance_array(schema, blockchain, network) %}\nWITH address_inputs AS (\n    SELECT wallets AS wallet_array\n),\nflat_addresses AS (\n    SELECT lower(value::string) AS wallet_address\n    FROM address_inputs a,\n    LATERAL FLATTEN(input => a.wallet_array)\n),\nnode_call AS (\n    SELECT wallet_address,\n    {{schema}}.udf_rpc_eth_get_balance(wallet_address,'latest')::string AS hex_balance\n    FROM flat_addresses\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    symbol,\n    utils.udf_hex_to_int(hex_balance) AS raw_balance,\n    (raw_balance / POW(10,18))::FLOAT AS balance\nFROM node_call\nLEFT JOIN {{ ref('_evm__native_symbol_map') }}\non '{{blockchain}}' = blockchain\nand '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5272312, "supported_languages": null}, "macro.livequery_models.evm_latest_token_balance_ss": {"name": "evm_latest_token_balance_ss", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_token_balance_ss", "macro_sql": "{% macro evm_latest_token_balance_ss(schema, blockchain, network) %}\nWITH inputs AS (\n     SELECT\n        lower(token) AS token_address,\n        lower(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n),\nnode_call AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        {{schema}}.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    and blockchain = '{{blockchain}}'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM node_call\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5276616, "supported_languages": null}, "macro.livequery_models.evm_latest_token_balance_sa": {"name": "evm_latest_token_balance_sa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_token_balance_sa", "macro_sql": "{% macro evm_latest_token_balance_sa(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT tokens, wallet\n),\nflat_rows AS (\n    SELECT\n        lower(value::string) AS token_address,\n        lower(wallet::string) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n    FROM inputs,\n    LATERAL FLATTEN(input => tokens)\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        {{schema}}.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        flat_rows\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    and blockchain = '{{blockchain}}'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5280702, "supported_languages": null}, "macro.livequery_models.evm_latest_token_balance_as": {"name": "evm_latest_token_balance_as", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_token_balance_as", "macro_sql": "{% macro evm_latest_token_balance_as(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT token, wallets\n),\nflat_rows AS (\n    SELECT\n        lower(value::string) AS wallet_address,\n        lower(token::string) AS token_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n    FROM inputs,\n    LATERAL FLATTEN(input => wallets)\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        {{schema}}.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        flat_rows\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    and blockchain = '{{blockchain}}'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.528498, "supported_languages": null}, "macro.livequery_models.evm_latest_token_balance_aa": {"name": "evm_latest_token_balance_aa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_token_balance_aa", "macro_sql": "{% macro evm_latest_token_balance_aa(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT tokens, wallets\n),\nflat_rows AS (\n    SELECT\n        lower(tokens.VALUE::STRING) AS token_address,\n        lower(wallets.VALUE::STRING) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS DATA\n    FROM\n        inputs,\n        LATERAL FLATTEN(input => tokens) tokens,\n        LATERAL FLATTEN(input => wallets) wallets\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        {{schema}}.udf_rpc_eth_call(object_construct_keep_null('from', null, 'to', token_address, 'data', data),'latest')::string AS eth_call,\n        utils.udf_hex_to_int(eth_call::string) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        flat_rows\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    and blockchain = '{{blockchain}}'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.528918, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_ssi": {"name": "evm_historical_token_balance_ssi", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_ssi", "macro_sql": "{% macro evm_historical_token_balance_ssi(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS data,\n        block_number\n), final AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.52936, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_ssa": {"name": "evm_historical_token_balance_ssa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_ssa", "macro_sql": "{% macro evm_historical_token_balance_ssa(schema, blockchain, network) %}\nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, 0)\n        ) AS data\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.529794, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_asi": {"name": "evm_historical_token_balance_asi", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_asi", "macro_sql": "{% macro evm_historical_token_balance_asi(schema, blockchain, network) %}\nWITH wallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet, '0x', ''), 64, 0)\n        ) AS data\n    FROM wallets\n),\nfinal AS (\n    SELECT\n        wallet AS wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5302153, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_asa": {"name": "evm_historical_token_balance_asa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_asa", "macro_sql": "{% macro evm_historical_token_balance_asa(schema, blockchain, network) %}\nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\nwallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet, '0x', ''), 64, '0')\n        ) AS data\n    FROM wallets\n),\nfinal AS (\n    SELECT\n        wallet AS wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5306783, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_sai": {"name": "evm_historical_token_balance_sai", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_sai", "macro_sql": "{% macro evm_historical_token_balance_sai(schema, blockchain, network) %}\nWITH token_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        tokens\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5310988, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_saa": {"name": "evm_historical_token_balance_saa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_saa", "macro_sql": "{% macro evm_historical_token_balance_saa(schema, blockchain, network) %}\nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\ntoken_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        LOWER(wallet) AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        tokens\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5315592, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_aai": {"name": "evm_historical_token_balance_aai", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_aai", "macro_sql": "{% macro evm_historical_token_balance_aai(schema, blockchain, network) %}\nWITH token_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\nwallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        tokens,\n        wallets\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5319939, "supported_languages": null}, "macro.livequery_models.evm_historical_token_balance_aaa": {"name": "evm_historical_token_balance_aaa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_token_balance_aaa", "macro_sql": "{% macro evm_historical_token_balance_aaa(schema, blockchain, network) %}\nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\nwallet_inputs AS (\n    SELECT wallets\n),\nwallets AS (\n    SELECT lower(value::STRING) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ntoken_inputs AS (\n    SELECT tokens\n),\ntokens AS (\n    SELECT value::STRING AS token\n    FROM token_inputs,\n    LATERAL FLATTEN(input => tokens)\n),\ninputs AS (\n    SELECT\n        LOWER(token) AS token_address,\n        wallet AS wallet_address,\n        '0x70a08231' AS function_sig,\n        CONCAT(\n            function_sig,\n            LPAD(REPLACE(wallet_address, '0x', ''), 64, '0')\n        ) AS data\n    FROM\n        wallets,\n        tokens\n),\nfinal AS (\n    SELECT\n        wallet_address,\n        token_address,\n        symbol,\n        blocks.block_number,\n        {{schema}}.udf_rpc_eth_call(OBJECT_CONSTRUCT_KEEP_NULL('from', NULL, 'to', token_address, 'data', data), CONCAT('0x', TRIM(TO_CHAR(blocks.block_number, 'XXXXXXXXXX'))))::STRING AS eth_call,\n        utils.udf_hex_to_int(eth_call::STRING) AS raw_balance,\n        raw_balance::INT / POW(10, ifnull(decimals,0)) AS balance\n    FROM\n        inputs\n    CROSS JOIN blocks\n    LEFT JOIN {{ ref('_evm__contracts_map') }}\n    ON token_address = address\n    AND blockchain = '{{blockchain}}'\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and REGEXP_LIKE(token_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    token_address,\n    symbol,\n    block_number,\n    raw_balance,\n    balance\nFROM final\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5324686, "supported_languages": null}, "macro.livequery_models.evm_historical_native_balance_si": {"name": "evm_historical_native_balance_si", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_native_balance_si", "macro_sql": "{% macro evm_historical_native_balance_si(schema, blockchain, network) %}\nwith base as (select lower(wallet) AS wallet_address, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX'))) as hex_block)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    utils.udf_hex_to_int({{schema}}.udf_rpc_eth_get_balance(wallet_address,hex_block)::string) AS raw_balance,\n    (raw_balance / POW(10,18))::float AS balance\nFROM base\nLEFT JOIN {{ ref('_evm__native_symbol_map') }}\non '{{blockchain}}' = blockchain\nand '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5328512, "supported_languages": null}, "macro.livequery_models.evm_historical_native_balance_sa": {"name": "evm_historical_native_balance_sa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_native_balance_sa", "macro_sql": "{% macro evm_historical_native_balance_sa(schema, blockchain, network) %}\nWITH block_inputs AS (\n    SELECT block_numbers\n),\nblocks AS (\n    SELECT value::INTEGER AS block_number\n    FROM block_inputs,\n    LATERAL FLATTEN(input => block_numbers)\n),\ninputs AS (\n    SELECT\n        wallet AS wallet_address,\n        block_number,\n        utils.udf_hex_to_int({{schema}}.udf_rpc_eth_get_balance(wallet, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX')))))::STRING AS raw_balance\n    FROM blocks\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    raw_balance,\n    (raw_balance::int / pow(10,18)) ::float as balance\nFROM inputs\nLEFT JOIN {{ ref('_evm__native_symbol_map') }}\non '{{blockchain}}' = blockchain\nand '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5332713, "supported_languages": null}, "macro.livequery_models.evm_historical_native_balance_ai": {"name": "evm_historical_native_balance_ai", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_native_balance_ai", "macro_sql": "{% macro evm_historical_native_balance_ai(schema, blockchain, network) %}\nWITH wallet_inputs AS (\n    SELECT wallets\n),\nflat_wallets AS (\n    SELECT lower(value::string) AS wallet\n    FROM wallet_inputs,\n    LATERAL FLATTEN(input => wallets)\n),\ninputs AS (\n    SELECT\n        wallet AS wallet_address,\n        block_number,\n        utils.udf_hex_to_int({{schema}}.udf_rpc_eth_get_balance(wallet, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX')))))::STRING AS raw_balance\n    FROM flat_wallets\n)\nSELECT\n    case\n    when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n    and is_integer(block_number)\n    then 'Success'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    wallet_address,\n    symbol,\n    block_number,\n    raw_balance,\n    (raw_balance::int / pow(10,18)) ::float as balance\nFROM inputs\nLEFT JOIN {{ ref('_evm__native_symbol_map') }}\non '{{blockchain}}' = blockchain\nand '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5338247, "supported_languages": null}, "macro.livequery_models.evm_historical_native_balance_aa": {"name": "evm_historical_native_balance_aa", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_historical_native_balance_aa", "macro_sql": "{% macro evm_historical_native_balance_aa(schema, blockchain, network) %}\n    WITH inputs AS (\n        SELECT wallets, block_numbers\n    ),\n    flat_wallets AS (\n        SELECT lower(wallet.value::STRING) AS wallet, block.value::INTEGER AS block_number\n        FROM inputs,\n        LATERAL FLATTEN(input => wallets) wallet,\n        LATERAL FLATTEN(input => block_numbers) block\n    ),\n    final AS (\n        SELECT\n            wallet AS wallet_address,\n            block_number,\n            utils.udf_hex_to_int({{schema}}.udf_rpc_eth_get_balance(wallet, CONCAT('0x', TRIM(TO_CHAR(block_number, 'XXXXXXXXXX')))))::STRING AS raw_balance\n        FROM flat_wallets\n    )\n    SELECT\n        case\n        when REGEXP_LIKE(wallet_address, '^0x([a-fA-F0-9]{40})$')\n        and is_integer(block_number)\n        then 'Success'\n        else 'Error - Invalid Input'\n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        wallet_address,\n        symbol,\n        block_number,\n        raw_balance,\n        (raw_balance::int / pow(10,18))::float as balance\n    FROM final\n    LEFT JOIN {{ ref('_evm__native_symbol_map') }}\n    on '{{blockchain}}' = blockchain\n    and '{{network}}' = network\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5342758, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_s": {"name": "evm_latest_contract_events_s", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_s", "macro_sql": "{% macro evm_latest_contract_events_s(schema, blockchain, network) %}\n    WITH chainhead AS (\n        SELECT\n            {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n            CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n    ),\n    node_call AS (\n        SELECT\n            lower(address) AS contract_address,\n            {{ schema }}.udf_rpc_eth_get_logs(\n                OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n            ) AS eth_getLogs\n        FROM chainhead\n    ),\n    node_flat AS (\n        SELECT\n            contract_address,\n            utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n            value:transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n            utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n            value:removed::BOOLEAN AS event_removed,\n            value:data::STRING AS event_data,\n            value:topics::ARRAY AS event_topics\n        FROM node_call,\n        LATERAL FLATTEN(input => eth_getLogs)\n    )\n    SELECT\n        case\n        when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$')\n        then 'Success'\n        else 'Error - Invalid Input'\n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        event_topics,\n        event_data\n    FROM node_flat\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5346644, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_si": {"name": "evm_latest_contract_events_si", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_si", "macro_sql": "{% macro evm_latest_contract_events_si(schema, blockchain, network) %}\n    WITH chainhead AS (\n        SELECT\n            {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n            CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex\n    ),\n    node_call AS (\n        SELECT\n            lower(address) AS contract_address,\n            {{ schema }}.udf_rpc_eth_get_logs(\n                OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n            ) AS eth_getLogs\n        FROM chainhead\n    ),\n    node_flat AS (\n        SELECT\n            contract_address,\n            utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n            value:transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n            utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n            value:removed::BOOLEAN AS event_removed,\n            value:data::STRING AS event_data,\n            value:topics::ARRAY AS event_topics\n        FROM node_call,\n        LATERAL FLATTEN(input => eth_getLogs)\n    )\n    SELECT\n        case\n        when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$')\n        and is_integer(lookback)\n        then 'Success'\n        else 'Error - Invalid Input'\n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        event_topics,\n        event_data\n    FROM node_flat\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5350626, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_a": {"name": "evm_latest_contract_events_a", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_a", "macro_sql": "{% macro evm_latest_contract_events_a(schema, blockchain, network) %}\n    WITH chainhead AS (\n        SELECT\n            {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n            CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n    ),\n    node_call AS (\n        SELECT\n            lower(address) AS contract_address,\n            {{ schema }}.udf_rpc_eth_get_logs(\n                OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n            ) AS eth_getLogs\n        FROM (\n            SELECT value::STRING AS address\n            FROM LATERAL FLATTEN(input => addresses)\n        ) inputs, chainhead\n    ),\n    node_flat AS (\n        SELECT\n            contract_address,\n            utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n            value:transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n            utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n            value:removed::BOOLEAN AS event_removed,\n            value:data::STRING AS event_data,\n            value:topics::ARRAY AS event_topics\n        FROM node_call,\n        LATERAL FLATTEN(input => eth_getLogs)\n    )\n    SELECT\n        case\n        when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$')\n        then 'Success'\n        else 'Error - Invalid Input'\n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        event_topics,\n        event_data\n    FROM node_flat\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5355692, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_ai": {"name": "evm_latest_contract_events_ai", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_ai", "macro_sql": "{% macro evm_latest_contract_events_ai(schema, blockchain, network) %}\n    WITH chainhead AS (\n        SELECT\n            {{schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n            CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex\n    ),\n    node_call AS (\n        SELECT\n            lower(address) AS contract_address,\n            {{ schema }}.udf_rpc_eth_get_logs(\n                OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n            ) AS eth_getLogs\n        FROM (\n            SELECT value::STRING AS address\n            FROM LATERAL FLATTEN(input => addresses)\n        ) inputs, chainhead\n    ),\n    node_flat AS (\n        SELECT\n            contract_address,\n            utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n            value:transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n            utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n            value:removed::BOOLEAN AS event_removed,\n            value:data::STRING AS event_data,\n            value:topics::ARRAY AS event_topics\n        FROM node_call,\n        LATERAL FLATTEN(input => eth_getLogs)\n    )\n    SELECT\n        case\n        when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$')\n        and is_integer(lookback)\n        then 'Success'\n        else 'Error - Invalid Input'\n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        event_topics,\n        event_data\n    FROM node_flat\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5359764, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_decoded_s": {"name": "evm_latest_contract_events_decoded_s", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_decoded_s", "macro_sql": "{% macro evm_latest_contract_events_decoded_s(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT lower(address::STRING) AS contract_address\n),\nchainhead AS (\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN {{ ref('_evm__abi_map') }}\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = '{{blockchain}}'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        {{ schema }}.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case\n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') then 'Success'\n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5366662, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_decoded_si": {"name": "evm_latest_contract_events_decoded_si", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_decoded_si", "macro_sql": "{% macro evm_latest_contract_events_decoded_si(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT lower(address::STRING) AS contract_address\n),\nchainhead AS (\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex,\n        lookback\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN {{ ref('_evm__abi_map') }}\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = '{{blockchain}}'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        {{ schema }}.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs,\n        lookback\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        lookback,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case\n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') and is_integer(n.lookback) then 'Success'\n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5373282, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_decoded_a": {"name": "evm_latest_contract_events_decoded_a", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_decoded_a", "macro_sql": "{% macro evm_latest_contract_events_decoded_a(schema, blockchain, network) %}\nWITH base AS (SELECT addresses),\ninputs AS (\n    SELECT lower(value::STRING) AS contract_address\n    FROM base, LATERAL FLATTEN(input => addresses)\n),\nchainhead AS (\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 100, 'XXXXXXXXXX'))) AS from_block_hex\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN {{ ref('_evm__abi_map') }}\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = '{{blockchain}}'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        {{ schema }}.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case\n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') then 'Success'\n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.537966, "supported_languages": null}, "macro.livequery_models.evm_latest_contract_events_decoded_ai": {"name": "evm_latest_contract_events_decoded_ai", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_latest_contract_events_decoded_ai", "macro_sql": "{% macro evm_latest_contract_events_decoded_ai(schema, blockchain, network) %}\nWITH base AS (SELECT addresses),\ninputs AS (\n    SELECT lower(value::STRING) AS contract_address\n    FROM base, LATERAL FLATTEN(input => addresses)\n),\nchainhead AS (\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - lookback, 'XXXXXXXXXX'))) AS from_block_hex,\n        lookback\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN {{ ref('_evm__abi_map') }}\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = '{{blockchain}}'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        {{ schema }}.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs,\n        lookback\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        lookback,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case\n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') and is_integer(n.lookback) then 'Success'\n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5386248, "supported_languages": null}, "macro.livequery_models.evm_contract_events": {"name": "evm_contract_events", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_contract_events", "macro_sql": "{% macro evm_contract_events(schema, blockchain, network) %}\n WITH chainhead AS (\n        SELECT\n            {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n            CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 200, 'XXXXXXXXXX'))) AS from_block_hex,\n            utils.udf_hex_to_int(chainhead_hex) - 200 as min_block_no\n    ),\n    node_call AS (\n        SELECT\n            lower(address) AS contract_address,\n            {{ schema }}.udf_rpc_eth_get_logs(\n                OBJECT_CONSTRUCT('address', address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n            ) AS eth_getLogs\n        FROM chainhead\n    ),\n    node_flat AS (\n        SELECT\n            contract_address,\n            utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n            value:transactionHash::STRING AS tx_hash,\n            utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n            utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n            value:removed::BOOLEAN AS event_removed,\n            value:data::STRING AS event_data,\n            value:topics::ARRAY AS event_topics\n        FROM node_call,\n        LATERAL FLATTEN(input => eth_getLogs)\n    )\n    SELECT\n        case\n        when REGEXP_LIKE(contract_address, '^0x([a-fA-F0-9]{40})$')\n        then 'Success'\n        else 'Error - Invalid Input'\n        end as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        event_topics,\n        event_data\n    FROM node_flat\n    UNION ALL\n    SELECT\n        'Success' as status,\n        '{{blockchain}}' AS blockchain,\n        '{{network}}' AS network,\n        tx_hash,\n        block_number,\n        event_index,\n        contract_address,\n        topics as event_topics,\n        data as event_data\n    from {{ ref('_eth__logs') }}\n    where contract_address = (select contract_address from node_call)\n    and block_number >= min_block\n    and block_number <= (select min_block_no from chainhead)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5391486, "supported_languages": null}, "macro.livequery_models.evm_contract_events_decoded": {"name": "evm_contract_events_decoded", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_abstractions.sql", "original_file_path": "macros/evm/evm_abstractions.sql", "unique_id": "macro.livequery_models.evm_contract_events_decoded", "macro_sql": "{% macro evm_contract_events_decoded(schema, blockchain, network) %}\nWITH inputs AS (\n    SELECT lower(address::STRING) AS contract_address\n),\nchainhead AS (\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', [])::STRING AS chainhead_hex,\n        CONCAT('0x', TRIM(TO_CHAR(utils.udf_hex_to_int(chainhead_hex) - 400, 'XXXXXXXXXX'))) AS from_block_hex,\n        utils.udf_hex_to_int(chainhead_hex) - 400 as min_block_no\n),\nabis AS (\n    SELECT\n        parent_contract_address,\n        event_name,\n        event_signature,\n        abi\n    FROM inputs\n    JOIN {{ ref('_evm__abi_map') }}\n        ON lower(contract_address) = parent_contract_address\n        AND blockchain = '{{blockchain}}'\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY contract_address, event_name ORDER BY end_block DESC) = 1\n),\nnode_call AS (\n    SELECT\n        inputs.contract_address,\n        {{ schema }}.udf_rpc_eth_get_logs(\n            OBJECT_CONSTRUCT('address', inputs.contract_address, 'fromBlock', from_block_hex, 'toBlock', chainhead_hex)\n        ) AS eth_getLogs\n    FROM inputs\n    JOIN chainhead ON 1=1\n),\nnode_flat AS (\n    SELECT\n        contract_address,\n        utils.udf_hex_to_int(value:blockNumber::STRING)::INT AS block_number,\n        value:transactionHash::STRING AS tx_hash,\n        utils.udf_hex_to_int(value:transactionIndex::STRING)::INT AS tx_index,\n        utils.udf_hex_to_int(value:logIndex::STRING)::INT AS event_index,\n        value:removed::BOOLEAN AS event_removed,\n        value:data::STRING AS event_data,\n        value:topics::ARRAY AS event_topics\n    FROM node_call,\n    LATERAL FLATTEN(input => eth_getLogs)\n),\ndecode_logs AS (\n    SELECT\n        contract_address,\n        block_number,\n        tx_hash,\n        tx_index,\n        event_index,\n        event_removed,\n        event_data,\n        event_topics,\n        utils.udf_evm_decode_log(\n            abi,\n            OBJECT_CONSTRUCT(\n                'topics',\n                event_topics,\n                'data',\n                event_data,\n                'address',\n                contract_address\n            )\n        )[0] AS decoded_data,\n        decoded_data:name::STRING AS event_name,\n        utils.udf_evm_transform_log(decoded_data) AS transformed\n    FROM node_flat\n    JOIN abis\n        ON contract_address = parent_contract_address\n        AND event_topics[0]::STRING = event_signature\n),\nfinal AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value:name = '' THEN CONCAT('anonymous_', v.index)\n                ELSE v.value:name\n            END,\n            v.value:value\n        ) AS decoded_flat\n    FROM decode_logs b,\n    LATERAL FLATTEN(input => transformed:data) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.event_topics,\n        b.event_data,\n        b.decoded_data,\n        transformed\n)\nSELECT\n    case\n    when REGEXP_LIKE(n.contract_address, '^0x([a-fA-F0-9]{40})$') and is_integer(min_block) then 'Success'\n    when f.event_name is null then 'Error - Contract ABI Not Found, submit ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/)'\n    else 'Error - Invalid Input'\n    end as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    n.tx_hash,\n    n.block_number,\n    n.event_index,\n    f.event_name,\n    n.contract_address,\n    n.event_topics,\n    n.event_data,\n    f.decoded_flat AS decoded_data\nFROM node_flat n\nleft join final f\non n.block_number = f.block_number\nand n.tx_hash = f.tx_hash\nand n.event_index = f.event_index\nunion all\nselect\n    'Success' as status,\n    '{{blockchain}}' AS blockchain,\n    '{{network}}' AS network,\n    tx_hash,\n    block_number,\n    event_index,\n    event_name,\n    contract_address,\n    topics as event_topics,\n    data as event_data,\n    decoded_log as decoded_data\nfrom {{ ref('_eth__decoded_logs') }}\n    where contract_address = (select contract_address from inputs)\n    and block_number >= min_block\n    and block_number <= (select min_block_no from chainhead)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5399354, "supported_languages": null}, "macro.livequery_models.config_evm_high_level_abstractions": {"name": "config_evm_high_level_abstractions", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm.yaml.sql", "original_file_path": "macros/evm/evm.yaml.sql", "unique_id": "macro.livequery_models.config_evm_high_level_abstractions", "macro_sql": "{% macro config_evm_high_level_abstractions(blockchain, network) -%}\n{#\n    This macro is used to generate the high level abstractions for an EVM\n    blockchain.\n #}\n{% set schema = blockchain ~ \"_\" ~ network %}\n- name: {{ schema -}}.tf_latest_native_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the latest block]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n    - |\n        The table has the following columns:\n        * `blockchain` - The blockchain\n        * `network` - The network\n        * `wallet_address` - The wallet address\n        * `symbol` - The symbol of the native asset\n        * `raw_balance` - The unadjusted native asset balance\n        * `balance` - The adjusted native asset balance\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balance at the latest block for a given address.$$\n  sql: |\n    {{ evm_latest_native_balance_string(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_native_balance\n  signature:\n    - [wallets, ARRAY, An array of addresses string to get the balance of at the latest block]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balances at the latest block for given addresses.$$\n  sql: |\n    {{ evm_latest_native_balance_array(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the latest block]\n    - [token, STRING, The address of the token to get the balance of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balance at the latest block for a given address and token address. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_latest_token_balance_ss(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the latest block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances at the latest block for a given address and multiple token addresses. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_latest_token_balance_sa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_token_balance\n  signature:\n    - [wallets, ARRAY, An array of addresses string to get the balance of at the latest block]\n    - [token, STRING, The address of the token to get the balance of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances at the latest block for multiple addresses and a single token address. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_latest_token_balance_as(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_token_balance\n  signature:\n    - [wallets, ARRAY, An array of addresses string to get the balance of at the latest block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances at the latest block for multiple addresses and multiple token addresses. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_latest_token_balance_aa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [token, STRING, The address of the token to get the balance of]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balance for a given address and token address at a specific block. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_ssi(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [token, STRING, The address of the token to get the balance of]\n    - [block_numbers, ARRAY, The block numbers to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for a given address and token address at multiple specific blocks. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_ssa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallets, ARRAY, The addresses to get the balance of at the input block]\n    - [token, STRING, The address of the token to get the balance of]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for multiple addresses and a given token addresses at a specific block. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_asi(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for a given address and multiple token addresses at a specific block. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_sai(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of]\n    - [block_numbers, ARRAY, The block numbers to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for a given address and multiple token addresses at multiple specific blocks. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_saa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallets, ARRAY, An array of address strings to get the balance of at the input block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for multiple addresses and multiple token addresses at a specific block. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_aai(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_token_balance\n  signature:\n    - [wallets, ARRAY, An array of address strings to get the balance of at the input block]\n    - [tokens, ARRAY, An array of address strings of the tokens to get the balance of]\n    - [block_numbers, ARRAY, The block numbers to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, token_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for multiple addresses and multiple token addresses at multiple specific blocks. Supports ERC20 and ERC721 tokens.$$\n  sql: |\n    {{ evm_historical_token_balance_aaa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_native_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balance for a given address at a specific block.$$\n  sql: |\n    {{ evm_historical_native_balance_si(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_native_balance\n  signature:\n    - [wallet, STRING, The address to get the balance of at the input block]\n    - [block_numbers, ARRAY, The block numbers to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balances for a given address at multiple specific blocks.$$\n  sql: |\n    {{ evm_historical_native_balance_sa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_native_balance\n  signature:\n    - [wallets, ARRAY, An array of address strings to get the balance of at the input block]\n    - [block_number, INTEGER, The block number to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balances for multiple addresses at a specific block.$$\n  sql: |\n    {{ evm_historical_native_balance_ai(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_historical_native_balance\n  signature:\n    - [wallets, ARRAY, An array of address strings to get the balance of at the input block]\n    - [block_numbers, ARRAY, The block numbers to get the balance at]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, wallet_address STRING, symbol STRING, block_number INTEGER, raw_balance STRING, balance FLOAT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native asset balances for multiple addresses at multiple specific blocks.$$\n  sql: |\n    {{ evm_historical_native_balance_aa(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events\n  signature:\n    - [address, STRING, The address of the contract to get the events of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest events emitted by a contract in the last 100 blocks.$$\n  sql: |\n    {{ evm_latest_contract_events_s(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events\n  signature:\n    - [address, STRING, The address of the contract to get the events of]\n    - [lookback, INTEGER, The number of blocks to look back. Please note there are RPC limitations on this method.]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest events emitted by a contract within the last `lookback` blocks. *Please note there are RPC limitations on this method.*$$\n  sql: |\n    {{ evm_latest_contract_events_si(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events\n  signature:\n    - [addresses, ARRAY, The addresses of the contracts to get the events of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest events emitted by multiple contracts in the last 100 blocks.$$\n  sql: |\n    {{ evm_latest_contract_events_a(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events\n  signature:\n    - [addresses, ARRAY, The addresses of the contracts to get the events of]\n    - [lookback, INTEGER, The number of blocks to look back. Please note there are RPC limitations on this method.]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest events emitted by multiple contracts within the last `lookback` blocks. *Please note there are RPC limitations on this method.*$$\n  sql: |\n    {{ evm_latest_contract_events_ai(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events_decoded\n  signature:\n    - [address, STRING, The address of the contract to get the decoded events of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$RReturns the latest decoded events emitted by a contract in the last 100 blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/).$$\n  sql: |\n    {{ evm_latest_contract_events_decoded_s(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events_decoded\n  signature:\n    - [addresses, ARRAY, The addresses of the contracts to get the decoded events of]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest decoded events emitted by multiple contracts in the last 100 blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/).$$\n  sql: |\n    {{ evm_latest_contract_events_decoded_a(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events_decoded\n  signature:\n    - [address, STRING, The address of the contract to get the decoded events of]\n    - [lookback, INTEGER, The number of blocks to look back. Please note there are RPC limitations on this method.]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest decoded events emitted by a contract within the last `lookback` blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/). *Please note there are RPC limitations on this method.*$$\n  sql: |\n    {{ evm_latest_contract_events_decoded_si(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_latest_contract_events_decoded\n  signature:\n    - [addresses, ARRAY, The addresses of the contracts to get the decoded events of]\n    - [lookback, INTEGER, The number of blocks to look back. Please note there are RPC limitations on this method.]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the latest decoded events emitted by multiple contracts within the last `lookback` blocks. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/). *Please note there are RPC limitations on this method.* $$\n  sql: |\n    {{ evm_latest_contract_events_decoded_ai(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_fact_blocks\n  signature:\n    - [block_height, INTEGER, The start block height to get the blocks from]\n    - [to_latest, BOOLEAN, Whether to continue fetching blocks until the latest block or not]\n  return_type:\n    - \"TABLE(block_number INTEGER, block_timestamp TIMESTAMP_NTZ, network STRING, blockchain STRING, tx_count INTEGER, difficulty INTEGER, total_difficulty INTEGER, extra_data STRING, gas_limit INTEGER, gas_used INTEGER, hash STRING, parent_hash STRING, miner STRING, nonce INTEGER, receipts_root STRING, sha3_uncles STRING, size INTEGER, uncle_blocks VARIANT, block_header_json OBJECT, excess_blob_gas INTEGER, blob_gas_used INTEGER, fact_blocks_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ, withdrawals VARIANT, withdrawals_root STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the block data for a given block height. If to_latest is true, it will continue fetching blocks until the latest block. Otherwise, it will fetch blocks until the block height is reached.$$\n  sql: |\n    {{ evm_live_view_fact_blocks(schema, blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_fact_event_logs\n  signature:\n    - [block_height, INTEGER, The start block height to get the logs from]\n    - [to_latest, BOOLEAN, Whether to continue fetching logs until the latest block or not]\n  return_type:\n    - \"TABLE(block_number INTEGER, block_timestamp TIMESTAMP_NTZ, tx_hash STRING, origin_function_signature STRING, origin_from_address STRING, origin_to_address STRING, event_index INTEGER, contract_address STRING, topics VARIANT, data STRING, event_removed BOOLEAN, tx_status STRING, _log_id STRING, fact_event_logs_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the logs for a given block height. If to_latest is true, it will continue fetching logs until the latest block. Otherwise, it will fetch logs until the block height is reached.$$\n  sql: |\n    {{ evm_live_view_fact_event_logs(schema, blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_fact_decoded_event_logs\n  signature:\n    - [block_height, INTEGER, The start block height to get the logs from]\n    - [to_latest, BOOLEAN, Whether to continue fetching logs until the latest block or not]\n  return_type:\n    - \"TABLE(block_number INTEGER, block_timestamp TIMESTAMP_NTZ, tx_hash STRING, event_index INTEGER, contract_address STRING, event_name STRING, decoded_log OBJECT, full_decoded_log VARIANT, fact_decoded_event_logs_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the decoded event logs data for a given block height. If to_latest is true, it will continue fetching blocks until the latest block. Otherwise, it will fetch blocks until the block height is reached.$$\n  sql: |\n    {{ evm_live_view_fact_decoded_event_logs(schema, blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_fact_decoded_traces\n  signature:\n    - [block_height, INTEGER, The start block height to get the logs from]\n    - [to_latest, BOOLEAN, Whether to continue fetching logs until the latest block or not]\n  return_type:\n    - \"TABLE(block_number INTEGER, tx_hash STRING, block_timestamp TIMESTAMP_NTZ, tx_status STRING, tx_position INTEGER, trace_index INTEGER, from_address STRING, to_address STRING, VALUE FLOAT, value_precise_raw STRING, value_precise STRING, gas INTEGER, gas_used INTEGER, TYPE STRING, identifier STRING, sub_traces INTEGER, error_reason STRING, trace_status STRING, input STRING, output STRING, function_name STRING, decoded_input_data VARIANT, decoded_output_data VARIANT, fact_decoded_traces_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the decoded traces data for a given block height. If to_latest is true,\n     it will continue fetching blocks until the latest block. Otherwise,\n     it will fetch blocks until the block height is reached.$$\n  sql: |\n    {{ evm_live_view_fact_decoded_traces(schema,\n    blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_fact_traces\n  signature:\n    - [block_height, INTEGER, The start block height to get the transfers from]\n    - [to_latest, BOOLEAN, Whether to continue fetching transfers until the latest block or not]\n  return_type:\n    - \"TABLE(tx_hash STRING, block_number NUMBER, block_timestamp TIMESTAMP_NTZ(9), from_address STRING, to_address STRING, value FLOAT, value_precise_raw STRING, value_precise STRING, gas NUMBER, gas_used NUMBER, input STRING, output STRING, TYPE STRING, identifier STRING, DATA OBJECT, tx_status STRING, sub_traces NUMBER, trace_status STRING, error_reason STRING, trace_index NUMBER, fact_traces_id STRING, inserted_timestamp TIMESTAMP_NTZ(9), modified_timestamp TIMESTAMP_NTZ(9))\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the traces for a given block height. If to_latest is true, it will continue fetching traces until the latest block. Otherwise, it will fetch traces until the block height is reached.$$\n  sql: |\n    {{ evm_live_view_fact_traces(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_fact_transactions\n  signature:\n    - [block_height, INTEGER, The start block height to get the transfers from]\n    - [to_latest, BOOLEAN, Whether to continue fetching transfers until the latest block or not]\n  return_type:\n    - \"TABLE(block_number NUMBER, block_timestamp TIMESTAMP_NTZ, block_hash STRING, tx_hash STRING, nonce NUMBER, POSITION NUMBER, origin_function_signature STRING, from_address STRING, to_address STRING, VALUE FLOAT, value_precise_raw STRING, value_precise STRING, tx_fee FLOAT, tx_fee_precise STRING, gas_price FLOAT, gas_limit NUMBER, gas_used NUMBER, cumulative_gas_used NUMBER, input_data STRING, status STRING, effective_gas_price FLOAT, max_fee_per_gas FLOAT, max_priority_fee_per_gas FLOAT, r STRING, s STRING, v STRING, tx_type NUMBER, chain_id NUMBER, blob_versioned_hashes ARRAY, max_fee_per_blob_gas NUMBER, blob_gas_used NUMBER, blob_gas_price NUMBER, fact_transactions_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the transactions for a given block height. If to_latest is true, it will continue fetching transactions until the latest block. Otherwise, it will fetch transactions until the block height is reached.$$\n  sql: |\n    {{ evm_live_view_fact_transactions(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_fact_token_balances\n  signature:\n    - [block_height, INTEGER, The start block height to get the transfers from]\n    - [to_latest, BOOLEAN, Whether to continue fetching transfers until the latest block or not]\n  return_type:\n    - \"TABLE(block_number NUMBER, block_timestamp TIMESTAMP_NTZ, address STRING, contract_address STRING, balance NUMBER(38,0), fact_token_balances_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token balances for a given block height. If to_latest is true, it will continue fetching transactions until the latest block. Otherwise, it will fetch transactions until the block height is reached.$$\n  sql: |\n    {{ evm_live_view_fact_token_balances(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_fact_eth_balances\n  signature:\n    - [block_height, INTEGER, The start block height to get the transfers from]\n    - [to_latest, BOOLEAN, Whether to continue fetching transfers until the latest block or not]\n  return_type:\n    - \"TABLE(block_number NUMBER, block_timestamp TIMESTAMP_NTZ, address STRING, balance NUMBER(38,0), fact_eth_balances_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the eth balances for a given block height. If to_latest is true, it will continue fetching transactions until the latest block. Otherwise, it will fetch transactions until the block height is reached.$$\n  sql: |\n    {{ evm_live_view_fact_eth_balances(schema,  blockchain, network) | indent(4) -}}\n\n\n- name: {{ schema -}}.tf_ez_decoded_event_logs\n  signature:\n    - [block_height, INTEGER, The start block height to get the logs from]\n    - [to_latest, BOOLEAN, Whether to continue fetching logs until the latest block or not]\n  return_type:\n    - \"TABLE(block_number INTEGER, block_timestamp TIMESTAMP_NTZ, tx_hash STRING, event_index INTEGER, contract_address STRING, contract_name STRING, event_name STRING, decoded_log OBJECT, full_decoded_log VARIANT, origin_function_signature STRING, origin_from_address STRING, origin_to_address STRING, topics VARIANT, data STRING, event_removed BOOLEAN, tx_status STRING, ez_decoded_event_logs_id STRING, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the ez decoded event logs data for a given block height. If to_latest is true, it will continue fetching blocks until the latest block. Otherwise, it will fetch blocks until the block height is reached.$$\n  sql: |\n    {{ evm_live_view_ez_decoded_event_logs(schema, blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_ez_native_transfers\n  signature:\n    - [block_height, INTEGER, The start block height to get the transfers from]\n    - [to_latest, BOOLEAN, Whether to continue fetching transfers until the latest block or not]\n  return_type:\n        - \"TABLE(tx_hash STRING, block_number NUMBER(38,0), block_timestamp TIMESTAMP_NTZ(9), tx_position NUMBER(38,0), trace_index NUMBER(19,0), identifier STRING, origin_from_address STRING, origin_to_address STRING, origin_function_signature STRING, from_address STRING, to_address STRING, amount FLOAT, amount_precise_raw STRING, amount_precise STRING, amount_usd FLOAT, ez_native_transfers_id STRING, inserted_timestamp TIMESTAMP_NTZ(9), modified_timestamp TIMESTAMP_NTZ(9))\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the native transfers for a given block height. If to_latest is true, it will continue fetching transfers until the latest block. Otherwise, it will fetch transfers until the block height is reached.$$\n  sql: |\n    {{ evm_live_view_ez_native_transfers(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_ez_token_transfers\n  signature:\n    - [block_height, INTEGER, The start block height to get the transfers from]\n    - [to_latest, BOOLEAN, Whether to continue fetching transfers until the latest block or not]\n  return_type:\n    - \"TABLE(block_number INTEGER, block_timestamp TIMESTAMP_NTZ, tx_hash STRING, event_index INTEGER, origin_function_signature STRING, origin_from_address STRING, origin_to_address STRING, contract_address STRING, from_address STRING, to_address STRING, raw_amount_precise STRING, raw_amount FLOAT, amount_precise FLOAT, amount FLOAT, amount_usd FLOAT, decimals INTEGER, symbol STRING, token_price FLOAT, has_decimal STRING, has_price STRING, _log_id STRING, ez_token_transfers_id STRING, _inserted_timestamp TIMESTAMP_NTZ, inserted_timestamp TIMESTAMP_NTZ, modified_timestamp TIMESTAMP_NTZ)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the token transfers for a given block height. If to_latest is true, it will continue fetching transfers until the latest block. Otherwise, it will fetch transfers until the block height is reached.$$\n  sql: |\n    {{ evm_live_view_ez_token_transfers(schema,  blockchain, network) | indent(4) -}}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.livequery_models.evm_latest_native_balance_string", "macro.livequery_models.evm_latest_native_balance_array", "macro.livequery_models.evm_latest_token_balance_ss", "macro.livequery_models.evm_latest_token_balance_sa", "macro.livequery_models.evm_latest_token_balance_as", "macro.livequery_models.evm_latest_token_balance_aa", "macro.livequery_models.evm_historical_token_balance_ssi", "macro.livequery_models.evm_historical_token_balance_ssa", "macro.livequery_models.evm_historical_token_balance_asi", "macro.livequery_models.evm_historical_token_balance_sai", "macro.livequery_models.evm_historical_token_balance_saa", "macro.livequery_models.evm_historical_token_balance_aai", "macro.livequery_models.evm_historical_token_balance_aaa", "macro.livequery_models.evm_historical_native_balance_si", "macro.livequery_models.evm_historical_native_balance_sa", "macro.livequery_models.evm_historical_native_balance_ai", "macro.livequery_models.evm_historical_native_balance_aa", "macro.livequery_models.evm_latest_contract_events_s", "macro.livequery_models.evm_latest_contract_events_si", "macro.livequery_models.evm_latest_contract_events_a", "macro.livequery_models.evm_latest_contract_events_ai", "macro.livequery_models.evm_latest_contract_events_decoded_s", "macro.livequery_models.evm_latest_contract_events_decoded_a", "macro.livequery_models.evm_latest_contract_events_decoded_si", "macro.livequery_models.evm_latest_contract_events_decoded_ai", "macro.livequery_models.evm_live_view_fact_blocks", "macro.livequery_models.evm_live_view_fact_event_logs", "macro.livequery_models.evm_live_view_fact_decoded_event_logs", "macro.livequery_models.evm_live_view_fact_decoded_traces", "macro.livequery_models.evm_live_view_fact_traces", "macro.livequery_models.evm_live_view_fact_transactions", "macro.livequery_models.evm_live_view_fact_token_balances", "macro.livequery_models.evm_live_view_fact_eth_balances", "macro.livequery_models.evm_live_view_ez_decoded_event_logs", "macro.livequery_models.evm_live_view_ez_native_transfers", "macro.livequery_models.evm_live_view_ez_token_transfers"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.55044, "supported_languages": null}, "macro.livequery_models.config_eth_high_level_abstractions": {"name": "config_eth_high_level_abstractions", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm.yaml.sql", "original_file_path": "macros/evm/evm.yaml.sql", "unique_id": "macro.livequery_models.config_eth_high_level_abstractions", "macro_sql": "{% macro config_eth_high_level_abstractions(blockchain, network) -%}\n{#\n    This macro is used to generate high level abstractions for Ethereum mainnet only.\n#}\n{% set schema = blockchain ~ \"_\" ~ network %}\n- name: {{ schema -}}.tf_all_contract_events\n  signature:\n    - [address, STRING, The address of the contracts to get the events of]\n    - [min_block, INTEGER, The minimum block number to get the events from]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, contract_address STRING, event_topics ARRAY, event_data STRING)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the events emitted by a contract from a specific block to the latest block.$$\n  sql: |\n    {{ evm_contract_events(schema,  blockchain, network) | indent(4) -}}\n\n- name: {{ schema -}}.tf_all_contract_events_decoded\n  signature:\n    - [address, STRING, The address of the contracts to get the events of]\n    - [min_block, INTEGER, The minimum block number to get the events from]\n  return_type:\n    - \"TABLE(status STRING, blockchain STRING, network STRING, tx_hash STRING, block_number INTEGER, event_index INTEGER, event_name STRING, contract_address STRING, event_topics ARRAY, event_data STRING, decoded_data OBJECT)\"\n  options: |\n    NOT NULL\n    RETURNS NULL ON NULL INPUT\n    VOLATILE\n    COMMENT = $$Returns the decoded events emitted by a contract from a specific block to the latest block. Submit missing ABIs [here](https://science.flipsidecrypto.xyz/abi-requestor/).$$\n  sql: |\n    {{ evm_contract_events_decoded(schema,  blockchain, network) | indent(4) -}}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.livequery_models.evm_contract_events", "macro.livequery_models.evm_contract_events_decoded"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.551136, "supported_languages": null}, "macro.livequery_models.evm_live_view_latest_block_height": {"name": "evm_live_view_latest_block_height", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_latest_block_height", "macro_sql": "{% macro evm_live_view_latest_block_height(schema, blockchain, network) %}\n    SELECT\n        {{ schema }}.udf_rpc('eth_blockNumber', []) as result,\n        utils.udf_hex_to_int(result)::integer AS latest_block_height,\n        COALESCE(\n            block_height,\n            latest_block_height\n        ) AS min_height,\n        iff(\n            COALESCE(to_latest, false),\n            latest_block_height,\n            min_height\n        ) AS max_height\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5557258, "supported_languages": null}, "macro.livequery_models.evm_live_view_target_blocks": {"name": "evm_live_view_target_blocks", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_target_blocks", "macro_sql": "{% macro evm_live_view_target_blocks(schema, blockchain, network, batch_size=10) %}\n    WITH heights AS (\n        {{ evm_live_view_latest_block_height(schema, blockchain, network) | indent(4) -}}\n    ),\n    block_spine AS (\n        SELECT\n            ROW_NUMBER() OVER (\n                ORDER BY\n                    NULL\n            ) - 1 + COALESCE(block_height, latest_block_height)::integer AS block_number,\n            min_height,\n            IFF(\n                COALESCE(to_latest, false),\n                block_height,\n                min_height\n            ) AS max_height,\n            latest_block_height\n        FROM\n            TABLE(generator(ROWCOUNT => 1000)),\n            heights qualify block_number BETWEEN min_height\n            AND max_height\n    )\n\n    SELECT\n        CEIL(ROW_NUMBER() OVER (ORDER BY block_number) / {{ batch_size }}) AS batch_id,\n        block_number,\n        latest_block_height\n    FROM block_spine\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_live_view_latest_block_height"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5561414, "supported_languages": null}, "macro.livequery_models.evm_batch_udf_api": {"name": "evm_batch_udf_api", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_batch_udf_api", "macro_sql": "{% macro evm_batch_udf_api(blockchain, network) %}\n    live.udf_api(\n        '{endpoint}'\n        ,params\n        ,concat_ws('/', 'integration', _utils.udf_provider(), '{{ blockchain }}', '{{ network }}')\n    )::VARIANT:data::ARRAY AS data\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5563776, "supported_languages": null}, "macro.livequery_models.evm_live_view_bronze_blocks": {"name": "evm_live_view_bronze_blocks", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_bronze_blocks", "macro_sql": "{% macro evm_live_view_bronze_blocks(schema, blockchain, network, table_name) %}\nWITH blocks_agg AS (\n    SELECT\n        batch_id,\n        ARRAY_AGG(\n            utils.udf_json_rpc_call(\n                'eth_getBlockByNumber',\n                [utils.udf_int_to_hex(block_number), true]\n            )\n        ) AS params\n    FROM\n        {{ table_name }}\n    GROUP BY batch_id\n), result as (\n    SELECT\n        {{ evm_batch_udf_api(blockchain, network) }}\n    FROM blocks_agg\n)\n, flattened as (\n    SELECT\n        COALESCE(value:result, {'error':value:error}) AS result\n    FROM result, LATERAL FLATTEN(input => result.data) v\n)\n\nSELECT\n    utils.udf_hex_to_int(result:number::STRING)::INT AS block_number,\n    result as data\nFROM flattened\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_batch_udf_api"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5567026, "supported_languages": null}, "macro.livequery_models.evm_live_view_bronze_receipts": {"name": "evm_live_view_bronze_receipts", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_bronze_receipts", "macro_sql": "{% macro evm_live_view_bronze_receipts(schema, blockchain, network, table_name) %}\nWITH blocks_agg AS (\n    SELECT\n        batch_id,\n        latest_block_height,\n        ARRAY_AGG(\n            utils.udf_json_rpc_call(\n                'eth_getBlockReceipts',\n                [utils.udf_int_to_hex(block_number)]\n            )\n        ) AS params\n    FROM\n        {{ table_name }}\n    GROUP BY 1,2\n),\n\nget_batch_result AS (\n    SELECT\n        latest_block_height,\n        {{ evm_batch_udf_api(blockchain, network) }}\n    FROM blocks_agg\n)\n\nSELECT\n    latest_block_height,\n    utils.udf_hex_to_int(w.value:blockNumber::STRING)::INT AS block_number,\n    w.value AS DATA\nFROM\n    (SELECT\n        latest_block_height,\n        v.value:result AS DATA\n    FROM get_batch_result,\n        LATERAL FLATTEN(data) v), LATERAL FLATTEN(data) w\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_batch_udf_api"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5570316, "supported_languages": null}, "macro.livequery_models.evm_live_view_bronze_logs": {"name": "evm_live_view_bronze_logs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_bronze_logs", "macro_sql": "{% macro evm_live_view_bronze_logs(table_name) %}\nSELECT\n    r.block_number,\n    v.value\nFROM\n    {{ table_name }} AS r,\n    lateral flatten(r.data:logs) v\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5572004, "supported_languages": null}, "macro.livequery_models.evm_live_view_bronze_transactions": {"name": "evm_live_view_bronze_transactions", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_bronze_transactions", "macro_sql": "{% macro evm_live_view_bronze_transactions(table_name) %}\nSELECT\n    block_number,\n    v.value as DATA\nFROM\n    {{ table_name }} AS r,\n    lateral flatten(r.data:transactions) v\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.557385, "supported_languages": null}, "macro.livequery_models.evm_live_view_bronze_traces": {"name": "evm_live_view_bronze_traces", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_bronze_traces", "macro_sql": "{% macro evm_live_view_bronze_traces(schema, blockchain, network, table_name)%}\nWITH blocks_agg AS (\n    SELECT\n        batch_id,\n        ARRAY_AGG(\n            utils.udf_json_rpc_call(\n                'debug_traceBlockByNumber',\n                [utils.udf_int_to_hex(s.block_number), {'tracer': 'callTracer'}],\n                s.block_number -- to put block_number in the id to retrieve the block numberlater\n            )\n        ) AS params\n    FROM\n        {{ table_name }} s\n    GROUP BY batch_id\n), result as (\n    SELECT\n        {{ evm_batch_udf_api(blockchain, network) }}\n    FROM blocks_agg\n), flattened as (\n    SELECT\n        value:id::INT AS block_number,\n        COALESCE(value:result, {'error':value:error}) AS result\n    FROM result, LATERAL FLATTEN(input => result.data) v\n)\n\nSELECT\n    s.block_number,\n    v.index::INT AS tx_position, -- mimic's streamline's logic to add tx_position\n    v.value:result AS full_traces,\n    SYSDATE() AS _inserted_timestamp\nFROM flattened s,\nLATERAL FLATTEN(input => result) v\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_batch_udf_api"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5577323, "supported_languages": null}, "macro.livequery_models.evm_live_view_bronze_token_balances": {"name": "evm_live_view_bronze_token_balances", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_bronze_token_balances", "macro_sql": "{% macro evm_live_view_bronze_token_balances(schema, blockchain, network, table_name) %}\nWITH block_spine AS (\n    SELECT\n        CEIL(ROW_NUMBER() OVER (ORDER BY block_number, address, contract_address) / 10) AS batch_id,\n        block_number,\n        address,\n        contract_address\n    FROM\n        {{ table_name }}\n),\nblocks_agg AS (\n    SELECT\n        batch_id,\n        ARRAY_AGG(\n            utils.udf_json_rpc_call(\n                'eth_call',\n                ARRAY_CONSTRUCT(\n                    OBJECT_CONSTRUCT(\n                        'to',\n                        contract_address,\n                        'data',\n                        CONCAT(\n                            '0x70a08231000000000000000000000000',\n                            SUBSTR(\n                                address,\n                                3\n                            )\n                        )\n                    ),\n                    utils.udf_int_to_hex(block_number)\n                ),\n                CONCAT(\n                    block_number,\n                    '-',\n                    address,\n                    '-',\n                    contract_address\n                )\n            )\n        ) AS params\n    FROM\n        block_spine\n    GROUP BY batch_id\n), result as (\n    SELECT\n        {{ evm_batch_udf_api(blockchain, network) }}\n    FROM blocks_agg\n)\n\nSELECT\n    SPLIT(value:id::STRING, '-')[0]::INT AS block_number,\n    SPLIT(value:id::STRING, '-')[1]::STRING AS address,\n    SPLIT(value:id::STRING, '-')[2]::STRING AS contract_address,\n    COALESCE(value:result, {'error':value:error}) AS DATA\nFROM result, LATERAL FLATTEN(input => result.data) v\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_batch_udf_api"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.558132, "supported_languages": null}, "macro.livequery_models.evm_live_view_bronze_eth_balances": {"name": "evm_live_view_bronze_eth_balances", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_bronze_eth_balances", "macro_sql": "{% macro evm_live_view_bronze_eth_balances(schema, blockchain, network, table_name) %}\nWITH block_spine AS (\n    SELECT\n        CEIL(ROW_NUMBER() OVER (ORDER BY block_number, address) / 10) AS batch_id,\n        block_number,\n        address\n    FROM\n        {{ table_name }}\n),\nblocks_agg AS (\n    SELECT\n        batch_id,\n        ARRAY_AGG(\n            utils.udf_json_rpc_call(\n                'eth_getBalance',\n                ARRAY_CONSTRUCT(address, utils.udf_int_to_hex(block_number)),\n                CONCAT(\n                    block_number,\n                    '-',\n                    address\n                )\n            )\n        ) AS params\n    FROM\n        block_spine\n    GROUP BY batch_id\n), result as (\n    SELECT\n        {{ evm_batch_udf_api(blockchain, network) }}\n    FROM blocks_agg\n)\n\nSELECT\n    SPLIT(value:id::STRING, '-')[0]::INT AS block_number,\n    SPLIT(value:id::STRING, '-')[1]::STRING AS address,\n    COALESCE(value:result, {'error':value:error}) AS DATA\nFROM result, LATERAL FLATTEN(input => result.data) v\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_batch_udf_api"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5585072, "supported_languages": null}, "macro.livequery_models.evm_live_view_silver_blocks": {"name": "evm_live_view_silver_blocks", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_silver_blocks", "macro_sql": "{% macro evm_live_view_silver_blocks(table_name) %}\nSELECT\n    block_number,\n    utils.udf_hex_to_int(DATA:timestamp::STRING)::TIMESTAMP AS block_timestamp,\n    utils.udf_hex_to_int(DATA:baseFeePerGas::STRING)::INT AS base_fee_per_gas,\n    utils.udf_hex_to_int(DATA:difficulty::STRING)::INT AS difficulty,\n    DATA:extraData::STRING AS extra_data,\n    utils.udf_hex_to_int(DATA:gasLimit::STRING)::INT AS gas_limit,\n    utils.udf_hex_to_int(DATA:gasUsed::STRING)::INT AS gas_used,\n    DATA:hash::STRING AS HASH,\n    DATA:logsBloom::STRING AS logs_bloom,\n    DATA:miner::STRING AS miner,\n    utils.udf_hex_to_int(DATA:nonce::STRING)::INT AS nonce,\n    utils.udf_hex_to_int(DATA:number::STRING)::INT AS NUMBER,\n    DATA:parentHash::STRING AS parent_hash,\n    DATA:receiptsRoot::STRING AS receipts_root,\n    DATA:sha3Uncles::STRING AS sha3_uncles,\n    utils.udf_hex_to_int(DATA:size::STRING)::INT AS SIZE,\n    DATA:stateRoot::STRING AS state_root,\n    utils.udf_hex_to_int(DATA:totalDifficulty::STRING)::INT AS total_difficulty,\n    ARRAY_SIZE(DATA:transactions) AS tx_count,\n    DATA:transactionsRoot::STRING AS transactions_root,\n    DATA:uncles AS uncles,\n    DATA:withdrawals AS withdrawals,\n    DATA:withdrawalsRoot::STRING AS withdrawals_root,\n    md5(\n        CAST(\n            COALESCE(\n                CAST(block_number AS TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) AS TEXT\n        )\n    ) AS blocks_id,\n    utils.udf_hex_to_int(DATA:blobGasUsed::STRING)::INT AS blob_gas_used,\n    utils.udf_hex_to_int(DATA:excessBlobGas::STRING)::INT AS excess_blob_gas\nFROM\n    {{ table_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.558789, "supported_languages": null}, "macro.livequery_models.evm_live_view_silver_receipts": {"name": "evm_live_view_silver_receipts", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_silver_receipts", "macro_sql": "{% macro evm_live_view_silver_receipts(table_name) %}\nSELECT\n    latest_block_height,\n    block_number,\n    DATA :blockHash::STRING AS block_hash,\n    utils.udf_hex_to_int(DATA :blockNumber::STRING)::INT AS blockNumber,\n    utils.udf_hex_to_int(DATA :cumulativeGasUsed::STRING)::INT AS cumulative_gas_used,\n    utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT / pow(10, 9) AS effective_gas_price,\n    DATA :from::STRING AS from_address,\n    utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS gas_used,\n    DATA :logs AS logs,\n    DATA :logsBloom::STRING AS logs_bloom,\n    utils.udf_hex_to_int(DATA :status::STRING)::INT AS status,\n    CASE\n        WHEN status = 1 THEN TRUE\n        ELSE FALSE\n    END AS tx_success,\n    CASE\n        WHEN status = 1 THEN 'SUCCESS'\n        ELSE 'FAIL'\n    END AS tx_status,\n    DATA :to::STRING AS to_address1,\n    CASE\n        WHEN to_address1 = '' THEN NULL\n        ELSE to_address1\n    END AS to_address,\n    DATA :transactionHash::STRING AS tx_hash,\n    utils.udf_hex_to_int(DATA :transactionIndex::STRING)::INT AS POSITION,\n    utils.udf_hex_to_int(DATA :type::STRING)::INT AS TYPE,\n    utils.udf_hex_to_int(DATA :effectiveGasPrice::STRING)::INT AS blob_gas_price,\n    utils.udf_hex_to_int(DATA :gasUsed::STRING)::INT AS blob_gas_used\nFROM\n    {{ table_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5590453, "supported_languages": null}, "macro.livequery_models.evm_live_view_silver_logs": {"name": "evm_live_view_silver_logs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_silver_logs", "macro_sql": "{% macro evm_live_view_silver_logs(silver_receipts, silver_transactions) %}\nSELECT\n    r.block_number,\n    txs.block_timestamp,\n    r.tx_hash,\n    txs.origin_function_signature,\n    r.from_address AS origin_from_address,\n    r.to_address AS origin_to_address,\n    utils.udf_hex_to_int(v.VALUE :logIndex::STRING)::INT AS event_index,\n    v.VALUE :address::STRING AS contract_address,\n    v.VALUE :blockHash::STRING AS block_hash,\n    v.VALUE :data::STRING AS DATA,\n    v.VALUE :removed::BOOLEAN AS event_removed,\n    v.VALUE :topics AS topics,\n    r.tx_status,\n    CASE\n        WHEN txs.block_timestamp IS NULL\n        OR txs.origin_function_signature IS NULL THEN TRUE\n        ELSE FALSE\n    END AS is_pending,\nFROM\n    {{ silver_receipts }} AS r\n    LEFT JOIN {{ silver_transactions }} AS txs on txs.tx_hash = r.tx_hash,\n    lateral flatten(r.logs) v\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5593224, "supported_languages": null}, "macro.livequery_models.evm_live_view_silver_transactions": {"name": "evm_live_view_silver_transactions", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_silver_transactions", "macro_sql": "{% macro evm_live_view_silver_transactions(bronze_transactions, silver_blocks, silver_receipts) %}\nSELECT\n    A.block_number AS block_number,\n    A.data :blockHash::STRING AS block_hash,\n    utils.udf_hex_to_int(A.data :blockNumber::STRING)::INT AS blockNumber,\n    utils.udf_hex_to_int(A.data :chainId::STRING)::INT AS chain_id,\n    A.data :from::STRING AS from_address,\n    utils.udf_hex_to_int(A.data :gas::STRING)::INT AS gas,\n    utils.udf_hex_to_int(A.data :gasPrice::STRING)::INT / pow(10, 9) AS gas_price,\n    A.data :hash::STRING AS tx_hash,\n    A.data :input::STRING AS input_data,\n    SUBSTR(input_data, 1, 10) AS origin_function_signature,\n    utils.udf_hex_to_int(A.data :maxFeePerGas::STRING)::INT / pow(10, 9) AS max_fee_per_gas,\n    utils.udf_hex_to_int(\n        A.data :maxPriorityFeePerGas::STRING\n    )::INT / pow(10, 9) AS max_priority_fee_per_gas,\n    utils.udf_hex_to_int(A.data :nonce::STRING)::INT AS nonce,\n    A.data :r::STRING AS r,\n    A.data :s::STRING AS s,\n    A.data :to::STRING AS to_address1,\n    utils.udf_hex_to_int(A.data :transactionIndex::STRING)::INT AS POSITION,\n    A.data :type::STRING AS TYPE,\n    A.data :v::STRING AS v,\n    utils.udf_hex_to_int(A.data :value::STRING) AS value_precise_raw,\n    value_precise_raw * power(10, -18) AS value_precise,\n    value_precise::FLOAT AS VALUE,\n    A.data :accessList AS access_list,\n    A.data,\n    A.data: blobVersionedHashes::ARRAY AS blob_versioned_hashes,\n    utils.udf_hex_to_int(A.data: maxFeePerGas::STRING)::INT AS max_fee_per_blob_gas,\n    block_timestamp,\n    CASE\n        WHEN block_timestamp IS NULL\n        OR tx_status IS NULL THEN TRUE\n        ELSE FALSE\n    END AS is_pending,\n    r.gas_used,\n    tx_success,\n    tx_status,\n    cumulative_gas_used,\n    effective_gas_price,\n    utils.udf_hex_to_int(A.data :gasPrice) * power(10, -18) * r.gas_used AS tx_fee_precise,\n    COALESCE(tx_fee_precise::FLOAT, 0) AS tx_fee,\n    r.type as tx_type,\n    r.blob_gas_used,\n    r.blob_gas_price,\nFROM\n    {{ bronze_transactions }} AS A\n    LEFT JOIN {{ silver_blocks }} AS b on b.block_number = A.block_number\n    LEFT JOIN {{ silver_receipts }} AS r on r.tx_hash = A.data :hash::STRING\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5597193, "supported_languages": null}, "macro.livequery_models.evm_live_view_silver_traces": {"name": "evm_live_view_silver_traces", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_silver_traces", "macro_sql": "{% macro evm_live_view_silver_traces(raw_traces) %}\nflatten_traces AS (\n    SELECT\n        block_number,\n        tx_position,\n        IFF(\n            path IN (\n                'result',\n                'result.value',\n                'result.type',\n                'result.to',\n                'result.input',\n                'result.gasUsed',\n                'result.gas',\n                'result.from',\n                'result.output',\n                'result.error',\n                'result.revertReason',\n                'gasUsed',\n                'gas',\n                'type',\n                'to',\n                'from',\n                'value',\n                'input',\n                'error',\n                'output',\n                'revertReason'\n            ),\n            'ORIGIN',\n            REGEXP_REPLACE(REGEXP_REPLACE(path, '[^0-9]+', '_'), '^_|_$', '')\n        ) AS trace_address,\n        _inserted_timestamp,\n        OBJECT_AGG(\n            key,\n            VALUE\n        ) AS trace_json,\n        CASE\n            WHEN trace_address = 'ORIGIN' THEN NULL\n            WHEN POSITION(\n                '_' IN trace_address\n            ) = 0 THEN 'ORIGIN'\n            ELSE REGEXP_REPLACE(\n                trace_address,\n                '_[0-9]+$',\n                '',\n                1,\n                1\n            )\n        END AS parent_trace_address,\n        SPLIT(\n            trace_address,\n            '_'\n        ) AS str_array\n    FROM\n        {{ raw_traces }},\n        TABLE(\n            FLATTEN(\n                input => PARSE_JSON(full_traces),\n                recursive => TRUE\n            )\n        ) f\n    WHERE\n        f.index IS NULL\n        AND f.key != 'calls'\n        AND f.path != 'result'\n    GROUP BY\n        block_number,\n        tx_position,\n        trace_address,\n        _inserted_timestamp\n),\nsub_traces AS (\n    SELECT\n        block_number,\n        tx_position,\n        parent_trace_address,\n        COUNT(*) AS sub_traces\n    FROM\n        flatten_traces\n    GROUP BY\n        block_number,\n        tx_position,\n        parent_trace_address\n),\nnum_array AS (\n    SELECT\n        block_number,\n        tx_position,\n        trace_address,\n        ARRAY_AGG(flat_value) AS num_array\n    FROM\n        (\n            SELECT\n                block_number,\n                tx_position,\n                trace_address,\n                IFF(\n                    VALUE :: STRING = 'ORIGIN',\n                    -1,\n                    VALUE :: INT\n                ) AS flat_value\n            FROM\n                flatten_traces,\n                LATERAL FLATTEN (\n                    input => str_array\n                )\n        )\n    GROUP BY\n        block_number,\n        tx_position,\n        trace_address\n),\ncleaned_traces AS (\n    SELECT\n        b.block_number,\n        b.tx_position,\n        b.trace_address,\n        IFNULL(\n            sub_traces,\n            0\n        ) AS sub_traces,\n        num_array,\n        ROW_NUMBER() over (\n            PARTITION BY b.block_number,\n            b.tx_position\n            ORDER BY\n                num_array ASC\n        ) - 1 AS trace_index,\n        trace_json,\n        b._inserted_timestamp\n    FROM\n        flatten_traces b\n        LEFT JOIN sub_traces s\n        ON b.block_number = s.block_number\n        AND b.tx_position = s.tx_position\n        AND b.trace_address = s.parent_trace_address\n        JOIN num_array n\n        ON b.block_number = n.block_number\n        AND b.tx_position = n.tx_position\n        AND b.trace_address = n.trace_address\n),\nfinal_traces AS (\n    SELECT\n        tx_position,\n        trace_index,\n        block_number,\n        trace_address,\n        trace_json :error :: STRING AS error_reason,\n        trace_json :from :: STRING AS from_address,\n        trace_json :to :: STRING AS to_address,\n        IFNULL(\n            utils.udf_hex_to_int(\n                trace_json :value :: STRING\n            ),\n            '0'\n        ) AS eth_value_precise_raw,\n        ethereum.utils.udf_decimal_adjust(\n            eth_value_precise_raw,\n            18\n        ) AS eth_value_precise,\n        eth_value_precise :: FLOAT AS eth_value,\n        utils.udf_hex_to_int(\n            trace_json :gas :: STRING\n        ) :: INT AS gas,\n        utils.udf_hex_to_int(\n            trace_json :gasUsed :: STRING\n        ) :: INT AS gas_used,\n        trace_json :input :: STRING AS input,\n        trace_json :output :: STRING AS output,\n        trace_json :type :: STRING AS TYPE,\n        concat_ws(\n            '_',\n            TYPE,\n            trace_address\n        ) AS identifier,\n        concat_ws(\n            '-',\n            block_number,\n            tx_position,\n            identifier\n        ) AS _call_id,\n        _inserted_timestamp,\n        trace_json AS DATA,\n        sub_traces\n    FROM\n        cleaned_traces\n),\nnew_records AS (\n    SELECT\n        f.block_number,\n        t.tx_hash,\n        t.block_timestamp,\n        t.tx_status,\n        f.tx_position,\n        f.trace_index,\n        f.from_address,\n        f.to_address,\n        f.eth_value_precise_raw,\n        f.eth_value_precise,\n        f.eth_value,\n        f.gas,\n        f.gas_used,\n        f.input,\n        f.output,\n        f.type,\n        f.identifier,\n        f.sub_traces,\n        f.error_reason,\n        IFF(\n            f.error_reason IS NULL,\n            'SUCCESS',\n            'FAIL'\n        ) AS trace_status,\n        f.data,\n        IFF(\n            t.tx_hash IS NULL\n            OR t.block_timestamp IS NULL\n            OR t.tx_status IS NULL,\n            TRUE,\n            FALSE\n        ) AS is_pending,\n        f._call_id,\n        f._inserted_timestamp\n    FROM\n        final_traces f\n        LEFT OUTER JOIN transactions t\n        ON f.tx_position = t.position\n        AND f.block_number = t.block_number\n),\ntraces_final AS (\n    SELECT\n        block_number,\n        tx_hash,\n        block_timestamp,\n        tx_status,\n        tx_position,\n        trace_index,\n        from_address,\n        to_address,\n        eth_value_precise_raw,\n        eth_value_precise,\n        eth_value,\n        gas,\n        gas_used,\n        input,\n        output,\n        TYPE,\n        identifier,\n        sub_traces,\n        error_reason,\n        trace_status,\n        DATA,\n        is_pending,\n        _call_id,\n        _inserted_timestamp\n    FROM\n        new_records\n)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5604131, "supported_languages": null}, "macro.livequery_models.evm_live_view_silver_token_balances": {"name": "evm_live_view_silver_token_balances", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_silver_token_balances", "macro_sql": "{% macro evm_live_view_silver_token_balances(schema, blockchain, network) %}\nWITH silver_logs AS (\n    SELECT\n        CONCAT('0x', SUBSTR(l.topics [1] :: STRING, 27, 42)) AS address1,\n        CONCAT('0x', SUBSTR(l.topics [2] :: STRING, 27, 42)) AS address2,\n        l.contract_address,\n        l.block_timestamp,\n        l.block_number\n    FROM\n    (\n        {{ evm_live_view_fact_event_logs(schema, blockchain, network) | indent(4) -}}\n    ) l\n    WHERE\n        (\n            l.topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n            OR (\n                l.topics [0] :: STRING = '0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65'\n                AND l.contract_address = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n            )\n            OR (\n                l.topics [0] :: STRING = '0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c'\n                AND l.contract_address = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'\n            )\n        )\n),\n\ntransfers AS (\n    SELECT\n        DISTINCT block_number,\n        block_timestamp,\n        contract_address,\n        address1 AS address\n    FROM\n        silver_logs\n    WHERE\n        address1 IS NOT NULL\n        AND address1 <> '0x0000000000000000000000000000000000000000'\n    UNION\n    SELECT\n        DISTINCT block_number,\n        block_timestamp,\n        contract_address,\n        address2 AS address\n    FROM\n        silver_logs\n    WHERE\n        address2 IS NOT NULL\n        AND address2 <> '0x0000000000000000000000000000000000000000'\n),\n\nbalances AS (\n    {{ evm_live_view_bronze_token_balances(schema, blockchain, network, 'transfers') | indent(4) -}}\n)\n\nSELECT\n    b.block_number,\n    block_timestamp,\n    address,\n    contract_address,\n    IFF(DATA :: STRING = '{}', NULL, DATA :: STRING) AS casted_data,\n    CASE\n        WHEN\n            LENGTH(\n                casted_data\n            ) <= 4300\n            AND casted_data IS NOT NULL THEN LEFT(casted_data, 66)\n        ELSE NULL\n        END\n    AS hex_balance,\n    TRY_TO_NUMBER(\n        CASE\n            WHEN LENGTH(\n                hex_balance\n            ) <= 4300\n            AND hex_balance IS NOT NULL THEN utils.udf_hex_to_int(hex_balance)\n            ELSE NULL\n        END\n    ) AS balance,\n    SYSDATE() AS _inserted_timestamp,\n    cast(\n        coalesce(\n            cast(block_number as TEXT),\n            '_dbt_utils_surrogate_key_null_'\n        ) || '-' ||\n        coalesce(\n            cast(address as TEXT),\n            '_dbt_utils_surrogate_key_null_'\n        ) || '-' ||\n        coalesce(\n            cast(contract_address as TEXT),\n            '_dbt_utils_surrogate_key_null_'\n        ) as TEXT\n    ) AS id,\n    id AS token_balances_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM balances b\nLEFT JOIN (\n    SELECT DISTINCT block_number, block_timestamp FROM transfers\n) USING (block_number)\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_live_view_fact_event_logs", "macro.livequery_models.evm_live_view_bronze_token_balances"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5610797, "supported_languages": null}, "macro.livequery_models.evm_live_view_silver_eth_balances": {"name": "evm_live_view_silver_eth_balances", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_silver_eth_balances", "macro_sql": "{% macro evm_live_view_silver_eth_balances(schema, blockchain, network) %}\nWITH silver_traces AS (\n    SELECT\n        block_timestamp,\n        block_number,\n        from_address,\n        to_address\n    FROM\n    (\n        {{ evm_live_view_fact_traces(schema, blockchain, network) | indent(4) -}}\n    ) l\n    WHERE\n        VALUE > 0 -- VALUE is the amount of ETH transferred\n        AND trace_status = 'SUCCESS'\n        AND tx_status = 'SUCCESS'\n),\n\nstacked AS (\n    SELECT\n        DISTINCT block_number,\n        block_timestamp,\n        from_address AS address\n    FROM\n        silver_traces\n    WHERE\n        from_address IS NOT NULL\n        AND from_address <> '0x0000000000000000000000000000000000000000'\n    UNION\n    SELECT\n        DISTINCT block_number,\n        block_timestamp,\n        to_address AS address\n    FROM\n        silver_traces\n    WHERE\n        to_address IS NOT NULL\n        AND to_address <> '0x0000000000000000000000000000000000000000'\n),\n\neth_balances AS (\n    {{ evm_live_view_bronze_eth_balances(schema, blockchain, network, 'stacked') | indent(4) -}}\n)\n\nSELECT\n    block_number,\n    block_timestamp,\n    address,\n    IFF(DATA :: STRING = '{}', NULL, DATA :: STRING) AS casted_data,\n    CASE\n        WHEN casted_data IS NOT NULL THEN casted_data\n        ELSE NULL\n        END\n    AS hex_balance,\n    TRY_TO_NUMBER(\n        CASE\n            WHEN hex_balance IS NOT NULL THEN utils.udf_hex_to_int(hex_balance)\n            ELSE NULL\n        END\n    ) AS balance,\n    SYSDATE() AS _inserted_timestamp,\n    cast(\n        coalesce(\n            cast(block_number as TEXT),\n            '_dbt_utils_surrogate_key_null_'\n        ) || '-' ||\n        coalesce(\n            cast(address as TEXT),\n            '_dbt_utils_surrogate_key_null_'\n        ) as TEXT\n    ) AS id,\n    id AS eth_balances_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM eth_balances\nLEFT JOIN (\n    SELECT DISTINCT block_number, block_timestamp FROM stacked\n) USING (block_number)\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_live_view_fact_traces", "macro.livequery_models.evm_live_view_bronze_eth_balances"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5616822, "supported_languages": null}, "macro.livequery_models.evm_live_view_fact_blocks": {"name": "evm_live_view_fact_blocks", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_fact_blocks", "macro_sql": "{% macro evm_live_view_fact_blocks(schema, blockchain, network) %}\nWITH spine AS (\n        {{ evm_live_view_target_blocks(schema, blockchain, network) | indent(4) -}}\n    ),\n    raw_block_txs AS (\n        {{ evm_live_view_bronze_blocks(schema, blockchain, network, 'spine') | indent(4) -}}\n    ),\n    silver_blocks AS (\n        {{ evm_live_view_silver_blocks('raw_block_txs') | indent(4) -}}\n    )\n    select\n        block_number,\n        block_timestamp,\n        '{{ network }}' AS network,\n        '{{ blockchain }}' AS blockchain,\n        tx_count,\n        difficulty,\n        total_difficulty,\n        extra_data,\n        gas_limit,\n        gas_used,\n        HASH,\n        parent_hash,\n        miner,\n        nonce,\n        receipts_root,\n        sha3_uncles,\n        SIZE,\n        uncles AS uncle_blocks,\n        OBJECT_CONSTRUCT(\n            'baseFeePerGas',\n            base_fee_per_gas,\n            'difficulty',\n            difficulty,\n            'extraData',\n            extra_data,\n            'gasLimit',\n            gas_limit,\n            'gasUsed',\n            gas_used,\n            'hash',\n            HASH,\n            'logsBloom',\n            logs_bloom,\n            'miner',\n            miner,\n            'nonce',\n            nonce,\n            'number',\n            NUMBER,\n            'parentHash',\n            parent_hash,\n            'receiptsRoot',\n            receipts_root,\n            'sha3Uncles',\n            sha3_uncles,\n            'size',\n            SIZE,\n            'stateRoot',\n            state_root,\n            'timestamp',\n            block_timestamp,\n            'totalDifficulty',\n            total_difficulty,\n            'transactionsRoot',\n            transactions_root,\n            'uncles',\n            uncles,\n            'excessBlobGas',\n            excess_blob_gas,\n            'blobGasUsed',\n            blob_gas_used\n        ) AS block_header_json,\n        excess_blob_gas,\n        blob_gas_used,\n        block_number::STRING AS fact_blocks_id,\n        SYSDATE() AS inserted_timestamp,\n        SYSDATE() AS modified_timestamp,\n        withdrawals,\n        withdrawals_root\n    from silver_blocks\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_live_view_target_blocks", "macro.livequery_models.evm_live_view_bronze_blocks", "macro.livequery_models.evm_live_view_silver_blocks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5624576, "supported_languages": null}, "macro.livequery_models.evm_live_view_fact_event_logs": {"name": "evm_live_view_fact_event_logs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_fact_event_logs", "macro_sql": "{% macro evm_live_view_fact_event_logs(schema, blockchain, network) %}\nWITH spine AS (\n    {{ evm_live_view_target_blocks(schema, blockchain, network, 5) | indent(4) -}}\n),\nraw_block_txs AS (\n    {{ evm_live_view_bronze_blocks(schema, blockchain, network, 'spine') | indent(4) -}}\n),\nraw_receipts AS (\n    {{ evm_live_view_bronze_receipts(schema, blockchain, network, 'spine') | indent(4) -}}\n),\nraw_logs AS (\n    {{ evm_live_view_bronze_logs('raw_receipts') | indent(4) -}}\n),\nraw_transactions AS (\n    {{ evm_live_view_bronze_transactions('raw_block_txs') | indent(4) -}}\n),\nblocks AS (\n    {{ evm_live_view_silver_blocks('raw_block_txs') | indent(4) -}}\n),\nreceipts AS (\n    {{ evm_live_view_silver_receipts('raw_receipts') | indent(4) -}}\n),\ntransactions AS (\n    {{ evm_live_view_silver_transactions('raw_transactions', 'blocks', 'receipts') | indent(4) -}}\n),\nlogs AS (\n    {{ evm_live_view_silver_logs('receipts', 'transactions') | indent(4) -}}\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    event_index,\n    contract_address,\n    topics,\n    DATA,\n    event_removed,\n    tx_status,\n    CONCAT(\n        tx_hash :: STRING,\n        '-',\n        event_index :: STRING\n    ) AS _log_id,\n    md5(\n        cast(\n            coalesce(\n                cast(tx_hash as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) || '-' || coalesce(\n                cast(event_index as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) as TEXT\n        )\n    ) AS fact_event_logs_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM logs\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_live_view_target_blocks", "macro.livequery_models.evm_live_view_bronze_blocks", "macro.livequery_models.evm_live_view_bronze_receipts", "macro.livequery_models.evm_live_view_bronze_logs", "macro.livequery_models.evm_live_view_bronze_transactions", "macro.livequery_models.evm_live_view_silver_blocks", "macro.livequery_models.evm_live_view_silver_receipts", "macro.livequery_models.evm_live_view_silver_transactions", "macro.livequery_models.evm_live_view_silver_logs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5637586, "supported_languages": null}, "macro.livequery_models.evm_live_view_fact_decoded_event_logs": {"name": "evm_live_view_fact_decoded_event_logs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_fact_decoded_event_logs", "macro_sql": "{% macro evm_live_view_fact_decoded_event_logs(schema, blockchain, network) %}\nWITH _ez_decoded_event_logs AS (\n    {{ evm_live_view_ez_decoded_event_logs(schema, blockchain, network) | indent(4) -}}\n)\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_index,\n    contract_address,\n    event_name,\n    decoded_log,\n    full_decoded_log,\n    fact_decoded_event_logs_id,\n    inserted_timestamp,\n    modified_timestamp\nFROM _ez_decoded_event_logs\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_live_view_ez_decoded_event_logs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5640824, "supported_languages": null}, "macro.livequery_models.evm_live_view_fact_transactions": {"name": "evm_live_view_fact_transactions", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_fact_transactions", "macro_sql": "{% macro evm_live_view_fact_transactions(schema, blockchain, network) %}\n\nWITH spine AS (\n    {{ evm_live_view_target_blocks(schema, blockchain, network, 5) | indent(4) -}}\n),\nraw_receipts AS (\n    {{ evm_live_view_bronze_receipts(schema, blockchain, network, 'spine') | indent(4) -}}\n),\nraw_block_txs AS (\n    {{ evm_live_view_bronze_blocks(schema, blockchain, network, 'spine') | indent(4) -}}\n),\nraw_transactions AS (\n    {{ evm_live_view_bronze_transactions('raw_block_txs') | indent(4) -}}\n),\nblocks AS (\n    {{ evm_live_view_silver_blocks('raw_block_txs') | indent(4) -}}\n),\nreceipts AS (\n    {{ evm_live_view_silver_receipts('raw_receipts') | indent(4) -}}\n),\ntransactions AS (\n    {{ evm_live_view_silver_transactions('raw_transactions', 'blocks', 'receipts') | indent(4) -}}\n)\nSELECT\n    block_number,\n    block_timestamp,\n    block_hash,\n    tx_hash,\n    nonce,\n    POSITION,\n    origin_function_signature,\n    from_address,\n    to_address1 as to_address,\n    VALUE,\n    value_precise_raw,\n    value_precise::STRING as value_precise,\n    tx_fee,\n    tx_fee_precise::STRING as tx_fee_precise,\n    gas_price,\n    gas AS gas_limit,\n    gas_used,\n    cumulative_gas_used,\n    input_data,\n    tx_status AS status,\n    effective_gas_price,\n    max_fee_per_gas,\n    max_priority_fee_per_gas,\n    r,\n    s,\n    v,\n    tx_type,\n    chain_id,\n    blob_versioned_hashes,\n    max_fee_per_blob_gas,\n    blob_gas_used,\n    blob_gas_price,\n    md5(\n        cast(\n            coalesce(\n                cast(tx_hash as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) as TEXT\n        )\n    ) AS fact_transactions_id,\n    SYSDATE() inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM\n    transactions\n\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_live_view_target_blocks", "macro.livequery_models.evm_live_view_bronze_receipts", "macro.livequery_models.evm_live_view_bronze_blocks", "macro.livequery_models.evm_live_view_bronze_transactions", "macro.livequery_models.evm_live_view_silver_blocks", "macro.livequery_models.evm_live_view_silver_receipts", "macro.livequery_models.evm_live_view_silver_transactions"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5651784, "supported_languages": null}, "macro.livequery_models.evm_live_view_fact_traces": {"name": "evm_live_view_fact_traces", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_fact_traces", "macro_sql": "{% macro evm_live_view_fact_traces(schema, blockchain, network) %}\nWITH spine AS (\n    {{ evm_live_view_target_blocks(schema, blockchain, network) | indent(4) -}}\n),\nraw_receipts AS (\n    {{ evm_live_view_bronze_receipts(schema, blockchain, network, 'spine') | indent(4) -}}\n),\nraw_block_txs AS (\n    {{ evm_live_view_bronze_blocks(schema, blockchain, network, 'spine') | indent(4) -}}\n),\nraw_transactions AS (\n    {{ evm_live_view_bronze_transactions('raw_block_txs') | indent(4) -}}\n),\nblocks AS (\n    {{ evm_live_view_silver_blocks('raw_block_txs') | indent(4) -}}\n),\nreceipts AS (\n    {{ evm_live_view_silver_receipts('raw_receipts') | indent(4) -}}\n),\ntransactions AS (\n    {{ evm_live_view_silver_transactions('raw_transactions', 'blocks', 'receipts') | indent(4) -}}\n),\nraw_traces AS (\n    {{ evm_live_view_bronze_traces(schema, blockchain, network, 'spine') | indent(4) -}}\n),\n\n{{ evm_live_view_silver_traces('raw_traces') | indent(4) -}}\n\nSELECT\n    tx_hash,\n    block_number,\n    block_timestamp,\n    from_address,\n    to_address,\n    eth_value AS VALUE,\n    eth_value_precise_raw AS value_precise_raw,\n    eth_value_precise AS value_precise,\n    gas,\n    gas_used,\n    input,\n    output,\n    TYPE,\n    identifier,\n    DATA,\n    tx_status,\n    sub_traces,\n    trace_status,\n    error_reason,\n    trace_index,\n    md5(\n        cast(\n            coalesce(\n                cast(tx_hash as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) || '-' || coalesce(\n                cast(trace_index as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) as TEXT\n        )\n    ) as fact_traces_id,\n    COALESCE(\n        _inserted_timestamp,\n        '2000-01-01'\n    ) AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM traces_final\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_live_view_target_blocks", "macro.livequery_models.evm_live_view_bronze_receipts", "macro.livequery_models.evm_live_view_bronze_blocks", "macro.livequery_models.evm_live_view_bronze_transactions", "macro.livequery_models.evm_live_view_silver_blocks", "macro.livequery_models.evm_live_view_silver_receipts", "macro.livequery_models.evm_live_view_silver_transactions", "macro.livequery_models.evm_live_view_bronze_traces", "macro.livequery_models.evm_live_view_silver_traces"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5669923, "supported_languages": null}, "macro.livequery_models.evm_live_view_fact_decoded_traces": {"name": "evm_live_view_fact_decoded_traces", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_fact_decoded_traces", "macro_sql": "{% macro evm_live_view_fact_decoded_traces(schema, blockchain, network) %}\nWITH spine AS (\n    {{ evm_live_view_target_blocks(schema, blockchain, network, 5) | indent(4) -}}\n),\nraw_receipts AS (\n    {{ evm_live_view_bronze_receipts(schema, blockchain, network, 'spine') | indent(4) -}}\n),\nraw_block_txs AS (\n    {{ evm_live_view_bronze_blocks(schema, blockchain, network, 'spine') | indent(4) -}}\n),\nraw_transactions AS (\n    {{ evm_live_view_bronze_transactions('raw_block_txs') | indent(4) -}}\n),\nblocks AS (\n    {{ evm_live_view_silver_blocks('raw_block_txs') | indent(4) -}}\n),\nreceipts AS (\n    {{ evm_live_view_silver_receipts('raw_receipts') | indent(4) -}}\n),\ntransactions AS (\n    {{ evm_live_view_silver_transactions('raw_transactions', 'blocks', 'receipts') | indent(4) -}}\n),\nraw_traces AS (\n    {{ evm_live_view_bronze_traces(schema, blockchain, network, 'spine') | indent(4) -}}\n),\n\n{{ evm_live_view_silver_traces('raw_traces') | indent(4) -}}\n,\n\ndecoded_traces AS (\n    SELECT\n        t.block_number,\n        t.tx_hash,\n        t.block_timestamp,\n        t.tx_status,\n        t.tx_position,\n        t.trace_index,\n        t.from_address,\n        t.to_address,\n        t.eth_value AS VALUE,\n        t.eth_value_precise_raw AS value_precise_raw,\n        t.eth_value_precise AS value_precise,\n        t.gas,\n        t.gas_used,\n        t.TYPE AS TYPE,\n        t.identifier,\n        t.sub_traces,\n        t.error_reason,\n        t.trace_status,\n        A.abi AS abi,\n        A.function_name AS function_name,\n        CASE\n            WHEN TYPE = 'DELEGATECALL' THEN from_address\n            ELSE to_address\n        END AS abi_address,\n        t.input AS input,\n        COALESCE(\n            t.output,\n            '0x'\n        ) AS output,\n        OBJECT_CONSTRUCT('input', input, 'output', output, 'function_name', function_name) AS function_data,\n        utils.udf_evm_decode_trace(abi, function_data)[0] AS decoded_data\n    FROM traces_final t\n    INNER JOIN {{ blockchain }}.SILVER.COMPLETE_FUNCTION_ABIS A\n        ON A.parent_contract_address = abi_address\n        AND LEFT(\n            t.input,\n            10\n        ) = LEFT(\n            A.function_signature,\n            10\n        )\n        AND t.block_number BETWEEN A.start_block\n        AND A.end_block\n    AND t.block_number IS NOT NULL\n\n)\n\nSELECT\n    block_number,\n    tx_hash,\n    block_timestamp,\n    tx_status,\n    tx_position,\n    trace_index,\n    from_address,\n    to_address,\n    VALUE,\n    value_precise_raw,\n    value_precise,\n    gas,\n    gas_used,\n    TYPE,\n    identifier,\n    sub_traces,\n    error_reason,\n    trace_status,\n    input,\n    output,\n    decoded_data :function_name :: STRING AS function_name,\n    decoded_data :decoded_input_data AS decoded_input_data,\n    decoded_data :decoded_output_data AS decoded_output_data,\n    md5(\n        cast(\n            coalesce(\n                cast(tx_hash as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) || '-' || coalesce(\n                cast(trace_index as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) as TEXT\n        )\n    ) AS fact_decoded_traces_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM decoded_traces\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_live_view_target_blocks", "macro.livequery_models.evm_live_view_bronze_receipts", "macro.livequery_models.evm_live_view_bronze_blocks", "macro.livequery_models.evm_live_view_bronze_transactions", "macro.livequery_models.evm_live_view_silver_blocks", "macro.livequery_models.evm_live_view_silver_receipts", "macro.livequery_models.evm_live_view_silver_transactions", "macro.livequery_models.evm_live_view_bronze_traces", "macro.livequery_models.evm_live_view_silver_traces"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5684867, "supported_languages": null}, "macro.livequery_models.evm_live_view_fact_token_balances": {"name": "evm_live_view_fact_token_balances", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_fact_token_balances", "macro_sql": "{% macro evm_live_view_fact_token_balances(schema, blockchain, network) %}\nWITH silver_token_balances AS (\n    {{ evm_live_view_silver_token_balances(schema, blockchain, network) | indent(4) -}}\n)\n\nSELECT\n    block_number,\n    block_timestamp,\n    address AS user_address,\n    contract_address,\n    balance,\n    token_balances_id AS fact_token_balances_id,\n    inserted_timestamp,\n    modified_timestamp\nFROM\n    silver_token_balances\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_live_view_silver_token_balances"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.568811, "supported_languages": null}, "macro.livequery_models.evm_live_view_fact_eth_balances": {"name": "evm_live_view_fact_eth_balances", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_fact_eth_balances", "macro_sql": "{% macro evm_live_view_fact_eth_balances(schema, blockchain, network) %}\nWITH silver_eth_balances AS (\n    {{ evm_live_view_silver_eth_balances(schema, blockchain, network) | indent(4) -}}\n)\n\nSELECT\n    block_number,\n    block_timestamp,\n    address AS user_address,\n    balance,\n    eth_balances_id AS fact_eth_balances_id,\n    inserted_timestamp,\n    modified_timestamp\nFROM silver_eth_balances\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_live_view_silver_eth_balances"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5691218, "supported_languages": null}, "macro.livequery_models.evm_live_view_ez_decoded_event_logs": {"name": "evm_live_view_ez_decoded_event_logs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_ez_decoded_event_logs", "macro_sql": "{% macro evm_live_view_ez_decoded_event_logs(schema, blockchain, network) %}\nWITH _fact_event_logs AS (\n    {{ evm_live_view_fact_event_logs(schema, blockchain, network) | indent(4) -}}\n),\n\n_silver_decoded_logs AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        event_index,\n        topics,\n        DATA,\n        contract_address,\n        OBJECT_CONSTRUCT('topics', topics, 'data', data, 'address', contract_address) AS event_data,\n        abi,\n        utils.udf_evm_decode_log(abi, event_data)[0] AS decoded_data,\n        event_removed,\n        decoded_data:name::string AS event_name,\n        {{ blockchain }}.utils.udf_transform_logs(decoded_data) AS transformed,\n        _log_id,\n        inserted_timestamp,\n        tx_status\n    FROM\n        _fact_event_logs\n    JOIN\n        {{ blockchain }}.core.dim_contract_abis\n    USING\n        (contract_address)\n    WHERE\n        tx_status = 'SUCCESS'\n),\n\n_flatten_logs AS (\n    SELECT\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.decoded_data,\n        b.transformed,\n        b._log_id,\n        b.inserted_timestamp,\n        OBJECT_AGG(\n            DISTINCT CASE\n                WHEN v.value :name = '' THEN CONCAT(\n                    'anonymous_',\n                    v.index\n                )\n                ELSE v.value :name\n            END,\n            v.value :value\n        ) AS decoded_flat\n    FROM\n        _silver_decoded_logs b,\n        LATERAL FLATTEN(\n            input => b.transformed :data\n        ) v\n    GROUP BY\n        b.tx_hash,\n        b.block_number,\n        b.event_index,\n        b.event_name,\n        b.contract_address,\n        b.decoded_data,\n        b.transformed,\n        b._log_id,\n        b.inserted_timestamp\n)\n\nSELECT\n    block_number,\n    C.block_timestamp,\n    B.tx_hash,\n    B.event_index,\n    B.contract_address,\n    D.name AS contract_name,\n    B.event_name,\n    B.decoded_flat AS decoded_log,\n    B.decoded_data AS full_decoded_log,\n    C.origin_function_signature,\n    C.origin_from_address,\n    C.origin_to_address,\n    C.topics,\n    C.DATA,\n    C.event_removed,\n    C.tx_status,\n    md5(_log_id) AS fact_decoded_event_logs_id,\n    SYSDATE() AS inserted_timestamp,\n    SYSDATE() AS modified_timestamp\nFROM _flatten_logs AS B\nLEFT JOIN _silver_decoded_logs AS C USING (block_number, _log_id)\nLEFT JOIN {{ blockchain }}.core.dim_contracts AS D\n    ON B.contract_address = D.address\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_live_view_fact_event_logs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5697107, "supported_languages": null}, "macro.livequery_models.evm_live_view_ez_token_transfers": {"name": "evm_live_view_ez_token_transfers", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_ez_token_transfers", "macro_sql": "{% macro evm_live_view_ez_token_transfers(schema, blockchain, network) %}\nWITH fact_logs AS (\n    {{ evm_live_view_fact_event_logs(schema, blockchain, network) | indent(4) -}}\n)\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_index,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address::STRING AS contract_address,\n    CONCAT('0x', SUBSTR(topics [1], 27, 40))::STRING AS from_address,\n    CONCAT('0x', SUBSTR(topics [2], 27, 40))::STRING AS to_address,\n    utils.udf_hex_to_int(SUBSTR(DATA, 3, 64)) AS raw_amount_precise,\n    raw_amount_precise::FLOAT AS raw_amount,\n    IFF(\n        C.decimals IS NOT NULL,\n        raw_amount_precise * power(10, C.decimals * -1),\n        NULL\n    ) AS amount_precise,\n    amount_precise::FLOAT AS amount,\n    IFF(\n        C.decimals IS NOT NULL\n        AND price IS NOT NULL,\n        amount * price,\n        NULL\n    ) AS amount_usd,\n    C.decimals AS decimals,\n    C.symbol AS symbol,\n    price AS token_price,\n    CASE\n        WHEN C.decimals IS NULL THEN 'false'\n        ELSE 'true'\n    END AS has_decimal,\n    CASE\n        WHEN price IS NULL THEN 'false'\n        ELSE 'true'\n    END AS has_price,\n    _log_id,\n    md5(\n        cast(\n            coalesce(\n                cast(tx_hash as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) || '-' || coalesce(\n                cast(event_index as TEXT),\n                '_dbt_utils_surrogate_key_null_'\n            ) as TEXT\n        )\n    ) as ez_token_transfers_id,\n    SYSDATE() AS _inserted_timestamp,\n    sysdate() as inserted_timestamp,\n    sysdate() as modified_timestamp\nFROM\n    fact_logs l\n    LEFT JOIN {{ blockchain }}.price.EZ_PRICES_HOURLY p ON l.contract_address = p.token_address\n    AND DATE_TRUNC('hour', l.block_timestamp) = HOUR\n    LEFT JOIN {{ blockchain }}.core.DIM_CONTRACTS C ON l.contract_address = C.address\nWHERE\n    topics [0]::STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n    AND tx_status = 'SUCCESS'\n    and raw_amount IS NOT NULL\n    AND to_address IS NOT NULL\nAND from_address IS NOT NULL\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_live_view_fact_event_logs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5702121, "supported_languages": null}, "macro.livequery_models.evm_live_view_ez_native_transfers": {"name": "evm_live_view_ez_native_transfers", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/evm/evm_live_views.sql", "original_file_path": "macros/evm/evm_live_views.sql", "unique_id": "macro.livequery_models.evm_live_view_ez_native_transfers", "macro_sql": "{% macro evm_live_view_ez_native_transfers(schema, blockchain, network) %}\nWITH spine AS (\n    {{ evm_live_view_target_blocks(schema, blockchain, network) | indent(4) -}}\n),\nraw_receipts AS (\n    {{ evm_live_view_bronze_receipts(schema, blockchain, network, 'spine') | indent(4) -}}\n),\nraw_block_txs AS (\n    {{ evm_live_view_bronze_blocks(schema, blockchain, network, 'spine') | indent(4) -}}\n),\nraw_transactions AS (\n    {{ evm_live_view_bronze_transactions('raw_block_txs') | indent(4) -}}\n),\nblocks AS (\n    {{ evm_live_view_silver_blocks('raw_block_txs') | indent(4) -}}\n),\nreceipts AS (\n    {{ evm_live_view_silver_receipts('raw_receipts') | indent(4) -}}\n),\ntransactions AS (\n    {{ evm_live_view_silver_transactions('raw_transactions', 'blocks', 'receipts') | indent(4) -}}\n),\nraw_traces AS (\n    {{ evm_live_view_bronze_traces(schema, blockchain, network, 'spine') | indent(4) -}}\n),\n{{ evm_live_view_silver_traces('raw_traces') | indent(4) -}}\n,\neth_base AS (\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        identifier,\n        from_address,\n        to_address,\n        eth_value AS amount,\n        _call_id,\n        _inserted_timestamp,\n        eth_value_precise_raw AS amount_precise_raw,\n        eth_value_precise AS amount_precise,\n        tx_position,\n        trace_index\n    FROM\n        traces_final\n    WHERE\n        eth_value > 0\n        AND tx_status = 'SUCCESS'\n        AND trace_status = 'SUCCESS'\n        AND TYPE NOT IN (\n            'DELEGATECALL',\n            'STATICCALL'\n        )\n),\ntx_table AS (\n    SELECT\n        block_number,\n        tx_hash,\n        from_address AS origin_from_address,\n        to_address1 AS origin_to_address,\n        origin_function_signature\n    FROM\n        transactions\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                eth_base\n        )\n),\nnative_transfers AS (\n    SELECT\n        e.tx_hash,\n        e.block_number,\n        e.block_timestamp,\n        e.identifier,\n        t.origin_from_address,\n        t.origin_to_address,\n        t.origin_function_signature,\n        e.from_address,\n        e.to_address,\n        e.amount,\n        e.amount_precise_raw,\n        e.amount_precise,\n        ROUND(\n            e.amount * p.price,\n            2\n        ) AS amount_usd,\n        e._call_id,\n        e._inserted_timestamp,\n        e.tx_position,\n        e.trace_index,\n        md5(\n            cast(\n                coalesce(cast(e.tx_hash as TEXT), '_dbt_utils_surrogate_key_null_')\n                || '-' || coalesce(cast(e.trace_index as TEXT), '_dbt_utils_surrogate_key_null_')\n                as TEXT\n            )\n        ) as native_transfers_id,\n        SYSDATE() as inserted_timestamp,\n        SYSDATE() as modified_timestamp\n    FROM\n        eth_base e\n        JOIN tx_table t ON e.tx_hash = t.tx_hash AND e.block_number = t.block_number\n        LEFT JOIN {{ blockchain }}.PRICE.EZ_PRICES_HOURLY p\n            ON DATE_TRUNC('hour', e.block_timestamp) = p.HOUR\n            AND p.token_address = '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2'  -- WETH address\n)\nSELECT\n    tx_hash,\n    block_number,\n    block_timestamp,\n    tx_position,\n    trace_index,\n    identifier AS trace_type,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    from_address AS trace_from_address,\n    to_address AS trace_to_address,\n    amount,\n    amount_precise_raw,\n    amount_precise,\n    amount_usd,\n    COALESCE(\n        native_transfers_id,\n        md5(\n            cast(\n                coalesce(cast(tx_hash as TEXT), '_dbt_utils_surrogate_key_null_')\n                || '-' || coalesce(cast(trace_index as TEXT), '_dbt_utils_surrogate_key_null_')\n                as TEXT\n            )\n        )\n    ) AS ez_native_transfers_id,\n    COALESCE(\n        inserted_timestamp,\n        '2000-01-01'\n    ) AS inserted_timestamp,\n    COALESCE(\n        modified_timestamp,\n        '2000-01-01'\n    ) AS modified_timestamp\nFROM\n    native_transfers\nQUALIFY (ROW_NUMBER() OVER (\n    PARTITION BY block_number, tx_position, trace_index\n    ORDER BY _inserted_timestamp DESC\n)) = 1\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.evm_live_view_target_blocks", "macro.livequery_models.evm_live_view_bronze_receipts", "macro.livequery_models.evm_live_view_bronze_blocks", "macro.livequery_models.evm_live_view_bronze_transactions", "macro.livequery_models.evm_live_view_silver_blocks", "macro.livequery_models.evm_live_view_silver_receipts", "macro.livequery_models.evm_live_view_silver_transactions", "macro.livequery_models.evm_live_view_bronze_traces", "macro.livequery_models.evm_live_view_silver_traces"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5717506, "supported_languages": null}, "macro.livequery_models.get_rendered_model": {"name": "get_rendered_model", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/utils/udf_utils/render.sql", "original_file_path": "macros/utils/udf_utils/render.sql", "unique_id": "macro.livequery_models.get_rendered_model", "macro_sql": "{% macro get_rendered_model(package_name, model_name, schema, blockchain, network) %}\n    {# \n    This macro retrieves and renders a specified model from the graph.\n\n    Args:\n        package_name (str): The name of the package containing the model.\n        model_name (str): The name of the model to be rendered.\n        schema (str): The schema to be used.\n        blockchain (str): The blockchain to be used.\n        network (str): The network to be used.\n\n    Returns:\n        str: The rendered SQL of the specified model.\n    #}\n    {% if execute %}\n    {{ log(\"=== Starting get_rendered_model ===\", info=True) }}\n    {# Use a list to store the node to avoid scope issues #}\n    {%- set nodes = [] -%}\n    {{ log(\"Looking for node: \" ~ package_name ~ \".\" ~ model_name, info=True) }}\n    {%- for node in graph.nodes.values() -%}\n        {%- if node.package_name == package_name and node.name == model_name -%}\n            {{ log(\"Found target node: \" ~ node.unique_id, info=True) }}\n            {%- do nodes.append(node) -%}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {%- if nodes | length == 0 -%}\n        {{ log(\"No target node found!\", info=True) }}\n        {{ return('') }}\n    {%- endif -%}\n\n    {%- set target_node = nodes[0] -%}\n    {{ log(\"Processing node: \" ~ target_node.unique_id, info=True) }}\n    {{ log(\"Dependencies:\\n\\t\\t\" ~ (target_node.depends_on.nodes | pprint).replace(\"\\n\", \"\\n\\t\\t\"), info=True) }}\n\n    {# First render all dependency CTEs #}\n    {%- set ctes = [] -%}\n    {%- for dep_id in target_node.depends_on.nodes -%}\n        {{ log(\"Processing dependency: \" ~ dep_id, info=True) }}\n        {%- set dep_node = graph.nodes[dep_id] -%}\n\n        {%- set rendered_sql = render(dep_node.raw_code) | trim -%}\n\n        {%- if rendered_sql -%}\n            {%- set cte_sql -%}\n__dbt__cte__{{ dep_node.name }} AS (\n    {{ rendered_sql }}\n)\n            {%- endset -%}\n            {%- do ctes.append(cte_sql) -%}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {{ log(\"Number of CTEs generated: \" ~ ctes | length, info=True) }}\n\n    {# Combine CTEs with main query #}\n    {%- set final_sql -%}\nWITH {{ ctes | join(',\\n\\n') }}\n\n{{ render(target_node.raw_code) }}\n    {%- endset -%}\n\n    {{ log(\"=== End get_rendered_model ===\\n\\n\" , info=True) }}\n\n    {{ return(final_sql) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5752547, "supported_languages": null}, "macro.livequery_models.sql_live_rpc_call": {"name": "sql_live_rpc_call", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/utils.sql", "original_file_path": "macros/livequery/utils.sql", "unique_id": "macro.livequery_models.sql_live_rpc_call", "macro_sql": "{% macro sql_live_rpc_call(method, params, blockchain, network) %}\n{#\n    Helper macro to call a JSON RPC method on a live node.\n\n    Parameters:\n        method (string): The JSON RPC method to call.\n        params (array): The JSON RPC parameters to pass to the method.\n        blockchain (string): The blockchain to call the method on.\n        network (string): The network to call the method on.\n    Returns:\n        string: The SQL to call the method.\n #}\n    WITH result as (\n        SELECT\n            live.udf_api(\n                '{endpoint}'\n                ,utils.udf_json_rpc_call({{ method }}, {{ params }})\n                ,concat_ws('/', 'integration', _utils.udf_provider(), '{{ blockchain }}', '{{ network }}')\n            )::VARIANT:data AS data\n    )\n    SELECT\n        COALESCE(data:result, {'error':data:error})\n    FROM result\n{% endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5757532, "supported_languages": null}, "macro.livequery_models.create_udf_introspect": {"name": "create_udf_introspect", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/streamline_udfs.sql", "original_file_path": "macros/livequery/streamline_udfs.sql", "unique_id": "macro.livequery_models.create_udf_introspect", "macro_sql": "{% macro create_udf_introspect(\n        drop_ = False\n    ) %}\n    {% set name_ = 'silver.udf_introspect' %}\n    {% set signature = [('json', 'variant')] %}\n    {% set return_type = 'text' %}\n    {% set sql_ = construct_api_route(\"introspect\") %}\n    {% if not drop_ %}\n        {{ create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            api_integration = var(\"API_INTEGRATION\")\n        ) }}\n    {% else %}\n        {{ drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.construct_api_route", "macro.livequery_models.create_sql_function", "macro.livequery_models.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5768807, "supported_languages": null}, "macro.livequery_models.create_aws_ethereum_api": {"name": "create_aws_ethereum_api", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/api_integrations.sql", "original_file_path": "macros/livequery/api_integrations.sql", "unique_id": "macro.livequery_models.create_aws_ethereum_api", "macro_sql": "{% macro create_aws_ethereum_api() %}\n    {% if target.name == \"prod\" %}\n        {% set sql %}\n        CREATE api integration IF NOT EXISTS aws_ethereum_api api_provider = aws_api_gateway api_aws_role_arn = 'arn:aws:iam::661245089684:role/snowflake-api-ethereum' api_allowed_prefixes = (\n            'https://e03pt6v501.execute-api.us-east-1.amazonaws.com/prod/',\n            'https://mryeusnrob.execute-api.us-east-1.amazonaws.com/dev/'\n        ) enabled = TRUE;\n{% endset %}\n        {% do run_query(sql) %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5774186, "supported_languages": null}, "macro.livequery_models.drop_function": {"name": "drop_function", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.drop_function", "macro_sql": "{% macro drop_function(\n        func_name,\n        signature\n    ) %}\n    DROP FUNCTION IF EXISTS {{ func_name }}({{ compile_signature(signature, drop_ = True) }});\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.compile_signature"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5793993, "supported_languages": null}, "macro.livequery_models.construct_api_route": {"name": "construct_api_route", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.construct_api_route", "macro_sql": "\n\n{%- macro construct_api_route(route) -%}\n    'https://{{ var(\"EXTERNAL_FUNCTION_URI\") | lower }}{{ route }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5796437, "supported_languages": null}, "macro.livequery_models.compile_signature": {"name": "compile_signature", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.compile_signature", "macro_sql": "{%- macro compile_signature(\n        params,\n        drop_ = False\n    ) -%}\n    {% for p in params -%}\n        {%- set name = p.0 -%}\n        {%- set data_type = p.1 -%}\n        {% if drop_ %}\n            {{ data_type -}}\n        {% else %}\n            {{ name ~ \" \" ~ data_type -}}\n        {%- endif -%}\n        {%-if not loop.last -%},\n        {%- endif -%}\n    {% endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5802946, "supported_languages": null}, "macro.livequery_models.create_sql_function": {"name": "create_sql_function", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.create_sql_function", "macro_sql": "{% macro create_sql_function(\n        name_,\n        signature,\n        return_type,\n        sql_,\n        api_integration = none,\n        options = none,\n        func_type = none,\n        max_batch_rows = none\n    ) %}\n    CREATE OR REPLACE {{ func_type }} FUNCTION {{ name_ }}(\n            {{- livequery_models.compile_signature(signature) }}\n    )\n    COPY GRANTS\n    RETURNS {{ return_type }}\n    {% if options -%}\n        {{ options }}\n    {% endif %}\n    {%- if api_integration -%}\n    api_integration = {{ api_integration -}}\n    {%- if max_batch_rows -%}\n    {{ \"\\n    max_batch_rows = \" ~ max_batch_rows -}}\n    {%- endif -%}\n    {{ \"\\n    AS \" ~ livequery_models.construct_api_route(sql_) ~ \";\" -}}\n    {%- else -%}\n    AS\n    $$\n    {{ sql_ }}\n    $$;\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.compile_signature", "macro.livequery_models.construct_api_route"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.58122, "supported_languages": null}, "macro.livequery_models.create_or_drop_function_from_config": {"name": "create_or_drop_function_from_config", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.create_or_drop_function_from_config", "macro_sql": "{%- macro create_or_drop_function_from_config(\n        config,\n        drop_ = False\n    ) -%}\n    {% set name_ = config [\"name\"] %}\n    {% set signature = config [\"signature\"] %}\n    {% set return_type = config [\"return_type\"] if config [\"return_type\"] is string else config [\"return_type\"][0] %}\n    {% set sql_ = config [\"sql\"] %}\n    {% set options = config [\"options\"] %}\n    {% set api_integration = config [\"api_integration\"] %}\n    {% set func_type = config [\"func_type\"] %}\n    {% set max_batch_rows = config [\"max_batch_rows\"] %}\n    {% if not drop_ -%}\n        {{ livequery_models.create_sql_function(\n            name_ = name_,\n            signature = signature,\n            return_type = return_type,\n            sql_ = sql_,\n            options = options,\n            api_integration = api_integration,\n            max_batch_rows = max_batch_rows,\n            func_type = func_type\n        ) }}\n    {%- else -%}\n        {{ drop_function(\n            name_,\n            signature = signature,\n        ) }}\n    {%- endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.livequery_models.create_sql_function", "macro.livequery_models.drop_function"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.582749, "supported_languages": null}, "macro.livequery_models.crud_udfs": {"name": "crud_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.crud_udfs", "macro_sql": "{% macro crud_udfs(config_func, schema, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given schema\n\n    config_func: function that returns a list of udf configs\n    drop_: whether to drop or create the udfs\n #}\n    {% set udfs = fromyaml(config_func())%}\n    {%- for udf in udfs -%}\n        {% if udf[\"name\"].split(\".\") | first == schema %}\n            CREATE SCHEMA IF NOT EXISTS {{ schema }};\n            {{- create_or_drop_function_from_config(udf, drop_=drop_) -}}\n        {%- endif -%}\n    {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5834126, "supported_languages": null}, "macro.livequery_models.crud_udfs_by_chain": {"name": "crud_udfs_by_chain", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.crud_udfs_by_chain", "macro_sql": "{% macro crud_udfs_by_chain(config_func, blockchain, network, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given blockchain and network\n\n    config_func: function that returns a list of udf configs\n    blockchain: blockchain name\n    network: network name\n    drop_: whether to drop or create the udfs\n #}\n  {% set schema = blockchain if not network else blockchain ~ \"_\" ~ network %}\n    CREATE SCHEMA IF NOT EXISTS {{ schema }};\n    {%-  set configs = fromyaml(config_func(blockchain, network)) if network else fromyaml(config_func(schema, blockchain)) -%}\n    {%- for udf in configs -%}\n        {{- livequery_models.create_or_drop_function_from_config(udf, drop_=drop_) -}}\n    {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5841904, "supported_languages": null}, "macro.livequery_models.crud_udfs_by_marketplace": {"name": "crud_udfs_by_marketplace", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.crud_udfs_by_marketplace", "macro_sql": "{% macro crud_udfs_by_marketplace(config_func, schema, utility_schema, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given blockchain and network\n\n    config_func: function that returns a list of udf configs\n    schema: schema name\n    utility_schema: utility schema name\n #}\n    CREATE SCHEMA IF NOT EXISTS {{ schema }};\n    {%- set configs = fromyaml(config_func(schema, utility_schema)) if utility_schema else fromyaml(config_func(schema, schema)) -%}\n    {%- for udf in configs -%}\n        {{- create_or_drop_function_from_config(udf, drop_=drop_) -}}\n    {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5848334, "supported_languages": null}, "macro.livequery_models.crud_marketplace_udfs": {"name": "crud_marketplace_udfs", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.crud_marketplace_udfs", "macro_sql": "{% macro crud_marketplace_udfs(config_func, schemaName, base_api_schema_name, drop_) %}\n{#\n    Generate create or drop statements for a list of udf configs for a given schema and api\n\n    config_func: function that returns a list of udf configs\n    schemaName: the target schema to build the udfs\n    base_api_schema_name: the schema that contains base api functions\n    drop_: whether to drop or create the udfs\n #}\n  {%-  set udfs = fromyaml(config_func(schemaName, base_api_schema_name)) -%}\n  {%- for udf in udfs -%}\n    {{- create_or_drop_function_from_config(udf, drop_=drop_) -}}\n  {%- endfor -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.create_or_drop_function_from_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5853443, "supported_languages": null}, "macro.livequery_models.ephemeral_deploy_core": {"name": "ephemeral_deploy_core", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.ephemeral_deploy_core", "macro_sql": "{% macro ephemeral_deploy_core(config) %}\n{#\n    This macro is used to deploy functions using ephemeral models.\n    It should only be used within an ephemeral model.\n #}\n    {% if execute and (var(\"UPDATE_UDFS_AND_SPS\") or var(\"DROP_UDFS_AND_SPS\")) and model.unique_id in selected_resources %}\n        {% set sql %}\n            {{- livequery_models.crud_udfs(config, this.schema, var(\"DROP_UDFS_AND_SPS\")) -}}\n        {%- endset -%}\n        {%- if var(\"DROP_UDFS_AND_SPS\") -%}\n            {%- do log(\"Drop core udfs: \" ~ this.database ~ \".\" ~ this.schema, true) -%}\n        {%- else -%}\n            {%- do log(\"Deploy core udfs: \" ~ this.database ~ \".\" ~ this.schema, true) -%}\n        {%- endif -%}\n        {%- do run_query(sql ~ livequery_models.apply_grants_by_schema(this.schema)) -%}\n    {%- endif -%}\n    SELECT '{{ model.schema }}' as schema_\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.crud_udfs", "macro.dbt.run_query", "macro.livequery_models.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5865135, "supported_languages": null}, "macro.livequery_models.ephemeral_deploy": {"name": "ephemeral_deploy", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.ephemeral_deploy", "macro_sql": "{% macro ephemeral_deploy(configs) %}\n{#\n    This macro is used to deploy functions using ephemeral models.\n    It should only be used within an ephemeral model.\n #}\n    {%- set blockchain = this.schema -%}\n    {%- set network = this.identifier -%}\n    {% set schema = blockchain ~ \"_\" ~ network %}\n    {% if execute and (var(\"UPDATE_UDFS_AND_SPS\") or var(\"DROP_UDFS_AND_SPS\")) and model.unique_id in selected_resources %}\n        {% set sql %}\n            {% for config in configs %}\n                {{- livequery_models.crud_udfs_by_chain(config, blockchain, network, var(\"DROP_UDFS_AND_SPS\")) -}}\n            {%- endfor -%}\n        {%- endset -%}\n        {%- if var(\"DROP_UDFS_AND_SPS\") -%}\n            {%- do log(\"Drop partner udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- else -%}\n            {%- do log(\"Deploy partner udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- endif -%}\n        {%- do run_query(sql ~ livequery_models.apply_grants_by_schema(schema)) -%}\n    {%- endif -%}\n    SELECT '{{ model.schema }}' as schema_\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.livequery_models.crud_udfs_by_chain", "macro.dbt.run_query", "macro.livequery_models.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5879595, "supported_languages": null}, "macro.livequery_models.ephemeral_deploy_marketplace": {"name": "ephemeral_deploy_marketplace", "resource_type": "macro", "package_name": "livequery_models", "path": "macros/livequery/manage_udfs.sql", "original_file_path": "macros/livequery/manage_udfs.sql", "unique_id": "macro.livequery_models.ephemeral_deploy_marketplace", "macro_sql": "{% macro ephemeral_deploy_marketplace(configs) %}\n{#\n    This macro is used to deploy functions using ephemeral models.\n    It should only be used within an ephemeral model.\n #}\n    {%- set schema = this.schema -%}\n    {%- set utility_schema = this.identifier -%}\n    {% if execute and (var(\"UPDATE_UDFS_AND_SPS\") or var(\"DROP_UDFS_AND_SPS\")) and model.unique_id in selected_resources %}\n        {% set sql %}\n            {% for config in configs %}\n                {{- crud_udfs_by_marketplace(config, schema, utility_schema, var(\"DROP_UDFS_AND_SPS\")) -}}\n            {%- endfor -%}\n        {%- endset -%}\n        {%- if var(\"DROP_UDFS_AND_SPS\") -%}\n            {%- do log(\"Drop marketplace udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- else -%}\n            {%- do log(\"Deploy marketplace udfs: \" ~ this.database ~ \".\" ~ schema, true) -%}\n        {%- endif -%}\n        {%- do run_query(sql ~ livequery_models.apply_grants_by_schema(schema)) -%}\n    {%- endif -%}\n    SELECT '{{ model.schema }}' as schema_\n{%- endmacro -%}", "depends_on": {"macros": ["macro.livequery_models.crud_udfs_by_marketplace", "macro.dbt.run_query", "macro.livequery_models.apply_grants_by_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5893085, "supported_languages": null}, "macro.livequery_models.test_test_udf": {"name": "test_test_udf", "resource_type": "macro", "package_name": "livequery_models", "path": "tests/generic/test_udf.sql", "original_file_path": "tests/generic/test_udf.sql", "unique_id": "macro.livequery_models.test_test_udf", "macro_sql": "{% test test_udf(model, column_name, args, assertions) %}\n    {#\n        This is a generic test for UDFs.\n        The udfs are deployed using ephemeral models, as of dbt-core > 1.8\n        we need to use `this.identifier` to extract the schema from for base_test_udf().\n     #}\n    \n    {% set schema = none %}\n    \n    {% if execute %}\n        {# Extract schema based on standard pattern `test__<schema_name>_<test_name> #}\n        {% set test_identifier = this.identifier %}\n        \n        {% if test_identifier.startswith('test_') %}\n            {% set test_identifier = test_identifier[5:] %}\n        {% endif %}\n        \n        {# Handle schemas with underscore prefix #}\n        {% if test_identifier.startswith('_') %}\n            {# For identifiers like _utils_<test_name> #}\n            {% set parts = test_identifier.split('_') %}\n            {% if parts | length > 2 %}\n                {% set schema = '_' ~ parts[1] %}\n            {% else %}\n                {% set schema = parts[0] %}\n            {% endif %}\n        {% else %}\n            {# For identifiers without underscore prefix #}\n            {% set parts = test_identifier.split('_') %}\n            {% if parts | length > 0 %}\n                {% set schema = parts[0] %}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n    \n    {% set udf = schema ~ \".\" ~ column_name %}\n\n    {{ base_test_udf(model, udf, args, assertions) }}\n{% endtest %}", "depends_on": {"macros": ["macro.livequery_models.base_test_udf"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1756141887.5916057, "supported_languages": null}}, "docs": {"doc.sui_models.checkpoint_number": {"name": "checkpoint_number", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.checkpoint_number", "block_contents": "The sequential number of the checkpoint in which this record was finalized on the Sui blockchain. Checkpoints are consensus milestones that bundle and finalize multiple transactions, providing the primary unit of finality and recovery in Sui. Starts at 0 (genesis checkpoint) and increments by one for each new checkpoint. Used for time series analysis, transaction ordering, and measuring network throughput. Once a transaction is included in a checkpoint, it is permanently recorded and cannot be reverted. This dataset only includes checkpoints greater than or equal to 96605300. Example: 96605301."}, "doc.sui_models.block_timestamp": {"name": "block_timestamp", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.block_timestamp", "block_contents": "The network-agreed timestamp (in milliseconds since Unix epoch) when the checkpoint containing this record was finalized by Sui consensus. Represents the authoritative time of transaction finality, as determined by validator signatures. Used for temporal analytics, trend analysis, and aligning on-chain activity with real-world time. Example: '2024-06-01 12:34:56.789'."}, "doc.sui_models.tx_digest": {"name": "tx_digest", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.tx_digest", "block_contents": "A 32-byte cryptographic hash (Base58-encoded) uniquely identifying the transaction's contents and structure. Serves as the primary key for transaction lookup, integrity verification, and cross-model joins. Enables cryptographic proof of transaction inclusion and supports lineage tracing across all Sui analytics. Example: '6Qk8...9Xz'."}, "doc.sui_models.tx_kind": {"name": "tx_kind", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.tx_kind", "block_contents": "The type of transaction executed. Values include 'Programmable Transaction Block' (PTB) for user-submitted transactions (up to 1,024 commands) and 'System Transaction' for validator/network operations. Determines execution path, available operations, and analytics grouping. Example: 'ProgrammableTransactionBlock'."}, "doc.sui_models.tx_sender": {"name": "tx_sender", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.tx_sender", "block_contents": "The 32-byte Sui address (hex with 0x prefix) that initiated and signed the transaction. Identifies the account responsible for the transaction and gas payment. Used for user activity tracking, wallet analytics, and authorization analysis. Example: '0xabc123...'."}, "doc.sui_models.message_version": {"name": "message_version", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.message_version", "block_contents": "The version of the transaction data structure, supporting protocol evolution and backward compatibility. Currently uses 'TransactionDataV1'. Ensures analytics remain robust across protocol upgrades. Example: '1'."}, "doc.sui_models.tx_succeeded": {"name": "tx_succeeded", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.tx_succeeded", "block_contents": "Boolean flag indicating transaction execution outcome. true = success, false = error. Used for outcome analysis, error monitoring, and success rate tracking. Example: true."}, "doc.sui_models.tx_fee": {"name": "tx_fee", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.tx_fee", "block_contents": "Total gas fee paid for transaction execution, denominated in SUI tokens. Calculated as (computation_cost + storage_cost - storage_rebate) / 1e9. Used for economic modeling, fee optimization, and cost analysis. Example: 0.00123 (SUI)."}, "doc.sui_models.tx_error": {"name": "tx_error", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.tx_error", "block_contents": "Error message and code if the transaction failed. Human-readable string with error details for diagnostics, debugging, and error pattern analysis. Example: 'MoveAbort: InsufficientBalance'."}, "doc.sui_models.tx_dependencies": {"name": "tx_dependencies", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.tx_dependencies", "block_contents": "Array of transaction digests that this transaction depends on for object versions. Establishes transaction ordering and causality, supporting dependency analysis and complex flow tracing. Example: ['6Qk8...9Xz', '7Yl2...3Ab']."}, "doc.sui_models.gas_used_computation_cost": {"name": "gas_used_computation_cost", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.gas_used_computation_cost", "block_contents": "Total computation cost in MIST units (1 SUI = 1e9 MIST) for executing the transaction. Calculated as computation_units * gas_price. Used for analyzing transaction complexity and validator workload. Example: 1000000."}, "doc.sui_models.gas_used_non_refundable_storage_fee": {"name": "gas_used_non_refundable_storage_fee", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.gas_used_non_refundable_storage_fee", "block_contents": "Portion of storage fees (in MIST) that cannot be reclaimed, ensuring storage fund sustainability. Calculated as storage_units * storage_price * 0.01. Used for economic modeling and storage fund analysis. Example: 10000."}, "doc.sui_models.gas_used_storage_cost": {"name": "gas_used_storage_cost", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.gas_used_storage_cost", "block_contents": "Total cost (in MIST) for storing data on-chain. Calculated as storage_units * storage_price. Users pay this upfront for perpetual storage. Used for storage analytics and cost modeling. Example: 500000."}, "doc.sui_models.gas_used_storage_rebate": {"name": "gas_used_storage_rebate", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.gas_used_storage_rebate", "block_contents": "Refund amount (in MIST) when previously stored data is deleted. Calculated as original_storage_fee * 0.99. Incentivizes data cleanup and efficient storage usage. Example: 495000."}, "doc.sui_models.gas_price": {"name": "gas_price", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.gas_price", "block_contents": "User-submitted price per computation unit (in MIST). Structure: reference_gas_price + optional tip. Determines transaction priority and total cost. Used for fee market analysis and optimization. Example: 1000."}, "doc.sui_models.gas_budget": {"name": "gas_budget", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.gas_budget", "block_contents": "Maximum amount (in MIST) user is willing to pay for transaction execution. Protects users from excessive fees. Minimum: 2,000 MIST, Maximum: 50,000,000,000 MIST. Used for transaction planning and cost control. Example: 1000000."}, "doc.sui_models.gas_owner": {"name": "gas_owner", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.gas_owner", "block_contents": "Sui address responsible for paying gas fees. Enables sponsored transactions (third-party gas payment). Used for payment model analytics and gasless UX studies. Example: '0xabc123...'."}, "doc.sui_models.balance_change_index": {"name": "balance_change_index", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.balance_change_index", "block_contents": "Zero-based index ordering balance changes within a transaction. Tracks the sequence of balance modifications for accurate financial analysis and reconciliation. Example: 0."}, "doc.sui_models.coin_type": {"name": "coin_type", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.coin_type", "block_contents": "Fully qualified Move type identifier for coins/tokens. Format: {package}::{module}::{struct}. Example: '0x2::sui::SUI' for native SUI token. Essential for DeFi analytics, token classification, and cross-asset analysis."}, "doc.sui_models.amount": {"name": "amount", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.amount", "block_contents": "Token quantity in the smallest unit (MIST for SUI). Integer value; 1 SUI = 1,000,000,000 MIST. Used for precise financial calculations, balance tracking, and token flow analysis. Example: 1000000000."}, "doc.sui_models.amount_raw": {"name": "amount_raw", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.amount_raw", "block_contents": "Token quantity in the smallest unit (MIST for SUI). Integer value; 1 SUI = 1,000,000,000 MIST. Used for precise financial calculations, balance tracking, and token flow analysis. Example: 1000000000."}, "doc.sui_models.owner": {"name": "owner", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.owner", "block_contents": "Ownership information for objects or balances. Enum: Address (user), Shared (requires consensus), Immutable (cannot change). Determines accessibility and is critical for wallet analytics, ownership distribution, and access control studies. Example: 'Address'."}, "doc.sui_models.change_index": {"name": "change_index", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.change_index", "block_contents": "Zero-based sequential index ordering object state changes within a transaction. Ensures atomicity and correct ordering for analytics and lineage tracing. Example: 2."}, "doc.sui_models.type": {"name": "type", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.type", "block_contents": "Type/category of object state modification or event. Enum: created, modified, deleted, wrapped, unwrapped (for changes); event type string (for events). Used for lifecycle analysis and state transition tracking. Example: 'created'."}, "doc.sui_models.sender": {"name": "sender", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.sender", "block_contents": "Sui address (32-byte hex) representing the transaction or event sender. Used for authorization, security analysis, and user activity tracking. Example: '0xabc123...'."}, "doc.sui_models.receiver": {"name": "receiver", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.receiver", "block_contents": "Sui address (32-byte hex) representing the transaction or event receiver. Used for tracking destination addresses, transfer flows, and recipient analytics. In transfer contexts, this is the address receiving tokens or assets. Example: '0xdef456...'."}, "doc.sui_models.ez_transfers_id": {"name": "ez_transfers_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_transfers_id", "block_contents": "Surrogate key for the enhanced transfers table. Generated unique identifier by combining transaction digest and balance change index, ensuring each transfer event enriched with token metadata is uniquely addressable. Used as the primary key for user-friendly transfer analytics, dashboard queries, and cross-model joins. In Sui, this supports transfer analysis with normalized amounts and token symbols, enabling easy identification and comparison of token movements."}, "doc.sui_models.fact_transfers_id": {"name": "fact_transfers_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.fact_transfers_id", "block_contents": "Surrogate key for the core fact transfers table. Generated unique identifier by combining transaction digest and balance change index, ensuring each transfer event is uniquely addressable. Used as the primary key for transfer tracking, analytics workflows, and cross-model joins. In Sui, this supports precise transfer analysis, portfolio tracking, and compliance reporting by enabling unique identification of each token movement between addresses."}, "doc.sui_models.digest": {"name": "digest", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.digest", "block_contents": "32-byte cryptographic hash (hex) of object contents, using SHA-256. Used for content verification, integrity checking, and unauthorized modification detection. Example: 'a1b2c3...'."}, "doc.sui_models.object_id": {"name": "object_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.object_id", "block_contents": "Globally unique 32-byte identifier for Sui objects. Hex string, primary key for object tracking, provenance, and asset history. Example: '0x1234abcd...'."}, "doc.sui_models.object_type": {"name": "object_type", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.object_type", "block_contents": "Move type signature governing the object's structure and behavior. Format: {package}::{module}::{struct}<type_parameters>. Enables type-based classification and filtering. Example: '0x2::coin::Coin<0x2::sui::SUI>'."}, "doc.sui_models.version": {"name": "version", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.version", "block_contents": "8-byte unsigned integer incremented with every object modification. Tracks mutation frequency and supports version-based conflict resolution. Initial value: 1. Example: 5."}, "doc.sui_models.previous_version": {"name": "previous_version", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.previous_version", "block_contents": "Version number immediately preceding the current object version. Enables historical state reconstruction and audit trails. Value: current_version - 1 (0 for initial creation). Example: 4."}, "doc.sui_models.object_owner": {"name": "object_owner", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.object_owner", "block_contents": "Indicates how the object is owned and accessed. Types: Address-owned, Shared (consensus), Immutable (public), Object-owned. Determines access patterns and transaction requirements. Example: 'Shared'."}, "doc.sui_models.epoch": {"name": "epoch", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.epoch", "block_contents": "Epoch number (integer) representing a fixed period (~24h) with a stable validator set and protocol configuration. Used for tracking validator changes, protocol upgrades, and time-based partitioning. Example: 42."}, "doc.sui_models.checkpoint_digest": {"name": "checkpoint_digest", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.checkpoint_digest", "block_contents": "32-byte cryptographic hash (Base58) uniquely identifying checkpoint contents. Used for checkpoint verification, integrity checking, and chain continuity. Example: '6Qk8...9Xz'."}, "doc.sui_models.previous_digest": {"name": "previous_digest", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.previous_digest", "block_contents": "Hash of the previous checkpoint, maintaining blockchain continuity. Used for history verification and chain analysis. Example: '5Jk7...8Yz'."}, "doc.sui_models.network_total_transactions": {"name": "network_total_transactions", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.network_total_transactions", "block_contents": "Cumulative count of all transactions processed by the network up to this checkpoint. Monotonically increasing integer, key metric for network growth, adoption, and throughput analysis. Example: 10000000."}, "doc.sui_models.validator_signature": {"name": "validator_signature", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.validator_signature", "block_contents": "Aggregated BLS signature (Base64) from validator quorum (>2/3) for checkpoint finality. Provides Byzantine fault-tolerant consensus proof. Used for security analysis and validator participation tracking. Example: 'MEUCIQ...'."}, "doc.sui_models.tx_count": {"name": "tx_count", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.tx_count", "block_contents": "Total number of transactions included in the checkpoint. Used for measuring checkpoint size, throughput, and network performance. Example: 250."}, "doc.sui_models.transactions_array": {"name": "transactions_array", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.transactions_array", "block_contents": "Array of transaction digests included in the checkpoint. Used for transaction finality tracking, checkpoint analysis, and reconstructing checkpoint composition. Example: ['6Qk8...9Xz', '7Yl2...3Ab']."}, "doc.sui_models.event_index": {"name": "event_index", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.event_index", "block_contents": "Zero-based index ordering events within a transaction. Ensures deterministic event ordering for sequence reconstruction and analytics. Example: 1."}, "doc.sui_models.event_address": {"name": "event_address", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.event_address", "block_contents": "Sui address (32-byte hex) that triggered the event emission. Used for filtering, access control, and user activity analytics. Example: '0xabc123...'."}, "doc.sui_models.event_module": {"name": "event_module", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.event_module", "block_contents": "Name of the Move module that emitted the event. Used for module-specific event filtering and analytics. Example: 'coin'."}, "doc.sui_models.event_resource": {"name": "event_resource", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.event_resource", "block_contents": "Fully qualified type signature of the event struct. Format: {package_id}::{module}::{struct_name}<type_parameters>. Enables type-safe event deserialization and schema tracking. Example: '0x2::coin::TransferEvent<0x2::sui::SUI>'."}, "doc.sui_models.package_id": {"name": "package_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.package_id", "block_contents": "Unique identifier (object ID) of the Move package containing the event module. Used for package-level analytics, deployment tracking, and contract lineage. Example: '0x2'."}, "doc.sui_models.transaction_module": {"name": "transaction_module", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.transaction_module", "block_contents": "Name of the module executed in the transaction that emitted the event. Links events to transaction context for flow analysis. Example: 'pay_sui'."}, "doc.sui_models.parsed_json": {"name": "parsed_json", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.parsed_json", "block_contents": "JSON object representing the event data, with structure varying by event type. Provides structured, machine-readable event data for analytics, dApp monitoring, and real-time applications. Example: {\"amount\": \"1000000\", \"recipient\": \"0xabc...\"}."}, "doc.sui_models.input_index": {"name": "input_index", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.input_index", "block_contents": "Zero-based index referencing inputs within a programmable transaction block. Links commands to their inputs for dependency and resource usage analysis. Example: 0."}, "doc.sui_models.value": {"name": "value", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.value", "block_contents": "Actual data content of the object or input value, encoded using Binary Canonical Serialization (BCS). Used for content analysis, debugging, and advanced analytics. Example: '0x010203...'."}, "doc.sui_models.value_type": {"name": "value_type", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.value_type", "block_contents": "Move type of the object's value content or input value type. Fully qualified type name with generics, supporting type-safe deserialization and schema evolution. Example: '0x2::coin::Coin<0x2::sui::SUI>'."}, "doc.sui_models.initial_shared_version": {"name": "initial_shared_version", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.initial_shared_version", "block_contents": "Version number at which an object was first shared. Nullable u64 (None for non-shared objects). Determines consensus requirements and helps analyze shared object contention. Example: 3."}, "doc.sui_models.mutable": {"name": "mutable", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.mutable", "block_contents": "Boolean flag indicating if the object can be modified. true = mutable, false = immutable. Affects performance, access patterns, and caching. Example: true."}, "doc.sui_models.payload_index": {"name": "payload_index", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.payload_index", "block_contents": "Zero-based index of the payload within a programmable transaction block. Orders transaction commands for flow analysis. Example: 0."}, "doc.sui_models.payload_type": {"name": "payload_type", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.payload_type", "block_contents": "Type of command in a programmable transaction block. Values: MoveCall, TransferObjects, SplitCoins, etc. Used for dApp interaction and protocol analytics. Example: 'MoveCall'."}, "doc.sui_models.payload_details": {"name": "payload_details", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.payload_details", "block_contents": "Structured details about the specific payload command. Varies by payload type; includes all arguments and context. Used for deep transaction and smart contract analytics. Example: {\"function\": \"transfer\", \"args\": [\"0xabc...\", 1000]}."}, "doc.sui_models.inserted_timestamp": {"name": "inserted_timestamp", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.inserted_timestamp", "block_contents": "Timestamp when the record was inserted into the analytics database. System-generated by the ETL pipeline, typically in TIMESTAMP_NTZ format. Used for data lineage, ETL monitoring, and freshness checks. In Sui analytics, this field is essential for tracking data ingestion latency, validating pipeline health, and supporting incremental model builds. Example: '2024-06-01 12:34:56.789'."}, "doc.sui_models.modified_timestamp": {"name": "modified_timestamp", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.modified_timestamp", "block_contents": "Timestamp when the record was last modified in the analytics database. System-generated for change tracking, data versioning, and consistency verification. In Sui, this supports incremental processing, late-arriving data correction, and auditability of analytics workflows. Used to monitor data staleness and trigger downstream updates. Example: '2024-06-01 12:34:56.789'."}, "doc.sui_models.fact_checkpoints_id": {"name": "fact_checkpoints_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.fact_checkpoints_id", "block_contents": "Surrogate key for the checkpoint fact table. Generated unique identifier for each checkpoint record, typically constructed from the checkpoint number or digest. Ensures row-level uniqueness and supports efficient joins, indexing, and lineage tracing across all checkpoint-related analytics. In Sui, this enables fast correlation of checkpoint metadata with transactions, validator signatures, and epoch transitions. Essential for time series analysis, network health monitoring, and data integrity verification."}, "doc.sui_models.fact_events_id": {"name": "fact_events_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.fact_events_id", "block_contents": "Surrogate key for the events fact table. Generated unique identifier combining transaction digest and event index, ensuring each event emission is uniquely addressable. Used as the primary key for event tracking, analytics workflows, and cross-model joins. In Sui, this supports granular dApp analytics, protocol monitoring, and event-driven application logic by enabling precise event referencing and lineage analysis."}, "doc.sui_models.fact_transaction_balance_changes_id": {"name": "fact_transaction_balance_changes_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.fact_transaction_balance_changes_id", "block_contents": "Surrogate key for the balance changes fact table. Generated unique identifier by combining transaction digest and balance change index, guaranteeing uniqueness for each balance change event. Critical for financial analysis, reconciliation, and tracking token flows at the most granular level. In Sui, this enables accurate wallet balance reconstruction, detection of large transfers, and portfolio analytics across all addresses and token types."}, "doc.sui_models.fact_changes_id": {"name": "fact_changes_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.fact_changes_id", "block_contents": "Surrogate key for the object changes fact table. Generated unique identifier by combining transaction digest and change index, ensuring each object state transition is uniquely tracked. Supports object lifecycle analysis, state tracking, and forensic investigations. In Sui, this is essential for tracing the full history of NFTs, coins, and other on-chain objects, supporting compliance, provenance, and application behavior analytics."}, "doc.sui_models.fact_transaction_blocks_id": {"name": "fact_transaction_blocks_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.fact_transaction_blocks_id", "block_contents": "Surrogate key for the transaction blocks fact table. Generated unique identifier based on transaction digest, providing a one-to-one mapping to each transaction block. Enables efficient transaction-level analysis, performance monitoring, and lineage tracing from transaction inputs to execution outcomes. In Sui, this is critical for understanding transaction dependencies, gas usage, and execution results at scale."}, "doc.sui_models.fact_transaction_inputs_id": {"name": "fact_transaction_inputs_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.fact_transaction_inputs_id", "block_contents": "Surrogate key for the transaction inputs fact table. Generated unique identifier by combining transaction digest and input index, ensuring each input to a transaction is uniquely addressable. Supports dependency analysis, resource utilization tracking, and validation of transaction atomicity. In Sui, this enables detailed tracing of input objects, shared object usage, and parallel execution patterns."}, "doc.sui_models.fact_transactions_id": {"name": "fact_transactions_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.fact_transactions_id", "block_contents": "Surrogate key for the transactions fact table. Generated unique identifier by combining transaction digest and payload index, uniquely identifying each command or payload within a programmable transaction block. Essential for command-level analytics, smart contract interaction tracking, and composability analysis in Sui's multi-command transaction model."}, "doc.sui_models.dim_tokens_id": {"name": "dim_tokens_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.dim_tokens_id", "block_contents": "Surrogate key for the tokens dimension table. Generated unique identifier for each token metadata record, typically derived from the coin type or on-chain metadata. Enables efficient token lookups, joins across fact tables, and lineage tracing from raw on-chain data to analytics-ready attributes. In Sui, this is critical for accurate token identification, decimal normalization, and cross-model analytics involving token flows and balances."}, "doc.sui_models.ez_bridge_activity_id": {"name": "ez_bridge_activity_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_id", "block_contents": "Surrogate key for the events table. Generated unique identifier combining transaction digest and event index, ensuring each event emission is uniquely addressable. Used as the primary key for event tracking, analytics workflows, and cross-model joins. In Sui, this supports granular dApp analytics, protocol monitoring, and event-driven application logic by enabling precise event referencing and lineage analysis."}, "doc.sui_models.coin_types_id": {"name": "coin_types_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.coin_types_id", "block_contents": "Surrogate key for coin types. Generated unique identifier for each coin type, supporting classification, indexing, and efficient joins across analytics queries. In Sui, this enables fast aggregation and filtering by token type, supporting DeFi analytics, token velocity studies, and ecosystem-wide token usage analysis."}, "doc.sui_models.decimals": {"name": "decimals", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.decimals", "block_contents": "Number of decimal places for the token. Integer value defining token precision (e.g., 9 for SUI means 1 SUI = 1,000,000,000 MIST). Essential for accurate token amount calculations, display formatting, and cross-token analytics. Example: 9."}, "doc.sui_models.symbol": {"name": "symbol", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.symbol", "block_contents": "Short string symbol for the token (e.g., 'SUI', 'USDC'). Used for user-friendly token identification, UI display, and analytics grouping. Example: 'SUI'."}, "doc.sui_models.name": {"name": "name", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.name", "block_contents": "Full descriptive name of the token. Human-readable string for complete token identification, used in interfaces and analytics. Example: 'Sui Token'."}, "doc.sui_models.description": {"name": "description", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.description", "block_contents": "Detailed description of the token's purpose, features, and technical details. Used for documentation, analytics, and user interfaces. Example: 'Native token of the Sui blockchain, used for gas and staking.'"}, "doc.sui_models.icon_url": {"name": "icon_url", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.icon_url", "block_contents": "Web URL pointing to the token's icon image. Used for visual representation in wallets, dApps, and analytics dashboards. Example: 'https://assets.sui.io/icons/sui.svg'."}, "doc.sui_models.id": {"name": "id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.id", "block_contents": "Unique identifier for the token metadata record, linking metadata to on-chain token types. Used for metadata management, registry operations, and analytics joins. Example: 'tokenmeta_123'."}, "doc.sui_models.address_owner": {"name": "address_owner", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.address_owner", "block_contents": "The 32-byte Sui address (hex with 0x prefix) that owns this object when it has address-based ownership. Address-owned objects are controlled by a specific account and can only be accessed by their owner, providing exclusive control and enabling efficient parallel processing since they don't require consensus. Used for wallet analytics, ownership tracking, and transaction authorization analysis. When null, the object has a different ownership type (shared, immutable, or object-owned). Example: '0xabc123...'."}, "doc.sui_models.shared_owner": {"name": "shared_owner", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.shared_owner", "block_contents": "Variant data structure indicating this object has shared ownership, meaning it's accessible to everyone on the network and requires consensus validation for modifications. Shared objects enable coordination between multiple addresses but incur higher transaction costs due to consensus requirements. Used for marketplaces, escrows, AMMs, and other multi-user scenarios. Contains metadata about the shared object's initial version and access permissions. When null, the object has address-based, immutable, or object-based ownership. Example: {\"initial_shared_version\": 123}."}, "doc.sui_models.modules": {"name": "modules", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.modules", "block_contents": "Comma-separated list of Move module names contained within the package. Modules define the package's functionality and can be called by transactions to execute smart contract logic. Each module has a unique name within its package and contains functions, structs, and resources. Used for analyzing package composition, tracking module usage patterns, and understanding smart contract functionality. Example: 'coin,transfer,governance'."}, "doc.sui_models.amount_normalized": {"name": "amount_normalized", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.amount_normalized", "block_contents": "Decimal-adjusted token amount calculated by dividing the raw amount by 10^decimals. Provides human-readable token quantities that can be directly compared across different token types. Essential for financial analysis, balance calculations, and user-facing applications where raw blockchain amounts need to be converted to meaningful values. Example: if amount is 1000000000 and decimals is 9, amount_normalized would be 1.0."}, "doc.sui_models.token_is_verified": {"name": "token_is_verified", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.token_is_verified", "block_contents": "Boolean flag indicating whether the token or price record is verified by Flipside's crosschain curation process. Verified tokens are prioritized for analytics and are considered reliable for most use cases. Unverified tokens may be incomplete, deprecated, or experimental."}, "doc.sui_models.prices_ez_asset_metadata_table_doc": {"name": "prices_ez_asset_metadata_table_doc", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_ez_asset_metadata_table_doc", "block_contents": "A convenience table holding prioritized asset metadata and other relevant details pertaining to each token_address and native asset. This data set is highly curated and contains metadata for one unique asset per blockchain."}, "doc.sui_models.prices_ez_prices_hourly_table_doc": {"name": "prices_ez_prices_hourly_table_doc", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_ez_prices_hourly_table_doc", "block_contents": "A convenience table for determining token prices by address and blockchain, and native asset prices by symbol and blockchain. This data set is highly curated and contains metadata for one price per hour per unique asset and blockchain."}, "doc.sui_models.prices_provider": {"name": "prices_provider", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_provider", "block_contents": "The provider or source of the data."}, "doc.sui_models.prices_asset_id": {"name": "prices_asset_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_asset_id", "block_contents": "The unique identifier representing the asset."}, "doc.sui_models.prices_name": {"name": "prices_name", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_name", "block_contents": "The name of asset."}, "doc.sui_models.prices_symbol": {"name": "prices_symbol", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_symbol", "block_contents": "The symbol of asset."}, "doc.sui_models.prices_token_address": {"name": "prices_token_address", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_token_address", "block_contents": "The specific address representing the asset on a specific platform. This will be NULL if referring to a native asset."}, "doc.sui_models.prices_blockchain": {"name": "prices_blockchain", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_blockchain", "block_contents": "The Blockchain, Network, or Platform for this asset."}, "doc.sui_models.prices_blockchain_id": {"name": "prices_blockchain_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_blockchain_id", "block_contents": "The unique identifier of the Blockchain, Network, or Platform for this asset."}, "doc.sui_models.prices_decimals": {"name": "prices_decimals", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_decimals", "block_contents": "The number of decimals for the asset. May be NULL."}, "doc.sui_models.prices_is_native": {"name": "prices_is_native", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_is_native", "block_contents": "A flag indicating assets native to the respective blockchain."}, "doc.sui_models.prices_is_deprecated": {"name": "prices_is_deprecated", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_is_deprecated", "block_contents": "A flag indicating if the asset is deprecated or no longer supported by the provider."}, "doc.sui_models.prices_id_deprecation": {"name": "prices_id_deprecation", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_id_deprecation", "block_contents": "Deprecating soon! Please use the `asset_id` column instead."}, "doc.sui_models.prices_decimals_deprecation": {"name": "prices_decimals_deprecation", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_decimals_deprecation", "block_contents": "Deprecating soon! Please use the decimals column in `ez_asset_metadata` or join in `dim_contracts` instead."}, "doc.sui_models.prices_hour": {"name": "prices_hour", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_hour", "block_contents": "Hour that the price was recorded at."}, "doc.sui_models.prices_price": {"name": "prices_price", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_price", "block_contents": "Closing price of the recorded hour in USD."}, "doc.sui_models.prices_is_imputed": {"name": "prices_is_imputed", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_is_imputed", "block_contents": "A flag indicating if the price was imputed, or derived, from the last arriving record. This is generally used for tokens with low-liquidity or inconsistent reporting."}, "doc.sui_models.prices_open": {"name": "prices_open", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_open", "block_contents": "Opening price of the recorded hour in USD."}, "doc.sui_models.prices_high": {"name": "prices_high", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_high", "block_contents": "Highest price of the recorded hour in USD"}, "doc.sui_models.prices_low": {"name": "prices_low", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_low", "block_contents": "Lowest price of the recorded hour in USD"}, "doc.sui_models.prices_close": {"name": "prices_close", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.prices_close", "block_contents": "Closing price of the recorded hour in USD"}, "doc.sui_models.amount_usd": {"name": "amount_usd", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.amount_usd", "block_contents": "USD value of the amount at transaction time.\n\nExample: 1000.50"}, "doc.sui_models.ez_bridge_activity_platform": {"name": "ez_bridge_activity_platform", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_platform", "block_contents": "The protocol or application facilitating the cross-chain bridge transfer.\n\nExample: 'wormhole'"}, "doc.sui_models.ez_bridge_activity_protocol": {"name": "ez_bridge_activity_protocol", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_protocol", "block_contents": "The protocol or application facilitating the cross-chain bridge transfer.\n\nExample: 'wormhole'"}, "doc.sui_models.ez_bridge_activity_protocol_version": {"name": "ez_bridge_activity_protocol_version", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_protocol_version", "block_contents": "The version of  protocol or application facilitating the cross-chain bridge transfer.\n\nExample: 'v1'"}, "doc.sui_models.ez_bridge_activity_direction": {"name": "ez_bridge_activity_direction", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_direction", "block_contents": "The directions of the cross-chain bridge transfer.\n\nExample: 'inbound'"}, "doc.sui_models.ez_bridge_activity_sender": {"name": "ez_bridge_activity_sender", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_sender", "block_contents": "The Sui address that directly sent tokens to the bridge contract.\n\nExample: '0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890'"}, "doc.sui_models.ez_bridge_activity_receiver": {"name": "ez_bridge_activity_receiver", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_receiver", "block_contents": "The address designated to receive tokens on the destination chain (or on the source chain, for intermediate steps).\n\nExample: '0x9876543210987654321098765432109876543210987654321098765432109876'"}, "doc.sui_models.ez_bridge_activity_destination_chain": {"name": "ez_bridge_activity_destination_chain", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_destination_chain", "block_contents": "The target blockchain network for the bridged assets.\n\nExample: 'ethereum'"}, "doc.sui_models.ez_bridge_activity_source_chain": {"name": "ez_bridge_activity_source_chain", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_source_chain", "block_contents": "The originating blockchain network for the bridged assets.\n\nExample: 'ethereum'"}, "doc.sui_models.ez_bridge_activity_bridge_address": {"name": "ez_bridge_activity_bridge_address", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_bridge_address", "block_contents": "The Sui object or package address handling the bridge operation.\n\nExample: '0x26efee2b51c911237888e5dc6702868abca3c7ac12c53f76ef8eba0697695e3d'"}, "doc.sui_models.ez_bridge_activity_coin_type": {"name": "ez_bridge_activity_coin_type", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_coin_type", "block_contents": "The coin type or token identifier for the asset being bridged on Sui.\n\nExample: '0x2::sui::SUI'"}, "doc.sui_models.ez_bridge_activity_token_symbol": {"name": "ez_bridge_activity_token_symbol", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_token_symbol", "block_contents": "The symbol identifier for the bridged token.\n\nExample: 'SUI'"}, "doc.sui_models.ez_bridge_activity_amount_unadj": {"name": "ez_bridge_activity_amount_unadj", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_amount_unadj", "block_contents": "The raw token amount without decimal adjustment.\n\nExample: 1000000000"}, "doc.sui_models.ez_bridge_activity_amount": {"name": "ez_bridge_activity_amount", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_amount", "block_contents": "The decimal-adjusted amount of tokens bridged.\n\nExample: 1.0"}, "doc.sui_models.ez_bridge_activity_amount_usd": {"name": "ez_bridge_activity_amount_usd", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_amount_usd", "block_contents": "The hourly close USD value of bridged tokens at the time of the transaction.\n\nExample: 1000.50"}, "doc.sui_models.ez_bridge_activity_token_is_verified": {"name": "ez_bridge_activity_token_is_verified", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.ez_bridge_activity_token_is_verified", "block_contents": "Whether the token is verified by the Flipside team.\n\nExample: true"}, "doc.sui_models.platform_address": {"name": "platform_address", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.platform_address", "block_contents": "The smart contract address of the DEX platform that facilitated this swap. This represents the deployed contract address for the specific DEX protocol on the Sui blockchain. Used for contract verification, security analysis, and linking to platform-specific metadata and configurations. Essential for protocol-specific analysis and filtering across different DeFi platforms."}, "doc.sui_models.pool_address": {"name": "pool_address", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.pool_address", "block_contents": "The address of the liquidity pool involved in the swap. For protocols that use AMM (Automated Market Maker) pools, this identifies the specific pool contract. May be NULL for order book-based protocols like DeepBook or centralized limit order protocols. Essential for pool-specific analytics, liquidity analysis, and understanding which pools are most active for different token pairs."}, "doc.sui_models.amount_in_raw": {"name": "amount_in_raw", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.amount_in_raw", "block_contents": "The raw amount of tokens being swapped in (input amount) before any decimal adjustments. This represents the exact on-chain token amount as it appears in the swap event. Preserves precision for accurate calculations and is essential for volume analysis, price impact calculations, and swap size distribution analysis. Critical for calculating swap rates and understanding the actual token amounts exchanged in each swap."}, "doc.sui_models.amount_out_raw": {"name": "amount_out_raw", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.amount_out_raw", "block_contents": "The raw amount of tokens being swapped out (output amount) before any decimal adjustments. This represents the exact on-chain token amount that the user receives from the swap. Critical for calculating swap rates, slippage analysis, and understanding the actual token amounts exchanged in each swap. Essential for volume analysis and swap size distribution analysis."}, "doc.sui_models.a_to_b": {"name": "a_to_b", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.a_to_b", "block_contents": "A boolean flag indicating the direction of the swap within the pool. When TRUE, the swap goes from token A to token B; when FALSE, it goes from token B to token A. This field is protocol-specific and may be NULL for some DEX platforms. Important for understanding swap direction and pool token ordering conventions. Follows each protocol's specific pool token ordering conventions."}, "doc.sui_models.fee_amount_raw": {"name": "fee_amount_raw", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.fee_amount_raw", "block_contents": "The raw amount of fees charged for the swap transaction. This includes protocol fees, liquidity provider fees, and any other transaction costs. May be 0 for protocols that don't charge explicit fees or when fees are embedded in the swap amounts. Essential for fee revenue analysis and total cost of trading calculations. For some protocols like Aftermath, this may be NULL as fees are handled differently."}, "doc.sui_models.partner_address": {"name": "partner_address", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.partner_address", "block_contents": "The address of a partner or affiliate that facilitated the swap (if applicable). Used primarily by Cetus for their partner program where swaps can be routed through partner contracts. May be NULL for most protocols or when no partner was involved. Useful for tracking partner performance and affiliate program analytics within the DEX ecosystem."}, "doc.sui_models.steps": {"name": "steps", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.steps", "block_contents": "The number of steps or hops required to complete the swap. For simple swaps, this is typically 1. For complex swaps involving multiple pools or routing through multiple protocols, this indicates the number of intermediate steps. Essential for understanding swap complexity and routing efficiency across different protocols. Critical for analyzing multi-hop swaps and routing optimization."}, "doc.sui_models.token_in_type": {"name": "token_in_type", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.token_in_type", "block_contents": "The full type identifier of the token being swapped in (input token). This follows Sui's Move type format (e.g., \"0x2::sui::SUI\" for the native SUI token). Essential for token identification, pricing lookups, and token-specific analytics. Used for calculating USD values and token pair analysis. Some models ensure proper formatting by adding '0x' prefix if missing."}, "doc.sui_models.token_out_type": {"name": "token_out_type", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.token_out_type", "block_contents": "The full type identifier of the token being swapped out (output token). This follows Sui's Move type format and represents the token that the user receives from the swap. Critical for token pair analysis, swap rate calculations, and understanding token flow patterns across the DeFi ecosystem. Some models ensure proper formatting by adding '0x' prefix if missing."}, "doc.sui_models.trader_address": {"name": "trader_address", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.trader_address", "block_contents": "The address of the wallet or account that initiated the swap. May be NULL for some protocols that don't explicitly track the trader address in their events. Essential for user behavior analysis, wallet tracking, and understanding individual trader patterns and preferences across different DEX platforms. For some protocols like Aftermath, this is extracted from the transaction sender."}, "doc.sui_models.dex_swaps_id": {"name": "dex_swaps_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.dex_swaps_id", "block_contents": "A unique surrogate key generated from the combination of transaction identifiers and swap details. For the general DEX table, this combines tx_digest and event_index. For protocol-specific tables like Aftermath, this may include additional fields like trader_address, token_in_type, token_out_type, amount_in_raw, and amount_out_raw. This provides a stable, unique identifier for each swap event that can be used as a primary key for downstream analytics and data modeling. Ensures data integrity and prevents duplicate processing."}, "doc.sui_models.platform": {"name": "platform", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.platform", "block_contents": "The name of the decentralized exchange platform where the swap occurred. Currently supports seven major Sui DEX protocols: Cetus, Turbos, Bluefin, Aftermath AMM, FlowX, DeepBook, and Momentum. This field enables protocol-specific analysis, performance comparison, and market share calculations across different DeFi platforms. Essential for filtering and grouping swap data by protocol."}, "doc.sui_models.referral_amount_raw": {"name": "referral_amount_raw", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.referral_amount_raw", "block_contents": "The raw amount of referral rewards or commissions generated from this swap. Used by Cetus for their referral program to track referral program payouts. May be 0 for protocols without referral programs or when no referral was used. Important for referral program analytics and partner performance tracking. Essential for understanding the economic incentives and reward structures within DeFi protocols."}, "doc.sui_models._invocation_id": {"name": "_invocation_id", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models._invocation_id", "block_contents": "A unique identifier for the dbt run that created or updated this record. This field is used for data lineage tracking and debugging purposes. Helps identify which specific dbt execution was responsible for processing each record and enables traceability back to the source code and configuration used. Essential for ETL monitoring, data quality tracking, and troubleshooting pipeline issues."}, "doc.sui_models.platform_name": {"name": "platform_name", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.platform_name", "block_contents": "The human-readable name of the DEX platform, derived from address labeling or defaulting to the platform address if no label exists. This field provides user-friendly platform identification for analytics, reporting, and dashboard displays. Examples include \"Cetus AMM\", \"Turbos Finance\", \"Bluefin\", etc. Essential for protocol-specific analysis and cross-platform comparisons."}, "doc.sui_models.platform_project_name": {"name": "platform_project_name", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.platform_project_name", "block_contents": "The project or company name associated with the DEX platform, extracted from address labeling data. This field provides organizational context for the platform, enabling corporate-level analysis and relationship mapping. May be NULL for platforms without established project labels. Useful for understanding platform ownership, partnerships, and ecosystem relationships."}, "doc.sui_models.pool_name": {"name": "pool_name", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.pool_name", "block_contents": "The human-readable name of the liquidity pool involved in the swap, derived from address labeling or defaulting to the pool address if no label exists. This field provides user-friendly pool identification for analytics and reporting. Examples might include \"SUI-USDC Pool\", \"ETH-USDT Pool\", etc. Essential for pool-specific analysis and liquidity concentration studies."}, "doc.sui_models.pool_project_name": {"name": "pool_project_name", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.pool_project_name", "block_contents": "The project or protocol name associated with the liquidity pool, extracted from address labeling data. This field provides organizational context for the pool, enabling analysis of which protocols are providing liquidity for specific token pairs. May be NULL for pools without established project labels. Useful for understanding liquidity provider relationships and protocol partnerships."}, "doc.sui_models.amount_in": {"name": "amount_in", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.amount_in", "block_contents": "The decimal-adjusted amount of tokens being swapped in (input amount), calculated by dividing the raw amount by the token's decimal places. This field provides human-readable token amounts for analysis and reporting. For example, if amount_in_raw is 1000000000 and token_in_decimals is 9, then amount_in would be 1.0. Essential for user-friendly volume analysis and token flow calculations."}, "doc.sui_models.amount_out": {"name": "amount_out", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.amount_out", "block_contents": "The decimal-adjusted amount of tokens being swapped out (output amount), calculated by dividing the raw amount by the token's decimal places. This field provides human-readable token amounts for analysis and reporting. For example, if amount_out_raw is 500000000 and token_out_decimals is 6, then amount_out would be 500.0. Critical for calculating swap rates and understanding actual token exchange ratios."}, "doc.sui_models.fee_amount": {"name": "fee_amount", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.fee_amount", "block_contents": "The decimal-adjusted amount of fees charged for the swap transaction, calculated by dividing the raw fee amount by the input token's decimal places. This field provides human-readable fee amounts for cost analysis and reporting. May be NULL when no fees are charged or when fee information is not available. Essential for fee revenue analysis and total cost of trading calculations."}, "doc.sui_models.token_in_address": {"name": "token_in_address", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.token_in_address", "block_contents": "The extracted token address from the full token type identifier, representing the contract address of the input token. This field is derived by splitting the token_in_type on '::' and taking the first component. For native SUI tokens, this will be '0x2'. Essential for token identification, pricing lookups, and cross-model joins with token metadata tables."}, "doc.sui_models.token_in_symbol": {"name": "token_in_symbol", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.token_in_symbol", "block_contents": "The trading symbol for the input token, such as 'SUI', 'USDC', 'USDT', etc. This field is populated from token price data and provides user-friendly token identification for analytics and reporting. May be NULL for tokens without established price data. Essential for token pair analysis and trading pattern identification."}, "doc.sui_models.token_in_name": {"name": "token_in_name", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.token_in_name", "block_contents": "The full descriptive name of the input token, such as 'Sui Token', 'USD Coin', 'Tether USD', etc. This field is populated from token price data and provides complete token identification for analytics and reporting. May be NULL for tokens without established price data. Useful for comprehensive token analysis and user interface displays."}, "doc.sui_models.token_out_address": {"name": "token_out_address", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.token_out_address", "block_contents": "The extracted token address from the full token type identifier, representing the contract address of the output token. This field is derived by splitting the token_out_type on '::' and taking the first component. For native SUI tokens, this will be '0x2'. Essential for token identification, pricing lookups, and cross-model joins with token metadata tables."}, "doc.sui_models.token_out_symbol": {"name": "token_out_symbol", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.token_out_symbol", "block_contents": "The trading symbol for the output token, such as 'SUI', 'USDC', 'USDT', etc. This field is populated from token price data and provides user-friendly token identification for analytics and reporting. May be NULL for tokens without established price data. Essential for token pair analysis and trading pattern identification."}, "doc.sui_models.token_out_name": {"name": "token_out_name", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.token_out_name", "block_contents": "The full descriptive name of the output token, such as 'Sui Token', 'USD Coin', 'Tether USD', etc. This field is populated from token price data and provides complete token identification for analytics and reporting. May be NULL for tokens without established price data. Useful for comprehensive token analysis and user interface displays."}, "doc.sui_models.token_in_price": {"name": "token_in_price", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.token_in_price", "block_contents": "The USD price of the input token at the time of the swap, sourced from hourly price data. This field enables USD-denominated volume calculations and financial analysis. May be NULL for tokens without available price data. Essential for calculating amount_in_usd and swap_volume_usd fields."}, "doc.sui_models.token_out_price": {"name": "token_out_price", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.token_out_price", "block_contents": "The USD price of the output token at the time of the swap, sourced from hourly price data. This field enables USD-denominated volume calculations and financial analysis. May be NULL for tokens without available price data. Essential for calculating amount_out_usd and swap_volume_usd fields."}, "doc.sui_models.token_in_decimals": {"name": "token_in_decimals", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.token_in_decimals", "block_contents": "The number of decimal places for the input token, used for converting raw amounts to human-readable values. This field is sourced from token price data or defaults to common values (6 for USDC/USDT, 9 for others). Essential for accurate amount_in calculations and token precision handling."}, "doc.sui_models.token_out_decimals": {"name": "token_out_decimals", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.token_out_decimals", "block_contents": "The number of decimal places for the output token, used for converting raw amounts to human-readable values. This field is sourced from token price data or defaults to common values (6 for USDC/USDT, 9 for others). Essential for accurate amount_out calculations and token precision handling."}, "doc.sui_models.amount_in_usd": {"name": "amount_in_usd", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.amount_in_usd", "block_contents": "The USD value of the input token amount, calculated as amount_in * token_in_price. This field provides USD-denominated volume metrics for financial analysis and reporting. May be NULL when token_in_price is not available. Essential for cross-protocol volume comparisons and financial reporting."}, "doc.sui_models.amount_out_usd": {"name": "amount_out_usd", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.amount_out_usd", "block_contents": "The USD value of the output token amount, calculated as amount_out * token_out_price. This field provides USD-denominated volume metrics for financial analysis and reporting. May be NULL when token_out_price is not available. Essential for cross-protocol volume comparisons and financial reporting."}, "doc.sui_models.swap_volume_usd": {"name": "swap_volume_usd", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.swap_volume_usd", "block_contents": "The USD volume of the swap, calculated as the average of amount_in_usd and amount_out_usd when both prices are available, or using whichever price is available when only one is present. This field provides the primary metric for volume analysis and cross-protocol comparisons. May be NULL when no price data is available. Essential for DeFi volume analytics and market analysis."}, "doc.sui_models.trader_name": {"name": "trader_name", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.trader_name", "block_contents": "The human-readable name of the trader, derived from address labeling or defaulting to the trader address if no label exists. This field provides user-friendly trader identification for analytics and reporting. May include wallet names, exchange addresses, or other labeled entities. Essential for trader behavior analysis and wallet tracking."}, "doc.sui_models.trader_project_name": {"name": "trader_project_name", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.trader_project_name", "block_contents": "The project or organization name associated with the trader address, extracted from address labeling data. This field provides organizational context for the trader, enabling analysis of institutional vs. retail trading patterns. May be NULL for individual traders without established project labels. Useful for understanding trading behavior by entity type."}, "doc.sui_models.package_index": {"name": "package_index", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.package_index", "block_contents": "Zero-based index of the package within a transaction that contains multiple package calls. Used to distinguish between different package invocations in the same transaction. Essential for multi-package transaction analysis and package-level flow tracking. Example: 0 for the first package call, 1 for the second, etc."}, "doc.sui_models.swap_index": {"name": "swap_index", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.swap_index", "block_contents": "Sequential index of the swap within a transaction that contains multiple swaps. Used to order and identify individual swaps when a transaction performs multiple DEX operations. Essential for multi-swap transaction analysis and swap-level flow tracking. Example: 1 for the first swap, 2 for the second, etc."}, "doc.sui_models.token_in_from_txs": {"name": "token_in_from_txs", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.token_in_from_txs", "block_contents": "Boolean flag indicating whether the input token type was derived from transaction payload data rather than event data. True when the token type could not be determined from the event and was inferred from transaction type arguments. Important for data quality assessment and understanding token identification reliability. Example: true when event data was insufficient for token identification."}, "doc.sui_models.token_out_from_txs": {"name": "token_out_from_txs", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/columns.md", "original_file_path": "models/descriptions/columns.md", "unique_id": "doc.sui_models.token_out_from_txs", "block_contents": "Boolean flag indicating whether the output token type was derived from transaction payload data rather than event data. True when the token type could not be determined from the event and was inferred from transaction type arguments. Important for data quality assessment and understanding token identification reliability. Example: true when event data was insufficient for token identification."}, "doc.sui_models.core__dim_tokens": {"name": "core__dim_tokens", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/tables.md", "original_file_path": "models/descriptions/tables.md", "unique_id": "doc.sui_models.core__dim_tokens", "block_contents": "Dimension table providing authoritative metadata for all fungible and non-fungible tokens on the Sui blockchain. Includes decimals, symbols, names, descriptions, and icon URLs sourced from on-chain metadata and Move package definitions. Serves as the canonical reference for token identification, decimal normalization, and UI display across analytics workflows. Data is sourced from bronze_api__coin_metadata and cross-referenced with on-chain Move modules, covering both native SUI and custom tokens. Essential for accurate balance calculations, token flow analysis, and user-facing applications. Supports lineage tracing from raw on-chain metadata to analytics-ready token attributes."}, "doc.sui_models.core__fact_transfers": {"name": "core__fact_transfers", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/tables.md", "original_file_path": "models/descriptions/tables.md", "unique_id": "doc.sui_models.core__fact_transfers", "block_contents": "Fact table capturing all token and coin transfers on the Sui blockchain at the finest granularity. Each row represents a single transfer event between a sender and receiver, including the raw amount, coin type, and transaction context. Serves as the foundational transfer table that filters out null amounts from the silver layer and provides clean transfer data for downstream analytics. Includes checkpoint metadata, transaction success status, and balance change indexing to support precise tracking of asset movements across the network. Enables reconstruction of transfer flows, portfolio analysis, and compliance reporting by providing complete visibility into all token movements between addresses. Data is derived from transaction execution effects and object state transitions, following Sui's explicit ownership model where transfers represent actual balance changes between distinct owners."}, "doc.sui_models.core__ez_transfers": {"name": "core__ez_transfers", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/tables.md", "original_file_path": "models/descriptions/tables.md", "unique_id": "doc.sui_models.core__ez_transfers", "block_contents": "Enhanced fact table providing user-friendly transfer analytics by joining core transfer data with token metadata. Each row represents a single transfer event enriched with normalized amounts (decimal-adjusted), token symbols, and human-readable identifiers. Serves as the primary table for transfer analysis, portfolio tracking, and user-facing applications by converting raw blockchain amounts into meaningful values. The amount_normalized field automatically applies decimal precision adjustments based on token metadata, enabling direct comparison across different token types and simplifying balance calculations. Includes all transfer metadata from the base fact table while adding token symbols for easy identification and normalized amounts for accurate financial analysis. Essential for dashboards, reporting tools, and analytics workflows that require human-readable token information and precise decimal calculations."}, "doc.sui_models.core__fact_balance_changes": {"name": "core__fact_balance_changes", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/tables.md", "original_file_path": "models/descriptions/tables.md", "unique_id": "doc.sui_models.core__fact_balance_changes", "block_contents": "Fact table recording every token and coin balance change event on the Sui blockchain at the finest granularity. Each row represents a single balance delta (positive or negative) for a specific owner, coin type, and transaction, capturing the full flow of assets across wallets and contracts. Includes object IDs, transaction context, and ownership metadata, supporting precise tracking of token movements, portfolio changes, and treasury operations. Enables reconstruction of wallet balances, detection of large transfers, and analysis of token velocity. Data is derived from transaction execution effects and object state transitions, following Sui's explicit ownership and versioning model."}, "doc.sui_models.core__fact_changes": {"name": "core__fact_changes", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/tables.md", "original_file_path": "models/descriptions/tables.md", "unique_id": "doc.sui_models.core__fact_changes", "block_contents": "Fact table capturing all object state transitions on the Sui blockchain, including creation, mutation, deletion, wrapping, and unwrapping of objects. Each record documents the full lifecycle of Sui objects (NFTs, coins, packages, etc.) as they are manipulated by transactions. Includes object IDs, versions, types, and ownership changes, enabling forensic analysis, compliance reporting, and application behavior tracing. Supports lineage analysis by linking object changes to specific transactions, epochs, and owners. Critical for understanding Sui's object-centric data model and for tracking resource flows, upgrades, and state mutations across the network."}, "doc.sui_models.core__fact_checkpoints": {"name": "core__fact_checkpoints", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/tables.md", "original_file_path": "models/descriptions/tables.md", "unique_id": "doc.sui_models.core__fact_checkpoints", "block_contents": "Fact table representing all finalized checkpoints on the Sui blockchain, which serve as consensus points bundling multiple transactions for finality and recovery. Each checkpoint aggregates metadata such as checkpoint sequence number, timestamp, transaction count, validator signatures, and epoch information. Checkpoints are produced via the Mysticeti consensus mechanism approximately every 250ms, providing the backbone for time series analysis (TPS, latency, validator participation). This table is essential for measuring network throughput, tracking validator performance, and ensuring data integrity. Supports analytics on epoch transitions, validator set changes, and network health."}, "doc.sui_models.core__fact_events": {"name": "core__fact_events", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/tables.md", "original_file_path": "models/descriptions/tables.md", "unique_id": "doc.sui_models.core__fact_events", "block_contents": "Fact table logging all events emitted by Move smart contracts and system operations during transaction execution on Sui. Each event is a structured data emission containing contract-specific or protocol-level information, including event type, JSON payload, emitting module, and transaction context. Enables deep dApp analytics, protocol monitoring, and behavioral analysis by exposing granular details of on-chain activity. Events are indexed by transaction and checkpoint, supporting real-time monitoring, anomaly detection, and business intelligence use cases. Essential for understanding contract interactions, user engagement, and protocol-level trends in the Sui ecosystem."}, "doc.sui_models.core__fact_transaction_blocks": {"name": "core__fact_transaction_blocks", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/tables.md", "original_file_path": "models/descriptions/tables.md", "unique_id": "doc.sui_models.core__fact_transaction_blocks", "block_contents": "Fact table providing detailed metadata for every transaction block executed on the Sui blockchain. Includes transaction hash, sender, success status, gas usage, fee breakdowns, error codes, and dependency tracking. Serves as the primary source for transaction-level analytics, fee optimization, and network performance monitoring. Supports lineage tracing from transaction inputs to execution outcomes, including gas smashing, storage fee rebates, and error diagnostics. Critical for understanding Sui's transaction model, user behavior, and application performance at scale."}, "doc.sui_models.core__fact_transaction_inputs": {"name": "core__fact_transaction_inputs", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/tables.md", "original_file_path": "models/descriptions/tables.md", "unique_id": "doc.sui_models.core__fact_transaction_inputs", "block_contents": "Fact table enumerating all inputs consumed by transactions on the Sui blockchain, including owned objects, shared objects, pure values, and input types. Each record details the object ID, version, mutability, and ownership at the time of transaction execution. Enables dependency analysis, resource utilization tracking, and validation of transaction atomicity. Supports analytics on input complexity, shared object usage, and transaction parallelism. Essential for understanding how Sui's object-centric model enables parallel execution and for tracing the full dependency graph of complex transactions."}, "doc.sui_models.core__fact_transactions": {"name": "core__fact_transactions", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/tables.md", "original_file_path": "models/descriptions/tables.md", "unique_id": "doc.sui_models.core__fact_transactions", "block_contents": "Fact table decomposing every transaction on the Sui blockchain into its constituent commands and payloads. Each row represents a single command (e.g., Move call, transfer, split, merge) within a programmable transaction block, capturing execution order, command type, and argument details. Enables granular analysis of smart contract interactions, dApp usage patterns, and transaction complexity. Supports lineage tracing from high-level user actions to low-level on-chain effects, including Move function calls and resource transfers. Critical for protocol analytics, developer adoption tracking, and understanding composability in the Sui ecosystem."}, "doc.sui_models.defi__ez_bridge_activity": {"name": "defi__ez_bridge_activity", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/tables.md", "original_file_path": "models/descriptions/tables.md", "unique_id": "doc.sui_models.defi__ez_bridge_activity", "block_contents": "Enhanced fact table providing comprehensive cross-chain bridge analytics by consolidating bridge-related events from multiple protocols (Sui Bridge, Wormhole) into a unified dataset. Each row represents a single cross-chain asset movement event enriched with protocol metadata, token information, and USD pricing. Serves as the primary table for cross-chain DeFi analysis, bridge protocol comparison, and capital flow tracking by normalizing bridge events across different protocols into a consistent format. The table automatically applies decimal precision adjustments and USD conversions, enabling direct comparison of bridge volumes and user activity across different chains and token types. Includes complete transaction context, source/destination chain mapping, and protocol identification to support comprehensive cross-chain analytics, security monitoring, and risk assessment. Essential for DeFi dashboards, bridge protocol analysis, and multi-chain ecosystem studies that require unified cross-chain data and standardized bridge event tracking."}, "doc.sui_models.defi__ez_dex_swaps": {"name": "defi__ez_dex_swaps", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/tables.md", "original_file_path": "models/descriptions/tables.md", "unique_id": "doc.sui_models.defi__ez_dex_swaps", "block_contents": "## Description\nThis table provides a comprehensive view of decentralized exchange (DEX) swap activity across the Sui blockchain ecosystem, enriched with token pricing, metadata, and user labels. It consolidates swap events from seven major DEX protocols (Cetus, Turbos, Bluefin, Aftermath AMM, FlowX, DeepBook, and Momentum) into a standardized format with USD valuations, token metadata, and enhanced labeling. The model transforms raw swap data by adding price information, decimal-adjusted amounts, USD volume calculations, and human-readable labels for platforms, pools, and traders. This enables cross-protocol DeFi analytics, volume comparisons, and comprehensive trading pattern analysis.\n\n## Key Use Cases\n- Cross-protocol DeFi volume analysis and market share comparison\n- Token pair trading volume and liquidity analysis\n- DEX performance benchmarking and protocol adoption tracking\n- Trader behavior analysis and wallet clustering\n- USD-denominated volume metrics and financial reporting\n- Token flow tracking and cross-protocol arbitrage detection\n- Fee revenue analysis and protocol economics modeling\n- Real-time DeFi dashboard development and monitoring\n\n## Important Relationships\n- Sources data from `sui.silver.dex_swaps` for base swap events\n- Enriches with token pricing from `crosschain.price.ez_prices_hourly` for USD calculations\n- Joins with `crosschain.core.dim_labels` for platform, pool, and trader labeling\n- Supports downstream DeFi analytics and cross-protocol dashboards\n- Provides foundation for token flow analysis and market microstructure studies\n\n## Commonly-used Fields\n- `platform` and `platform_name`: Essential for protocol-specific analysis and filtering\n- `amount_in_usd` and `amount_out_usd`: Critical for volume analysis and financial reporting\n- `swap_volume_usd`: Primary field for cross-protocol volume comparisons and market analysis\n- `token_in_symbol` and `token_out_symbol`: Key for token pair analysis and trading pattern identification\n- `block_timestamp`: Primary field for time-series analysis and trend detection\n- `trader_address` and `trader_name`: Essential for wallet tracking and user behavior analysis\n- `pool_address` and `pool_name`: Important for liquidity pool analysis and pool-specific metrics"}, "doc.sui_models.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/__overview__.md", "original_file_path": "models/descriptions/__overview__.md", "unique_id": "doc.sui_models.__overview__", "block_contents": "# Welcome to the Flipside Crypto SUI Models Documentation\n\n## **What does this documentation cover?**\nThe documentation included here details the design of the SUI blockchain tables and views available via [Flipside Crypto.](https://flipsidecrypto.xyz/) For more information on how these models are built, please see [the github repository.](https://github.com/flipsideCrypto/sui-models/)\n\n## **How do I use these docs?**\nThe easiest way to navigate this documentation is to use the Quick Links below. These links will take you to the documentation for each table, which contains a description, a list of the columns, and other helpful information.\n\nIf you are experienced with dbt docs, feel free to use the sidebar to navigate the documentation, as well as explore the relationships between tables and the logic building them.\n\nThere is more information on how to use dbt docs in the last section of this document.\n\n## **Quick Links to Table Documentation**\n\n**Click on the links below to jump to the documentation for each schema.**\n\n### Core Tables\n**Dimension Tables:**\n- [core__dim_tokens](#!/model/model.sui_models.core__dim_tokens)\n\n**Fact Tables:**\n- [core__fact_balance_changes](#!/model/model.sui_models.core__fact_balance_changes)\n- [core__fact_changes](#!/model/model.sui_models.core__fact_changes)\n- [core__fact_checkpoints](#!/model/model.sui_models.core__fact_checkpoints)\n- [core__fact_events](#!/model/model.sui_models.core__fact_events)\n- [core__fact_transaction_blocks](#!/model/model.sui_models.core__fact_transaction_blocks)\n- [core__fact_transaction_inputs](#!/model/model.sui_models.core__fact_transaction_inputs)\n- [core__fact_transactions](#!/model/model.sui_models.core__fact_transactions)\n\n### DEFI Tables\n**Easy Views:**\n- [defi__ez_dex_swaps](#!/model/model.sui_models.defi__ez_dex_swaps)\n\n### Price Tables (`sui`.`PRICES`.`<table_name>`)\n- [ez_asset_metadata](#!/model/model.sui_models.prices__ez_asset_metadata)\n- [ez_prices_hourly](#!/model/model.sui_models.prices__ez_prices_hourly)\n\nThe SUI models are built using three layers of SQL models: **bronze, silver, and gold (or core/defi/nft).**\n\n- Bronze: Data is loaded in from the source as a view\n- Silver: All necessary parsing, filtering, de-duping, and other transformations are done here\n- Gold (or core/defi/nft): Final views and tables that are available publicly\n\nThe dimension tables are sourced from a variety of on-chain and off-chain sources.\n\nConvenience views (denoted ez_) are a combination of different fact and dimension tables. These views are built to make it easier to query the data.\n\n## **Using dbt docs**\n### Navigation\n\nYou can use the ```Project``` and ```Database``` navigation tabs on the left side of the window to explore the models in the project.\n\n### Database Tab\n\nThis view shows relations (tables and views) grouped into database schemas. Note that ephemeral models are *not* shown in this interface, as they do not exist in the database.\n\n### Graph Exploration\n\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the Expand button at the top-right of this lineage pane, you'll be able to see all of the models that are used to build, or are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the ```--models``` and ```--exclude``` model selection syntax to filter the models in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n### **More information**\n- [Flipside](https://flipsidecrypto.xyz/)\n- [Github](https://github.com/FlipsideCrypto/sui-models)\n- [What is dbt?](https://docs.getdbt.com/docs/introduction)\n\n<llm>\n<blockchain>Sui</blockchain>\n<aliases>SUI, Sui Network</aliases>\n<ecosystem>Layer 1, Object-Centric Parallel Execution</ecosystem>\n<description>Sui is a high-performance Layer 1 blockchain designed for instant settlement and infinite scalability. Built on the Move programming language with an object-centric data model, Sui enables parallel execution of transactions that don't conflict, achieving unprecedented throughput and low latency. The blockchain uses the Mysticeti consensus mechanism and supports both exclusive objects (owned by single addresses) and shared objects (accessible by multiple users). Sui was specifically designed for high-volume decentralized applications including gaming, NFTs, and DeFi, offering developers a secure and scalable platform for building next-generation Web3 applications.</description>\n<external_resources>\n    <block_scanner>https://suiexplorer.com/</block_scanner>\n    <developer_documentation>https://docs.sui.io/</developer_documentation>\n</external_resources>\n<expert>\n  <constraints>\n    <table_availability>\n      Ensure that your queries use only available tables for Sui blockchain. The gold layer contains core fact and dimension tables, plus curated DeFi models. Use the quick links above to navigate to specific table documentation.\n    </table_availability>\n    \n    <schema_structure>\n      Understand that the database follows a bronze/silver/gold layering pattern. Bronze models contain raw data, silver models apply transformations and filtering, and gold models provide analytics-ready data. The gold layer includes core tables (fact_ and dim_ tables) and curated models (ez_ tables) that combine multiple sources with business logic.\n    </schema_structure>\n  </constraints>\n\n  <optimization>\n    <performance_filters>\n      Use filters like block_timestamp over the last N days to improve query performance. For DeFi analysis, consider filtering by specific platforms or token pairs to reduce data volume.\n    </performance_filters>\n    \n    <query_structure>\n      Use CTEs for complex queries to improve readability and maintainability. Leverage the object-centric nature of Sui data by joining on object IDs and transaction digests for efficient lookups.\n    </query_structure>\n    \n    <implementation_guidance>\n      Be smart with aggregations and window functions when analyzing high-throughput Sui data. Consider the parallel execution model when analyzing transaction patterns and dependencies.\n    </implementation_guidance>\n  </optimization>\n\n  <domain_mapping>\n    <token_operations>\n      For token transfers and balance changes, use core__fact_balance_changes and core__fact_changes tables. For comprehensive DeFi swap analysis, use defi__ez_dex_swaps which includes pricing and USD valuations.\n    </token_operations>\n    \n    <defi_analysis>\n      For DeFi analysis, utilize defi__ez_dex_swaps table which covers seven major DEX protocols: Cetus, Turbos, Bluefin, Aftermath AMM, FlowX, DeepBook, and Momentum. This table includes USD pricing, token metadata, and enhanced labeling for comprehensive DeFi analytics.\n    </defi_analysis>\n    \n    <nft_analysis>\n      For NFT analysis, use core__fact_changes table filtered by object types that represent NFTs. Sui's object-centric model makes NFT tracking particularly efficient through object ID lookups.\n    </nft_analysis>\n    \n    <specialized_features>\n      Sui's object-centric data model is complex, so ensure you ask clarifying questions when dealing with object relationships and ownership patterns. The parallel execution model means transaction ordering may differ from traditional blockchains.\n    </specialized_features>\n  </domain_mapping>\n\n  <interaction_modes>\n    <direct_user>\n      Ask clarifying questions when dealing with complex Sui data structures, especially around object ownership and transaction dependencies. Provide specific examples using Sui's Move type format and address conventions.\n    </direct_user>\n    \n    <agent_invocation>\n      When invoked by another AI agent, respond with relevant query text and explain Sui-specific considerations like object-centric data model and parallel execution patterns.\n    </agent_invocation>\n  </interaction_modes>\n\n  <engagement>\n    <exploration_tone>\n      Have fun exploring the Sui ecosystem through data! The object-centric model and parallel execution make for fascinating analytics patterns that differ from traditional blockchains.\n    </exploration_tone>\n  </engagement>\n</expert>\n</llm>"}, "doc.sui_models.None": {"name": null, "resource_type": "doc", "package_name": "sui_models", "path": "descriptions/__MCP__.md", "original_file_path": "models/descriptions/__MCP__.md", "unique_id": "doc.sui_models.None", "block_contents": "# Sui Expert Instruction\n\n## Blockchain Overview\n\nSui is a high-performance Layer-1 blockchain designed for scalability, speed, and secure asset ownership. It operates using a unique object-based model rather than an account or UTXO system. Sui's architecture enables parallel execution and low-latency finality, making it well-suited for high-throughput applications like gaming, DeFi, and payments.\n\nYou use your understanding of Sui's object-centric data structure, Move-based smart contracts, and high-throughput consensus design to generate useful Snowflake SQL queries based on the user's request. Sui data analysis requires familiarity with ownership patterns, object state transitions, parallel execution, and rich event logs to provide meaningful insights into on-chain behavior and application performance.\n\n## Architecture and Consensus\n\n### Object-Based Data Model\n\nSui replaces the traditional account or UTXO model with an object-centric system:\n\n* **Objects**: Each on-chain asset is an object with a unique ID and version.\n* **Ownership types**:\n  * **Owned objects**: Belong to a specific address; only the owner can mutate.\n  * **Shared objects**: Modifiable by multiple users/contracts; require consensus.\n  * **Immutable objects**: Cannot be changed once created.\n* **Parallelism**: Independent objects allow simultaneous transaction processing.\n* **Atomicity**: Transactions affecting multiple objects succeed or fail as a unit.\n\n### Delegated Proof-of-Stake (DPoS) and Consensus Layers\n\nSui's consensus is based on DPoS and separates transaction dissemination from ordering:\n\n* **Validator set**: Elected each epoch (\\~24h) by SUI token delegators.\n* **Fast path**: For non-conflicting, owned-object transactions; finalized via quorum signatures.\n* **Byzantine consensus**: Required for shared-object updates; uses Narwhal (DAG mempool) and Bullshark (BFT ordering).\n* **Checkpoints**: Periodic snapshots signed by validators ensure finality and recovery support.\n\n## Technical Implementation\n\n### Addressing and Ownership\n\n* **Addresses**: 32-byte public-key derived identifiers (\"0x...\").\n* **Object tracking**: Ownership is explicit via object metadata.\n* **Versioning**: Prevents double-spending by invalidating previously used versions.\n* **Coin management**: Users hold multiple `Coin<SUI>` objects; operations like split/merge manage amounts.\n\n### Move Smart Contracts\n\n* **Language**: Move is a resource-oriented, safe smart contract language.\n* **Modules and packages**: Immutable unless explicitly upgradable via a controlled cap object.\n* **Entrypoints**: Called by transactions with declared dependencies (objects/types).\n* **Events**: Used to emit structured data for indexing and analytics.\n* **Security**: Type system enforces ownership, prevents duplication or resource leaks.\n\n### Transaction Structure and Gas\n\n* **Programmable Transaction Blocks (PTBs)**: Transactions may contain multiple commands.\n* **Gas model**:\n\n  * Fees paid in `Coin<SUI>`.\n  * Merged coins automatically for gas payment (\"gas smashing\").\n  * Unused gas refunded.\n* **Storage fees**: One-time cost for storing new data; rebates possible for deletions.\n* **Execution effects**: Track created, mutated, and deleted objects per transaction.\n\n## Important Ecosystem Context\n\n### Validator Operations and Safety\n\n* \\~100 validators and \\~2,000 full nodes.\n* **Epoch-based rotation**: Delegators can change stake allocation each epoch.\n* **Slashing and performance metrics**: Poor performers may lose stake or rewards.\n* **Safe Mode**: Used during critical failures for restricted operations only.\n\n### Core Use Cases\n\n* **Gaming**: Dynamic NFTs, fast state changes, and low latency for in-game logic.\n* **DeFi**: Shared liquidity order book (e.g., DeepBook), stablecoins, lending.\n* **Payments**: Micropayment support, low fees, and instant finality.\n* **Web3 UX**: zkLogin (Web2 auth), SuiNS (human-readable names).\n* **Storage and Interop**: Walrus for decentralized file pointers; Ika for bridgeless cross-chain assets.\n\n## Data Modeling Patterns\n\n### Object Ownership and Flow\n\n* **Holdings**: Aggregate `Coin<SUI>` objects per owner to calculate balances.\n* **Object lifecycle**: Trace NFTs or tokens through transactions using object ID and version history.\n* **Merges/splits**: Require custom logic to track fungible flow (especially for SUI).\n\n### Contract and Event Analysis\n\n* **Call tracing**: Use `package_id`, `event_module`, `event_resource` to group activity.\n* **Event logs**: Primary source for high-granularity behavior (e.g., trades, mints).\n* **Transaction context**: Combine events from a single transaction for full execution picture.\n* **Error monitoring**: Track abort codes to identify bugs or misuse.\n\n### Time Series Analysis\n\n* **TPS and finality**: Use checkpoint timestamps to measure throughput.\n* **Active users**: Count unique senders/receivers per day or epoch.\n* **Gas tracking**: Monitor fee levels, cost trends, and storage fund activity.\n* **Validator stats**: Track stake, rewards, delegator changes per epoch.\n\n## Query Optimization and Best Practices\n\n### Performance Considerations\n\n* **Filter by time or epoch**: Always narrow queries by timestamp.\n* **Use indexes**: Join on transaction ID, object ID, or checkpoint ID.\n* **Avoid `IN` over large lists**: Use joins or CTEs instead.\n* **Rollups**: Prefer summary/daily tables for trends.\n* **Incremental queries**: Sample addresses or epochs before scaling.\n\n### Collaborative Analysis Approach\n\n* **Clarify scope**: Guide users from vague asks to specific targets (e.g., from \"usage\" to \"daily NFT mints\").\n* **Bridge mental models**: Explain how Sui differs from EVM/UTXO chains.\n* **Show examples**: Small result samples help refine user intent.\n* **Respect privacy**: Avoid attributing addresses without public labeling.\n* **Stay current**: Keep up with upgrades like Mysticeti and new Move modules.\n\n### Common Analysis Patterns\n\n* **Rich list**: Group and sum `Coin<SUI>` balances by address.\n* **DApp activity**: Filter events/calls by known package IDs.\n* **User funnels**: Track address behavior across contract phases.\n* **Protocol comparison**: Compare contract usage (e.g., AMMs vs. lending).\n* **Anomaly detection**: Spike in transaction count or object creation.\n* **Staking APR**: Compute yield from rewards vs. stake per epoch.\n* **Developer adoption**: Count Move package publishes per month.\n\nSui's architecture creates powerful opportunities for low-latency, highly parallel analysis. Focus on object and event-based queries, use explicit ownership modeling, and leverage checkpoints and epochs for time-based aggregation."}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.livequery_models.__livequery_models__": {"name": "__livequery_models__", "resource_type": "doc", "package_name": "livequery_models", "path": "doc_descriptions/general/__overview__.md", "original_file_path": "models/doc_descriptions/general/__overview__.md", "unique_id": "doc.livequery_models.__livequery_models__", "block_contents": "# Welcome to the Flipside Crypto LiveQuery Models Documentation!\n\n## **What does this documentation cover?**\nThe documentation included here details the design of the LiveQuery functions available via [Flipside Crypto](https://flipsidecrypto.xyz/). For more information on how these functions are built, please see [the github repository.](https://github.com/FlipsideCrypto/livequery-models)\n\n### **Overview of Available Functions**\n\n#### **UTILS Functions**\n\n- `livequery.utils.hex_to_int`: Use this UDF to transform any hex string to integer\n    ```\n    ex: Curve Swaps\n\n    SELECT\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        livequery.utils.hex_to_int(segmented_data [1] :: STRING) :: INTEGER AS tokens_sold\n    FROM\n        optimism.core.fact_event_logs\n    WHERE\n        topics [0] :: STRING IN (\n            '0x8b3e96f2b889fa771c53c981b40daf005f63f637f1869f707052d15a3dd97140',\n            '0xd013ca23e77a65003c2c659c5442c00c805371b7fc1ebd4c206c41d1536bd90b'\n        )\n    ```\n- `livequery.utils.hex_encode_function` (coming soon)(Function VARCHAR): Use this UDF to hex encode any string\n    ```\n    ex: Decimals Function Signature\n\n    SELECT\n        `decimals` AS function_name,\n        livequery.utils.hex_encode_function(`decimals()`) :: STRING AS text_sig,\n        LEFT(text_sig,10) AS function_sig,\n        '0x313ce567' AS expected_sig\n    ```\n- `livequery.utils.evm_decode_logs` (coming soon)\n- `livequery.utils.udf_register_secret`\n\n#### **LIVE Functions & Examples**\n\n- `livequery.live.udf_api`(Method STRING, URL STRING, Headers OBJECT, Data OBJECT): Use this UDF to make a GET or POST request on any API\n    ```\n    ex: Defillama GET request -> working with the output (JSON flatten)\n\n    WITH chain_base AS (\n        SELECT\n            livequery.live.udf_api(\n                'GET','https://api.llama.fi/chains',{},{}\n            ) AS read\n    )\n\n    SELECT\n        VALUE:chainId::STRING AS chain_id,\n        VALUE:name::STRING AS chain,\n        VALUE:tokenSymbol::STRING AS token_symbol\n    FROM chain_base,\n        LATERAL FLATTEN (input=> read:data)\n\n    ex: Solana Token Metadata\n\n    SELECT\n        livequery.live.udf_api(\n            'GET',\n            'https://public-api.solscan.io/token/meta?tokenAddress=SPraYi59a21jEhqvPBbWuwmjA4vdTaSLbiRTefcHJSR',\n            { },\n            { }\n        );\n\n    ex: Running with multiple token addresses at the same time\n\n    WITH solana_addresses AS (\n        SELECT\n            'SPraYi59a21jEhqvPBbWuwmjA4vdTaSLbiRTefcHJSR' AS address\n        UNION\n        SELECT\n            '4KbzSz2VF1LCvEaw8viq1335VgWzNjMd8rwQMsCkKHip'\n    )\n    SELECT\n        livequery.live.udf_api(\n            'GET',\n            concat(\n                'https://public-api.solscan.io/token/meta?tokenAddress=',\n                address\n            ),\n            { },\n            { }\n        )\n    FROM\n        solana_addresses;\n\n    ex: Hit Quicknode (see instructions below for how to register an API Key with Flipside securely)\n\n    SELECT\n        livequery.live.udf_api(\n            'POST',\n            concat(\n                'http://sample-endpoint-name.network.quiknode.pro/',\n                '{my_key}'\n            ),\n            {},\n            { 'method' :'eth_blockNumber',\n              'params' :[],\n                'id' :1,\n                'jsonrpc' :'2.0' },\n            'quicknode'\n        );\n    ```\n\n##### **Registering and Using LiveQuery Credentials to Query Quicknode**\nWith LiveQuery you can safely store encrypted credentials, such as an API key, with Flipside, and query blockchain nodes directly via our SQL interface. Here\u2019s how:\n1. Sign up for a free [Quicknode API Account](https://www.quicknode.com/core-api)\n2. Navigate to ***Endpoints*** on the left hand side then click the ***Get Started*** tab and ***Copy*** the HTTP Provider Endpoint. Do not adjust the Setup or Security parameters.\n3. Visit [Ephit](https://science.flipsidecrypto.xyz/ephit) to obtain an Ephemeral query that will securely link your API Endpoint to Flipside's backend. This will allow you to refer to the URL securely in our application without referencing it or exposing keys directly.\n4. Fill out the form and click ***Submit this Credential***\n5. Paste the provided query into [Flipside](https://flipside.new) and query your node directly in the app with your submitted Credential (`{my_key}`).\n\n##### **API Endpoints available for use with LiveQuery:**\nPlease visit the Flipside discord or open a ticket for questions, concerns or more information.\n\n- Snapshot: [https://hub.snapshot.org/graphql](https://docs.snapshot.org/graphql-api)\n- Defillama: [https://api.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://yields.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://stablecoins.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://bridges.llama.fi/](https://defillama.com/docs/api)\n- Defillama: [https://coins.llama.fi/](https://defillama.com/docs/api)\n- zkSync: [https://api.zksync.io/api/v0.2/](https://docs.zksync.io/apiv02-docs/)\n- DeepNFT Value: [https://api.deepnftvalue.com/v1](https://deepnftvalue.readme.io/reference/getting-started-with-deepnftvalue-api)\n- Zapper: [https://api.zapper.fi/v2/](https://api.zapper.fi/api/static/index.html#/Apps/AppsController_getApps)\n- Helius: [https://api.helius.xyz](https://docs.helius.xyz/introduction/why-helius)\n- Stargaze Name Service: [https://rest.stargaze-apis.com](https://github.com/public-awesome/names/blob/main/API.md)\n\n## **Using dbt docs**\n### Navigation\n\nYou can use the ```Project``` and ```Database``` navigation tabs on the left side of the window to explore the models in the project.\n\n### Database Tab\n\nThis view shows relations (tables and views) grouped into database schemas. Note that ephemeral models are *not* shown in this interface, as they do not exist in the database.\n\n### Graph Exploration\n\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the Expand button at the top-right of this lineage pane, you'll be able to see all of the models that are used to build, or are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the ```--models``` and ```--exclude``` model selection syntax to filter the models in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n### **More information**\n- [Flipside](https://flipsidecrypto.xyz/)\n- [Velocity](https://app.flipsidecrypto.com/velocity?nav=Discover)\n- [Tutorials](https://docs.flipsidecrypto.com/our-data/tutorials)\n- [Github](https://github.com/FlipsideCrypto/external-models)\n- [What is dbt?](https://docs.getdbt.com/docs/introduction)"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {"model.sui_models._sequence_lookback": [{"database": "SUI", "schema": "_sequence_lookback", "name": "_sequence_lookback", "resource_type": "model", "package_name": "sui_models", "path": "streamline/core/_sequence_lookback.sql", "original_file_path": "models/streamline/core/_sequence_lookback.sql", "unique_id": "model.sui_models._sequence_lookback", "fqn": ["sui_models", "streamline", "core", "_sequence_lookback"], "alias": "_sequence_lookback", "checksum": {"name": "sha256", "checksum": "754273907f409a6614eb84241245ad259038a06d4c8b74fd21e86aefac90804e"}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "ephemeral", "incremental_strategy": null, "batch_size": null, "lookback": 1, "begin": null, "persist_docs": {"relation": true, "columns": true}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "append_new_columns", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "event_time": null, "concurrent_batches": null, "access": "protected", "copy_grants": true}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "on_schema_change": "append_new_columns", "materialized": "ephemeral", "enabled": false}, "created_at": 1756141888.7785943, "relation_name": null, "raw_code": "{{ config(\n    materialized = 'ephemeral',\n    enabled = false\n) }}\n\nSELECT\n    COALESCE(MIN(checkpoint_number), 0) AS checkpoint_number\nFROM\n    {{ ref(\"core__fact_checkpoints\") }}\nWHERE\n    block_timestamp >= DATEADD('hour', -72, TRUNCATE(SYSDATE(), 'HOUR'))\n    AND block_timestamp < DATEADD('hour', -71, TRUNCATE(SYSDATE(), 'HOUR'))", "language": "sql", "refs": [{"name": "core__fact_checkpoints", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null, "primary_key": [], "time_spine": null}], "test.livequery_models.test_alchemy_nfts__report_spam_status_200.d062a6f454": [{"database": "SUI", "schema": "test_alchemy_nfts", "name": "test_alchemy_nfts__report_spam_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_alchemy_nfts__report_spam_status_200.sql", "original_file_path": "models/deploy/marketplace/alchemy/alchemy_nfts__alchemy_utils.yml", "unique_id": "test.livequery_models.test_alchemy_nfts__report_spam_status_200.d062a6f454", "fqn": ["livequery_models", "deploy", "marketplace", "alchemy", "test_alchemy_nfts__report_spam_status_200"], "alias": "report_spam_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1756141891.921812, "relation_name": "SUI.test_alchemy_nfts.report_spam_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}{{ config(enabled=False) }}", "language": "sql", "refs": [{"name": "alchemy_nfts__alchemy_utils", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "report_spam", "file_key_name": "models.alchemy_nfts__alchemy_utils", "attached_node": "model.livequery_models.alchemy_nfts__alchemy_utils", "test_metadata": {"name": "test_udf", "kwargs": {"args": null, "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "report_spam", "model": "{{ get_where_subquery(ref('alchemy_nfts__alchemy_utils')) }}"}, "namespace": null}}], "test.livequery_models.test_blockpour_utils__get_status_200.438dcb4c49": [{"database": "SUI", "schema": "test_blockpour_utils", "name": "test_blockpour_utils__get_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_blockpour_utils__get_status_200.sql", "original_file_path": "models/deploy/marketplace/blockpour/blockpour_utils__.yml", "unique_id": "test.livequery_models.test_blockpour_utils__get_status_200.438dcb4c49", "fqn": ["livequery_models", "deploy", "marketplace", "blockpour", "test_blockpour_utils__get_status_200"], "alias": "get_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1756141891.962161, "relation_name": "SUI.test_blockpour_utils.get_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "blockpour_utils__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "get", "file_key_name": "models.blockpour_utils__", "attached_node": "model.livequery_models.blockpour_utils__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/tokens/1/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', {\n  'blockNumber': 17767007\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "get", "model": "{{ get_where_subquery(ref('blockpour_utils__')) }}"}, "namespace": null}}], "test.livequery_models.test_blockpour_utils__post_status_200.8586093b49": [{"database": "SUI", "schema": "test_blockpour_utils", "name": "test_blockpour_utils__post_status_200", "resource_type": "test", "package_name": "livequery_models", "path": "test_blockpour_utils__post_status_200.sql", "original_file_path": "models/deploy/marketplace/blockpour/blockpour_utils__.yml", "unique_id": "test.livequery_models.test_blockpour_utils__post_status_200.8586093b49", "fqn": ["livequery_models", "deploy", "marketplace", "blockpour", "test_blockpour_utils__post_status_200"], "alias": "post_status_200", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": true, "store_failures_as": "table", "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "unrendered_config": {"store_failures": true, "enabled": false}, "created_at": 1756141891.9675827, "relation_name": "SUI.test_blockpour_utils.post_status_200", "raw_code": "{{ test_test_udf(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "blockpour_utils__", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.livequery_models.test_test_udf", "macro.dbt.get_where_subquery"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "post", "file_key_name": "models.blockpour_utils__", "attached_node": "model.livequery_models.blockpour_utils__", "test_metadata": {"name": "test_udf", "kwargs": {"args": "'/v1/model/run', {\n  'slug': 'price.quote',\n  'version': '1.0',\n  'chainId': 1,\n  'blockNumber': 17767016,\n  'input': {}\n}\n", "assertions": ["result:status_code = 200", "result:error IS NULL"], "column_name": "post", "model": "{{ get_where_subquery(ref('blockpour_utils__')) }}"}, "namespace": null}}]}, "parent_map": {"model.sui_models.silver__crosschain_labels": ["source.sui_models.crosschain_silver.labels_combined"], "model.sui_models.silver__complete_token_asset_metadata": ["model.sui_models.bronze__complete_token_asset_metadata"], "model.sui_models.silver__complete_token_prices": ["model.sui_models.bronze__complete_token_prices"], "model.sui_models.silver__checkpoints": ["model.sui_models.bronze__checkpoints", "model.sui_models.bronze__checkpoints_FR"], "model.sui_models.silver__coin_types": ["model.sui_models.bronze__transactions", "model.sui_models.core__fact_balance_changes"], "model.sui_models.silver__transactions": ["model.sui_models.bronze__transactions", "model.sui_models.bronze__transactions_FR"], "model.sui_models.silver__transfers": ["model.sui_models.core__fact_balance_changes", "model.sui_models.core__fact_transactions"], "model.sui_models.silver__dex_swaps": ["model.sui_models.core__fact_events"], "model.sui_models.silver__aftermath_dex_swaps": ["model.sui_models.core__fact_events"], "model.sui_models.silver_bridge__sui_bridge_inbound": ["model.sui_models.bronze__checkpoints", "model.sui_models.core__fact_balance_changes", "model.sui_models.core__fact_events"], "model.sui_models.silver_bridge__wormhole_outbound": ["model.sui_models.bronze__checkpoints", "model.sui_models.core__fact_balance_changes", "model.sui_models.core__fact_events"], "model.sui_models.silver_bridge__wormhole_inbound": ["model.sui_models.bronze__checkpoints", "model.sui_models.core__fact_balance_changes", "model.sui_models.core__fact_events"], "model.sui_models.silver_bridge__sui_bridge_outbound": ["model.sui_models.bronze__checkpoints", "model.sui_models.core__fact_balance_changes", "model.sui_models.core__fact_events"], "model.sui_models.silver_bridge__all_bridges": ["model.sui_models.bronze__checkpoints", "model.sui_models.silver_bridge__sui_bridge_inbound", "model.sui_models.silver_bridge__sui_bridge_outbound", "model.sui_models.silver_bridge__wormhole_inbound", "model.sui_models.silver_bridge__wormhole_outbound"], "model.sui_models.streamline__transactions": ["model.sui_models.streamline__checkpoints_complete"], "model.sui_models.streamline__chainhead": [], "model.sui_models.streamline__checkpoints": ["model.sui_models.streamline__chainhead", "source.sui_models.crosschain_silver.number_sequence"], "model.sui_models.streamline__transactions_complete": ["model.sui_models.bronze__transactions", "model.sui_models.bronze__transactions_FR"], "model.sui_models.streamline__checkpoints_complete": ["model.sui_models.bronze__checkpoints", "model.sui_models.bronze__checkpoints_FR"], "model.sui_models.streamline__transactions_realtime": ["model.sui_models.streamline__transactions", "model.sui_models.streamline__transactions_complete"], "model.sui_models.streamline__checkpoints_realtime": ["model.sui_models.streamline__checkpoints", "model.sui_models.streamline__checkpoints_complete"], "model.sui_models.price__ez_asset_metadata": ["model.sui_models.silver__complete_token_asset_metadata"], "model.sui_models.price__ez_prices_hourly": ["model.sui_models.silver__complete_token_prices"], "model.sui_models.core__fact_balance_changes": ["model.sui_models.silver__transactions"], "model.sui_models.core__dim_tokens": ["model.sui_models.bronze_api__coin_metadata"], "model.sui_models.core__dim_labels": ["model.sui_models.silver__crosschain_labels"], "model.sui_models.core__fact_events": ["model.sui_models.silver__transactions"], "model.sui_models.core__fact_changes": ["model.sui_models.silver__transactions"], "model.sui_models.core__fact_transaction_blocks": ["model.sui_models.silver__transactions"], "model.sui_models.core__fact_transaction_inputs": ["model.sui_models.silver__transactions"], "model.sui_models.core__fact_checkpoints": ["model.sui_models.silver__checkpoints"], "model.sui_models.core__fact_transactions": ["model.sui_models.silver__transactions"], "model.sui_models.core__ez_transfers": ["model.sui_models.core__dim_tokens", "model.sui_models.price__ez_prices_hourly", "model.sui_models.silver__transfers"], "model.sui_models.defi__ez_bridge_activity": ["model.sui_models.core__dim_tokens", "model.sui_models.price__ez_prices_hourly", "model.sui_models.silver_bridge__all_bridges"], "model.sui_models.defi__ez_dex_swaps": ["model.sui_models.core__dim_labels", "model.sui_models.core__dim_tokens", "model.sui_models.price__ez_prices_hourly", "model.sui_models.silver__aftermath_dex_swaps", "model.sui_models.silver__dex_swaps"], "model.sui_models.bronze__transactions_FR": ["source.sui_models.bronze_streamline.transactions"], "model.sui_models.bronze__checkpoints_FR": ["source.sui_models.bronze_streamline.checkpoints"], "model.sui_models.bronze__checkpoints": ["source.sui_models.bronze_streamline.checkpoints"], "model.sui_models.bronze_api__coin_metadata": ["model.sui_models.core__fact_balance_changes"], "model.sui_models.bronze__transactions": ["source.sui_models.bronze_streamline.transactions"], "model.sui_models.bronze__complete_token_asset_metadata": ["source.sui_models.crosschain_silver.complete_token_asset_metadata"], "model.sui_models.bronze__complete_token_prices": ["source.sui_models.crosschain_silver.complete_token_prices"], "operation.sui_models.sui_models-on-run-start-0": [], "operation.sui_models.sui_models-on-run-start-1": [], "operation.sui_models.sui_models-on-run-end-0": [], "model.fsc_utils._datashare___create_gold": [], "model.fsc_utils._datashare___create_udfs": [], "model.livequery_models.live__allow_list": ["model.livequery_models.live"], "model.livequery_models.utils": ["model.livequery_models._utils"], "model.livequery_models.live": ["model.livequery_models._live", "model.livequery_models._utils", "model.livequery_models.utils"], "model.livequery_models.secrets": ["model.livequery_models._utils", "model.livequery_models.live"], "model.livequery_models._utils": [], "model.livequery_models._live": [], "model.livequery_models.playgrounds__": ["model.livequery_models.live"], "model.livequery_models.chainbase_utils__": ["model.livequery_models.live"], "model.livequery_models.fred__": ["model.livequery_models.live"], "model.livequery_models.stakingrewards__": ["model.livequery_models.live"], "model.livequery_models.credmark_utils__": ["model.livequery_models.live"], "model.livequery_models.claude__": ["model.livequery_models.live"], "model.livequery_models.claude_utils__claude_utils": ["model.livequery_models.live"], "model.livequery_models.alchemy_transfers__alchemy_utils": ["model.livequery_models.alchemy_utils__alchemy_utils", "model.livequery_models.live"], "model.livequery_models.alchemy_nfts__alchemy_utils": ["model.livequery_models.alchemy_utils__alchemy_utils", "model.livequery_models.live"], "model.livequery_models.alchemy_tokens__alchemy_utils": ["model.livequery_models.alchemy_utils__alchemy_utils", "model.livequery_models.live"], "model.livequery_models.alchemy_utils__alchemy_utils": ["model.livequery_models.live"], "model.livequery_models.apilayer__": ["model.livequery_models.live"], "model.livequery_models.blockpour_utils__": ["model.livequery_models.live"], "model.livequery_models.defillama__": ["model.livequery_models.live"], "model.livequery_models.deepnftvalue__": ["model.livequery_models.live"], "model.livequery_models.helius_apis__helius_utils": ["model.livequery_models.helius_utils__helius_utils", "model.livequery_models.live"], "model.livequery_models.helius_utils__helius_utils": ["model.livequery_models.live"], "model.livequery_models.helius_das__helius_utils": ["model.livequery_models.helius_utils__helius_utils", "model.livequery_models.live"], "model.livequery_models.zettablock__": ["model.livequery_models.live"], "model.livequery_models.espn__": ["model.livequery_models.live"], "model.livequery_models.github_utils__github_utils": ["model.livequery_models.live"], "model.livequery_models.github_actions__github_utils": ["model.livequery_models.github_utils__github_utils", "model.livequery_models.live"], "model.livequery_models.transpose__": ["model.livequery_models.live"], "model.livequery_models.solscan__": ["model.livequery_models.live"], "model.livequery_models.allday__": ["model.livequery_models.live"], "model.livequery_models.reservoir__": ["model.livequery_models.live"], "model.livequery_models.bitquery__": ["model.livequery_models.live"], "model.livequery_models.topshot__": ["model.livequery_models.live"], "model.livequery_models.zapper__": ["model.livequery_models.live"], "model.livequery_models.cmc__": ["model.livequery_models.live"], "model.livequery_models.strangelove__": ["model.livequery_models.live"], "model.livequery_models.subquery__": ["model.livequery_models.live"], "model.livequery_models.nftscan__": ["model.livequery_models.live"], "model.livequery_models.dappradar__": ["model.livequery_models.live"], "model.livequery_models.opensea__": ["model.livequery_models.live"], "model.livequery_models.snapshot__": ["model.livequery_models.live"], "model.livequery_models.footprint_utils__footprint_utils": ["model.livequery_models.live"], "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"], "model.livequery_models.quicknode_polygon_nfts__quicknode_utils": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"], "model.livequery_models.quicknode_solana_nfts__quicknode_utils": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"], "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"], "model.livequery_models.quicknode_utils__quicknode_utils": ["model.livequery_models.live"], "model.livequery_models.quicknode_polygon_tokens__quicknode_utils": ["model.livequery_models.live", "model.livequery_models.quicknode_utils__quicknode_utils"], "model.livequery_models.coingecko__": ["model.livequery_models.live"], "model.livequery_models.dapplooker__": ["model.livequery_models.live"], "model.livequery_models.covalent__": ["model.livequery_models.live"], "model.livequery_models.avalanche_c__testnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.gnosis__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.base__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.harmony__testnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.arbitrum_nova__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.bsc__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.base__goerli": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.ethereum__goerli": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.polygon__testnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.celo__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.ethereum__mainnet": ["model.livequery_models._eth__decoded_logs", "model.livequery_models._eth__logs", "model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.avalanche_c__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.polygon_zkevm__testnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.bsc__testnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.harmony__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.fantom__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.polygon_zkevm__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.ethereum__sepolia": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.optimism__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.arbitrum_one__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.optimism__goerli": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.polygon__mainnet": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models.arbitrum_one__goerli": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map", "model.livequery_models.live", "model.livequery_models.utils"], "model.livequery_models._evm__abi_map": ["source.livequery_models.crosschain.dim_evm_event_abis"], "model.livequery_models._evm__contracts_map": ["source.livequery_models.crosschain.dim_contracts"], "model.livequery_models._eth__logs": ["source.livequery_models.ethereum_core.fact_event_logs"], "model.livequery_models._eth__decoded_logs": ["source.livequery_models.ethereum_core.ez_decoded_event_logs"], "model.livequery_models._evm__native_symbol_map": [], "analysis.livequery_models.test_crud_udfs_in_schema": ["model.livequery_models._evm__abi_map", "model.livequery_models._evm__contracts_map", "model.livequery_models._evm__native_symbol_map"], "analysis.livequery_models.test_create_or_drop_function_from_config": [], "analysis.livequery_models.generate_test_udf_skeleton": [], "analysis.livequery_models.test_functions_py": [], "analysis.livequery_models.test_functions": [], "seed.livequery_models.live__verified_api_endpoints": [], "operation.livequery_models.livequery_models-on-run-start-0": [], "operation.livequery_models.livequery_models-on-run-end-0": [], "test.sui_models.not_null_silver__complete_token_asset_metadata_PROVIDER.0d1d2c6852": ["model.sui_models.silver__complete_token_asset_metadata"], "test.sui_models.not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS.06a52e0e67": ["model.sui_models.silver__complete_token_asset_metadata"], "test.sui_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN.3791975c91": ["model.sui_models.silver__complete_token_asset_metadata"], "test.sui_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID.fe8350a322": ["model.sui_models.silver__complete_token_asset_metadata"], "test.sui_models.not_null_silver__complete_token_asset_metadata_MODIFIED_TIMESTAMP.58ef7db480": ["model.sui_models.silver__complete_token_asset_metadata"], "test.sui_models.unique_silver__complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID.99f9227588": ["model.sui_models.silver__complete_token_asset_metadata"], "test.sui_models.not_null_silver__complete_token_prices_HOUR.d5f4cd597b": ["model.sui_models.silver__complete_token_prices"], "test.sui_models.not_null_silver__complete_token_prices_TOKEN_ADDRESS.7e03ade9df": ["model.sui_models.silver__complete_token_prices"], "test.sui_models.not_null_silver__complete_token_prices_BLOCKCHAIN.ada1620192": ["model.sui_models.silver__complete_token_prices"], "test.sui_models.not_null_silver__complete_token_prices_BLOCKCHAIN_ID.6aac0fa10e": ["model.sui_models.silver__complete_token_prices"], "test.sui_models.not_null_silver__complete_token_prices_PROVIDER.d7e55cb9a3": ["model.sui_models.silver__complete_token_prices"], "test.sui_models.not_null_silver__complete_token_prices_PRICE.9b78fa1dae": ["model.sui_models.silver__complete_token_prices"], "test.sui_models.not_null_silver__complete_token_prices_IS_IMPUTED.8a84f91c9e": ["model.sui_models.silver__complete_token_prices"], "test.sui_models.not_null_silver__complete_token_prices__INSERTED_TIMESTAMP.90a2d67d90": ["model.sui_models.silver__complete_token_prices"], "test.sui_models.not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP.74882978f6": ["model.sui_models.silver__complete_token_prices"], "test.sui_models.unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID.c4ea6e2a79": ["model.sui_models.silver__complete_token_prices"], "test.sui_models.not_null_silver__transfers_CHECKPOINT_NUMBER.5a112e2666": ["model.sui_models.silver__transfers"], "test.sui_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": ["model.sui_models.silver__transfers"], "test.sui_models.not_null_silver__transfers_TX_DIGEST.491a708e14": ["model.sui_models.silver__transfers"], "test.sui_models.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af": ["model.sui_models.silver__transfers"], "test.sui_models.not_null_silver__transfers_TX_SENDER.a55628723f": ["model.sui_models.silver__transfers"], "test.sui_models.not_null_silver__transfers_SENDER.0abbede6fe": ["model.sui_models.silver__transfers"], "test.sui_models.not_null_silver__transfers_RECEIVER.965c9f325d": ["model.sui_models.silver__transfers"], "test.sui_models.not_null_silver__transfers_BALANCE_CHANGE_INDEX.63ed610263": ["model.sui_models.silver__transfers"], "test.sui_models.not_null_silver__transfers_COIN_TYPE.4382d98e92": ["model.sui_models.silver__transfers"], "test.sui_models.not_null_silver__transfers_AMOUNT_RAW.685359addc": ["model.sui_models.silver__transfers"], "test.sui_models.not_null_silver__transfers_TRANSFERS_ID.37c3782af7": ["model.sui_models.silver__transfers"], "test.sui_models.unique_silver__transfers_TRANSFERS_ID.48d51d4894": ["model.sui_models.silver__transfers"], "test.sui_models.not_null_silver__aftermath_dex_swaps_CHECKPOINT_NUMBER.381507dc3d": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.not_null_silver__aftermath_dex_swaps_BLOCK_TIMESTAMP.3a5db7ac30": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.not_null_silver__aftermath_dex_swaps_TX_DIGEST.c6d9832293": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.not_null_silver__aftermath_dex_swaps_EVENT_INDEX.cc0014d808": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.not_null_silver__aftermath_dex_swaps_EVENT_MODULE.d13926628d": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.not_null_silver__aftermath_dex_swaps_PLATFORM_ADDRESS.5eb9fe88b0": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.not_null_silver__aftermath_dex_swaps_AMOUNT_IN_RAW.bcec4ae47b": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.dbt_utils_expression_is_true_silver__aftermath_dex_swaps_AMOUNT_IN_RAW___0.93e91a724e": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.not_null_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW.f97cf40b44": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.dbt_utils_expression_is_true_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW___0.bd46b88800": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.not_null_silver__aftermath_dex_swaps_STEPS.0a16ef3205": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.dbt_utils_expression_is_true_silver__aftermath_dex_swaps_STEPS___0.6de3517530": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.not_null_silver__aftermath_dex_swaps_TOKEN_IN_TYPE.b5c05db57f": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.not_null_silver__aftermath_dex_swaps_TOKEN_OUT_TYPE.5882817f41": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.not_null_silver__aftermath_dex_swaps_TRADER_ADDRESS.3da26daed1": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.not_null_silver__aftermath_dex_swaps_DEX_SWAPS_ID.7e7816d6cf": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.unique_silver__aftermath_dex_swaps_DEX_SWAPS_ID.0d72db4b89": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.dbt_utils_recency_silver__aftermath_dex_swaps_hour__block_timestamp__6.39240b6829": ["model.sui_models.silver__aftermath_dex_swaps"], "test.sui_models.not_null_silver__dex_swaps_CHECKPOINT_NUMBER.bc0bffc4f6": ["model.sui_models.silver__dex_swaps"], "test.sui_models.not_null_silver__dex_swaps_BLOCK_TIMESTAMP.e312100604": ["model.sui_models.silver__dex_swaps"], "test.sui_models.not_null_silver__dex_swaps_TX_DIGEST.78684ea04b": ["model.sui_models.silver__dex_swaps"], "test.sui_models.not_null_silver__dex_swaps_EVENT_INDEX.ec92461915": ["model.sui_models.silver__dex_swaps"], "test.sui_models.not_null_silver__dex_swaps_EVENT_MODULE.ccc5351e29": ["model.sui_models.silver__dex_swaps"], "test.sui_models.not_null_silver__dex_swaps_PLATFORM_ADDRESS.4a9999c52e": ["model.sui_models.silver__dex_swaps"], "test.sui_models.not_null_silver__dex_swaps_AMOUNT_IN_RAW.beece37b29": ["model.sui_models.silver__dex_swaps"], "test.sui_models.dbt_utils_expression_is_true_silver__dex_swaps_AMOUNT_IN_RAW___0.318bc45989": ["model.sui_models.silver__dex_swaps"], "test.sui_models.not_null_silver__dex_swaps_AMOUNT_OUT_RAW.e61bcbe5cd": ["model.sui_models.silver__dex_swaps"], "test.sui_models.dbt_utils_expression_is_true_silver__dex_swaps_AMOUNT_OUT_RAW___0.5cb864bc54": ["model.sui_models.silver__dex_swaps"], "test.sui_models.not_null_silver__dex_swaps_STEPS.e7d4e72d3e": ["model.sui_models.silver__dex_swaps"], "test.sui_models.dbt_utils_expression_is_true_silver__dex_swaps_STEPS___0.664d0e62a1": ["model.sui_models.silver__dex_swaps"], "test.sui_models.not_null_silver__dex_swaps_TRADER_ADDRESS.48f1ad639e": ["model.sui_models.silver__dex_swaps"], "test.sui_models.not_null_silver__dex_swaps_DEX_SWAPS_ID.3890988d32": ["model.sui_models.silver__dex_swaps"], "test.sui_models.unique_silver__dex_swaps_DEX_SWAPS_ID.28700a94ba": ["model.sui_models.silver__dex_swaps"], "test.sui_models.dbt_utils_recency_silver__dex_swaps_hour__block_timestamp__6.5adfcb03e0": ["model.sui_models.silver__dex_swaps"], "test.sui_models.dbt_utils_recency_silver_bridge__sui_bridge_inbound_hour__block_timestamp__12.9f915d40f9": ["model.sui_models.silver_bridge__sui_bridge_inbound"], "test.sui_models.dbt_utils_recency_silver_bridge__sui_bridge_outbound_hour__block_timestamp__12.9e00d40b33": ["model.sui_models.silver_bridge__sui_bridge_outbound"], "test.sui_models.dbt_utils_recency_silver_bridge__wormhole_inbound_hour__block_timestamp__12.09ce6fbad5": ["model.sui_models.silver_bridge__wormhole_inbound"], "test.sui_models.dbt_utils_recency_silver_bridge__wormhole_outbound_hour__block_timestamp__12.1aa3be7b24": ["model.sui_models.silver_bridge__wormhole_outbound"], "test.sui_models.dbt_expectations_expect_row_values_to_have_recent_data_price__ez_prices_hourly_HOUR__day__2.0fe248380f": ["model.sui_models.price__ez_prices_hourly"], "test.sui_models.dbt_utils_unique_combination_of_columns_price__ez_prices_hourly_HOUR__TOKEN_ADDRESS.2ecd0db69a": ["model.sui_models.price__ez_prices_hourly"], "test.sui_models.dbt_utils_unique_combination_of_columns_price__ez_asset_metadata_TOKEN_ADDRESS.e63e9f6197": ["model.sui_models.price__ez_asset_metadata"], "test.sui_models.not_null_core__dim_tokens_COIN_TYPE.f6255a9590": ["model.sui_models.core__dim_tokens"], "test.sui_models.unique_core__dim_tokens_COIN_TYPE.dfe865c448": ["model.sui_models.core__dim_tokens"], "test.sui_models.not_null_core__dim_tokens_DECIMALS.e4b6ed6a13": ["model.sui_models.core__dim_tokens"], "test.sui_models.not_null_core__dim_tokens_DIM_TOKENS_ID.4f26cddda6": ["model.sui_models.core__dim_tokens"], "test.sui_models.unique_core__dim_tokens_DIM_TOKENS_ID.47c54ac27c": ["model.sui_models.core__dim_tokens"], "test.sui_models.not_null_core__dim_tokens_INSERTED_TIMESTAMP.cbe58319ac": ["model.sui_models.core__dim_tokens"], "test.sui_models.not_null_core__dim_tokens_MODIFIED_TIMESTAMP.ecc00492b1": ["model.sui_models.core__dim_tokens"], "test.sui_models.dbt_utils_recency_core__dim_tokens_hour__modified_timestamp__48.a736aabbb1": ["model.sui_models.core__dim_tokens"], "test.sui_models.not_null_core__fact_balance_changes_CHECKPOINT_NUMBER.712e9516de": ["model.sui_models.core__fact_balance_changes"], "test.sui_models.not_null_core__fact_balance_changes_BLOCK_TIMESTAMP.209115a1df": ["model.sui_models.core__fact_balance_changes"], "test.sui_models.not_null_core__fact_balance_changes_TX_DIGEST.9ab34b7398": ["model.sui_models.core__fact_balance_changes"], "test.sui_models.not_null_core__fact_balance_changes_TX_SUCCEEDED.5a8ae68598": ["model.sui_models.core__fact_balance_changes"], "test.sui_models.not_null_core__fact_balance_changes_BALANCE_CHANGE_INDEX.10baa58370": ["model.sui_models.core__fact_balance_changes"], "test.sui_models.not_null_core__fact_balance_changes_COIN_TYPE.255ad8a0b7": ["model.sui_models.core__fact_balance_changes"], "test.sui_models.not_null_core__fact_balance_changes_AMOUNT.954584e181": ["model.sui_models.core__fact_balance_changes"], "test.sui_models.not_null_core__fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID.97c8da1cb0": ["model.sui_models.core__fact_balance_changes"], "test.sui_models.unique_core__fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID.b89d77afcd": ["model.sui_models.core__fact_balance_changes"], "test.sui_models.not_null_core__fact_balance_changes_INSERTED_TIMESTAMP.a692bc5daa": ["model.sui_models.core__fact_balance_changes"], "test.sui_models.not_null_core__fact_balance_changes_MODIFIED_TIMESTAMP.5cba81239d": ["model.sui_models.core__fact_balance_changes"], "test.sui_models.dbt_utils_recency_core__fact_balance_changes_hour__block_timestamp__12.32ab5141fb": ["model.sui_models.core__fact_balance_changes"], "test.sui_models.not_null_core__fact_changes_CHECKPOINT_NUMBER.6ba94e8a67": ["model.sui_models.core__fact_changes"], "test.sui_models.not_null_core__fact_changes_BLOCK_TIMESTAMP.65a5d8d067": ["model.sui_models.core__fact_changes"], "test.sui_models.not_null_core__fact_changes_TX_DIGEST.30f8466020": ["model.sui_models.core__fact_changes"], "test.sui_models.not_null_core__fact_changes_TX_SUCCEEDED.9a09390f0a": ["model.sui_models.core__fact_changes"], "test.sui_models.not_null_core__fact_changes_CHANGE_INDEX.215cfe518f": ["model.sui_models.core__fact_changes"], "test.sui_models.not_null_core__fact_changes_TYPE.1652843536": ["model.sui_models.core__fact_changes"], "test.sui_models.not_null_core__fact_changes_FACT_CHANGES_ID.a878e88a0f": ["model.sui_models.core__fact_changes"], "test.sui_models.unique_core__fact_changes_FACT_CHANGES_ID.0bf099f198": ["model.sui_models.core__fact_changes"], "test.sui_models.not_null_core__fact_changes_INSERTED_TIMESTAMP.c5d820190f": ["model.sui_models.core__fact_changes"], "test.sui_models.not_null_core__fact_changes_MODIFIED_TIMESTAMP.6c8d37c0a7": ["model.sui_models.core__fact_changes"], "test.sui_models.dbt_utils_recency_core__fact_changes_hour__block_timestamp__12.f9a4e6a047": ["model.sui_models.core__fact_changes"], "test.sui_models.not_null_core__fact_checkpoints_CHECKPOINT_NUMBER.23f044cfc4": ["model.sui_models.core__fact_checkpoints"], "test.sui_models.unique_core__fact_checkpoints_CHECKPOINT_NUMBER.d6238f25d7": ["model.sui_models.core__fact_checkpoints"], "test.sui_models.not_null_core__fact_checkpoints_BLOCK_TIMESTAMP.878a6c6b3b": ["model.sui_models.core__fact_checkpoints"], "test.sui_models.not_null_core__fact_checkpoints_EPOCH.9e68df58eb": ["model.sui_models.core__fact_checkpoints"], "test.sui_models.not_null_core__fact_checkpoints_CHECKPOINT_DIGEST.26643b93a5": ["model.sui_models.core__fact_checkpoints"], "test.sui_models.not_null_core__fact_checkpoints_NETWORK_TOTAL_TRANSACTIONS.044ce0039b": ["model.sui_models.core__fact_checkpoints"], "test.sui_models.not_null_core__fact_checkpoints_TX_COUNT.6e621d73e1": ["model.sui_models.core__fact_checkpoints"], "test.sui_models.not_null_core__fact_checkpoints_FACT_CHECKPOINTS_ID.40f4e7fdc8": ["model.sui_models.core__fact_checkpoints"], "test.sui_models.unique_core__fact_checkpoints_FACT_CHECKPOINTS_ID.a6be984d3f": ["model.sui_models.core__fact_checkpoints"], "test.sui_models.not_null_core__fact_checkpoints_INSERTED_TIMESTAMP.21826dee37": ["model.sui_models.core__fact_checkpoints"], "test.sui_models.not_null_core__fact_checkpoints_MODIFIED_TIMESTAMP.6c60cec49e": ["model.sui_models.core__fact_checkpoints"], "test.sui_models.dbt_utils_recency_core__fact_checkpoints_hour__block_timestamp__12.d94caf0aaa": ["model.sui_models.core__fact_checkpoints"], "test.sui_models.dbt_utils_sequential_values_core__fact_checkpoints_checkpoint_number__1.7d1cc12bd5": ["model.sui_models.core__fact_checkpoints"], "test.sui_models.not_null_core__fact_events_CHECKPOINT_NUMBER.5356f1bf08": ["model.sui_models.core__fact_events"], "test.sui_models.not_null_core__fact_events_BLOCK_TIMESTAMP.d71341f7ec": ["model.sui_models.core__fact_events"], "test.sui_models.not_null_core__fact_events_TX_DIGEST.91cd501657": ["model.sui_models.core__fact_events"], "test.sui_models.not_null_core__fact_events_TX_SUCCEEDED.0e0a46f5a7": ["model.sui_models.core__fact_events"], "test.sui_models.not_null_core__fact_events_EVENT_INDEX.a8f913a5e4": ["model.sui_models.core__fact_events"], "test.sui_models.not_null_core__fact_events_TYPE.525810bb88": ["model.sui_models.core__fact_events"], "test.sui_models.not_null_core__fact_events_FACT_EVENTS_ID.b32ffdbbd0": ["model.sui_models.core__fact_events"], "test.sui_models.unique_core__fact_events_FACT_EVENTS_ID.8c501ad6d4": ["model.sui_models.core__fact_events"], "test.sui_models.not_null_core__fact_events_INSERTED_TIMESTAMP.5d33d86914": ["model.sui_models.core__fact_events"], "test.sui_models.not_null_core__fact_events_MODIFIED_TIMESTAMP.db0915010c": ["model.sui_models.core__fact_events"], "test.sui_models.dbt_utils_recency_core__fact_events_hour__block_timestamp__12.aaafbddc50": ["model.sui_models.core__fact_events"], "test.sui_models.not_null_core__fact_transaction_blocks_CHECKPOINT_NUMBER.c5c1745cc1": ["model.sui_models.core__fact_transaction_blocks"], "test.sui_models.not_null_core__fact_transaction_blocks_BLOCK_TIMESTAMP.6dfb10fe43": ["model.sui_models.core__fact_transaction_blocks"], "test.sui_models.not_null_core__fact_transaction_blocks_TX_DIGEST.62786b1fdd": ["model.sui_models.core__fact_transaction_blocks"], "test.sui_models.unique_core__fact_transaction_blocks_TX_DIGEST.09d1c840c1": ["model.sui_models.core__fact_transaction_blocks"], "test.sui_models.not_null_core__fact_transaction_blocks_TX_SUCCEEDED.281c601d54": ["model.sui_models.core__fact_transaction_blocks"], "test.sui_models.not_null_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID.3f22e3ab59": ["model.sui_models.core__fact_transaction_blocks"], "test.sui_models.unique_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID.5d32a6ba08": ["model.sui_models.core__fact_transaction_blocks"], "test.sui_models.not_null_core__fact_transaction_blocks_INSERTED_TIMESTAMP.131d5e4dd8": ["model.sui_models.core__fact_transaction_blocks"], "test.sui_models.not_null_core__fact_transaction_blocks_MODIFIED_TIMESTAMP.0e9e2d11f9": ["model.sui_models.core__fact_transaction_blocks"], "test.sui_models.dbt_utils_recency_core__fact_transaction_blocks_hour__block_timestamp__12.87cc230450": ["model.sui_models.core__fact_transaction_blocks"], "test.sui_models.not_null_core__fact_transaction_inputs_CHECKPOINT_NUMBER.df61d4cc2d": ["model.sui_models.core__fact_transaction_inputs"], "test.sui_models.not_null_core__fact_transaction_inputs_BLOCK_TIMESTAMP.08e6b6701e": ["model.sui_models.core__fact_transaction_inputs"], "test.sui_models.not_null_core__fact_transaction_inputs_TX_DIGEST.b65bf46c81": ["model.sui_models.core__fact_transaction_inputs"], "test.sui_models.not_null_core__fact_transaction_inputs_TX_SUCCEEDED.c9a2a69ceb": ["model.sui_models.core__fact_transaction_inputs"], "test.sui_models.not_null_core__fact_transaction_inputs_INPUT_INDEX.4714be8bb9": ["model.sui_models.core__fact_transaction_inputs"], "test.sui_models.not_null_core__fact_transaction_inputs_TYPE.7a59977a2b": ["model.sui_models.core__fact_transaction_inputs"], "test.sui_models.not_null_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID.60cf1bc519": ["model.sui_models.core__fact_transaction_inputs"], "test.sui_models.unique_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID.d1ccb6d62d": ["model.sui_models.core__fact_transaction_inputs"], "test.sui_models.not_null_core__fact_transaction_inputs_INSERTED_TIMESTAMP.d23cbe874e": ["model.sui_models.core__fact_transaction_inputs"], "test.sui_models.not_null_core__fact_transaction_inputs_MODIFIED_TIMESTAMP.38ee9adfce": ["model.sui_models.core__fact_transaction_inputs"], "test.sui_models.dbt_utils_recency_core__fact_transaction_inputs_hour__block_timestamp__12.7bcb5b383d": ["model.sui_models.core__fact_transaction_inputs"], "test.sui_models.not_null_core__fact_transactions_CHECKPOINT_NUMBER.56e496e05b": ["model.sui_models.core__fact_transactions"], "test.sui_models.not_null_core__fact_transactions_BLOCK_TIMESTAMP.74f4267099": ["model.sui_models.core__fact_transactions"], "test.sui_models.not_null_core__fact_transactions_TX_DIGEST.b3fd102a93": ["model.sui_models.core__fact_transactions"], "test.sui_models.not_null_core__fact_transactions_TX_SUCCEEDED.b734f84bae": ["model.sui_models.core__fact_transactions"], "test.sui_models.not_null_core__fact_transactions_PAYLOAD_INDEX.4132a9cff1": ["model.sui_models.core__fact_transactions"], "test.sui_models.not_null_core__fact_transactions_PAYLOAD_TYPE.2c53f707c4": ["model.sui_models.core__fact_transactions"], "test.sui_models.not_null_core__fact_transactions_FACT_TRANSACTIONS_ID.c784aa0849": ["model.sui_models.core__fact_transactions"], "test.sui_models.unique_core__fact_transactions_FACT_TRANSACTIONS_ID.464d549945": ["model.sui_models.core__fact_transactions"], "test.sui_models.not_null_core__fact_transactions_INSERTED_TIMESTAMP.8978e0f6b1": ["model.sui_models.core__fact_transactions"], "test.sui_models.not_null_core__fact_transactions_MODIFIED_TIMESTAMP.0c743560bb": ["model.sui_models.core__fact_transactions"], "test.sui_models.dbt_utils_recency_core__fact_transactions_hour__block_timestamp__12.4c30ef6e6f": ["model.sui_models.core__fact_transactions"], "test.sui_models.dbt_utils_unique_combination_of_columns_core__dim_labels_ADDRESS.0626bcf09a": ["model.sui_models.core__dim_labels"], "test.sui_models.not_null_core__ez_transfers_CHECKPOINT_NUMBER.f4715a41ec": ["model.sui_models.core__ez_transfers"], "test.sui_models.not_null_core__ez_transfers_BLOCK_TIMESTAMP.bc207eb78e": ["model.sui_models.core__ez_transfers"], "test.sui_models.not_null_core__ez_transfers_TX_DIGEST.5b0fadc094": ["model.sui_models.core__ez_transfers"], "test.sui_models.not_null_core__ez_transfers_BALANCE_CHANGE_INDEX.e882b43eab": ["model.sui_models.core__ez_transfers"], "test.sui_models.not_null_core__ez_transfers_TX_SUCCEEDED.eb6879ca96": ["model.sui_models.core__ez_transfers"], "test.sui_models.not_null_core__ez_transfers_TX_SENDER.d3504600b8": ["model.sui_models.core__ez_transfers"], "test.sui_models.not_null_core__ez_transfers_SENDER.0853fc5cd5": ["model.sui_models.core__ez_transfers"], "test.sui_models.not_null_core__ez_transfers_RECEIVER.d4d739d824": ["model.sui_models.core__ez_transfers"], "test.sui_models.not_null_core__ez_transfers_COIN_TYPE.ff9b8da7e4": ["model.sui_models.core__ez_transfers"], "test.sui_models.not_null_core__ez_transfers_AMOUNT_RAW.3c41c9bfec": ["model.sui_models.core__ez_transfers"], "test.sui_models.not_null_core__ez_transfers_EZ_TRANSFERS_ID.5fbbeba2b3": ["model.sui_models.core__ez_transfers"], "test.sui_models.unique_core__ez_transfers_EZ_TRANSFERS_ID.869ef61698": ["model.sui_models.core__ez_transfers"], "test.sui_models.not_null_core__ez_transfers_INSERTED_TIMESTAMP.c96eb74a2a": ["model.sui_models.core__ez_transfers"], "test.sui_models.not_null_core__ez_transfers_MODIFIED_TIMESTAMP.a437846ff7": ["model.sui_models.core__ez_transfers"], "test.sui_models.dbt_utils_recency_core__ez_transfers_hour__block_timestamp__12.34360dd404": ["model.sui_models.core__ez_transfers"], "test.sui_models.not_null_defi__ez_bridge_activity_CHECKPOINT_NUMBER.1046fc00e8": ["model.sui_models.defi__ez_bridge_activity"], "test.sui_models.not_null_defi__ez_bridge_activity_BLOCK_TIMESTAMP.eb16926026": ["model.sui_models.defi__ez_bridge_activity"], "test.sui_models.not_null_defi__ez_bridge_activity_TX_DIGEST.53854c8459": ["model.sui_models.defi__ez_bridge_activity"], "test.sui_models.not_null_defi__ez_bridge_activity_EVENT_INDEX.83a405a4b0": ["model.sui_models.defi__ez_bridge_activity"], "test.sui_models.not_null_defi__ez_bridge_activity_bridge_address.9436097f13": ["model.sui_models.defi__ez_bridge_activity"], "test.sui_models.not_null_defi__ez_bridge_activity_platform.ca9ee8cd85": ["model.sui_models.defi__ez_bridge_activity"], "test.sui_models.not_null_defi__ez_bridge_activity_protocol.fda817c891": ["model.sui_models.defi__ez_bridge_activity"], "test.sui_models.not_null_defi__ez_bridge_activity_direction.c74531b1e0": ["model.sui_models.defi__ez_bridge_activity"], "test.sui_models.not_null_defi__ez_bridge_activity_ez_bridge_activity_id.eb9dea0184": ["model.sui_models.defi__ez_bridge_activity"], "test.sui_models.unique_defi__ez_bridge_activity_ez_bridge_activity_id.d14e92e9ee": ["model.sui_models.defi__ez_bridge_activity"], "test.sui_models.not_null_defi__ez_dex_swaps_CHECKPOINT_NUMBER.74203a52c4": ["model.sui_models.defi__ez_dex_swaps"], "test.sui_models.not_null_defi__ez_dex_swaps_BLOCK_TIMESTAMP.b21ec41642": ["model.sui_models.defi__ez_dex_swaps"], "test.sui_models.not_null_defi__ez_dex_swaps_TX_DIGEST.26721507d6": ["model.sui_models.defi__ez_dex_swaps"], "test.sui_models.not_null_defi__ez_dex_swaps_EVENT_INDEX.275df8c906": ["model.sui_models.defi__ez_dex_swaps"], "test.sui_models.not_null_defi__ez_dex_swaps_PLATFORM_ADDRESS.8405745a8b": ["model.sui_models.defi__ez_dex_swaps"], "test.sui_models.not_null_defi__ez_dex_swaps_PLATFORM_NAME.2e202dfe75": ["model.sui_models.defi__ez_dex_swaps"], "test.sui_models.not_null_defi__ez_dex_swaps_AMOUNT_IN_RAW.47f972a8fb": ["model.sui_models.defi__ez_dex_swaps"], "test.sui_models.not_null_defi__ez_dex_swaps_AMOUNT_OUT_RAW.a93bb57e13": ["model.sui_models.defi__ez_dex_swaps"], "test.sui_models.not_null_defi__ez_dex_swaps_TOKEN_IN_TYPE.44b0ac5c5a": ["model.sui_models.defi__ez_dex_swaps"], "test.sui_models.not_null_defi__ez_dex_swaps_TOKEN_OUT_ADDRESS.3adc7d010f": ["model.sui_models.defi__ez_dex_swaps"], "test.sui_models.not_null_defi__ez_dex_swaps_TRADER_ADDRESS.24dceb0705": ["model.sui_models.defi__ez_dex_swaps"], "test.sui_models.not_null_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID.e64665588d": ["model.sui_models.defi__ez_dex_swaps"], "test.sui_models.unique_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID.07eaa2e5cb": ["model.sui_models.defi__ez_dex_swaps"], "test.sui_models.dbt_utils_recency_defi__ez_dex_swaps_hour__block_timestamp__6.0e11e4f514": ["model.sui_models.defi__ez_dex_swaps"], "test.livequery_models.test__live_udf_api_batched_post_data_object.0524c38098": ["model.livequery_models.live"], "test.livequery_models.test__live_udf_api_batched_post_jsonrpc_ethereum_batch.0af69e0283": ["model.livequery_models.live"], "test.livequery_models.test__live_udf_api_batched_post_jsonrpc_solana.8b95c0ed0b": ["model.livequery_models.live"], "test.livequery_models.test__live_udf_api_post_data_object.208f9d5456": ["model.livequery_models.live"], "test.livequery_models.test__live_udf_api_post_data_array.f30e6de8c8": ["model.livequery_models.live"], "test.livequery_models.test__live_udf_api_post_data_string.e2159319bb": ["model.livequery_models.live"], "test.livequery_models.test__live_udf_api_get_method.a1fbeefdc8": ["model.livequery_models.live"], "test.livequery_models.test__live_udf_api_get_with_params.549ea05b06": ["model.livequery_models.live"], "test.livequery_models.test__live_udf_api_post_batch_jsonrpc.b4de1e1fc5": ["model.livequery_models.live"], "test.livequery_models.test__live_udf_api_post_jsonrpc_solana.01c400739e": ["model.livequery_models.live"], "test.livequery_models.test__live_udf_api_post_jsonrpc_solana_batch.70d22f9667": ["model.livequery_models.live"], "test.livequery_models.test__live_udf_api_post_jsonrpc_ethereum_batch.4a9ed4a8d7": ["model.livequery_models.live"], "test.livequery_models.test__utils_udf_json_rpc_call.0b87c6050e": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_dict_true_1.3bf42c4e1b": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_dict_true_2.764afd6db8": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_dict_true_space.11f0932fc3": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_dict_true_special.4eef6cb355": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_dict_true_array.614d53ca8a": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_dict_false_1.e2e07ad77a": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_dict_false_2.58739709ab": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_dict_false_space.1167d3f089": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_dict_false_special.0cd3cb5826": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_dict_false_array.9524cea2e8": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_dict_1.1d75f92e0e": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_dict_2.60da312d8c": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_dict_space.d5e1917fd6": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_dict_special.6f25d30fd9": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_dict_array.25f6af5cf8": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_array_true_1.f1dc90fd5d": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_array_true_2.4c09ca3de2": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_array_true_space.c150fa3544": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_array_true_special.14abbd82f3": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_array_true_array.559475a80a": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_array_false_1.ffe0d93235": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_array_false_2.f6e4d9a06a": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_array_false_space.c46a422a10": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_array_false_special.ad3b4ce496": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_array_false_array.979bfafd11": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_array_1.bae96ece17": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_array_2.ff2898d4a2": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_array_space.67b6f51498": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_array_special.746423269a": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_urlencode_array_array.3d05dcb6a9": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_int_to_binary.46856460db": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_int_to_binary_large_number.feba996e3b": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_binary_to_int.907b20f381": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_binary_to_int_large_number.926bff44e9": ["model.livequery_models.utils"], "test.livequery_models.test__utils_udf_evm_decode_log.b6fedb07e9": ["model.livequery_models.utils"], "test.livequery_models.test___utils_udf_introspect.79bd27a18b": ["model.livequery_models._utils"], "test.livequery_models.test_playgrounds__query_subgraph_status_200_liquidity_pools.dfcb23f707": ["model.livequery_models.playgrounds__"], "test.livequery_models.test_playgrounds__query_subgraph_status_200_total_pool_count.86c8b9c6ee": ["model.livequery_models.playgrounds__"], "test.livequery_models.test_chainbase_utils__get_status_200.07b6733652": ["model.livequery_models.chainbase_utils__"], "test.livequery_models.test_fred__get_series_status_200.51822e30ca": ["model.livequery_models.fred__"], "test.livequery_models.test_stakingrewards__query_status_200.144a35304b": ["model.livequery_models.stakingrewards__"], "test.livequery_models.test_credmark_utils__get_status_200.d1548e1f6e": ["model.livequery_models.credmark_utils__"], "test.livequery_models.test_claude__post_messages_only_one_message.ff8a12fc1b": ["model.livequery_models.claude__"], "test.livequery_models.test_claude__post_messages_with_model.7b5774fbf2": ["model.livequery_models.claude__"], "test.livequery_models.test_claude__post_messages_with_all_params.0917a032d2": ["model.livequery_models.claude__"], "test.livequery_models.test_claude__count_message_tokens.f5bafb2bce": ["model.livequery_models.claude__"], "test.livequery_models.test_claude__list_models.8516d777c7": ["model.livequery_models.claude__"], "test.livequery_models.test_claude__get_model.1f65c29a92": ["model.livequery_models.claude__"], "test.livequery_models.test_claude__post_messages_batch.e4ee537ae3": ["model.livequery_models.claude__"], "test.livequery_models.test_claude__list_message_batches.f5d6c40b59": ["model.livequery_models.claude__"], "test.livequery_models.test_claude__list_message_batches_with_before.aae86d2911": ["model.livequery_models.claude__"], "test.livequery_models.test_claude__list_message_batches_with_after.0e42b728e7": ["model.livequery_models.claude__"], "test.livequery_models.test_claude__get_message_batch.b52b8b8d04": ["model.livequery_models.claude__"], "test.livequery_models.test_claude__get_message_batch_results.ecc8ad465c": ["model.livequery_models.claude__"], "test.livequery_models.test_claude_utils__post_status_200.a32a62cfdf": ["model.livequery_models.claude_utils__claude_utils"], "test.livequery_models.test_alchemy_tokens__get_token_allowance_status_200.65ce803e24": ["model.livequery_models.alchemy_tokens__alchemy_utils"], "test.livequery_models.test_alchemy_tokens__get_token_balances_status_200.bdaa3fdabb": ["model.livequery_models.alchemy_tokens__alchemy_utils"], "test.livequery_models.test_alchemy_tokens__get_token_metadata_status_200.ff08820c76": ["model.livequery_models.alchemy_tokens__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_nfts_status_200.34e3001576": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_owners_for_token_status_200.c534c2579d": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_owners_for_collection_status_200.3cdb9f0962": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__is_holder_of_collection_status_200.d94f7ae355": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_contracts_for_owner_status_200.29e9e60296": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_nft_metadata_status_200.aad531a83a": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_nft_metadata_batch_status_200.44d0ef0140": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_contract_metadata_status_200.0a9337a17a": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_contract_metadata_batch_status_200.78a02ffe28": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__invalidate_contract_status_200.1ac32b4945": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__reingest_contract_status_200.3c2c45fd00": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__search_contract_metadata_status_200.1e97937b32": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_nfts_for_collection_status_200.f7ff9b5ee5": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_spam_contracts_status_200.b9dfb4e306": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__is_spam_contract_status_200.91af21989f": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__is_airdrop_status_200.58ce4f1bdc": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_floor_price_status_200.f2125d71e4": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__get_nft_sales_status_200.223f727f9f": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__compute_rarity_status_200.942425aa31": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_nfts__summarize_nft_attributes_status_200.99d7f57e35": ["model.livequery_models.alchemy_nfts__alchemy_utils"], "test.livequery_models.test_alchemy_transfers__get_asset_transfers_status_200.f1f3f416e4": ["model.livequery_models.alchemy_transfers__alchemy_utils"], "test.livequery_models.test_apilayer__get_status_200.f739b0d36b": ["model.livequery_models.apilayer__"], "test.livequery_models.test_defillama__get_status_200.90864f8f89": ["model.livequery_models.defillama__"], "test.livequery_models.test_deepnftvalue__get_status_200.49fba544bb": ["model.livequery_models.deepnftvalue__"], "test.livequery_models.test_helius_das__get_asset_status_200.3e65208714": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_signatures_for_asset_status_200.529a6b605d": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__search_assets_status_200.2373c30616": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_asset_proof_status_200.2ed48f9fe3": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_assets_by_owner_status_200.6f2f1ef95c": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_assets_by_authority_status_200.c9ac02b165": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_assets_by_creator_status_200.e8cb071d3a": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_das__get_assets_by_group_status_200.fe5813195d": ["model.livequery_models.helius_das__helius_utils"], "test.livequery_models.test_helius_apis__token_metadata_status_200.c2bafa3fb0": ["model.livequery_models.helius_apis__helius_utils"], "test.livequery_models.test_helius_apis__balances_status_200.d668884644": ["model.livequery_models.helius_apis__helius_utils"], "test.livequery_models.test_helius_apis__parse_transactions_status_200.71053900da": ["model.livequery_models.helius_apis__helius_utils"], "test.livequery_models.test_espn__get_status_200.b4f84cc829": ["model.livequery_models.espn__"], "test.livequery_models.test_github_utils__octocat_status_200.3573395088": ["model.livequery_models.github_utils__github_utils"], "test.livequery_models.test_github_actions__workflows_status_200.1cc531bd94": ["model.livequery_models.github_actions__github_utils"], "test.livequery_models.test_github_actions__runs_status_200.2d145a41cb": ["model.livequery_models.github_actions__github_utils"], "test.livequery_models.test_github_actions__workflow_runs_status_200.abcfd5d553": ["model.livequery_models.github_actions__github_utils"], "test.livequery_models.test_transpose__get_status_200.8721d94682": ["model.livequery_models.transpose__"], "test.livequery_models.test_solscan_public_api_get__get_status_200.388381be71": ["model.livequery_models.solscan__"], "test.livequery_models.test_allday__graphql_status_200.8cfd62f9a1": ["model.livequery_models.allday__"], "test.livequery_models.test_reservoir__get_status_200.cb905ea233": ["model.livequery_models.reservoir__"], "test.livequery_models.test_bitquery__graphql_status_200.11917beb18": ["model.livequery_models.bitquery__"], "test.livequery_models.test_topshot__graphql_status_200.fb93e3b220": ["model.livequery_models.topshot__"], "test.livequery_models.test_cmc__get_status_200.1e44de8c9e": ["model.livequery_models.cmc__"], "test.livequery_models.test_strangelove__get_status_200.0a58865924": ["model.livequery_models.strangelove__"], "test.livequery_models.test_subquery__graphql_status_200.b25433a976": ["model.livequery_models.subquery__"], "test.livequery_models.test_nftscan__get_status_200.33868e0f0d": ["model.livequery_models.nftscan__"], "test.livequery_models.test_dappradar__get_status_200.979ea475dc": ["model.livequery_models.dappradar__"], "test.livequery_models.test_opensea__get_status_200.5de63cfbb1": ["model.livequery_models.opensea__"], "test.livequery_models.test_snapshot__query_status_200.35a2cffb40": ["model.livequery_models.snapshot__"], "test.livequery_models.test_footprint_utils__get_status_200_v2_protocol_info.4d260facf4": ["model.livequery_models.footprint_utils__footprint_utils"], "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.3d5c91f8e2": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.c34c43a92d": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.29d4ecb431": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.9cda095850": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.990e59cd6c": ["model.livequery_models.quicknode_ethereum_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.529daa7446": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.d60e37734e": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_tokens__get_transactions_by_address_status_200.194093aade": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.2bffddb733": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.57669f1a96": ["model.livequery_models.quicknode_polygon_tokens__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.5a3e5bd53e": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_status_200.e34b6fbe64": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.ba7f5aeceb": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.2e5143d642": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.34afbca510": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.b69737052b": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_status_200.2d1f2ae9d6": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.8286191e06": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.2f6ba1e185": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_polygon_nfts__verify_nfts_owner_status_200.e87bb12c13": ["model.livequery_models.quicknode_polygon_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_status_200.94f0e0082e": ["model.livequery_models.quicknode_solana_nfts__quicknode_utils"], "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.70f38f0e31": ["model.livequery_models.quicknode_solana_nfts__quicknode_utils"], "test.livequery_models.test_coingecko__get_status_200.047f15c956": ["model.livequery_models.coingecko__"], "test.livequery_models.test_dapplooker__get_chart_status_202.4fedf28822": ["model.livequery_models.dapplooker__"], "test.livequery_models.test_covalent__get_status_200.bb43bb7f69": ["model.livequery_models.covalent__"], "source.sui_models.bronze_streamline.checkpoints": [], "source.sui_models.bronze_streamline.transactions": [], "source.sui_models.crosschain.address_tags": [], "source.sui_models.crosschain.dim_dates": [], "source.sui_models.crosschain_silver.number_sequence": [], "source.sui_models.crosschain_silver.labels_combined": [], "source.sui_models.crosschain_silver.complete_token_asset_metadata": [], "source.sui_models.crosschain_silver.complete_token_prices": [], "source.livequery_models.crosschain.dim_date_hours": [], "source.livequery_models.crosschain.dim_contracts": [], "source.livequery_models.crosschain.dim_evm_event_abis": [], "source.livequery_models.ethereum_core.fact_event_logs": [], "source.livequery_models.ethereum_core.ez_decoded_event_logs": []}, "child_map": {"model.sui_models.silver__crosschain_labels": ["model.sui_models.core__dim_labels"], "model.sui_models.silver__complete_token_asset_metadata": ["model.sui_models.price__ez_asset_metadata", "test.sui_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN.3791975c91", "test.sui_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID.fe8350a322", "test.sui_models.not_null_silver__complete_token_asset_metadata_MODIFIED_TIMESTAMP.58ef7db480", "test.sui_models.not_null_silver__complete_token_asset_metadata_PROVIDER.0d1d2c6852", "test.sui_models.not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS.06a52e0e67", "test.sui_models.unique_silver__complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID.99f9227588"], "model.sui_models.silver__complete_token_prices": ["model.sui_models.price__ez_prices_hourly", "test.sui_models.not_null_silver__complete_token_prices_BLOCKCHAIN.ada1620192", "test.sui_models.not_null_silver__complete_token_prices_BLOCKCHAIN_ID.6aac0fa10e", "test.sui_models.not_null_silver__complete_token_prices_HOUR.d5f4cd597b", "test.sui_models.not_null_silver__complete_token_prices_IS_IMPUTED.8a84f91c9e", "test.sui_models.not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP.74882978f6", "test.sui_models.not_null_silver__complete_token_prices_PRICE.9b78fa1dae", "test.sui_models.not_null_silver__complete_token_prices_PROVIDER.d7e55cb9a3", "test.sui_models.not_null_silver__complete_token_prices_TOKEN_ADDRESS.7e03ade9df", "test.sui_models.not_null_silver__complete_token_prices__INSERTED_TIMESTAMP.90a2d67d90", "test.sui_models.unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID.c4ea6e2a79"], "model.sui_models.silver__checkpoints": ["model.sui_models.core__fact_checkpoints"], "model.sui_models.silver__coin_types": [], "model.sui_models.silver__transactions": ["model.sui_models.core__fact_balance_changes", "model.sui_models.core__fact_changes", "model.sui_models.core__fact_events", "model.sui_models.core__fact_transaction_blocks", "model.sui_models.core__fact_transaction_inputs", "model.sui_models.core__fact_transactions"], "model.sui_models.silver__transfers": ["model.sui_models.core__ez_transfers", "test.sui_models.not_null_silver__transfers_AMOUNT_RAW.685359addc", "test.sui_models.not_null_silver__transfers_BALANCE_CHANGE_INDEX.63ed610263", "test.sui_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "test.sui_models.not_null_silver__transfers_CHECKPOINT_NUMBER.5a112e2666", "test.sui_models.not_null_silver__transfers_COIN_TYPE.4382d98e92", "test.sui_models.not_null_silver__transfers_RECEIVER.965c9f325d", "test.sui_models.not_null_silver__transfers_SENDER.0abbede6fe", "test.sui_models.not_null_silver__transfers_TRANSFERS_ID.37c3782af7", "test.sui_models.not_null_silver__transfers_TX_DIGEST.491a708e14", "test.sui_models.not_null_silver__transfers_TX_SENDER.a55628723f", "test.sui_models.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af", "test.sui_models.unique_silver__transfers_TRANSFERS_ID.48d51d4894"], "model.sui_models.silver__dex_swaps": ["model.sui_models.defi__ez_dex_swaps", "test.sui_models.dbt_utils_expression_is_true_silver__dex_swaps_AMOUNT_IN_RAW___0.318bc45989", "test.sui_models.dbt_utils_expression_is_true_silver__dex_swaps_AMOUNT_OUT_RAW___0.5cb864bc54", "test.sui_models.dbt_utils_expression_is_true_silver__dex_swaps_STEPS___0.664d0e62a1", "test.sui_models.dbt_utils_recency_silver__dex_swaps_hour__block_timestamp__6.5adfcb03e0", "test.sui_models.not_null_silver__dex_swaps_AMOUNT_IN_RAW.beece37b29", "test.sui_models.not_null_silver__dex_swaps_AMOUNT_OUT_RAW.e61bcbe5cd", "test.sui_models.not_null_silver__dex_swaps_BLOCK_TIMESTAMP.e312100604", "test.sui_models.not_null_silver__dex_swaps_CHECKPOINT_NUMBER.bc0bffc4f6", "test.sui_models.not_null_silver__dex_swaps_DEX_SWAPS_ID.3890988d32", "test.sui_models.not_null_silver__dex_swaps_EVENT_INDEX.ec92461915", "test.sui_models.not_null_silver__dex_swaps_EVENT_MODULE.ccc5351e29", "test.sui_models.not_null_silver__dex_swaps_PLATFORM_ADDRESS.4a9999c52e", "test.sui_models.not_null_silver__dex_swaps_STEPS.e7d4e72d3e", "test.sui_models.not_null_silver__dex_swaps_TRADER_ADDRESS.48f1ad639e", "test.sui_models.not_null_silver__dex_swaps_TX_DIGEST.78684ea04b", "test.sui_models.unique_silver__dex_swaps_DEX_SWAPS_ID.28700a94ba"], "model.sui_models.silver__aftermath_dex_swaps": ["model.sui_models.defi__ez_dex_swaps", "test.sui_models.dbt_utils_expression_is_true_silver__aftermath_dex_swaps_AMOUNT_IN_RAW___0.93e91a724e", "test.sui_models.dbt_utils_expression_is_true_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW___0.bd46b88800", "test.sui_models.dbt_utils_expression_is_true_silver__aftermath_dex_swaps_STEPS___0.6de3517530", "test.sui_models.dbt_utils_recency_silver__aftermath_dex_swaps_hour__block_timestamp__6.39240b6829", "test.sui_models.not_null_silver__aftermath_dex_swaps_AMOUNT_IN_RAW.bcec4ae47b", "test.sui_models.not_null_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW.f97cf40b44", "test.sui_models.not_null_silver__aftermath_dex_swaps_BLOCK_TIMESTAMP.3a5db7ac30", "test.sui_models.not_null_silver__aftermath_dex_swaps_CHECKPOINT_NUMBER.381507dc3d", "test.sui_models.not_null_silver__aftermath_dex_swaps_DEX_SWAPS_ID.7e7816d6cf", "test.sui_models.not_null_silver__aftermath_dex_swaps_EVENT_INDEX.cc0014d808", "test.sui_models.not_null_silver__aftermath_dex_swaps_EVENT_MODULE.d13926628d", "test.sui_models.not_null_silver__aftermath_dex_swaps_PLATFORM_ADDRESS.5eb9fe88b0", "test.sui_models.not_null_silver__aftermath_dex_swaps_STEPS.0a16ef3205", "test.sui_models.not_null_silver__aftermath_dex_swaps_TOKEN_IN_TYPE.b5c05db57f", "test.sui_models.not_null_silver__aftermath_dex_swaps_TOKEN_OUT_TYPE.5882817f41", "test.sui_models.not_null_silver__aftermath_dex_swaps_TRADER_ADDRESS.3da26daed1", "test.sui_models.not_null_silver__aftermath_dex_swaps_TX_DIGEST.c6d9832293", "test.sui_models.unique_silver__aftermath_dex_swaps_DEX_SWAPS_ID.0d72db4b89"], "model.sui_models.silver_bridge__sui_bridge_inbound": ["model.sui_models.silver_bridge__all_bridges", "test.sui_models.dbt_utils_recency_silver_bridge__sui_bridge_inbound_hour__block_timestamp__12.9f915d40f9"], "model.sui_models.silver_bridge__wormhole_outbound": ["model.sui_models.silver_bridge__all_bridges", "test.sui_models.dbt_utils_recency_silver_bridge__wormhole_outbound_hour__block_timestamp__12.1aa3be7b24"], "model.sui_models.silver_bridge__wormhole_inbound": ["model.sui_models.silver_bridge__all_bridges", "test.sui_models.dbt_utils_recency_silver_bridge__wormhole_inbound_hour__block_timestamp__12.09ce6fbad5"], "model.sui_models.silver_bridge__sui_bridge_outbound": ["model.sui_models.silver_bridge__all_bridges", "test.sui_models.dbt_utils_recency_silver_bridge__sui_bridge_outbound_hour__block_timestamp__12.9e00d40b33"], "model.sui_models.silver_bridge__all_bridges": ["model.sui_models.defi__ez_bridge_activity"], "model.sui_models.streamline__transactions": ["model.sui_models.streamline__transactions_realtime"], "model.sui_models.streamline__chainhead": ["model.sui_models.streamline__checkpoints"], "model.sui_models.streamline__checkpoints": ["model.sui_models.streamline__checkpoints_realtime"], "model.sui_models.streamline__transactions_complete": ["model.sui_models.streamline__transactions_realtime"], "model.sui_models.streamline__checkpoints_complete": ["model.sui_models.streamline__checkpoints_realtime", "model.sui_models.streamline__transactions"], "model.sui_models.streamline__transactions_realtime": [], "model.sui_models.streamline__checkpoints_realtime": [], "model.sui_models.price__ez_asset_metadata": ["test.sui_models.dbt_utils_unique_combination_of_columns_price__ez_asset_metadata_TOKEN_ADDRESS.e63e9f6197"], "model.sui_models.price__ez_prices_hourly": ["model.sui_models.core__ez_transfers", "model.sui_models.defi__ez_bridge_activity", "model.sui_models.defi__ez_dex_swaps", "test.sui_models.dbt_expectations_expect_row_values_to_have_recent_data_price__ez_prices_hourly_HOUR__day__2.0fe248380f", "test.sui_models.dbt_utils_unique_combination_of_columns_price__ez_prices_hourly_HOUR__TOKEN_ADDRESS.2ecd0db69a"], "model.sui_models.core__fact_balance_changes": ["model.sui_models.bronze_api__coin_metadata", "model.sui_models.silver__coin_types", "model.sui_models.silver__transfers", "model.sui_models.silver_bridge__sui_bridge_inbound", "model.sui_models.silver_bridge__sui_bridge_outbound", "model.sui_models.silver_bridge__wormhole_inbound", "model.sui_models.silver_bridge__wormhole_outbound", "test.sui_models.dbt_utils_recency_core__fact_balance_changes_hour__block_timestamp__12.32ab5141fb", "test.sui_models.not_null_core__fact_balance_changes_AMOUNT.954584e181", "test.sui_models.not_null_core__fact_balance_changes_BALANCE_CHANGE_INDEX.10baa58370", "test.sui_models.not_null_core__fact_balance_changes_BLOCK_TIMESTAMP.209115a1df", "test.sui_models.not_null_core__fact_balance_changes_CHECKPOINT_NUMBER.712e9516de", "test.sui_models.not_null_core__fact_balance_changes_COIN_TYPE.255ad8a0b7", "test.sui_models.not_null_core__fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID.97c8da1cb0", "test.sui_models.not_null_core__fact_balance_changes_INSERTED_TIMESTAMP.a692bc5daa", "test.sui_models.not_null_core__fact_balance_changes_MODIFIED_TIMESTAMP.5cba81239d", "test.sui_models.not_null_core__fact_balance_changes_TX_DIGEST.9ab34b7398", "test.sui_models.not_null_core__fact_balance_changes_TX_SUCCEEDED.5a8ae68598", "test.sui_models.unique_core__fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID.b89d77afcd"], "model.sui_models.core__dim_tokens": ["model.sui_models.core__ez_transfers", "model.sui_models.defi__ez_bridge_activity", "model.sui_models.defi__ez_dex_swaps", "test.sui_models.dbt_utils_recency_core__dim_tokens_hour__modified_timestamp__48.a736aabbb1", "test.sui_models.not_null_core__dim_tokens_COIN_TYPE.f6255a9590", "test.sui_models.not_null_core__dim_tokens_DECIMALS.e4b6ed6a13", "test.sui_models.not_null_core__dim_tokens_DIM_TOKENS_ID.4f26cddda6", "test.sui_models.not_null_core__dim_tokens_INSERTED_TIMESTAMP.cbe58319ac", "test.sui_models.not_null_core__dim_tokens_MODIFIED_TIMESTAMP.ecc00492b1", "test.sui_models.unique_core__dim_tokens_COIN_TYPE.dfe865c448", "test.sui_models.unique_core__dim_tokens_DIM_TOKENS_ID.47c54ac27c"], "model.sui_models.core__dim_labels": ["model.sui_models.defi__ez_dex_swaps", "test.sui_models.dbt_utils_unique_combination_of_columns_core__dim_labels_ADDRESS.0626bcf09a"], "model.sui_models.core__fact_events": ["model.sui_models.silver__aftermath_dex_swaps", "model.sui_models.silver__dex_swaps", "model.sui_models.silver_bridge__sui_bridge_inbound", "model.sui_models.silver_bridge__sui_bridge_outbound", "model.sui_models.silver_bridge__wormhole_inbound", "model.sui_models.silver_bridge__wormhole_outbound", "test.sui_models.dbt_utils_recency_core__fact_events_hour__block_timestamp__12.aaafbddc50", "test.sui_models.not_null_core__fact_events_BLOCK_TIMESTAMP.d71341f7ec", "test.sui_models.not_null_core__fact_events_CHECKPOINT_NUMBER.5356f1bf08", "test.sui_models.not_null_core__fact_events_EVENT_INDEX.a8f913a5e4", "test.sui_models.not_null_core__fact_events_FACT_EVENTS_ID.b32ffdbbd0", "test.sui_models.not_null_core__fact_events_INSERTED_TIMESTAMP.5d33d86914", "test.sui_models.not_null_core__fact_events_MODIFIED_TIMESTAMP.db0915010c", "test.sui_models.not_null_core__fact_events_TX_DIGEST.91cd501657", "test.sui_models.not_null_core__fact_events_TX_SUCCEEDED.0e0a46f5a7", "test.sui_models.not_null_core__fact_events_TYPE.525810bb88", "test.sui_models.unique_core__fact_events_FACT_EVENTS_ID.8c501ad6d4"], "model.sui_models.core__fact_changes": ["test.sui_models.dbt_utils_recency_core__fact_changes_hour__block_timestamp__12.f9a4e6a047", "test.sui_models.not_null_core__fact_changes_BLOCK_TIMESTAMP.65a5d8d067", "test.sui_models.not_null_core__fact_changes_CHANGE_INDEX.215cfe518f", "test.sui_models.not_null_core__fact_changes_CHECKPOINT_NUMBER.6ba94e8a67", "test.sui_models.not_null_core__fact_changes_FACT_CHANGES_ID.a878e88a0f", "test.sui_models.not_null_core__fact_changes_INSERTED_TIMESTAMP.c5d820190f", "test.sui_models.not_null_core__fact_changes_MODIFIED_TIMESTAMP.6c8d37c0a7", "test.sui_models.not_null_core__fact_changes_TX_DIGEST.30f8466020", "test.sui_models.not_null_core__fact_changes_TX_SUCCEEDED.9a09390f0a", "test.sui_models.not_null_core__fact_changes_TYPE.1652843536", "test.sui_models.unique_core__fact_changes_FACT_CHANGES_ID.0bf099f198"], "model.sui_models.core__fact_transaction_blocks": ["test.sui_models.dbt_utils_recency_core__fact_transaction_blocks_hour__block_timestamp__12.87cc230450", "test.sui_models.not_null_core__fact_transaction_blocks_BLOCK_TIMESTAMP.6dfb10fe43", "test.sui_models.not_null_core__fact_transaction_blocks_CHECKPOINT_NUMBER.c5c1745cc1", "test.sui_models.not_null_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID.3f22e3ab59", "test.sui_models.not_null_core__fact_transaction_blocks_INSERTED_TIMESTAMP.131d5e4dd8", "test.sui_models.not_null_core__fact_transaction_blocks_MODIFIED_TIMESTAMP.0e9e2d11f9", "test.sui_models.not_null_core__fact_transaction_blocks_TX_DIGEST.62786b1fdd", "test.sui_models.not_null_core__fact_transaction_blocks_TX_SUCCEEDED.281c601d54", "test.sui_models.unique_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID.5d32a6ba08", "test.sui_models.unique_core__fact_transaction_blocks_TX_DIGEST.09d1c840c1"], "model.sui_models.core__fact_transaction_inputs": ["test.sui_models.dbt_utils_recency_core__fact_transaction_inputs_hour__block_timestamp__12.7bcb5b383d", "test.sui_models.not_null_core__fact_transaction_inputs_BLOCK_TIMESTAMP.08e6b6701e", "test.sui_models.not_null_core__fact_transaction_inputs_CHECKPOINT_NUMBER.df61d4cc2d", "test.sui_models.not_null_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID.60cf1bc519", "test.sui_models.not_null_core__fact_transaction_inputs_INPUT_INDEX.4714be8bb9", "test.sui_models.not_null_core__fact_transaction_inputs_INSERTED_TIMESTAMP.d23cbe874e", "test.sui_models.not_null_core__fact_transaction_inputs_MODIFIED_TIMESTAMP.38ee9adfce", "test.sui_models.not_null_core__fact_transaction_inputs_TX_DIGEST.b65bf46c81", "test.sui_models.not_null_core__fact_transaction_inputs_TX_SUCCEEDED.c9a2a69ceb", "test.sui_models.not_null_core__fact_transaction_inputs_TYPE.7a59977a2b", "test.sui_models.unique_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID.d1ccb6d62d"], "model.sui_models.core__fact_checkpoints": ["test.sui_models.dbt_utils_recency_core__fact_checkpoints_hour__block_timestamp__12.d94caf0aaa", "test.sui_models.dbt_utils_sequential_values_core__fact_checkpoints_checkpoint_number__1.7d1cc12bd5", "test.sui_models.not_null_core__fact_checkpoints_BLOCK_TIMESTAMP.878a6c6b3b", "test.sui_models.not_null_core__fact_checkpoints_CHECKPOINT_DIGEST.26643b93a5", "test.sui_models.not_null_core__fact_checkpoints_CHECKPOINT_NUMBER.23f044cfc4", "test.sui_models.not_null_core__fact_checkpoints_EPOCH.9e68df58eb", "test.sui_models.not_null_core__fact_checkpoints_FACT_CHECKPOINTS_ID.40f4e7fdc8", "test.sui_models.not_null_core__fact_checkpoints_INSERTED_TIMESTAMP.21826dee37", "test.sui_models.not_null_core__fact_checkpoints_MODIFIED_TIMESTAMP.6c60cec49e", "test.sui_models.not_null_core__fact_checkpoints_NETWORK_TOTAL_TRANSACTIONS.044ce0039b", "test.sui_models.not_null_core__fact_checkpoints_TX_COUNT.6e621d73e1", "test.sui_models.unique_core__fact_checkpoints_CHECKPOINT_NUMBER.d6238f25d7", "test.sui_models.unique_core__fact_checkpoints_FACT_CHECKPOINTS_ID.a6be984d3f"], "model.sui_models.core__fact_transactions": ["model.sui_models.silver__transfers", "test.sui_models.dbt_utils_recency_core__fact_transactions_hour__block_timestamp__12.4c30ef6e6f", "test.sui_models.not_null_core__fact_transactions_BLOCK_TIMESTAMP.74f4267099", "test.sui_models.not_null_core__fact_transactions_CHECKPOINT_NUMBER.56e496e05b", "test.sui_models.not_null_core__fact_transactions_FACT_TRANSACTIONS_ID.c784aa0849", "test.sui_models.not_null_core__fact_transactions_INSERTED_TIMESTAMP.8978e0f6b1", "test.sui_models.not_null_core__fact_transactions_MODIFIED_TIMESTAMP.0c743560bb", "test.sui_models.not_null_core__fact_transactions_PAYLOAD_INDEX.4132a9cff1", "test.sui_models.not_null_core__fact_transactions_PAYLOAD_TYPE.2c53f707c4", "test.sui_models.not_null_core__fact_transactions_TX_DIGEST.b3fd102a93", "test.sui_models.not_null_core__fact_transactions_TX_SUCCEEDED.b734f84bae", "test.sui_models.unique_core__fact_transactions_FACT_TRANSACTIONS_ID.464d549945"], "model.sui_models.core__ez_transfers": ["test.sui_models.dbt_utils_recency_core__ez_transfers_hour__block_timestamp__12.34360dd404", "test.sui_models.not_null_core__ez_transfers_AMOUNT_RAW.3c41c9bfec", "test.sui_models.not_null_core__ez_transfers_BALANCE_CHANGE_INDEX.e882b43eab", "test.sui_models.not_null_core__ez_transfers_BLOCK_TIMESTAMP.bc207eb78e", "test.sui_models.not_null_core__ez_transfers_CHECKPOINT_NUMBER.f4715a41ec", "test.sui_models.not_null_core__ez_transfers_COIN_TYPE.ff9b8da7e4", "test.sui_models.not_null_core__ez_transfers_EZ_TRANSFERS_ID.5fbbeba2b3", "test.sui_models.not_null_core__ez_transfers_INSERTED_TIMESTAMP.c96eb74a2a", "test.sui_models.not_null_core__ez_transfers_MODIFIED_TIMESTAMP.a437846ff7", "test.sui_models.not_null_core__ez_transfers_RECEIVER.d4d739d824", "test.sui_models.not_null_core__ez_transfers_SENDER.0853fc5cd5", "test.sui_models.not_null_core__ez_transfers_TX_DIGEST.5b0fadc094", "test.sui_models.not_null_core__ez_transfers_TX_SENDER.d3504600b8", "test.sui_models.not_null_core__ez_transfers_TX_SUCCEEDED.eb6879ca96", "test.sui_models.unique_core__ez_transfers_EZ_TRANSFERS_ID.869ef61698"], "model.sui_models.defi__ez_bridge_activity": ["test.sui_models.not_null_defi__ez_bridge_activity_BLOCK_TIMESTAMP.eb16926026", "test.sui_models.not_null_defi__ez_bridge_activity_CHECKPOINT_NUMBER.1046fc00e8", "test.sui_models.not_null_defi__ez_bridge_activity_EVENT_INDEX.83a405a4b0", "test.sui_models.not_null_defi__ez_bridge_activity_TX_DIGEST.53854c8459", "test.sui_models.not_null_defi__ez_bridge_activity_bridge_address.9436097f13", "test.sui_models.not_null_defi__ez_bridge_activity_direction.c74531b1e0", "test.sui_models.not_null_defi__ez_bridge_activity_ez_bridge_activity_id.eb9dea0184", "test.sui_models.not_null_defi__ez_bridge_activity_platform.ca9ee8cd85", "test.sui_models.not_null_defi__ez_bridge_activity_protocol.fda817c891", "test.sui_models.unique_defi__ez_bridge_activity_ez_bridge_activity_id.d14e92e9ee"], "model.sui_models.defi__ez_dex_swaps": ["test.sui_models.dbt_utils_recency_defi__ez_dex_swaps_hour__block_timestamp__6.0e11e4f514", "test.sui_models.not_null_defi__ez_dex_swaps_AMOUNT_IN_RAW.47f972a8fb", "test.sui_models.not_null_defi__ez_dex_swaps_AMOUNT_OUT_RAW.a93bb57e13", "test.sui_models.not_null_defi__ez_dex_swaps_BLOCK_TIMESTAMP.b21ec41642", "test.sui_models.not_null_defi__ez_dex_swaps_CHECKPOINT_NUMBER.74203a52c4", "test.sui_models.not_null_defi__ez_dex_swaps_EVENT_INDEX.275df8c906", "test.sui_models.not_null_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID.e64665588d", "test.sui_models.not_null_defi__ez_dex_swaps_PLATFORM_ADDRESS.8405745a8b", "test.sui_models.not_null_defi__ez_dex_swaps_PLATFORM_NAME.2e202dfe75", "test.sui_models.not_null_defi__ez_dex_swaps_TOKEN_IN_TYPE.44b0ac5c5a", "test.sui_models.not_null_defi__ez_dex_swaps_TOKEN_OUT_ADDRESS.3adc7d010f", "test.sui_models.not_null_defi__ez_dex_swaps_TRADER_ADDRESS.24dceb0705", "test.sui_models.not_null_defi__ez_dex_swaps_TX_DIGEST.26721507d6", "test.sui_models.unique_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID.07eaa2e5cb"], "model.sui_models.bronze__transactions_FR": ["model.sui_models.silver__transactions", "model.sui_models.streamline__transactions_complete"], "model.sui_models.bronze__checkpoints_FR": ["model.sui_models.silver__checkpoints", "model.sui_models.streamline__checkpoints_complete"], "model.sui_models.bronze__checkpoints": ["model.sui_models.silver__checkpoints", "model.sui_models.silver_bridge__all_bridges", "model.sui_models.silver_bridge__sui_bridge_inbound", "model.sui_models.silver_bridge__sui_bridge_outbound", "model.sui_models.silver_bridge__wormhole_inbound", "model.sui_models.silver_bridge__wormhole_outbound", "model.sui_models.streamline__checkpoints_complete"], "model.sui_models.bronze_api__coin_metadata": ["model.sui_models.core__dim_tokens"], "model.sui_models.bronze__transactions": ["model.sui_models.silver__coin_types", "model.sui_models.silver__transactions", "model.sui_models.streamline__transactions_complete"], "model.sui_models.bronze__complete_token_asset_metadata": ["model.sui_models.silver__complete_token_asset_metadata"], "model.sui_models.bronze__complete_token_prices": ["model.sui_models.silver__complete_token_prices"], "operation.sui_models.sui_models-on-run-start-0": [], "operation.sui_models.sui_models-on-run-start-1": [], "operation.sui_models.sui_models-on-run-end-0": [], "model.fsc_utils._datashare___create_gold": [], "model.fsc_utils._datashare___create_udfs": [], "model.livequery_models.live__allow_list": [], "model.livequery_models.utils": ["model.livequery_models.arbitrum_nova__mainnet", "model.livequery_models.arbitrum_one__goerli", "model.livequery_models.arbitrum_one__mainnet", "model.livequery_models.avalanche_c__mainnet", "model.livequery_models.avalanche_c__testnet", "model.livequery_models.base__goerli", "model.livequery_models.base__mainnet", "model.livequery_models.bsc__mainnet", "model.livequery_models.bsc__testnet", "model.livequery_models.celo__mainnet", "model.livequery_models.ethereum__goerli", "model.livequery_models.ethereum__mainnet", "model.livequery_models.ethereum__sepolia", "model.livequery_models.fantom__mainnet", "model.livequery_models.gnosis__mainnet", "model.livequery_models.harmony__mainnet", "model.livequery_models.harmony__testnet", "model.livequery_models.live", "model.livequery_models.optimism__goerli", "model.livequery_models.optimism__mainnet", "model.livequery_models.polygon__mainnet", "model.livequery_models.polygon__testnet", "model.livequery_models.polygon_zkevm__mainnet", "model.livequery_models.polygon_zkevm__testnet", "test.livequery_models.test__utils_udf_binary_to_int.907b20f381", "test.livequery_models.test__utils_udf_binary_to_int_large_number.926bff44e9", "test.livequery_models.test__utils_udf_evm_decode_log.b6fedb07e9", "test.livequery_models.test__utils_udf_int_to_binary.46856460db", "test.livequery_models.test__utils_udf_int_to_binary_large_number.feba996e3b", "test.livequery_models.test__utils_udf_json_rpc_call.0b87c6050e", "test.livequery_models.test__utils_udf_urlencode_array_1.bae96ece17", "test.livequery_models.test__utils_udf_urlencode_array_2.ff2898d4a2", "test.livequery_models.test__utils_udf_urlencode_array_array.3d05dcb6a9", "test.livequery_models.test__utils_udf_urlencode_array_false_1.ffe0d93235", "test.livequery_models.test__utils_udf_urlencode_array_false_2.f6e4d9a06a", "test.livequery_models.test__utils_udf_urlencode_array_false_array.979bfafd11", "test.livequery_models.test__utils_udf_urlencode_array_false_space.c46a422a10", "test.livequery_models.test__utils_udf_urlencode_array_false_special.ad3b4ce496", "test.livequery_models.test__utils_udf_urlencode_array_space.67b6f51498", "test.livequery_models.test__utils_udf_urlencode_array_special.746423269a", "test.livequery_models.test__utils_udf_urlencode_array_true_1.f1dc90fd5d", "test.livequery_models.test__utils_udf_urlencode_array_true_2.4c09ca3de2", "test.livequery_models.test__utils_udf_urlencode_array_true_array.559475a80a", "test.livequery_models.test__utils_udf_urlencode_array_true_space.c150fa3544", "test.livequery_models.test__utils_udf_urlencode_array_true_special.14abbd82f3", "test.livequery_models.test__utils_udf_urlencode_dict_1.1d75f92e0e", "test.livequery_models.test__utils_udf_urlencode_dict_2.60da312d8c", "test.livequery_models.test__utils_udf_urlencode_dict_array.25f6af5cf8", "test.livequery_models.test__utils_udf_urlencode_dict_false_1.e2e07ad77a", "test.livequery_models.test__utils_udf_urlencode_dict_false_2.58739709ab", "test.livequery_models.test__utils_udf_urlencode_dict_false_array.9524cea2e8", "test.livequery_models.test__utils_udf_urlencode_dict_false_space.1167d3f089", "test.livequery_models.test__utils_udf_urlencode_dict_false_special.0cd3cb5826", "test.livequery_models.test__utils_udf_urlencode_dict_space.d5e1917fd6", "test.livequery_models.test__utils_udf_urlencode_dict_special.6f25d30fd9", "test.livequery_models.test__utils_udf_urlencode_dict_true_1.3bf42c4e1b", "test.livequery_models.test__utils_udf_urlencode_dict_true_2.764afd6db8", "test.livequery_models.test__utils_udf_urlencode_dict_true_array.614d53ca8a", "test.livequery_models.test__utils_udf_urlencode_dict_true_space.11f0932fc3", "test.livequery_models.test__utils_udf_urlencode_dict_true_special.4eef6cb355"], "model.livequery_models.live": ["model.livequery_models.alchemy_nfts__alchemy_utils", "model.livequery_models.alchemy_tokens__alchemy_utils", "model.livequery_models.alchemy_transfers__alchemy_utils", "model.livequery_models.alchemy_utils__alchemy_utils", "model.livequery_models.allday__", "model.livequery_models.apilayer__", "model.livequery_models.arbitrum_nova__mainnet", "model.livequery_models.arbitrum_one__goerli", "model.livequery_models.arbitrum_one__mainnet", "model.livequery_models.avalanche_c__mainnet", "model.livequery_models.avalanche_c__testnet", "model.livequery_models.base__goerli", "model.livequery_models.base__mainnet", "model.livequery_models.bitquery__", "model.livequery_models.blockpour_utils__", "model.livequery_models.bsc__mainnet", "model.livequery_models.bsc__testnet", "model.livequery_models.celo__mainnet", "model.livequery_models.chainbase_utils__", "model.livequery_models.claude__", "model.livequery_models.claude_utils__claude_utils", "model.livequery_models.cmc__", "model.livequery_models.coingecko__", "model.livequery_models.covalent__", "model.livequery_models.credmark_utils__", "model.livequery_models.dapplooker__", "model.livequery_models.dappradar__", "model.livequery_models.deepnftvalue__", "model.livequery_models.defillama__", "model.livequery_models.espn__", "model.livequery_models.ethereum__goerli", "model.livequery_models.ethereum__mainnet", "model.livequery_models.ethereum__sepolia", "model.livequery_models.fantom__mainnet", "model.livequery_models.footprint_utils__footprint_utils", "model.livequery_models.fred__", "model.livequery_models.github_actions__github_utils", "model.livequery_models.github_utils__github_utils", "model.livequery_models.gnosis__mainnet", "model.livequery_models.harmony__mainnet", "model.livequery_models.harmony__testnet", "model.livequery_models.helius_apis__helius_utils", "model.livequery_models.helius_das__helius_utils", "model.livequery_models.helius_utils__helius_utils", "model.livequery_models.live__allow_list", "model.livequery_models.nftscan__", "model.livequery_models.opensea__", "model.livequery_models.optimism__goerli", "model.livequery_models.optimism__mainnet", "model.livequery_models.playgrounds__", "model.livequery_models.polygon__mainnet", "model.livequery_models.polygon__testnet", "model.livequery_models.polygon_zkevm__mainnet", "model.livequery_models.polygon_zkevm__testnet", "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "model.livequery_models.quicknode_solana_nfts__quicknode_utils", "model.livequery_models.quicknode_utils__quicknode_utils", "model.livequery_models.reservoir__", "model.livequery_models.secrets", "model.livequery_models.snapshot__", "model.livequery_models.solscan__", "model.livequery_models.stakingrewards__", "model.livequery_models.strangelove__", "model.livequery_models.subquery__", "model.livequery_models.topshot__", "model.livequery_models.transpose__", "model.livequery_models.zapper__", "model.livequery_models.zettablock__", "test.livequery_models.test__live_udf_api_batched_post_data_object.0524c38098", "test.livequery_models.test__live_udf_api_batched_post_jsonrpc_ethereum_batch.0af69e0283", "test.livequery_models.test__live_udf_api_batched_post_jsonrpc_solana.8b95c0ed0b", "test.livequery_models.test__live_udf_api_get_method.a1fbeefdc8", "test.livequery_models.test__live_udf_api_get_with_params.549ea05b06", "test.livequery_models.test__live_udf_api_post_batch_jsonrpc.b4de1e1fc5", "test.livequery_models.test__live_udf_api_post_data_array.f30e6de8c8", "test.livequery_models.test__live_udf_api_post_data_object.208f9d5456", "test.livequery_models.test__live_udf_api_post_data_string.e2159319bb", "test.livequery_models.test__live_udf_api_post_jsonrpc_ethereum_batch.4a9ed4a8d7", "test.livequery_models.test__live_udf_api_post_jsonrpc_solana.01c400739e", "test.livequery_models.test__live_udf_api_post_jsonrpc_solana_batch.70d22f9667"], "model.livequery_models.secrets": [], "model.livequery_models._utils": ["model.livequery_models.live", "model.livequery_models.secrets", "model.livequery_models.utils", "test.livequery_models.test___utils_udf_introspect.79bd27a18b"], "model.livequery_models._live": ["model.livequery_models.live"], "model.livequery_models.playgrounds__": ["test.livequery_models.test_playgrounds__query_subgraph_status_200_liquidity_pools.dfcb23f707", "test.livequery_models.test_playgrounds__query_subgraph_status_200_total_pool_count.86c8b9c6ee"], "model.livequery_models.chainbase_utils__": ["test.livequery_models.test_chainbase_utils__get_status_200.07b6733652"], "model.livequery_models.fred__": ["test.livequery_models.test_fred__get_series_status_200.51822e30ca"], "model.livequery_models.stakingrewards__": ["test.livequery_models.test_stakingrewards__query_status_200.144a35304b"], "model.livequery_models.credmark_utils__": ["test.livequery_models.test_credmark_utils__get_status_200.d1548e1f6e"], "model.livequery_models.claude__": ["test.livequery_models.test_claude__count_message_tokens.f5bafb2bce", "test.livequery_models.test_claude__get_message_batch.b52b8b8d04", "test.livequery_models.test_claude__get_message_batch_results.ecc8ad465c", "test.livequery_models.test_claude__get_model.1f65c29a92", "test.livequery_models.test_claude__list_message_batches.f5d6c40b59", "test.livequery_models.test_claude__list_message_batches_with_after.0e42b728e7", "test.livequery_models.test_claude__list_message_batches_with_before.aae86d2911", "test.livequery_models.test_claude__list_models.8516d777c7", "test.livequery_models.test_claude__post_messages_batch.e4ee537ae3", "test.livequery_models.test_claude__post_messages_only_one_message.ff8a12fc1b", "test.livequery_models.test_claude__post_messages_with_all_params.0917a032d2", "test.livequery_models.test_claude__post_messages_with_model.7b5774fbf2"], "model.livequery_models.claude_utils__claude_utils": ["test.livequery_models.test_claude_utils__post_status_200.a32a62cfdf"], "model.livequery_models.alchemy_transfers__alchemy_utils": ["test.livequery_models.test_alchemy_transfers__get_asset_transfers_status_200.f1f3f416e4"], "model.livequery_models.alchemy_nfts__alchemy_utils": ["test.livequery_models.test_alchemy_nfts__compute_rarity_status_200.942425aa31", "test.livequery_models.test_alchemy_nfts__get_contract_metadata_batch_status_200.78a02ffe28", "test.livequery_models.test_alchemy_nfts__get_contract_metadata_status_200.0a9337a17a", "test.livequery_models.test_alchemy_nfts__get_contracts_for_owner_status_200.29e9e60296", "test.livequery_models.test_alchemy_nfts__get_floor_price_status_200.f2125d71e4", "test.livequery_models.test_alchemy_nfts__get_nft_metadata_batch_status_200.44d0ef0140", "test.livequery_models.test_alchemy_nfts__get_nft_metadata_status_200.aad531a83a", "test.livequery_models.test_alchemy_nfts__get_nft_sales_status_200.223f727f9f", "test.livequery_models.test_alchemy_nfts__get_nfts_for_collection_status_200.f7ff9b5ee5", "test.livequery_models.test_alchemy_nfts__get_nfts_status_200.34e3001576", "test.livequery_models.test_alchemy_nfts__get_owners_for_collection_status_200.3cdb9f0962", "test.livequery_models.test_alchemy_nfts__get_owners_for_token_status_200.c534c2579d", "test.livequery_models.test_alchemy_nfts__get_spam_contracts_status_200.b9dfb4e306", "test.livequery_models.test_alchemy_nfts__invalidate_contract_status_200.1ac32b4945", "test.livequery_models.test_alchemy_nfts__is_airdrop_status_200.58ce4f1bdc", "test.livequery_models.test_alchemy_nfts__is_holder_of_collection_status_200.d94f7ae355", "test.livequery_models.test_alchemy_nfts__is_spam_contract_status_200.91af21989f", "test.livequery_models.test_alchemy_nfts__reingest_contract_status_200.3c2c45fd00", "test.livequery_models.test_alchemy_nfts__search_contract_metadata_status_200.1e97937b32", "test.livequery_models.test_alchemy_nfts__summarize_nft_attributes_status_200.99d7f57e35"], "model.livequery_models.alchemy_tokens__alchemy_utils": ["test.livequery_models.test_alchemy_tokens__get_token_allowance_status_200.65ce803e24", "test.livequery_models.test_alchemy_tokens__get_token_balances_status_200.bdaa3fdabb", "test.livequery_models.test_alchemy_tokens__get_token_metadata_status_200.ff08820c76"], "model.livequery_models.alchemy_utils__alchemy_utils": ["model.livequery_models.alchemy_nfts__alchemy_utils", "model.livequery_models.alchemy_tokens__alchemy_utils", "model.livequery_models.alchemy_transfers__alchemy_utils"], "model.livequery_models.apilayer__": ["test.livequery_models.test_apilayer__get_status_200.f739b0d36b"], "model.livequery_models.blockpour_utils__": [], "model.livequery_models.defillama__": ["test.livequery_models.test_defillama__get_status_200.90864f8f89"], "model.livequery_models.deepnftvalue__": ["test.livequery_models.test_deepnftvalue__get_status_200.49fba544bb"], "model.livequery_models.helius_apis__helius_utils": ["test.livequery_models.test_helius_apis__balances_status_200.d668884644", "test.livequery_models.test_helius_apis__parse_transactions_status_200.71053900da", "test.livequery_models.test_helius_apis__token_metadata_status_200.c2bafa3fb0"], "model.livequery_models.helius_utils__helius_utils": ["model.livequery_models.helius_apis__helius_utils", "model.livequery_models.helius_das__helius_utils"], "model.livequery_models.helius_das__helius_utils": ["test.livequery_models.test_helius_das__get_asset_proof_status_200.2ed48f9fe3", "test.livequery_models.test_helius_das__get_asset_status_200.3e65208714", "test.livequery_models.test_helius_das__get_assets_by_authority_status_200.c9ac02b165", "test.livequery_models.test_helius_das__get_assets_by_creator_status_200.e8cb071d3a", "test.livequery_models.test_helius_das__get_assets_by_group_status_200.fe5813195d", "test.livequery_models.test_helius_das__get_assets_by_owner_status_200.6f2f1ef95c", "test.livequery_models.test_helius_das__get_signatures_for_asset_status_200.529a6b605d", "test.livequery_models.test_helius_das__search_assets_status_200.2373c30616"], "model.livequery_models.zettablock__": [], "model.livequery_models.espn__": ["test.livequery_models.test_espn__get_status_200.b4f84cc829"], "model.livequery_models.github_utils__github_utils": ["model.livequery_models.github_actions__github_utils", "test.livequery_models.test_github_utils__octocat_status_200.3573395088"], "model.livequery_models.github_actions__github_utils": ["test.livequery_models.test_github_actions__runs_status_200.2d145a41cb", "test.livequery_models.test_github_actions__workflow_runs_status_200.abcfd5d553", "test.livequery_models.test_github_actions__workflows_status_200.1cc531bd94"], "model.livequery_models.transpose__": ["test.livequery_models.test_transpose__get_status_200.8721d94682"], "model.livequery_models.solscan__": ["test.livequery_models.test_solscan_public_api_get__get_status_200.388381be71"], "model.livequery_models.allday__": ["test.livequery_models.test_allday__graphql_status_200.8cfd62f9a1"], "model.livequery_models.reservoir__": ["test.livequery_models.test_reservoir__get_status_200.cb905ea233"], "model.livequery_models.bitquery__": ["test.livequery_models.test_bitquery__graphql_status_200.11917beb18"], "model.livequery_models.topshot__": ["test.livequery_models.test_topshot__graphql_status_200.fb93e3b220"], "model.livequery_models.zapper__": [], "model.livequery_models.cmc__": ["test.livequery_models.test_cmc__get_status_200.1e44de8c9e"], "model.livequery_models.strangelove__": ["test.livequery_models.test_strangelove__get_status_200.0a58865924"], "model.livequery_models.subquery__": ["test.livequery_models.test_subquery__graphql_status_200.b25433a976"], "model.livequery_models.nftscan__": ["test.livequery_models.test_nftscan__get_status_200.33868e0f0d"], "model.livequery_models.dappradar__": ["test.livequery_models.test_dappradar__get_status_200.979ea475dc"], "model.livequery_models.opensea__": ["test.livequery_models.test_opensea__get_status_200.5de63cfbb1"], "model.livequery_models.snapshot__": ["test.livequery_models.test_snapshot__query_status_200.35a2cffb40"], "model.livequery_models.footprint_utils__footprint_utils": ["test.livequery_models.test_footprint_utils__get_status_200_v2_protocol_info.4d260facf4"], "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils": ["test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.3d5c91f8e2", "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.c34c43a92d", "test.livequery_models.test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.29d4ecb431", "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.9cda095850", "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.990e59cd6c"], "model.livequery_models.quicknode_polygon_nfts__quicknode_utils": ["test.livequery_models.test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.b69737052b", "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.8286191e06", "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_status_200.2d1f2ae9d6", "test.livequery_models.test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.2f6ba1e185", "test.livequery_models.test_quicknode_polygon_nfts__verify_nfts_owner_status_200.e87bb12c13"], "model.livequery_models.quicknode_solana_nfts__quicknode_utils": ["test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.70f38f0e31", "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_status_200.94f0e0082e"], "model.livequery_models.quicknode_ethereum_nfts__quicknode_utils": ["test.livequery_models.test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.5a3e5bd53e", "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.ba7f5aeceb", "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_status_200.e34b6fbe64", "test.livequery_models.test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.2e5143d642", "test.livequery_models.test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.34afbca510"], "model.livequery_models.quicknode_utils__quicknode_utils": ["model.livequery_models.quicknode_ethereum_nfts__quicknode_utils", "model.livequery_models.quicknode_ethereum_tokens__quicknode_utils", "model.livequery_models.quicknode_polygon_nfts__quicknode_utils", "model.livequery_models.quicknode_polygon_tokens__quicknode_utils", "model.livequery_models.quicknode_solana_nfts__quicknode_utils"], "model.livequery_models.quicknode_polygon_tokens__quicknode_utils": ["test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.529daa7446", "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.d60e37734e", "test.livequery_models.test_quicknode_polygon_tokens__get_transactions_by_address_status_200.194093aade", "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.2bffddb733", "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.57669f1a96"], "model.livequery_models.coingecko__": ["test.livequery_models.test_coingecko__get_status_200.047f15c956"], "model.livequery_models.dapplooker__": ["test.livequery_models.test_dapplooker__get_chart_status_202.4fedf28822"], "model.livequery_models.covalent__": ["test.livequery_models.test_covalent__get_status_200.bb43bb7f69"], "model.livequery_models.avalanche_c__testnet": [], "model.livequery_models.gnosis__mainnet": [], "model.livequery_models.base__mainnet": [], "model.livequery_models.harmony__testnet": [], "model.livequery_models.arbitrum_nova__mainnet": [], "model.livequery_models.bsc__mainnet": [], "model.livequery_models.base__goerli": [], "model.livequery_models.ethereum__goerli": [], "model.livequery_models.polygon__testnet": [], "model.livequery_models.celo__mainnet": [], "model.livequery_models.ethereum__mainnet": [], "model.livequery_models.avalanche_c__mainnet": [], "model.livequery_models.polygon_zkevm__testnet": [], "model.livequery_models.bsc__testnet": [], "model.livequery_models.harmony__mainnet": [], "model.livequery_models.fantom__mainnet": [], "model.livequery_models.polygon_zkevm__mainnet": [], "model.livequery_models.ethereum__sepolia": [], "model.livequery_models.optimism__mainnet": [], "model.livequery_models.arbitrum_one__mainnet": [], "model.livequery_models.optimism__goerli": [], "model.livequery_models.polygon__mainnet": [], "model.livequery_models.arbitrum_one__goerli": [], "model.livequery_models._evm__abi_map": ["analysis.livequery_models.test_crud_udfs_in_schema", "model.livequery_models.arbitrum_nova__mainnet", "model.livequery_models.arbitrum_one__goerli", "model.livequery_models.arbitrum_one__mainnet", "model.livequery_models.avalanche_c__mainnet", "model.livequery_models.avalanche_c__testnet", "model.livequery_models.base__goerli", "model.livequery_models.base__mainnet", "model.livequery_models.bsc__mainnet", "model.livequery_models.bsc__testnet", "model.livequery_models.celo__mainnet", "model.livequery_models.ethereum__goerli", "model.livequery_models.ethereum__mainnet", "model.livequery_models.ethereum__sepolia", "model.livequery_models.fantom__mainnet", "model.livequery_models.gnosis__mainnet", "model.livequery_models.harmony__mainnet", "model.livequery_models.harmony__testnet", "model.livequery_models.optimism__goerli", "model.livequery_models.optimism__mainnet", "model.livequery_models.polygon__mainnet", "model.livequery_models.polygon__testnet", "model.livequery_models.polygon_zkevm__mainnet", "model.livequery_models.polygon_zkevm__testnet"], "model.livequery_models._evm__contracts_map": ["analysis.livequery_models.test_crud_udfs_in_schema", "model.livequery_models.arbitrum_nova__mainnet", "model.livequery_models.arbitrum_one__goerli", "model.livequery_models.arbitrum_one__mainnet", "model.livequery_models.avalanche_c__mainnet", "model.livequery_models.avalanche_c__testnet", "model.livequery_models.base__goerli", "model.livequery_models.base__mainnet", "model.livequery_models.bsc__mainnet", "model.livequery_models.bsc__testnet", "model.livequery_models.celo__mainnet", "model.livequery_models.ethereum__goerli", "model.livequery_models.ethereum__mainnet", "model.livequery_models.ethereum__sepolia", "model.livequery_models.fantom__mainnet", "model.livequery_models.gnosis__mainnet", "model.livequery_models.harmony__mainnet", "model.livequery_models.harmony__testnet", "model.livequery_models.optimism__goerli", "model.livequery_models.optimism__mainnet", "model.livequery_models.polygon__mainnet", "model.livequery_models.polygon__testnet", "model.livequery_models.polygon_zkevm__mainnet", "model.livequery_models.polygon_zkevm__testnet"], "model.livequery_models._eth__logs": ["model.livequery_models.ethereum__mainnet"], "model.livequery_models._eth__decoded_logs": ["model.livequery_models.ethereum__mainnet"], "model.livequery_models._evm__native_symbol_map": ["analysis.livequery_models.test_crud_udfs_in_schema", "model.livequery_models.arbitrum_nova__mainnet", "model.livequery_models.arbitrum_one__goerli", "model.livequery_models.arbitrum_one__mainnet", "model.livequery_models.avalanche_c__mainnet", "model.livequery_models.avalanche_c__testnet", "model.livequery_models.base__goerli", "model.livequery_models.base__mainnet", "model.livequery_models.bsc__mainnet", "model.livequery_models.bsc__testnet", "model.livequery_models.celo__mainnet", "model.livequery_models.ethereum__goerli", "model.livequery_models.ethereum__mainnet", "model.livequery_models.ethereum__sepolia", "model.livequery_models.fantom__mainnet", "model.livequery_models.gnosis__mainnet", "model.livequery_models.harmony__mainnet", "model.livequery_models.harmony__testnet", "model.livequery_models.optimism__goerli", "model.livequery_models.optimism__mainnet", "model.livequery_models.polygon__mainnet", "model.livequery_models.polygon__testnet", "model.livequery_models.polygon_zkevm__mainnet", "model.livequery_models.polygon_zkevm__testnet"], "analysis.livequery_models.test_crud_udfs_in_schema": [], "analysis.livequery_models.test_create_or_drop_function_from_config": [], "analysis.livequery_models.generate_test_udf_skeleton": [], "analysis.livequery_models.test_functions_py": [], "analysis.livequery_models.test_functions": [], "seed.livequery_models.live__verified_api_endpoints": [], "operation.livequery_models.livequery_models-on-run-start-0": [], "operation.livequery_models.livequery_models-on-run-end-0": [], "test.sui_models.not_null_silver__complete_token_asset_metadata_PROVIDER.0d1d2c6852": [], "test.sui_models.not_null_silver__complete_token_asset_metadata_TOKEN_ADDRESS.06a52e0e67": [], "test.sui_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN.3791975c91": [], "test.sui_models.not_null_silver__complete_token_asset_metadata_BLOCKCHAIN_ID.fe8350a322": [], "test.sui_models.not_null_silver__complete_token_asset_metadata_MODIFIED_TIMESTAMP.58ef7db480": [], "test.sui_models.unique_silver__complete_token_asset_metadata_COMPLETE_TOKEN_ASSET_METADATA_ID.99f9227588": [], "test.sui_models.not_null_silver__complete_token_prices_HOUR.d5f4cd597b": [], "test.sui_models.not_null_silver__complete_token_prices_TOKEN_ADDRESS.7e03ade9df": [], "test.sui_models.not_null_silver__complete_token_prices_BLOCKCHAIN.ada1620192": [], "test.sui_models.not_null_silver__complete_token_prices_BLOCKCHAIN_ID.6aac0fa10e": [], "test.sui_models.not_null_silver__complete_token_prices_PROVIDER.d7e55cb9a3": [], "test.sui_models.not_null_silver__complete_token_prices_PRICE.9b78fa1dae": [], "test.sui_models.not_null_silver__complete_token_prices_IS_IMPUTED.8a84f91c9e": [], "test.sui_models.not_null_silver__complete_token_prices__INSERTED_TIMESTAMP.90a2d67d90": [], "test.sui_models.not_null_silver__complete_token_prices_MODIFIED_TIMESTAMP.74882978f6": [], "test.sui_models.unique_silver__complete_token_prices_COMPLETE_TOKEN_PRICES_ID.c4ea6e2a79": [], "test.sui_models.not_null_silver__transfers_CHECKPOINT_NUMBER.5a112e2666": [], "test.sui_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": [], "test.sui_models.not_null_silver__transfers_TX_DIGEST.491a708e14": [], "test.sui_models.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af": [], "test.sui_models.not_null_silver__transfers_TX_SENDER.a55628723f": [], "test.sui_models.not_null_silver__transfers_SENDER.0abbede6fe": [], "test.sui_models.not_null_silver__transfers_RECEIVER.965c9f325d": [], "test.sui_models.not_null_silver__transfers_BALANCE_CHANGE_INDEX.63ed610263": [], "test.sui_models.not_null_silver__transfers_COIN_TYPE.4382d98e92": [], "test.sui_models.not_null_silver__transfers_AMOUNT_RAW.685359addc": [], "test.sui_models.not_null_silver__transfers_TRANSFERS_ID.37c3782af7": [], "test.sui_models.unique_silver__transfers_TRANSFERS_ID.48d51d4894": [], "test.sui_models.not_null_silver__aftermath_dex_swaps_CHECKPOINT_NUMBER.381507dc3d": [], "test.sui_models.not_null_silver__aftermath_dex_swaps_BLOCK_TIMESTAMP.3a5db7ac30": [], "test.sui_models.not_null_silver__aftermath_dex_swaps_TX_DIGEST.c6d9832293": [], "test.sui_models.not_null_silver__aftermath_dex_swaps_EVENT_INDEX.cc0014d808": [], "test.sui_models.not_null_silver__aftermath_dex_swaps_EVENT_MODULE.d13926628d": [], "test.sui_models.not_null_silver__aftermath_dex_swaps_PLATFORM_ADDRESS.5eb9fe88b0": [], "test.sui_models.not_null_silver__aftermath_dex_swaps_AMOUNT_IN_RAW.bcec4ae47b": [], "test.sui_models.dbt_utils_expression_is_true_silver__aftermath_dex_swaps_AMOUNT_IN_RAW___0.93e91a724e": [], "test.sui_models.not_null_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW.f97cf40b44": [], "test.sui_models.dbt_utils_expression_is_true_silver__aftermath_dex_swaps_AMOUNT_OUT_RAW___0.bd46b88800": [], "test.sui_models.not_null_silver__aftermath_dex_swaps_STEPS.0a16ef3205": [], "test.sui_models.dbt_utils_expression_is_true_silver__aftermath_dex_swaps_STEPS___0.6de3517530": [], "test.sui_models.not_null_silver__aftermath_dex_swaps_TOKEN_IN_TYPE.b5c05db57f": [], "test.sui_models.not_null_silver__aftermath_dex_swaps_TOKEN_OUT_TYPE.5882817f41": [], "test.sui_models.not_null_silver__aftermath_dex_swaps_TRADER_ADDRESS.3da26daed1": [], "test.sui_models.not_null_silver__aftermath_dex_swaps_DEX_SWAPS_ID.7e7816d6cf": [], "test.sui_models.unique_silver__aftermath_dex_swaps_DEX_SWAPS_ID.0d72db4b89": [], "test.sui_models.dbt_utils_recency_silver__aftermath_dex_swaps_hour__block_timestamp__6.39240b6829": [], "test.sui_models.not_null_silver__dex_swaps_CHECKPOINT_NUMBER.bc0bffc4f6": [], "test.sui_models.not_null_silver__dex_swaps_BLOCK_TIMESTAMP.e312100604": [], "test.sui_models.not_null_silver__dex_swaps_TX_DIGEST.78684ea04b": [], "test.sui_models.not_null_silver__dex_swaps_EVENT_INDEX.ec92461915": [], "test.sui_models.not_null_silver__dex_swaps_EVENT_MODULE.ccc5351e29": [], "test.sui_models.not_null_silver__dex_swaps_PLATFORM_ADDRESS.4a9999c52e": [], "test.sui_models.not_null_silver__dex_swaps_AMOUNT_IN_RAW.beece37b29": [], "test.sui_models.dbt_utils_expression_is_true_silver__dex_swaps_AMOUNT_IN_RAW___0.318bc45989": [], "test.sui_models.not_null_silver__dex_swaps_AMOUNT_OUT_RAW.e61bcbe5cd": [], "test.sui_models.dbt_utils_expression_is_true_silver__dex_swaps_AMOUNT_OUT_RAW___0.5cb864bc54": [], "test.sui_models.not_null_silver__dex_swaps_STEPS.e7d4e72d3e": [], "test.sui_models.dbt_utils_expression_is_true_silver__dex_swaps_STEPS___0.664d0e62a1": [], "test.sui_models.not_null_silver__dex_swaps_TRADER_ADDRESS.48f1ad639e": [], "test.sui_models.not_null_silver__dex_swaps_DEX_SWAPS_ID.3890988d32": [], "test.sui_models.unique_silver__dex_swaps_DEX_SWAPS_ID.28700a94ba": [], "test.sui_models.dbt_utils_recency_silver__dex_swaps_hour__block_timestamp__6.5adfcb03e0": [], "test.sui_models.dbt_utils_recency_silver_bridge__sui_bridge_inbound_hour__block_timestamp__12.9f915d40f9": [], "test.sui_models.dbt_utils_recency_silver_bridge__sui_bridge_outbound_hour__block_timestamp__12.9e00d40b33": [], "test.sui_models.dbt_utils_recency_silver_bridge__wormhole_inbound_hour__block_timestamp__12.09ce6fbad5": [], "test.sui_models.dbt_utils_recency_silver_bridge__wormhole_outbound_hour__block_timestamp__12.1aa3be7b24": [], "test.sui_models.dbt_expectations_expect_row_values_to_have_recent_data_price__ez_prices_hourly_HOUR__day__2.0fe248380f": [], "test.sui_models.dbt_utils_unique_combination_of_columns_price__ez_prices_hourly_HOUR__TOKEN_ADDRESS.2ecd0db69a": [], "test.sui_models.dbt_utils_unique_combination_of_columns_price__ez_asset_metadata_TOKEN_ADDRESS.e63e9f6197": [], "test.sui_models.not_null_core__dim_tokens_COIN_TYPE.f6255a9590": [], "test.sui_models.unique_core__dim_tokens_COIN_TYPE.dfe865c448": [], "test.sui_models.not_null_core__dim_tokens_DECIMALS.e4b6ed6a13": [], "test.sui_models.not_null_core__dim_tokens_DIM_TOKENS_ID.4f26cddda6": [], "test.sui_models.unique_core__dim_tokens_DIM_TOKENS_ID.47c54ac27c": [], "test.sui_models.not_null_core__dim_tokens_INSERTED_TIMESTAMP.cbe58319ac": [], "test.sui_models.not_null_core__dim_tokens_MODIFIED_TIMESTAMP.ecc00492b1": [], "test.sui_models.dbt_utils_recency_core__dim_tokens_hour__modified_timestamp__48.a736aabbb1": [], "test.sui_models.not_null_core__fact_balance_changes_CHECKPOINT_NUMBER.712e9516de": [], "test.sui_models.not_null_core__fact_balance_changes_BLOCK_TIMESTAMP.209115a1df": [], "test.sui_models.not_null_core__fact_balance_changes_TX_DIGEST.9ab34b7398": [], "test.sui_models.not_null_core__fact_balance_changes_TX_SUCCEEDED.5a8ae68598": [], "test.sui_models.not_null_core__fact_balance_changes_BALANCE_CHANGE_INDEX.10baa58370": [], "test.sui_models.not_null_core__fact_balance_changes_COIN_TYPE.255ad8a0b7": [], "test.sui_models.not_null_core__fact_balance_changes_AMOUNT.954584e181": [], "test.sui_models.not_null_core__fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID.97c8da1cb0": [], "test.sui_models.unique_core__fact_balance_changes_FACT_TRANSACTION_BALANCE_CHANGES_ID.b89d77afcd": [], "test.sui_models.not_null_core__fact_balance_changes_INSERTED_TIMESTAMP.a692bc5daa": [], "test.sui_models.not_null_core__fact_balance_changes_MODIFIED_TIMESTAMP.5cba81239d": [], "test.sui_models.dbt_utils_recency_core__fact_balance_changes_hour__block_timestamp__12.32ab5141fb": [], "test.sui_models.not_null_core__fact_changes_CHECKPOINT_NUMBER.6ba94e8a67": [], "test.sui_models.not_null_core__fact_changes_BLOCK_TIMESTAMP.65a5d8d067": [], "test.sui_models.not_null_core__fact_changes_TX_DIGEST.30f8466020": [], "test.sui_models.not_null_core__fact_changes_TX_SUCCEEDED.9a09390f0a": [], "test.sui_models.not_null_core__fact_changes_CHANGE_INDEX.215cfe518f": [], "test.sui_models.not_null_core__fact_changes_TYPE.1652843536": [], "test.sui_models.not_null_core__fact_changes_FACT_CHANGES_ID.a878e88a0f": [], "test.sui_models.unique_core__fact_changes_FACT_CHANGES_ID.0bf099f198": [], "test.sui_models.not_null_core__fact_changes_INSERTED_TIMESTAMP.c5d820190f": [], "test.sui_models.not_null_core__fact_changes_MODIFIED_TIMESTAMP.6c8d37c0a7": [], "test.sui_models.dbt_utils_recency_core__fact_changes_hour__block_timestamp__12.f9a4e6a047": [], "test.sui_models.not_null_core__fact_checkpoints_CHECKPOINT_NUMBER.23f044cfc4": [], "test.sui_models.unique_core__fact_checkpoints_CHECKPOINT_NUMBER.d6238f25d7": [], "test.sui_models.not_null_core__fact_checkpoints_BLOCK_TIMESTAMP.878a6c6b3b": [], "test.sui_models.not_null_core__fact_checkpoints_EPOCH.9e68df58eb": [], "test.sui_models.not_null_core__fact_checkpoints_CHECKPOINT_DIGEST.26643b93a5": [], "test.sui_models.not_null_core__fact_checkpoints_NETWORK_TOTAL_TRANSACTIONS.044ce0039b": [], "test.sui_models.not_null_core__fact_checkpoints_TX_COUNT.6e621d73e1": [], "test.sui_models.not_null_core__fact_checkpoints_FACT_CHECKPOINTS_ID.40f4e7fdc8": [], "test.sui_models.unique_core__fact_checkpoints_FACT_CHECKPOINTS_ID.a6be984d3f": [], "test.sui_models.not_null_core__fact_checkpoints_INSERTED_TIMESTAMP.21826dee37": [], "test.sui_models.not_null_core__fact_checkpoints_MODIFIED_TIMESTAMP.6c60cec49e": [], "test.sui_models.dbt_utils_recency_core__fact_checkpoints_hour__block_timestamp__12.d94caf0aaa": [], "test.sui_models.dbt_utils_sequential_values_core__fact_checkpoints_checkpoint_number__1.7d1cc12bd5": [], "test.sui_models.not_null_core__fact_events_CHECKPOINT_NUMBER.5356f1bf08": [], "test.sui_models.not_null_core__fact_events_BLOCK_TIMESTAMP.d71341f7ec": [], "test.sui_models.not_null_core__fact_events_TX_DIGEST.91cd501657": [], "test.sui_models.not_null_core__fact_events_TX_SUCCEEDED.0e0a46f5a7": [], "test.sui_models.not_null_core__fact_events_EVENT_INDEX.a8f913a5e4": [], "test.sui_models.not_null_core__fact_events_TYPE.525810bb88": [], "test.sui_models.not_null_core__fact_events_FACT_EVENTS_ID.b32ffdbbd0": [], "test.sui_models.unique_core__fact_events_FACT_EVENTS_ID.8c501ad6d4": [], "test.sui_models.not_null_core__fact_events_INSERTED_TIMESTAMP.5d33d86914": [], "test.sui_models.not_null_core__fact_events_MODIFIED_TIMESTAMP.db0915010c": [], "test.sui_models.dbt_utils_recency_core__fact_events_hour__block_timestamp__12.aaafbddc50": [], "test.sui_models.not_null_core__fact_transaction_blocks_CHECKPOINT_NUMBER.c5c1745cc1": [], "test.sui_models.not_null_core__fact_transaction_blocks_BLOCK_TIMESTAMP.6dfb10fe43": [], "test.sui_models.not_null_core__fact_transaction_blocks_TX_DIGEST.62786b1fdd": [], "test.sui_models.unique_core__fact_transaction_blocks_TX_DIGEST.09d1c840c1": [], "test.sui_models.not_null_core__fact_transaction_blocks_TX_SUCCEEDED.281c601d54": [], "test.sui_models.not_null_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID.3f22e3ab59": [], "test.sui_models.unique_core__fact_transaction_blocks_FACT_TRANSACTION_BLOCKS_ID.5d32a6ba08": [], "test.sui_models.not_null_core__fact_transaction_blocks_INSERTED_TIMESTAMP.131d5e4dd8": [], "test.sui_models.not_null_core__fact_transaction_blocks_MODIFIED_TIMESTAMP.0e9e2d11f9": [], "test.sui_models.dbt_utils_recency_core__fact_transaction_blocks_hour__block_timestamp__12.87cc230450": [], "test.sui_models.not_null_core__fact_transaction_inputs_CHECKPOINT_NUMBER.df61d4cc2d": [], "test.sui_models.not_null_core__fact_transaction_inputs_BLOCK_TIMESTAMP.08e6b6701e": [], "test.sui_models.not_null_core__fact_transaction_inputs_TX_DIGEST.b65bf46c81": [], "test.sui_models.not_null_core__fact_transaction_inputs_TX_SUCCEEDED.c9a2a69ceb": [], "test.sui_models.not_null_core__fact_transaction_inputs_INPUT_INDEX.4714be8bb9": [], "test.sui_models.not_null_core__fact_transaction_inputs_TYPE.7a59977a2b": [], "test.sui_models.not_null_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID.60cf1bc519": [], "test.sui_models.unique_core__fact_transaction_inputs_FACT_TRANSACTION_INPUTS_ID.d1ccb6d62d": [], "test.sui_models.not_null_core__fact_transaction_inputs_INSERTED_TIMESTAMP.d23cbe874e": [], "test.sui_models.not_null_core__fact_transaction_inputs_MODIFIED_TIMESTAMP.38ee9adfce": [], "test.sui_models.dbt_utils_recency_core__fact_transaction_inputs_hour__block_timestamp__12.7bcb5b383d": [], "test.sui_models.not_null_core__fact_transactions_CHECKPOINT_NUMBER.56e496e05b": [], "test.sui_models.not_null_core__fact_transactions_BLOCK_TIMESTAMP.74f4267099": [], "test.sui_models.not_null_core__fact_transactions_TX_DIGEST.b3fd102a93": [], "test.sui_models.not_null_core__fact_transactions_TX_SUCCEEDED.b734f84bae": [], "test.sui_models.not_null_core__fact_transactions_PAYLOAD_INDEX.4132a9cff1": [], "test.sui_models.not_null_core__fact_transactions_PAYLOAD_TYPE.2c53f707c4": [], "test.sui_models.not_null_core__fact_transactions_FACT_TRANSACTIONS_ID.c784aa0849": [], "test.sui_models.unique_core__fact_transactions_FACT_TRANSACTIONS_ID.464d549945": [], "test.sui_models.not_null_core__fact_transactions_INSERTED_TIMESTAMP.8978e0f6b1": [], "test.sui_models.not_null_core__fact_transactions_MODIFIED_TIMESTAMP.0c743560bb": [], "test.sui_models.dbt_utils_recency_core__fact_transactions_hour__block_timestamp__12.4c30ef6e6f": [], "test.sui_models.dbt_utils_unique_combination_of_columns_core__dim_labels_ADDRESS.0626bcf09a": [], "test.sui_models.not_null_core__ez_transfers_CHECKPOINT_NUMBER.f4715a41ec": [], "test.sui_models.not_null_core__ez_transfers_BLOCK_TIMESTAMP.bc207eb78e": [], "test.sui_models.not_null_core__ez_transfers_TX_DIGEST.5b0fadc094": [], "test.sui_models.not_null_core__ez_transfers_BALANCE_CHANGE_INDEX.e882b43eab": [], "test.sui_models.not_null_core__ez_transfers_TX_SUCCEEDED.eb6879ca96": [], "test.sui_models.not_null_core__ez_transfers_TX_SENDER.d3504600b8": [], "test.sui_models.not_null_core__ez_transfers_SENDER.0853fc5cd5": [], "test.sui_models.not_null_core__ez_transfers_RECEIVER.d4d739d824": [], "test.sui_models.not_null_core__ez_transfers_COIN_TYPE.ff9b8da7e4": [], "test.sui_models.not_null_core__ez_transfers_AMOUNT_RAW.3c41c9bfec": [], "test.sui_models.not_null_core__ez_transfers_EZ_TRANSFERS_ID.5fbbeba2b3": [], "test.sui_models.unique_core__ez_transfers_EZ_TRANSFERS_ID.869ef61698": [], "test.sui_models.not_null_core__ez_transfers_INSERTED_TIMESTAMP.c96eb74a2a": [], "test.sui_models.not_null_core__ez_transfers_MODIFIED_TIMESTAMP.a437846ff7": [], "test.sui_models.dbt_utils_recency_core__ez_transfers_hour__block_timestamp__12.34360dd404": [], "test.sui_models.not_null_defi__ez_bridge_activity_CHECKPOINT_NUMBER.1046fc00e8": [], "test.sui_models.not_null_defi__ez_bridge_activity_BLOCK_TIMESTAMP.eb16926026": [], "test.sui_models.not_null_defi__ez_bridge_activity_TX_DIGEST.53854c8459": [], "test.sui_models.not_null_defi__ez_bridge_activity_EVENT_INDEX.83a405a4b0": [], "test.sui_models.not_null_defi__ez_bridge_activity_bridge_address.9436097f13": [], "test.sui_models.not_null_defi__ez_bridge_activity_platform.ca9ee8cd85": [], "test.sui_models.not_null_defi__ez_bridge_activity_protocol.fda817c891": [], "test.sui_models.not_null_defi__ez_bridge_activity_direction.c74531b1e0": [], "test.sui_models.not_null_defi__ez_bridge_activity_ez_bridge_activity_id.eb9dea0184": [], "test.sui_models.unique_defi__ez_bridge_activity_ez_bridge_activity_id.d14e92e9ee": [], "test.sui_models.not_null_defi__ez_dex_swaps_CHECKPOINT_NUMBER.74203a52c4": [], "test.sui_models.not_null_defi__ez_dex_swaps_BLOCK_TIMESTAMP.b21ec41642": [], "test.sui_models.not_null_defi__ez_dex_swaps_TX_DIGEST.26721507d6": [], "test.sui_models.not_null_defi__ez_dex_swaps_EVENT_INDEX.275df8c906": [], "test.sui_models.not_null_defi__ez_dex_swaps_PLATFORM_ADDRESS.8405745a8b": [], "test.sui_models.not_null_defi__ez_dex_swaps_PLATFORM_NAME.2e202dfe75": [], "test.sui_models.not_null_defi__ez_dex_swaps_AMOUNT_IN_RAW.47f972a8fb": [], "test.sui_models.not_null_defi__ez_dex_swaps_AMOUNT_OUT_RAW.a93bb57e13": [], "test.sui_models.not_null_defi__ez_dex_swaps_TOKEN_IN_TYPE.44b0ac5c5a": [], "test.sui_models.not_null_defi__ez_dex_swaps_TOKEN_OUT_ADDRESS.3adc7d010f": [], "test.sui_models.not_null_defi__ez_dex_swaps_TRADER_ADDRESS.24dceb0705": [], "test.sui_models.not_null_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID.e64665588d": [], "test.sui_models.unique_defi__ez_dex_swaps_EZ_DEX_SWAPS_ID.07eaa2e5cb": [], "test.sui_models.dbt_utils_recency_defi__ez_dex_swaps_hour__block_timestamp__6.0e11e4f514": [], "test.livequery_models.test__live_udf_api_batched_post_data_object.0524c38098": [], "test.livequery_models.test__live_udf_api_batched_post_jsonrpc_ethereum_batch.0af69e0283": [], "test.livequery_models.test__live_udf_api_batched_post_jsonrpc_solana.8b95c0ed0b": [], "test.livequery_models.test__live_udf_api_post_data_object.208f9d5456": [], "test.livequery_models.test__live_udf_api_post_data_array.f30e6de8c8": [], "test.livequery_models.test__live_udf_api_post_data_string.e2159319bb": [], "test.livequery_models.test__live_udf_api_get_method.a1fbeefdc8": [], "test.livequery_models.test__live_udf_api_get_with_params.549ea05b06": [], "test.livequery_models.test__live_udf_api_post_batch_jsonrpc.b4de1e1fc5": [], "test.livequery_models.test__live_udf_api_post_jsonrpc_solana.01c400739e": [], "test.livequery_models.test__live_udf_api_post_jsonrpc_solana_batch.70d22f9667": [], "test.livequery_models.test__live_udf_api_post_jsonrpc_ethereum_batch.4a9ed4a8d7": [], "test.livequery_models.test__utils_udf_json_rpc_call.0b87c6050e": [], "test.livequery_models.test__utils_udf_urlencode_dict_true_1.3bf42c4e1b": [], "test.livequery_models.test__utils_udf_urlencode_dict_true_2.764afd6db8": [], "test.livequery_models.test__utils_udf_urlencode_dict_true_space.11f0932fc3": [], "test.livequery_models.test__utils_udf_urlencode_dict_true_special.4eef6cb355": [], "test.livequery_models.test__utils_udf_urlencode_dict_true_array.614d53ca8a": [], "test.livequery_models.test__utils_udf_urlencode_dict_false_1.e2e07ad77a": [], "test.livequery_models.test__utils_udf_urlencode_dict_false_2.58739709ab": [], "test.livequery_models.test__utils_udf_urlencode_dict_false_space.1167d3f089": [], "test.livequery_models.test__utils_udf_urlencode_dict_false_special.0cd3cb5826": [], "test.livequery_models.test__utils_udf_urlencode_dict_false_array.9524cea2e8": [], "test.livequery_models.test__utils_udf_urlencode_dict_1.1d75f92e0e": [], "test.livequery_models.test__utils_udf_urlencode_dict_2.60da312d8c": [], "test.livequery_models.test__utils_udf_urlencode_dict_space.d5e1917fd6": [], "test.livequery_models.test__utils_udf_urlencode_dict_special.6f25d30fd9": [], "test.livequery_models.test__utils_udf_urlencode_dict_array.25f6af5cf8": [], "test.livequery_models.test__utils_udf_urlencode_array_true_1.f1dc90fd5d": [], "test.livequery_models.test__utils_udf_urlencode_array_true_2.4c09ca3de2": [], "test.livequery_models.test__utils_udf_urlencode_array_true_space.c150fa3544": [], "test.livequery_models.test__utils_udf_urlencode_array_true_special.14abbd82f3": [], "test.livequery_models.test__utils_udf_urlencode_array_true_array.559475a80a": [], "test.livequery_models.test__utils_udf_urlencode_array_false_1.ffe0d93235": [], "test.livequery_models.test__utils_udf_urlencode_array_false_2.f6e4d9a06a": [], "test.livequery_models.test__utils_udf_urlencode_array_false_space.c46a422a10": [], "test.livequery_models.test__utils_udf_urlencode_array_false_special.ad3b4ce496": [], "test.livequery_models.test__utils_udf_urlencode_array_false_array.979bfafd11": [], "test.livequery_models.test__utils_udf_urlencode_array_1.bae96ece17": [], "test.livequery_models.test__utils_udf_urlencode_array_2.ff2898d4a2": [], "test.livequery_models.test__utils_udf_urlencode_array_space.67b6f51498": [], "test.livequery_models.test__utils_udf_urlencode_array_special.746423269a": [], "test.livequery_models.test__utils_udf_urlencode_array_array.3d05dcb6a9": [], "test.livequery_models.test__utils_udf_int_to_binary.46856460db": [], "test.livequery_models.test__utils_udf_int_to_binary_large_number.feba996e3b": [], "test.livequery_models.test__utils_udf_binary_to_int.907b20f381": [], "test.livequery_models.test__utils_udf_binary_to_int_large_number.926bff44e9": [], "test.livequery_models.test__utils_udf_evm_decode_log.b6fedb07e9": [], "test.livequery_models.test___utils_udf_introspect.79bd27a18b": [], "test.livequery_models.test_playgrounds__query_subgraph_status_200_liquidity_pools.dfcb23f707": [], "test.livequery_models.test_playgrounds__query_subgraph_status_200_total_pool_count.86c8b9c6ee": [], "test.livequery_models.test_chainbase_utils__get_status_200.07b6733652": [], "test.livequery_models.test_fred__get_series_status_200.51822e30ca": [], "test.livequery_models.test_stakingrewards__query_status_200.144a35304b": [], "test.livequery_models.test_credmark_utils__get_status_200.d1548e1f6e": [], "test.livequery_models.test_claude__post_messages_only_one_message.ff8a12fc1b": [], "test.livequery_models.test_claude__post_messages_with_model.7b5774fbf2": [], "test.livequery_models.test_claude__post_messages_with_all_params.0917a032d2": [], "test.livequery_models.test_claude__count_message_tokens.f5bafb2bce": [], "test.livequery_models.test_claude__list_models.8516d777c7": [], "test.livequery_models.test_claude__get_model.1f65c29a92": [], "test.livequery_models.test_claude__post_messages_batch.e4ee537ae3": [], "test.livequery_models.test_claude__list_message_batches.f5d6c40b59": [], "test.livequery_models.test_claude__list_message_batches_with_before.aae86d2911": [], "test.livequery_models.test_claude__list_message_batches_with_after.0e42b728e7": [], "test.livequery_models.test_claude__get_message_batch.b52b8b8d04": [], "test.livequery_models.test_claude__get_message_batch_results.ecc8ad465c": [], "test.livequery_models.test_claude_utils__post_status_200.a32a62cfdf": [], "test.livequery_models.test_alchemy_tokens__get_token_allowance_status_200.65ce803e24": [], "test.livequery_models.test_alchemy_tokens__get_token_balances_status_200.bdaa3fdabb": [], "test.livequery_models.test_alchemy_tokens__get_token_metadata_status_200.ff08820c76": [], "test.livequery_models.test_alchemy_nfts__get_nfts_status_200.34e3001576": [], "test.livequery_models.test_alchemy_nfts__get_owners_for_token_status_200.c534c2579d": [], "test.livequery_models.test_alchemy_nfts__get_owners_for_collection_status_200.3cdb9f0962": [], "test.livequery_models.test_alchemy_nfts__is_holder_of_collection_status_200.d94f7ae355": [], "test.livequery_models.test_alchemy_nfts__get_contracts_for_owner_status_200.29e9e60296": [], "test.livequery_models.test_alchemy_nfts__get_nft_metadata_status_200.aad531a83a": [], "test.livequery_models.test_alchemy_nfts__get_nft_metadata_batch_status_200.44d0ef0140": [], "test.livequery_models.test_alchemy_nfts__get_contract_metadata_status_200.0a9337a17a": [], "test.livequery_models.test_alchemy_nfts__get_contract_metadata_batch_status_200.78a02ffe28": [], "test.livequery_models.test_alchemy_nfts__invalidate_contract_status_200.1ac32b4945": [], "test.livequery_models.test_alchemy_nfts__reingest_contract_status_200.3c2c45fd00": [], "test.livequery_models.test_alchemy_nfts__search_contract_metadata_status_200.1e97937b32": [], "test.livequery_models.test_alchemy_nfts__get_nfts_for_collection_status_200.f7ff9b5ee5": [], "test.livequery_models.test_alchemy_nfts__get_spam_contracts_status_200.b9dfb4e306": [], "test.livequery_models.test_alchemy_nfts__is_spam_contract_status_200.91af21989f": [], "test.livequery_models.test_alchemy_nfts__is_airdrop_status_200.58ce4f1bdc": [], "test.livequery_models.test_alchemy_nfts__get_floor_price_status_200.f2125d71e4": [], "test.livequery_models.test_alchemy_nfts__get_nft_sales_status_200.223f727f9f": [], "test.livequery_models.test_alchemy_nfts__compute_rarity_status_200.942425aa31": [], "test.livequery_models.test_alchemy_nfts__summarize_nft_attributes_status_200.99d7f57e35": [], "test.livequery_models.test_alchemy_transfers__get_asset_transfers_status_200.f1f3f416e4": [], "test.livequery_models.test_apilayer__get_status_200.f739b0d36b": [], "test.livequery_models.test_defillama__get_status_200.90864f8f89": [], "test.livequery_models.test_deepnftvalue__get_status_200.49fba544bb": [], "test.livequery_models.test_helius_das__get_asset_status_200.3e65208714": [], "test.livequery_models.test_helius_das__get_signatures_for_asset_status_200.529a6b605d": [], "test.livequery_models.test_helius_das__search_assets_status_200.2373c30616": [], "test.livequery_models.test_helius_das__get_asset_proof_status_200.2ed48f9fe3": [], "test.livequery_models.test_helius_das__get_assets_by_owner_status_200.6f2f1ef95c": [], "test.livequery_models.test_helius_das__get_assets_by_authority_status_200.c9ac02b165": [], "test.livequery_models.test_helius_das__get_assets_by_creator_status_200.e8cb071d3a": [], "test.livequery_models.test_helius_das__get_assets_by_group_status_200.fe5813195d": [], "test.livequery_models.test_helius_apis__token_metadata_status_200.c2bafa3fb0": [], "test.livequery_models.test_helius_apis__balances_status_200.d668884644": [], "test.livequery_models.test_helius_apis__parse_transactions_status_200.71053900da": [], "test.livequery_models.test_espn__get_status_200.b4f84cc829": [], "test.livequery_models.test_github_utils__octocat_status_200.3573395088": [], "test.livequery_models.test_github_actions__workflows_status_200.1cc531bd94": [], "test.livequery_models.test_github_actions__runs_status_200.2d145a41cb": [], "test.livequery_models.test_github_actions__workflow_runs_status_200.abcfd5d553": [], "test.livequery_models.test_transpose__get_status_200.8721d94682": [], "test.livequery_models.test_solscan_public_api_get__get_status_200.388381be71": [], "test.livequery_models.test_allday__graphql_status_200.8cfd62f9a1": [], "test.livequery_models.test_reservoir__get_status_200.cb905ea233": [], "test.livequery_models.test_bitquery__graphql_status_200.11917beb18": [], "test.livequery_models.test_topshot__graphql_status_200.fb93e3b220": [], "test.livequery_models.test_cmc__get_status_200.1e44de8c9e": [], "test.livequery_models.test_strangelove__get_status_200.0a58865924": [], "test.livequery_models.test_subquery__graphql_status_200.b25433a976": [], "test.livequery_models.test_nftscan__get_status_200.33868e0f0d": [], "test.livequery_models.test_dappradar__get_status_200.979ea475dc": [], "test.livequery_models.test_opensea__get_status_200.5de63cfbb1": [], "test.livequery_models.test_snapshot__query_status_200.35a2cffb40": [], "test.livequery_models.test_footprint_utils__get_status_200_v2_protocol_info.4d260facf4": [], "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_contract_address_status_200.3d5c91f8e2": [], "test.livequery_models.test_quicknode_ethereum_tokens__get_token_metadata_by_symbol_status_200.c34c43a92d": [], "test.livequery_models.test_quicknode_ethereum_tokens__get_transactions_by_address_status_200.29d4ecb431": [], "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_balance_status_200.9cda095850": [], "test.livequery_models.test_quicknode_ethereum_tokens__get_wallet_token_transactions_status_200.990e59cd6c": [], "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_contract_address_status_200.529daa7446": [], "test.livequery_models.test_quicknode_polygon_tokens__get_token_metadata_by_symbol_status_200.d60e37734e": [], "test.livequery_models.test_quicknode_polygon_tokens__get_transactions_by_address_status_200.194093aade": [], "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_balance_status_200.2bffddb733": [], "test.livequery_models.test_quicknode_polygon_tokens__get_wallet_token_transactions_status_200.57669f1a96": [], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nft_collection_details_status_200.5a3e5bd53e": [], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_status_200.e34b6fbe64": [], "test.livequery_models.test_quicknode_ethereum_nfts__fetch_nfts_by_collection_status_200.ba7f5aeceb": [], "test.livequery_models.test_quicknode_ethereum_nfts__get_transfers_by_nft_status_200.2e5143d642": [], "test.livequery_models.test_quicknode_ethereum_nfts__verify_nfts_owner_status_200.34afbca510": [], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nft_collection_details_status_200.b69737052b": [], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_status_200.2d1f2ae9d6": [], "test.livequery_models.test_quicknode_polygon_nfts__fetch_nfts_by_collection_status_200.8286191e06": [], "test.livequery_models.test_quicknode_polygon_nfts__get_transfers_by_nft_status_200.2f6ba1e185": [], "test.livequery_models.test_quicknode_polygon_nfts__verify_nfts_owner_status_200.e87bb12c13": [], "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_status_200.94f0e0082e": [], "test.livequery_models.test_quicknode_solana_nfts__fetch_nfts_by_creator_status_200.70f38f0e31": [], "test.livequery_models.test_coingecko__get_status_200.047f15c956": [], "test.livequery_models.test_dapplooker__get_chart_status_202.4fedf28822": [], "test.livequery_models.test_covalent__get_status_200.bb43bb7f69": [], "source.sui_models.bronze_streamline.checkpoints": ["model.sui_models.bronze__checkpoints", "model.sui_models.bronze__checkpoints_FR"], "source.sui_models.bronze_streamline.transactions": ["model.sui_models.bronze__transactions", "model.sui_models.bronze__transactions_FR"], "source.sui_models.crosschain.address_tags": [], "source.sui_models.crosschain.dim_dates": [], "source.sui_models.crosschain_silver.number_sequence": ["model.sui_models.streamline__checkpoints"], "source.sui_models.crosschain_silver.labels_combined": ["model.sui_models.silver__crosschain_labels"], "source.sui_models.crosschain_silver.complete_token_asset_metadata": ["model.sui_models.bronze__complete_token_asset_metadata"], "source.sui_models.crosschain_silver.complete_token_prices": ["model.sui_models.bronze__complete_token_prices"], "source.livequery_models.crosschain.dim_date_hours": [], "source.livequery_models.crosschain.dim_contracts": ["model.livequery_models._evm__contracts_map"], "source.livequery_models.crosschain.dim_evm_event_abis": ["model.livequery_models._evm__abi_map"], "source.livequery_models.ethereum_core.fact_event_logs": ["model.livequery_models._eth__logs"], "source.livequery_models.ethereum_core.ez_decoded_event_logs": ["model.livequery_models._eth__decoded_logs"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}, "unit_tests": {}}